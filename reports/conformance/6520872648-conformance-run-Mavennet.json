{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4e14924f-5636-429c-b070-98dd80b4d477",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b6bda1e9-3bcd-44c6-b4f1-1267fa300615",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ae48f423-1a66-44ca-90d9-2a7709435127",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "eeeae4f2-2223-412d-a7fc-a49daf1cef5e"
                }
              }
            ]
          },
          {
            "id": "5e315e49-81ea-4f39-aad4-f6955b5cdcf6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bf29763f-76f9-44b4-b5ed-2105e1f2157c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f19579a1-aeab-4ff4-b29f-c640309c7f74"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bc68d44d-6050-4374-97f0-dda0684e60c9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7c1ded21-45bc-436a-8283-e952893b66a6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dd0f882c-a48b-4a83-94bd-ff4b495064c1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c85c894-89bb-418d-8e1a-911f908d01e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9a62c9b-8969-4326-9f03-39a866f82f30"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "32cdb9d5-6f73-4022-804e-680637f91eab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8d6244b9-9211-4eff-95de-e94d5659cd4d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "979a2cf2-a0d2-40cb-ba65-ac6281ebc7c2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55442a5f-205a-4aa9-91b7-99f2b187d752"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ccf5d5f-ec92-4e4a-8857-d73095d0e75b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "dd5cad74-9bf8-4b46-af96-5e43db4766ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "74b662e9-6e86-4bef-bce3-5e7e0011b6a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2060d7b0-bca6-4f24-9f61-aef1e1b401c4"
            }
          }
        ]
      },
      {
        "id": "46a5aca9-c8e2-450b-9772-965df532ad29",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cd40cf73-621d-4cde-b004-4c2bbd474324",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7bf7b584-7036-4e33-9bc4-c005543e7f6a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cc07f8ed-09b7-4241-a783-99a97480eccf",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34aaba6a-a9cf-444d-8ca5-c156fb0d638b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c48fb62-1f11-413a-86ba-c6d12c51f8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d4188a-9d40-47d2-a0e5-de9879525b01",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9299fda5-1264-4c65-9745-e5c637b8c585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a27660d-844d-4539-b268-04bc834470ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253f6e07-184e-4eb4-b7cc-e2fe2d242de9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca163b3-f3fa-4eb3-bfba-bf49de13ea8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd916ce6-f3df-4300-b155-4452428913ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "528d5016-679c-4057-84b6-9a245e7eaf07",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "df9a5eb2-9196-40a1-930c-052734a8156b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e29681-1978-45e3-86ab-889d5e8df262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56fc040e-f87e-48cb-a55b-f480d6891373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445ad793-d840-4c07-8cd7-a40741fa664c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b16924d3-6860-4680-bcda-a811606da25c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2e915507-93ad-4273-a72c-7664b42de440",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b4961390-3118-4928-aad2-2d75d1071913",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5c240ae-f70b-4ab4-90d9-81e957563aec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "740db9d1-d458-4f07-b5f4-6a10020e5710"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3498d99-1ee5-4817-9ac7-fdb60f9ced80",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7281d929-86c7-4e03-835c-dc1fa7811e16"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79dc1f14-547f-4657-8ad4-583ec06b0772",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cfa39310-2f33-4d93-8ffa-b8fa24c489e4"
            }
          }
        ]
      },
      {
        "id": "871eb04c-9ef0-4689-a2bf-9bb0d385cb79",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1cc3ebcb-56a8-4da0-83ae-cf2d30f56ef0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "577114c7-2fb3-46fa-bb89-ff82033fe056",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "12b5e4d5-71ef-4e42-bfdf-4687a9116727",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4742885-d39a-49b5-b757-374c90349e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2668efb3-b1de-4af1-adf7-8a153e72bb60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e943ab0-2116-4007-b926-b10e42966f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "decde3fe-85b3-42f2-866b-fd0f295e2a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c959cfc4-89ef-4e9e-82db-4da318293a43",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a0c395-3c2d-473c-a5c0-84e1c330ac74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6aed41-9386-4c94-8b13-d0f7d7845da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1458843-ddc8-4208-87fa-7e78caf80085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e690492c-cef6-47f3-b0fc-45c65e73f554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbd81de-7320-4d0e-9ebc-430c65062de6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9884dc9c-918e-475c-9754-bdf6d63e9bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec6f17b-bffa-4f37-9f32-e10f258c3164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a0cd53-3116-41a9-940d-1dcc7d388a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27abe54e-88bd-4981-8237-c562d7080b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05b42a9-52cc-4aed-ad79-c1bb5ab4e205",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d704aaec-13b7-4499-8452-c404dfc069b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bbfdbd2-7861-4752-997a-e1a4add4c5a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958b5c42-b4d7-4075-abad-b2aa511dc52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f748a03b-94c9-433c-9a0e-711a22e5f5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab0aee7-dc18-4805-8478-e402a2ec186e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a97d75-5897-4515-bc67-b95649086472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be97def4-a5d8-4333-b5a6-a9a259fdee44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aceda60b-878a-4db7-835f-429a539aaf3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afd3217a-3a50-4853-a8cd-f032d4d0b06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a122428c-63cf-49bf-bfc8-1c4099d6668d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d8173b-8ad2-4b9e-856a-075f5f58eca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0190b2ae-6979-4a60-9fa1-c362e605e459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15134e99-023d-4bad-83af-f47ce5654522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15712dc4-07f0-48ae-b0fe-e5cee9034caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a91564a-9189-4521-a4ff-ce23334e8729",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f112b4-0142-4af5-a6b5-0f690626ac0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa7980ec-6e6e-4a60-82c0-69b56af0edd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79925703-63e9-4ee8-87cc-88bc807a0726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d97a7898-42bf-4a0f-b37e-d0f4f11b1b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e55cbf-43d9-423a-8e97-02691e8ccd63",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5d26fd-9bec-4492-9ced-01d6a3533e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8e79fe4-78f4-4167-9f08-2426912e477d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b0488c-5fe7-45f5-b4a3-9b425b1f609f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42ce59f9-d2e5-405f-88b1-2d435e14f575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383760af-a23f-4b98-9647-99af1dc6d328",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedf61c6-07c1-418f-9551-34c25746151b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e529186f-2d2c-476a-8e49-79275ec194bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83c2f2e-e2e2-459d-aeb8-9d48bf52f0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36ac656b-451d-4659-9e99-3bf8994ca2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4241dfe3-5f77-479a-a80b-d35c18c4c15c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2879ba-4a27-406f-8df7-2d9509250445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1138a196-54f9-4d74-ae76-f304e8551891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c634bcb4-dd0d-4e97-a77f-2f8d8fc8fede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c46357a-b4b0-4b4e-b41e-dd7b1adf8482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f61ef98-66dd-421a-9cd3-49a0befd14c9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ee288f-7c83-4b2c-be6a-3e24a5b4efce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4819add-a35e-4d73-99f2-efb27a1c7b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84b4222-cdc7-4135-b919-8e4321cf1d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4121971a-53f9-472b-816a-9ab290dd6271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91715940-80a5-4f04-b349-aed73875a986",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a7ba5f-ed97-478e-810d-5a253be7a57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed2bc72-6b32-400d-897d-1ab54d873ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd898273-6b7f-4029-9e3d-efea82a16eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "538ed908-e2c5-4f01-9ad0-e2187a9916d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc288d16-7475-48a7-85e3-05a0e749dc89",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1716e4-f027-4cff-a654-facda5da030b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd58b72-9c82-4427-bd5b-ba0aedceddfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3bd944f-e5c3-409f-b91f-5431cf782de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b647823b-51cd-434c-9662-b9d746dc0cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bce6697-9d1e-48f3-8c80-7141bf77c4f1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3292fb61-1c8d-430c-a6c9-811083d09edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c87ee9-712f-4b63-ae71-1d39bdd49c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b243b851-46e8-4683-bce0-74573cf97246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b632b1c-7094-4e47-b228-69bd2c06ddbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bf705f-87aa-4dd8-945f-52460b0016ef",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "555e41b4-892a-450b-a599-788c5576d880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e127e336-a2c8-4218-901d-172d18d54137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301774ee-2b26-4e25-9a9f-867e13ae0d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9655625-022c-441a-9655-1b206b742d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c196545d-69f5-48a2-9e4b-50efe135e26a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6af657-bec6-4277-932b-61872e16eac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fde1977-26fd-40d7-9010-651e1311e377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da69dbc-bddb-4d8a-99d5-7471f5701e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad15ff27-40e5-461c-9674-0faea37ab7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1766e5-adca-4d45-b394-adedebc4f792",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a69ba7-181f-4682-b619-52f782b0a586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce1dc5ba-0857-413e-b35b-6224e31a1600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb73b205-4b33-482a-af1c-d8fe653fe694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8172135f-48ed-4d3d-a8d1-df478a105a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279cc98d-61cb-456e-a09e-3de7887500f2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac88030-580a-409f-816c-77d1db69a610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e260036-b816-4670-b8dd-33c6a9fbca66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8468384e-b1cc-43bb-9e5f-e1bb0b8cd38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cde7872a-7827-466a-a9b6-5e7dda792251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad30fb6-3d3e-44a6-9086-6443931111e6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d094d8ae-b4cb-469f-b9d9-ccbc664171df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d2d090b-93c9-470f-afb5-1d4b964e25c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade6c212-ab41-4981-bf8e-673062d778d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3288b9c0-bd2d-4403-bb08-ee52171b5c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4f0ba8-3eea-4a19-9a59-fdc11881e64f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d6b3b2-e2ff-470e-9722-0d052b8c4355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4379ab87-f2d2-44c1-9fa4-ca3b5b00b6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1637712a-df3a-4aa8-8299-a0c5556f2dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c617df-f126-4376-8cd3-de12e30e9857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9158dd4d-09b8-46ef-b61a-9de29e52046b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f11ca85-d6ce-479f-9e17-17c0f34bc02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e7b5ba1-cd45-467a-833e-ae0f6588c103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2350e1f-18bc-4547-994c-c758b32e8e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1242932-b23c-4fa0-8a6a-a29093f6edbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67cdb5d-605f-474c-bcce-981a0552dc56",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44d9d93-1ba5-4984-8a64-9707fcff7702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a9c637-5a33-489a-86a6-e35ac13e346e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6fea98-0b31-4c4b-94c4-e846fc22e494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6eacfe2a-8fb9-4dbf-8e95-325c6fc42dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3dfefd6-91eb-42be-bf10-db9d02f69444",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fb3857-8176-45bd-8b5f-e9d88cc2dbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "364f4e83-f227-404f-900b-fa5f0db182da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "770fa983-39f5-4f1a-8dc3-82cc182a83f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af4096c3-95d7-4ef5-be8d-19dcca8ff25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db6f3ea-6021-4597-9b02-529acfe7159b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e566746-5beb-4e7e-952c-294639dd864a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba72cc01-79af-4979-bed8-02a9eea86e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b5e769-e871-43b8-85cd-800b06597903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e753cc4-fdfa-40dc-8ca7-4c4182e42b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e586a2b-e69d-4376-894d-53b2c41719d1",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e4d4cf-14a6-4f95-b50c-de3fc8d75916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f966c9-267f-42c5-89a0-7130e582a6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ba5279-a5cf-41e2-81d3-f0dba4557bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5979267-051c-41bc-8687-ce7bbab25243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84b5b19-9bb5-4154-bf91-89bee5c8e0c2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8688372e-6b6e-42cb-8225-7488e2b81e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18495c3-d05a-4528-bd8b-98fdc1f19e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd75b16-8194-4408-bf4e-60bce6d25901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "39ed841a-a374-4e7b-be03-8056d70eeb86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0a6045-a8b7-4db5-b590-4024fa7eee91",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f013f6a6-5125-49d9-8fdb-1ec8212d351d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea486418-0d95-4730-9a47-63c737f1c4b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a84c3e-0a2b-487f-80ac-44ec8dce5f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d10fcdca-f45b-45a0-824a-27259d3cbb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d23555-54ca-44bd-bcfc-cd37a2f14d82",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59f52bf-78ce-4f38-a2bb-a3e41357e80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023a2851-f314-415d-90e7-232987bbae4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f50a607-8b4f-4428-80e3-e824b161092d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "675116d8-bf88-4c5d-a19c-91b1df1e992c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5e66af-1db0-49d0-adb7-c7d6cf0378a6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "686d7f88-7dc6-4f08-8311-66584e948911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af06d577-82b0-4d38-87dc-6d046070b1ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca22d48a-b23a-434a-81c4-3a02cc99d41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6044f1df-f1cd-4f5a-8eeb-a1a3f78f7013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9f6070-6ef8-4ba8-b6c1-0da091f102d7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d409a41-622f-424e-abe4-26f2958621ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c6a6a8-58ad-4965-a5ba-fafdd5f502e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da505e61-a80a-4153-afdb-133043546c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "eff3e0b4-dcf4-478d-8209-ab56a946c55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09a4137-6960-4bd9-b25e-a44a3f76c555",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7759968d-c6a3-4704-9f49-c9c881dd457e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "299e4f10-bedd-4177-9302-d44ec5ec72ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0135de06-4c1d-4fbb-8459-57aa486e9ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f085f0f-ab81-4562-a5ee-59188fbfdb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06c3bad-8fc5-4b54-a3a4-bf04a34ad2a9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aade2f9-3eda-495e-9c87-dc640c5cb5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3105f2fc-ce5b-4966-92ad-df2e6878e520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbbfd3e-b12c-47b7-8a4e-7a634293dbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8626768a-0cff-4b96-b1e4-e1615f2694c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8cb6ea-ca16-479c-be31-ca7ccd40e163",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d769a9-b912-4f09-bc41-3744abf08ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cafb2c26-8159-4c5a-b3b0-b0ff61f64475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508d266c-eb77-4f9c-800e-e3425fcb0e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd5ae77-13dd-46c1-98fe-46a560cfeaf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff112e10-85a2-4aaf-b47c-10afdc16a39c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8d67f6-8851-4c50-90f9-776ec2a767a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd7adbc-7f7e-4ca6-9971-5400d2dde90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e498c35a-22f4-4a8f-9ed4-ca7036caccdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dede35e-1b56-4060-871b-048d7d2daeb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b16688d-b0a0-4e9d-aa21-af0f6bc4e7b3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9228dff6-a58b-4480-98d1-d5a988ee1552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d16542e8-bb36-4dcf-b4d6-6379798da4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f782474-5057-4dba-8d1b-21c61220a86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e9558d7e-5da6-4279-aed1-daa4309736c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4fb341-73e2-4d4a-a698-dea5a283cbcb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9f0029-9ec5-4776-b326-e812e74eca89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8fec90a-7c9d-4f11-9aff-9164c571767a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf039437-2710-4d8f-9b1b-6836830c215f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6860036-3689-4849-99f4-84f0f5759aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d28a3e-e416-44e4-9bea-624d35577c18",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d57399-6006-482d-a79c-bc384b22bb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7641cb97-054f-4b9d-918a-04c2dcf29c2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7cdf5c-5fe1-462a-a8c0-49a041450135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f4b475b-201f-4a46-8827-5db954de0707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72b2863-00ab-4210-baf0-3feef2e95560",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "749ad36e-f330-4707-af10-a59a2393913a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6399bac2-c3ab-4d05-b847-67232092ea88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b49f34e-bda0-43f0-b014-25bb55383a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6adf216c-9a49-4b48-9926-fb2b3a19bdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99c981c-0e05-4c5e-8a13-85cffed5d039",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f36f55-5c50-4cf7-9971-344fea8dc4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a36ef1a1-dceb-45b2-82ee-3f49d20fdab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aaf24d9-17df-4682-8375-26a9f59d9a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5990eaa9-f65a-4038-aa4f-cb061825b319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc5e8bd-9239-420d-970d-88f9dbace1d3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0368679-f6e3-4583-b890-e6ba770f9cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8e87b7-df99-4b29-8247-bee25f10aa61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8651ed45-44fc-49f4-b5a8-26aca8abdb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2eafb40-8f12-4374-b13e-1771ba171bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d34b086-229e-45df-a878-644eb63530c6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0272cd90-ec61-4537-9975-4e6d6bec0402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed7682f-bf96-45a0-adf4-3a7fe470f171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4af5dee-0253-4589-801a-869bc2396ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ddcce68-dbb4-4030-9d30-c6973be2af09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4250561-53f9-4f65-b825-c1a6596868f5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3c614d-b0e9-4cab-8ed3-f7357b29c31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd881469-7213-44c0-aee1-8adabffc90ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f1d00f-71ba-438e-8996-564a7381d80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7b3b7348-6a12-41db-88cc-e679042f5cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14879741-2b68-4f6b-8807-c69758bc4575",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66b3ea7-7c97-4c05-8465-f4f85d6155ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea39738d-f812-4024-ac5e-0e4ba4777903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e43842-b78b-478a-a9d6-3070862319be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c1ab79-6386-4b9f-93cf-d4b3d374c8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb478f3-9fc0-43cc-91af-f767411c6ee3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52440587-6915-4a93-864c-c1a05f1eeea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f2b18b-4b69-4b29-908b-6e7d5605232e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27830915-3452-456c-9750-f5d57066e5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8479c73-0ffb-4434-adb4-4dd14d4a34b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a7702d-ae02-42b6-a855-e3920a7f4770",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f4db68-d6c3-426a-a3f8-3c2cafa6a395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b2a568-2eb3-4204-aec9-a8c6782e7be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2dc9c47-f2b1-42ec-9915-36960637bf41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8580c5a-43b6-4332-bb61-38807c8153e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9c4e7d-6f7a-404b-b28e-9c25a640ffd1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c436f4-0e42-48d1-8439-6ec159e191a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d0cd9f-7753-4717-a9a5-ae5bca9b627f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac3dfc4-aa4f-4c99-9350-d0cee3653355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eabbbd0-4f3b-408a-8faf-0a2c2b044c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3fd18f-6c10-4c62-906c-77f9d8c4f82b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8254671b-02dd-43df-b3bc-c2314c631b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc79b7d7-c951-4a80-bc83-94558463cd70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b82c52-55fa-4aab-9da4-61a832eca19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fec5860-fcac-44a3-ba08-87dd474494d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f20a34-8f68-47cf-b7c5-5eaf22e4a058",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ef224b-96b8-4cea-8212-e82aa8ba7742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03136c84-7a8e-4574-8d59-f16465b5df95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2dd31a-3a6c-4969-ac49-80546087955d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d3d586a-548f-4290-a046-1d2b64824309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23145856-ba66-47d1-abbb-fb28d04a4d4e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc887865-ffce-4c2d-b959-f411c2b3c8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5d1aea-8fec-4b7e-88e6-b0b43872946f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6223598e-b0c2-4594-a428-dac2f9a78686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ff456ca-5c22-4bbc-b315-7b57e4312db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534d3531-f72a-49e7-ab6b-0cd067dee615",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef3f49d-956e-4a18-a387-446d8055d5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "259f1c8d-2af2-45e5-940a-47b6697c435b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b846c4a-2c50-4e75-8610-fdb683d3b4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b973a8b-7605-4b2a-9746-cf17040b4673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8596e129-04a0-4763-9e0a-5af646498add",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "386b8f8b-9519-4469-8454-1e5c03a06f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166afec5-9e0f-4805-acac-0ab24752b692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d6fae2-0034-4a79-a727-8f4f7fb0aa41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "497585e8-66c5-4f17-b7d5-63c857293282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fe1902-7363-435c-ab09-b38280c77f37",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92704be4-220c-48e3-80bf-93ac0aab2b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66134c83-b874-4a99-b26b-4453c84b7a7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0e1600-6ea7-4a3b-9150-0cc5e26408ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fbd60f0-7935-4fa5-b3d0-374538a62827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54b769f-1ac7-4063-9e15-33f9e85bc73b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c1083f-fb7c-4da4-9cbe-4ba0eeb03bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5788a511-d610-4a7b-b3aa-912b67106e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ca7337-5618-49a1-a5b6-145caae8978d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9d348b-f63d-4363-ad0a-81a8603634a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45659eb0-2946-4617-8237-70e4e8268856",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f2e90e-1571-4556-af92-c36cca1745e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8a0c37-12be-4e36-a21f-d864b4a5a082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40d99f5-7c8e-49cb-8d6f-4e9954672f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e14c2bc6-e537-4587-8535-3833e626f830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2cb360e-4d10-441b-9a82-2734bd0b280d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426f1a90-3f22-415d-8186-2589a6255103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e5584c-4e38-4845-897f-513db4da1bba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c178ea9-ed02-4785-8add-016d6476be24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73901a0b-562f-42bc-933b-7afa91c7a245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97eb0af-3c11-4192-aa70-1b6584615d2f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25649219-acdb-499a-be8d-c1303e226c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf616089-6c01-4c7c-9695-8d648de8d8c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2235fdf2-998a-42c8-b198-c76446e334d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c4f66f26-8e4d-4f90-9c01-04172e7c67ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf3dd13-1755-488a-ac97-b09a521addc8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280fccf6-9eb5-4b14-b1af-6b7db6ed1346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c7ed67-60b4-4bde-95c2-08b3f40219c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3da7bb-f4ec-4b45-9094-89efa1789705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f578c2e-d262-44bf-891c-b217a61a2235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201b73db-eb5f-46a1-81bf-3ab6bc57265a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd9e30f-07b1-4bdb-9819-27e0f4c20e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "395a9c6c-8c0f-433b-9dca-4b8252865667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e493f2-1747-4433-bf90-cbb1190b9a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "28e8ecb1-2454-4ec9-94c8-ada0b9fc7072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f11add-558e-489e-8db9-c23f9da62e01",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ceb1c2e-d9f9-4aaf-b6a9-df7428e417c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb1e34d-56d2-45b6-a4f7-8388f455be61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabcbc62-46ba-4567-a505-467cbd733c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c57c3b-acd4-4451-8a62-aa91f95ca6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1cff02-e90c-463e-9c13-b40640eba516",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef07a41-be01-488f-824b-0551378211f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eceea68-4d49-43b4-9b9e-d8babdf273ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff27fa6b-644a-45e4-ae46-82deaf561b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "126d60eb-dc52-436f-b172-935e74f6ca59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09254e7-e726-4237-9101-a1261ec22431",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3f9b3a-4c61-4aad-baf6-9435d08cddd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db8ea4dd-258e-442b-b757-fbba89ce9be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d70b99c-0f05-407d-9a92-2eccf24b13ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e80368e9-f3f2-41a0-8e36-72c1f1a367f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41602b72-1349-4950-84f3-21913dca917f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be37cf8-86a2-43c1-8e99-0c8f806d80b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b01b08-a3ad-4342-b972-0895c31db606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1b2169-75c3-4cc6-8c5d-9b78ac6c16e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "76d5d55b-a424-4fde-95a1-171152cee902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a39b231-4615-4522-af7b-5ea29456f370",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc18232b-139c-468f-8609-e73e61fd2c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddff1d68-8970-48e3-b923-937628f4ec16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e678d6a2-dea0-4b13-b0f4-bd34e5651152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7026689-e714-42eb-8ffa-b2d2cb9d974c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41091c5c-740c-476d-8f4d-224a8ce24407",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573dbf4f-e57b-403b-997c-eeb9c9fe8912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a54e8521-1b2d-4c17-b443-21fba953d150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920736dc-f175-4af9-80e3-03a70e96119e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "003801aa-5a3c-4fff-9cb7-4334995584f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa32205-4cb5-4eb4-9220-b07a1e1c7de8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7cd0f90-e96e-4250-9518-c49ec08c62e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76db6cef-0b1a-493e-85a6-a89ee1c0370a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8afe27a-cb7b-4bd9-b29e-cc8bfd427635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f63c0ab-ac7a-4bc0-80cf-79f9869f1cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a8c3b2-5cef-4cff-84be-e1f054142e64",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3104bef-96d1-4a1e-a73f-ca2a4dbc5c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f43980f6-29d2-485e-b727-51df1a722be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a580ee-3e83-449d-b24a-d98143c98f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64212b99-4099-4e72-8e3a-b3f972a99fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b7d924-fb5c-4ebf-83d2-2e58831c484d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d73e1a-358e-4cca-8b74-76db3f2b94da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8652d17-89e9-4dc5-a344-53965a1d4eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadb8b38-b2c0-4713-8204-b07686fcf61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "47adbc0c-4fef-4580-944e-9ffd3a13ea69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdbc2e8-c930-4bd2-a558-af04ea069cc8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7afb8b-ce1d-454c-8ac7-a35e5f6791a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66761c3e-0aa3-44eb-b4cd-55cb6361ab4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a642f08-14f8-4faa-b2fb-197900872345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e83a9f8-8bb8-4d77-87a2-e3a0031d6093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee9e9cc-02a1-4edc-8133-d7b6f0e35a63",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48dcfc4-1e43-427a-8a7c-633865a3d74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80fda0e-ef83-4ada-8e41-c75cfd928963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9431cd7d-063f-454e-b740-b3edc893a342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3697547a-6ff9-4365-9eb1-3718e6db4a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5585da7-729b-43c2-9508-0a65e9051683",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4ed764-1c63-4b32-9a27-1ed67fdf267e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6afae275-8f29-4366-b819-ac5d1b04db22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b7684f-1320-4bd2-a4d7-9c9fd3d3772e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9cc0c8-49d0-4c20-8f72-ec66ce0cdddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c341d3c0-07e4-42d9-aebf-9b7cd834f06d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0380bc-fea2-4de9-9119-8746b937c8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d7859c-450a-4e11-9f5b-3b7fd2b8bf03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1117845-2931-4d71-9a97-4b7795d251cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11f1ea78-a9a1-4bd2-a768-a35d60c5ab12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d119f9db-4217-4400-b5fa-d6a7376cb6e6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632c0ddd-1673-4399-b25d-3eba0a32d2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68ca163a-8d52-4888-bfd2-375f8a46486e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87531174-a4d3-463f-975a-2ecac3c24be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e79fa04f-dc6f-46b0-ad77-bdc5b79ceac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a444181a-4a78-4635-84cd-c0514ffe8d9f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "accf55d5-6b72-484f-ac86-e01b8ed0783a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b6b222-80bd-4f0b-916d-645e46585b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2170a2e-81fc-469c-9f5a-000eac65dcdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c39fe5d-1e49-4bf8-b9fc-9330780d0d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0322065f-8af8-4bc3-8d8d-1f1a278801bd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54445b4c-fd5f-4b1b-9e73-3748601aaf39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6dde1a-1a65-4d00-8a81-e05d1d2dbb00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbe76da-b68e-4493-ac77-c310986313f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc1f45f-0a91-4545-9000-b5819fd64a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02f6028-0f3f-488b-8554-e7863274758a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db44c81b-4f08-4ab5-a7a0-be8dadef82e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ba7ddc-d888-4532-8193-000706425472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fc96e5-28d4-43f7-88df-0c47496c06a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aab14949-0142-45d1-bde8-525c652c5f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965c3047-c574-4c4f-80d5-8d3cc3f8dc3c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752a201f-288b-42e5-8bcd-c9957566ac2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89484853-7469-4885-b9b1-8b922a4a72a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbda786-98d7-4967-844a-64ef7eb7dddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7828c9-bd93-48b6-8dba-bb9306f39a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6d496a-ccbd-47bb-bb33-31d728ce50db",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "163912f3-bf36-4ff7-9d48-143c6bb5296c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2782f229-b7b5-4e51-b130-d74d518999cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde7124b-4e5d-4a19-8fab-cdf60a2edd7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f4ba9c3-a0a7-4808-a931-62f9398324a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f428d0-58c1-4521-85f4-12815d4a5aa1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef97051-3c64-4750-bbdf-c221d24d30b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ded038-1f20-4d11-b6de-667f736a9d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41688daa-f1aa-4d86-bd39-b3df7264bd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "deefa329-35b8-419e-85a7-ab5b7ec5cb7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2af8eda-6b16-44ba-afe0-1e3f3d33dce3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e29fcf-9aec-4c1e-9b83-23c367dd2763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e3478a-f2fb-47bd-bcb4-a5536b024531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5acb330-f7d9-4d11-a360-740496876efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a31c33fe-ce10-4b5c-99b9-1bc41c0366ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee9820a-0505-42af-8e77-b97e016d86d9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171bac6b-dffa-4883-939a-ccbeeaaa5168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba28b80c-c07e-4a27-9500-c2b290390cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4378226b-49b6-4d31-b2a1-dbc0e0f2696c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14fd7a86-7040-4534-8084-7a798560e63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c4548a-c349-4f22-97cb-1c369da1d976",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91967c2-e557-46f3-9ebf-e5d6f7503faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35032a29-2f30-4890-a11b-2f2c50f88de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58a53c8-2675-4833-b372-ad7425c95fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a757c15a-ec39-4ea9-be5f-13420f029bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c321821-45ac-4742-b858-a6b75aaf53e9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ce11b2-fef5-4731-a5be-e576c9c89c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd22e67-dde3-4623-8beb-120707d3a032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93cedba-7b38-4e5f-aa5e-79ac14818582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e3f6752-4de5-4533-96bd-b35485e80a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b0adcf-44f3-48aa-bcfd-4fe1f979908b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6d4088-77cf-4460-8a22-308269e50caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65cfab65-50fe-4feb-8c5d-49b151fa46a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5fb8fe-9337-433e-bcfb-ac06af7499f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3ce361-1844-4ec7-a0f4-abbefdf5d60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac12d1f-05cc-4d62-8bd4-d80058cd36ff",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36cacc24-b8df-452d-9fdb-2264f57fcff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bea63c9-3c95-426f-91a1-eed8ed587593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9523e1-a6bf-4bb2-8ac6-cf667ced5775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b96f2f48-9e1b-423a-ac5b-2bd84a543e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4647164-8452-4980-8711-76c7e9f8769b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40e9c8d-4fb1-4dcb-acbe-709a8eafdebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8006f3c-27c0-4a3a-808b-91053ab7d354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb638e3f-1036-440c-852d-b38d25e53f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b19f272-d555-4d52-8c62-061d4b95355e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d80f8e-338b-4b2a-b8ac-97f6564e2371",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9af3581-abb0-4c05-8e69-575b8286e31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f86677ea-2577-4d89-a4ec-335d65909180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1892e12-6d14-42a3-8815-c503a20154c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0767279-c2d1-473e-b8c4-d721bfa69d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fe8385-e743-4e34-8f2e-a9b998ca1ff0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8546513f-ab06-40a1-80eb-47626ab0fe2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b3a0fa-bf7c-47ed-9e02-236f165f5770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace1ba52-3a5d-43d6-9ddb-5573b0f6c8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c86f161e-ecdd-41b6-91b2-c4f72c509414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c593dab8-4bd2-4897-950a-14b120b14a84",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84d0cc2-35f4-4724-a95a-14761e2c064e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b336def-d00c-4bbb-bdc0-ac4eeb35ab6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a808160-f75a-4782-b41b-3e7f53277f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac47108e-6f59-460c-ab21-07862e58df63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4e0c95-f174-438d-8e66-d8649904305e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9990718e-bdee-4cc4-b5af-24d166ef99cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9fe577-c420-47d8-ad22-5b5ccb159af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5dd619-dd66-4fe8-b844-7ac4334812d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1015e970-c2d7-4097-bbb6-9b7513f0ae6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fa6ad4-77ac-4410-860f-6cd41fa2adb8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b2dbd3-5d7c-4416-a1a8-2ceac2eb25b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6984d7-a338-492a-a6d3-f97cef4c46c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add3acda-a01b-4e5e-8963-1a80d0ce6b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9042d1cf-34f5-4a92-a122-272a58b56eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620687c2-0b3a-4b89-b7fc-fea3cb6bfcaa",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4473e6cc-ddb2-4258-93d6-3c5df4c05b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78162f4-a6e3-4874-bf30-ca7a7c011db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e623d2-b22b-44f8-b54d-1139d6ad1927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "66b29378-cdaa-4898-abab-04c818dd442c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4dcbb2e-4172-43d7-976c-f02b0bcf037a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "497986f7-a875-44c8-8a60-81db3d06fd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d7927b37-c463-4525-8530-9bb6d9d7c021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb355f02-2f84-49ac-980b-a481ff60beb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb474c2e-9c23-4150-8067-b4402ab15547"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "212bd468-05a1-490b-9c07-902c884ff337",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cd97b33e-4ba5-4b8c-8921-5be80023a9c4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05e2813-6f86-4933-8c99-0a3b15a6e0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "174a41e7-3ac8-4c33-aa05-237ab3eb2d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5275d3-309c-4e37-80ae-3591c4d4c6d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44197c50-e651-46fe-96c0-509edc8cc892"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2017a098-9cc2-445d-8766-35ac56d64712",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7173b29c-41bf-4174-96d7-af0420551cf9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38761344-7c06-4e1e-b646-3d145ad291a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "222214a9-8845-4119-aa6b-50e8f1abd285"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c372e2c0-83d2-4340-8da9-63cd4b0ad583",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "78fa6075-5918-4296-aa1b-dee52efcf004"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0f0cac86-d7af-4a64-86d7-859b187361b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "397bc4eb-e228-41f7-9809-7a961f032632"
                }
              }
            ]
          },
          {
            "id": "d8ab983b-49a2-4d57-91fd-1a2a4e1cf994",
            "name": "Positive Testing",
            "item": [
              {
                "id": "97378997-3d1c-4ae3-b119-77b48949eef7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d3c4cde-ba3e-42a5-9651-22060ec58342",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82ab446a-aebb-4a7b-bde4-93f40ea87db6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3f0809d-465b-4f6c-9d61-c534252dc160",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "133ad0b3-6cc0-46c2-953c-584a33fd208a"
                    }
                  }
                ]
              },
              {
                "id": "d4381a04-ca48-46c1-8ffd-10e7fd101ae5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfe602d7-5dc9-4244-a4ef-47171d61e96f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2cb5f1da-aa94-4d25-b92a-566457c6f198"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33637e28-2e97-4d19-bea2-cef6c07511f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a0f66927-1564-4616-a36c-10a2c63cbf91"
                    }
                  }
                ]
              },
              {
                "id": "2d692909-ae9f-42af-8813-586c3ad6d933",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d9d59ce-1dd1-4d6c-a828-3634613d5d40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07b79e4a-05ad-4b2c-bda7-8178f8419ac8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c5a06f9-7b3a-4c23-86b5-e83aedbf5b1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ceb1b411-519f-4c0d-9ca4-47ccb333fcfe"
                    }
                  }
                ]
              },
              {
                "id": "fedcc073-0184-424c-a304-a3175cab7452",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4b23c9a-a433-4ce9-93ab-577e8a8b3cc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3831120-c7c7-4657-b937-8ce982faa927"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd0778be-50cd-404b-acaf-e06eae9897f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ece0d8b5-ec85-4cf6-a319-fffc275b63ed"
                    }
                  }
                ]
              },
              {
                "id": "a65e0ec9-226a-4766-a2c3-b25a763484b1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "005edf02-601d-48f3-9938-6de3e2c5c20b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "59bb9826-d50e-4eb3-a3d4-c5958d7695dc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5cd632b-f3d5-4d29-a488-fdfed593f3f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "dfcb21bd-1f89-41ea-b2de-f832293f0a29"
                    }
                  }
                ]
              },
              {
                "id": "29e3204e-ed4d-4b6c-8624-1019586320b3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f537984-1980-4332-9d57-c4c374c92130",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ae641cad-489f-4aca-994c-4b1ba4d34d5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9623d7e4-4296-4f9b-9824-49bc1cad6c91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6ea7450e-70ff-4372-80b0-33384f3fb321"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1d1f0ae8-b401-4d6f-b749-d778fda161cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "22a976b2-078c-4a75-ab00-a6d37ad11539"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3f3f4cac-4088-439d-9925-ed3c611d5f8f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "79040bd7-8718-4a02-aa95-9149ebb381a3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94dc595c-df4b-418c-8135-fa27bd8e520c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6f374eec-0664-478f-b71d-c6034792e249"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "802c5351-677b-4776-b8c3-3bec206d715f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3d651cd8-e694-425a-b66f-ae8306706a51"
            }
          }
        ]
      },
      {
        "id": "5d112c35-9db6-4351-8110-1bac68705a67",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ea017847-4b3e-4cb7-8a3c-f9470aebadf9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1311b261-58a2-445d-8b28-14f4f36eebcd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ff32a44e-7e6f-4396-9ff5-75515ba74810",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38d22b3-6549-4634-b6c6-8f363a8e20be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7990d725-c923-40cc-92c2-59ba24e3e97a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0100c50d-976d-45ba-821a-3501299ab710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "30862d3b-c5e6-46a8-af76-036b7383fa84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818a7fd3-424b-4ff3-8260-4e13fd0a61ea",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "565ee0bb-4e0f-4e54-9d48-7e58dfc0a045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80b4e85-7f5a-40dc-8aa1-e30daf91d0e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf0c7c2-abb3-4608-908f-605f431d7943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee97dc83-567f-495e-877f-8097957ff545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d165c8-5b41-468d-8d25-6617297b4193",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c2e2bb-0658-4cb7-8302-4b14d2a85f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dad27e2-7a1a-4d69-a222-289bd555a737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab25af5-1892-42ef-98ab-2875faf5f35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c1a540b-bcd0-4eb5-87b1-cdafcfdcfd9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc43f5b9-89ce-4c29-a52f-748995ba400a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f1fa7e-d5b2-401f-aa19-9f1c2e371c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a86d29c-1101-4626-a09c-8b877a6c8757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1bdeec-a6b8-4baf-a3d3-2e0b811b1899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb68ada-efbc-4bbb-8924-4108dfb4a860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d402adc-13e9-4917-835b-b6f0a11cf51d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad5103c-4af7-4c70-9f75-d84db78c11df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceff95c1-c5d1-42bf-b333-667ca1a9f6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1f90d3-5cee-42d9-a3bd-fac923f4fc79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1062c603-08b2-48e8-b7b1-a45e67b4eba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77af440-3b02-46b3-9de7-3507b95a3149",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c373c53d-df5b-488a-8c62-4beb2026b8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6de325-41c5-4b84-819c-5337dd921ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdf9a0b-4a1b-4b7d-8712-842a728879da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf5155a-9323-4565-b1d0-ac02341bc461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539f1943-6379-42fe-99cf-06c76e5a748e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ceb4f4-9d50-4497-a287-e00ce1fb3c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7232e392-9687-491b-8959-bb80b12c774c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3493b28e-660f-4223-9902-bc53ba809fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff1beaf9-2777-4cbb-b655-c589bdf47d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f9f113-50a6-4e81-94d3-704dc4021c50",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5a835c-c7bb-463b-bf9b-6d4a7dfa66dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca75fe3e-0948-476f-a772-5a58ea0c185a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a2badb-6c91-4c6d-9330-b9148cad0723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d548f3c-f9db-4258-a41c-9938b8a80153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee93c50-3663-4d0c-b799-d476297bdaeb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "774c5ea8-5d3c-4b18-a7b0-bd50727bb19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "611b961c-e8e8-4952-9505-6ce2753e4722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de7be00-ebfd-4116-ab0f-b1046656367b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5118e0d3-fbea-48db-bcd7-99497031105d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4098677c-7478-45f3-a1b1-14c7c9750692",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29de07c-b676-4032-ba92-22b5636b30ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06fce61b-f525-4061-b446-870408111e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853e4037-d770-4ed8-a3f8-1d7c62ca80d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64b32e31-5b30-4615-b2db-fd0ffbc9249e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c7e643-97db-44f7-b2b8-585a91791fa6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9bcfb8-3314-4057-b74d-3d4fb0cf74e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "366222df-5684-4a54-8a22-e84795515eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799a9638-a4be-4f2c-a48b-f927d433a3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b126be07-4e3b-4561-84ec-57df853d8f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8e3578-a4c3-4db3-8685-327255c4bdeb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17be1929-6036-4170-aa7c-1aaf89c8989f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e8bfa5-409b-4f64-960c-ae0610bcda28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94344e9c-2aed-4380-90fe-aaf1419629bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc93d189-b9be-4f3f-af9f-b8e69de0c4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1fa953f-e74f-4ab0-9134-bd9fe94a408c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ff267d-e314-42f5-b94d-654a9326e026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31aa6635-919f-44c6-84da-ce74897b829f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907b8365-ca44-4d87-a778-148d64e0988d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cafac3d6-e26f-4669-8356-caed3560b913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cebfd1-ccc6-4fb6-995f-dc49c97caab2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa890e2-e9e9-492a-abbd-aa040824f237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f9e9f97-878e-40f3-9c68-36f68ed6a39f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb68d75c-4be6-43fb-b06f-3fa6066a6c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "21cce7c1-09e7-414f-bd92-76972b450a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e073b01-738f-4766-bdb2-0c0054a117f6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a044a83-a1d8-415f-b387-d8db5db9045c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a3fdfc-eeb8-4cb6-bca3-a6292747a9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e119a4-6dd2-4e1f-ab0b-a5b0d8662f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "35fdbfc3-dea6-46ea-bba2-c3e98128c709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012d7740-e682-4fff-bf51-7d4ba87e37ea",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d621bee2-2b0b-4762-81c0-308a6b0cb0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3eb02e-3bf7-40e7-866a-248d9a78720d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a50e873-2cfe-4c35-a949-446a8b4fa96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "05ad7756-be40-414f-a990-8b4b20051107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5656c8-a318-4ce3-90fc-bcc47066f313",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0035aa4e-0a23-4247-9941-24063ff25a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd63bbee-2ed7-4b9f-ab11-b0e89573208a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac42d2a-d7eb-4618-8dc6-5f766a2f65c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "736f6f97-7857-4aff-8f85-dc67fe8c4658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5237c4-0d02-4c88-ae42-547d7335c6e2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc28c98b-e793-45c9-a31c-ca581554b0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71684d25-d365-478a-a602-ae9b87c66ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a25def3-e10a-4c11-b88b-a313b593c98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b549da9-8cb5-42ea-8e18-bd7188340203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f27b02-2eba-42f5-95f8-99b03627baf5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "303ac438-8c4d-4c20-ae4b-bbbd217ff268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a44c42-21e9-428c-8f8a-e8e5f094bd7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca61d4cb-6ed6-4627-9bac-199655a83a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0dcdd2-4063-46d9-9405-dc3cb2aba290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8596d329-7b99-43ee-b33b-9eb600cbd39a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3121b7d-b117-45a3-bf4d-c312936d4c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68df8076-abc3-4f36-80ad-49659e158c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63ca26d-da0e-47d7-bb43-34aa2392e311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff722090-881f-4b66-8792-30ebd95699d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc9b5e8-b60d-4d00-a411-164e1b6cb25b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "980a5609-0c9c-469e-9ded-3581efac358d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f59154-c6ac-4c50-9661-0ebd0761d279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e986923e-dc37-4576-b987-40167015ceda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb0d4b82-f9ff-400b-8d64-bace4dde5ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b58f63-e9a3-4e53-9f1c-fa1952b70557",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734807c5-37c1-4be8-8449-aaaedd92cbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56934b84-d3f1-4a2e-8e88-530e0b194df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e94126-b748-4213-9bd6-37d748c10486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "879db3d7-4987-4f75-8635-d529e1583d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf29b34-2fda-4322-b955-add91713223d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606632f3-5328-484d-958e-41935506d9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d777d5e7-5f96-4949-bb93-d1f0fb581a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e6121a-815c-4122-8916-0264053e6031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7624a5-c108-45b1-96f3-cecc5272c001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4582e65-e489-4dde-a751-11682cc0cfd3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9504f122-6296-4552-b516-86173ff0c892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e28045-f72d-4b77-8f4a-b0d90211e8b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f2eb2b-b7db-4b24-b6bb-52553978a072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e166632-65ec-4b19-a6ce-bae8082609e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25fbfe4-5d0c-40ed-a716-87fac6dff421",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e832fc4-6613-4413-99c8-b9ff56872cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6ae938c-e2e4-4e6e-b17f-b38c08adb14c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6cff9b-bef7-4fe0-b0d6-c4398fbae639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a6c23b3-f785-425b-a583-66865fdca641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad283ea-0db2-40d4-9162-99dfdcdd6642",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5994a04-fc43-4d2f-99ee-ba75177c7a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a29e9f-956e-4b8d-baf5-d8ea7f1c4f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f1fb02-2a28-4efa-96b5-bb68125cee43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c5be54f-6b8b-43dc-bae6-e0e57adfd806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0215e29e-a47a-4cd2-ace9-348994ffbd44",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c26b4d5-7eaa-432a-b29f-576f917997f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e103f8fc-289e-45a4-922f-6abe795e0eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a40dde8-a388-4ef5-9d4b-b5d9a16200fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f1ee67-63b6-42ca-b4a8-6fd539fb73c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219a54ab-44cb-47dc-8d0e-ef36000c4bfb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b1ba79-bcdd-4268-993c-d4cfcf735b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0552529-2b0d-4fc7-9367-5f2ee0d458c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1076f0cc-a4ad-4c4a-bb02-808437bf4b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8479045c-f425-46d2-8691-84fdee436440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1ee805-2d62-4a3f-b346-152bd3e4d425",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51131049-3fcb-4b70-bbbe-fa8b2a3a1112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1446be4-4234-4bd5-9154-5887556908be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5aa0c34-d683-425c-97cd-4ba89ced60c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b444a6c-6940-4184-88e9-705d607373b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb06467-134f-4a5f-9134-65b6a3a918ae",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e4437e-1c72-4af4-b779-3e3e262f036e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c47e76fb-30a7-4770-a71b-2427b89fec3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed85066-026b-4abd-8ffb-ef6a84f79c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f5a55d7-1c61-435c-8cb3-66bf038c738f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bc4f0d-fb91-4d00-9d26-c43eea33ae8c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e36b68-d337-4eeb-b638-717ee92df796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e0139a6-5deb-4f99-80fb-15495396c0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9030626e-bf3d-480c-814c-46692fd81649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49865c6f-7d01-4eff-9a0f-03f5378703ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23818538-5ef4-4bdd-ac4f-c4dd908ffe54",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4eff01-b533-41b0-a640-b623c6589b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da36759-b367-4b5d-a64f-ecc90f2473e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e278921-5d8f-4355-b550-f7f4b5f0b394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fecec0ca-6259-42b8-bb31-b3f794348618"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "80fa01eb-772e-4b71-ac52-d2975d8128f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d322d30-3fde-48c4-aaf9-81cb1ffa532f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c236580-160f-4517-a7a7-bd4504dc6b8c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ad04a763-9ff4-408e-aaa8-4ac2bc5a780d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25ff270-c89a-4b66-9edc-bc329c51d249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db8b81bb-3911-4e2d-b2d1-df7bfe301614"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36305b1c-2b45-4194-8fd1-fc446c4e3ea0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06147431-15a8-453d-8df9-5ecd243acf60"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e913d189-58e1-47de-baa7-95f915030b7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75bb5684-db0e-46d3-af11-25815dd477b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0667ed5-5fca-4053-a79b-d04dfc6d007f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6a904508-ddef-4911-837b-48b90671d6e7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62bc4237-bcfb-4343-ac42-b24407b30a0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc0f06ed-7af1-467d-9099-e47d245113b6"
            }
          }
        ]
      },
      {
        "id": "d5d4d7da-b9e0-4ffb-b72d-297d1457362a",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "0b41d6ad-74b1-4490-b134-47d2619a91d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5e74bde-9d72-4450-93b9-0a27daf5450a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2410d99b-a8ae-4abf-b3eb-cb6e059dfb38",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4127d03-d5a1-4451-9e73-18160965a087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f66e5f4-05c4-4867-b261-f239fb6e643f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cd266f-bcef-4aa9-b8a0-b56a57e3f1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "97403352-38a9-4e45-8faa-fd244d4a861d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf7c5ef-6393-4903-9886-95520ad32a59",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94909f2b-1a51-4d0d-aa4a-3a3eb5152fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df522d92-a1b6-4712-adf0-2ff27b03d7d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f04dd8-3cb5-4fa3-ae38-0ec51bf5809c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "76075f47-dba3-4bd2-a4c2-fd1605f285da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33fdf8a-274c-46c9-9c2d-fddae77f3d6d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a439390-4062-4364-b2c4-0bda1563d009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d2bc9e-2721-4b73-8e3b-510713357d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c71d3fa-29c8-4e05-bb20-1070739c2de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b4e1d70-82f2-4e96-990d-cbed13eba470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01b294a-631c-4f38-b878-063a984ea639",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06031fcb-d912-41ab-ae01-ee27436b66fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d912e9-f167-4a3e-969f-f7dc032a4776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edec573-aacf-4188-9567-72a4478d11cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd7b3b8-d2c0-4dce-addc-c480e9dfa64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b9e35b-7345-491c-8699-5821b93fa04b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed19ee90-e77e-4ca2-83d8-571350d25f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e697d9-244f-4005-8989-69f18036bd2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949c0d68-3bde-4ada-b73f-06fdd7de83ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7664759-3fc2-41c7-b308-9dcabecf3014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb15909d-eb0a-4ac1-a679-98124cda620c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3774e783-d6e4-486b-be6e-ceb3e3ebdee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b868414-3824-4d3e-9f72-9ea786a96748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c699d4d5-c294-40a0-919e-f080374b31e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2fbd559-41ca-4816-82e8-41aa5d380712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7369238-d424-417a-85d7-48aa379f710b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c34fe32-2ef5-4f9e-9297-990b9a861e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9015639-1e6b-48a8-b508-358a385c0ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa97dbb-1919-41dd-856c-1b36fd2562a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "999ceb97-6ab2-4e26-9cd8-9ea90baaa9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db4c9a1-35ff-4f8a-ae01-55c36f49e267",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc94c8f-4e83-4d4e-abee-0b0e9825578b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3181a10b-4456-443f-9bd8-44e01a4093da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd76ba66-f723-4d5e-b3a8-ef1424a979ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24ef934d-6be3-458b-a63c-99f18b52a067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec44d01-85e0-4c6c-9bd5-a29e3eaa3c2d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6933541b-0137-4c94-a3b6-686a2ba3d16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59e560af-bdea-450b-b5f9-7c2b0f9f5641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564c40e4-98f3-4a99-ac81-c411141c360b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "910746b0-6ae7-4621-ae80-c9b5394a68d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabbac3c-8638-437c-ab73-3be3bccbfe11",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77be84f5-9087-4ea8-ba6f-26b9789bca99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54bd7e46-2ce9-4f6b-8c75-3e5f5819fb74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde4371a-a09d-4f03-b883-2d5a8593ed51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98786a2c-c860-4b14-a825-dce84521f553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f28f43-9d0c-40bb-81b9-1505527e939f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4039f971-ab63-4b86-8483-9634ed36780a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987c0f45-b4fd-4182-b218-61008e25f39c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebfddc7-661a-4a69-a8d6-84d5105c3a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8c12e907-9527-446b-a5cc-1ff7b3777715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6c6243-4197-40ec-b6b9-8fde7662ea26",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7829e0d-645b-4086-a081-cef6e659a359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5ecd27-6f29-4229-81cd-d541dd294d06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdae6c83-8929-42b3-b50b-e2e6daa094e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa1593d2-0129-49f2-9992-7b93c87b6971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737019f2-0e6a-41d6-9316-6b0b6eb49aa3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "492e5476-7bd7-4fa4-af38-388532c9825e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4abef037-f904-4d29-9ff8-08bb43e741cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5131aab9-4612-448d-98ca-a7ce2b256cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "33673b84-626a-41da-9443-c68d6af53e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6c7fc5-76ed-4025-80e1-a7b3ff89fb61",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578be00d-69e2-4a9d-a811-54009fa8d11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf6145b6-0fc7-4b4b-9710-aacb178bbf85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1160faef-e0bc-4a8e-827f-c415ea96aaf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d6c19b3-b8bb-4be7-bfdf-2469b0ef0dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba82e0d-cde7-4726-9a24-6bc25ee429fd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64a8ec8-88af-4fcf-9895-3828c705216c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8eb20dc-1ed3-4543-8223-11f79f3d69e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39b95a5-bdd7-42d2-a00e-8b3140caa703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c7db144-6904-48b1-9dc5-8b8c39550886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9664d6d-5ac3-4734-a3a7-b4c734d81fc1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dda8ec8-cde2-4ca4-bb9d-82eb548de2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468d26ff-a80f-44f0-89a4-3a1a90ab2122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3248727b-5f21-48ad-883f-90cb6c494339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "80b417ac-454e-460f-9d25-6369ffa6c4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a9a01a-df41-483d-aa03-3a15bd4402bb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ef844d-845b-40c3-82f5-f1b26539b7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98493510-1f35-4ec9-9884-2593573f40ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33713a91-773f-4584-aec0-8c88563ad044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fada099-e5f5-454c-9773-b5effc43f5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc71c60b-bf20-4830-8f8b-b68371812888",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e563f4fd-1956-460e-b128-1f2ca2646f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919256ec-2812-4455-9c8e-c0a2fb7be00b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b11ed71-12c9-48ce-98de-0c2fb4f07a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "202b45b7-4741-4747-b559-30a2ae240436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759bf91f-7ff5-4f95-a77b-7478fc50e34c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d40834b-93ff-4f18-984a-6ee5f25e9aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0603967f-ea28-45fe-98bc-13f8d7bb029b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dad1298-b194-4a47-aec3-ee977f71cfae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e7abc24-7bef-434a-baa7-5812508936c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ced06c-4fc4-4b8c-995d-3c666079808e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6a29de-b2ba-4ab7-bf09-c6f27268c49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6689f40d-fa65-401c-b7ca-3c143cd41305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41ca47f-a373-4427-ae13-e5e33fe835ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "301b9a61-6967-41d3-881e-54ed43cd22f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9743fb8-6b8c-4e32-ac56-689410085f67",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84efc01-92f9-454f-bd81-e3337af96f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3502c8d8-6275-40f8-8b0f-d4b6c9ea143b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f41df1-b1b8-4708-acdd-28a0540bfcfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a526299-4cc5-4e26-9876-ab24d8a0659d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7f70cb-c6a0-4c45-9971-316f06772341",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f43a0a-e348-4c2e-ae3a-280bfcb17939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c8398c-34bd-4e74-8954-901d985cec2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc630c2-b83c-4d82-960f-039719d55359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94b89887-d757-4bb9-aec6-9be9b95914cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d171ec5-a51a-4f59-8171-54fc29900099",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19cab48-ee5d-428b-b4ff-c1dd09725650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab7683c-1136-4484-9d71-c2b12908b98b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d4e4ff-ab61-4633-8f58-fc0d18c0f5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "963a0d6a-1c66-4abe-9617-00b859b3038c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0328f8-50a3-4874-bba3-54820662e45d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1336afc-aa7f-452a-83a4-1125895f17cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6452c018-215a-4209-b7c3-85e7e1a1c00e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a2a297-33fc-47f0-9a65-3f9e954daaa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f910cdc-47e2-4808-a627-0e1d8c1371e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19edefad-1d57-43b2-ac7d-5f299b887cfa",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3f35db-4601-4a6b-86dc-7045dd994de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6704ce6-47e2-42cd-9560-77983be2e689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b80d531-860d-4516-8f0c-1e5dac7d39f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29e72ec6-a204-4816-9dcf-0850d2e439e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d419da2-6005-4310-bdee-c360b9923c46",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d1aa62-537c-4554-9ffd-39e457b147a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2bb8bff-1b81-4a57-8b35-017f3442c19e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f59705a-5cae-4ce8-b3c5-5f14997d6f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2904c94-31cf-4726-bf78-6a529f3c06ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72a238f-0136-4d3b-8b7f-131d10dac053",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e44d3c7-9b24-4d03-a53c-a93d4cce3e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c70904f-b829-4188-865f-51e98754017d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9388930-49e5-4ea2-b035-a622ffd8a2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac30c61-d6a1-4a4a-84f7-d1fb03c9f677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b66ebba-0505-4179-9b04-4e02fa4ed060",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457838bb-e2ab-42d7-96c8-38163f6eb53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e3e1d02-bf8d-48bc-ae5e-43e722e2b3da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd125eac-f347-4095-9962-4462bd04ed1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26ab2196-62eb-429e-b87f-846779a09b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b17b773-f1e2-4b04-b0b6-1fe5323197b6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4583331-66bc-41b1-b6f0-ba66dbf0e2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed70b29-2919-497f-94e2-227640bd93d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d82676-1c52-49c1-9152-81068c48a79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67d9cbd5-a669-4ec9-b442-a836f8b09636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89edc17-05dd-4efa-b522-ce125c093270",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b988618-b339-4531-ba07-398ad385b9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cde15d8-f30c-476b-b611-3cd3b7b2aaca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3facd6d2-045e-4ef5-9853-198a62c02364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "772d0b04-d256-43d3-95a5-72f5da01464a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99fe38e8-94b0-463e-8985-54d887870596",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6d4ef6-8c80-4308-bf40-e580dd29ac95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de499cf-6086-4c4c-a09f-84418cffb951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5347c9f-5c77-4053-98ab-ac88bf262283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "189faee4-5557-49df-8fb4-01b5a3f23998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c82d732-19d1-4f19-b6fc-4b4b5d7349cd",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ab2449-0379-427b-889c-8deeb3d1edd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a012092-14ae-4d0b-a287-fe4e1196ba46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09701bd-61d1-47c3-a1d5-54674190493d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "153fe434-6ed9-43ba-b220-55800a02495a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd27461-a0ca-4a5e-939d-690461f5a6d4",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5227d8d-cd45-443a-b275-8f95d11d4c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe94455-3d77-4437-b385-7889ece47579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769cfe37-d3cd-4097-9544-bdaddee18623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbbff282-fed0-42f2-8c6e-aa7846d61747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9a7b43-8a62-4829-8cea-aa664697be82",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6c198c-b01f-4106-b098-6e5add412032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f917b7-5fb7-4dba-b2be-5686c1f053b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08762c3f-5cf1-43c2-8007-e688d0c3fb29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "941304be-ec8d-41df-83a1-e829b33ed0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5770ca4-3f8a-4f73-8bba-a89d4ccbdc60",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efdf3334-cfa6-49da-a023-18151c754266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb951520-5ed5-4bef-8dc2-041647758fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea69a46a-9757-4f33-b322-e4c2bc6b0917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "307ff5be-80aa-41cb-9cab-163f2bfb02ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c2ba47-8131-4370-8a03-175a62684736",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b108f7-7b37-4ba8-9d14-4172b5882ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a2f17e-d1ed-4582-b54d-4ceb75d4c4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c32e92b-f260-4bcc-be19-f06a3d373a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e7bd5b6-cef8-4a8b-84a7-6ee675e1952d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579947a5-1931-4d9c-9558-0f9cf4a5719d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24292fcb-b227-4f08-8ab2-1645643a8c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b134086f-0fc0-42bf-99c0-bbc304f39048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3c3677-4872-4f9d-b97d-f9076712d3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "937bb104-5e0a-479e-870f-655b8eff2bfb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "646fd047-60c6-4b54-aa82-7d40253b992c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2cf61711-f6ac-477f-9703-1c5be339718c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a6a68c-9fca-4549-963d-0b8c6985aa86",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "32fac1b8-9c4d-4a5e-b966-c9f97fdda3be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad6fc4b-b105-44cd-999c-269809f1766d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "458dcc94-c9b1-4354-bda5-9936f937d4d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5be89d55-b439-42c5-9d30-d4cf9bfa27dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71ff2e4a-e2ca-42ce-bb9c-a2cf398b9b96"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5016544-ca2a-4fda-b175-d4e031e02aa6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c6b2bf0-d803-48ae-8ceb-e237a4e07b11"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f248b91-a127-4385-9904-f8316cce1e4f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a771a0da-08a1-4794-99f7-b9a240a1fb6b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41a66a3e-b203-4878-a88a-7a674f4843e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "761d76c5-774e-41f3-bd56-3d899fe1dbfc"
            }
          }
        ]
      },
      {
        "id": "d5f8945c-f7dc-4279-a892-b1bedcf3d0a3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1f473a21-8954-4169-af7c-0f6151115fdf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d34b921f-b550-4553-b201-408b7fca26d3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fa3c308a-823c-4c77-9618-25838e5d8d46",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9f3711-9d30-4829-aaa5-6209435a4b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6040ac-b6c5-43b4-843d-4accaf9f0da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22424497-14ee-458c-b894-181d5bb636b5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9ec714-aa38-4808-93d4-4143ef8888c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad21438-8d30-4be0-9d55-7061b4a6848f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3afea8-bb22-496f-81c6-d53b5cc8f121",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e80bcd-d079-4576-83c0-19b5871232d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a35955-3cea-406a-b4a7-ccd3318de8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b28fd5-1464-43f5-8c1e-3ba8fc53ca36",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1641573f-9103-4881-8416-736b7f44f7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fab58e-bf5a-41db-a2b6-8a9d601be05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abde63c6-88f8-4121-a8ce-879ee8e1709e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8391f040-efab-4193-8588-132c94386ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846aded4-91bf-4c05-a8ad-1025aeed3d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba4bbef-4da4-4de5-b5f7-796a73f4ba00",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5178c59e-5e4f-454f-a221-410f21a89467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c40060-7737-42c1-9e9a-2a4a735d4c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a4873e-95e5-4cf0-b1c1-c4319240c9c0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2ee617-2664-4ce7-ad4f-33a8ec501f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaaaca67-6517-4029-ac85-e05ef37167f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdb8b1d-21f4-4acc-baf1-c1fb7d1f97f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf36b297-f9cd-4db4-b226-e9e2667cccc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a41a33-c472-4a53-be20-6c98a32e77c6",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ddb24a-a7d8-4add-b465-e4c05256874d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab2158e5-8de3-4afb-b6cd-9b3145d7a0b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56a018b-a0c7-4145-90a7-52d86911dc0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72fb6cac-5f03-4430-9e9d-2f747a8af9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89555ea-7084-4b36-8182-461da8d3b066",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7908106b-56d4-43a2-a3da-e1cd973499d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdef0174-a7cf-4f82-8685-ba7148ba85f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8522df-237f-476d-8799-a96f5000421f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b673db88-d4ab-46f8-92f3-9909c39d4477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735f7135-6a49-4122-8905-2f766c90b7c5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a6cc41-135b-4265-8327-c7aa3e5ece9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f717052-f72d-4140-a040-c37fc1c870e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4d06c8-97a0-4eaa-b661-acbec7158138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf9f425-74d6-4208-9824-5d3d395be701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e5f3dd-850e-4818-82cd-a287c13c3fcf",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c1d342-1a63-4ad9-aa2f-25bc58da99fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66bbc170-d59e-44ff-88db-b39b2a723efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03feaccd-1c30-438f-88f6-3eab7b842bf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a75a80-9911-4ec5-b148-b278b65bd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d863e0-81c6-4a6d-b285-f3a85611341f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10dc98be-8af6-4709-a1bb-d08f3cc675f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c49d68f-72a9-4335-bf1f-37863643bae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e0f367-741a-42bd-9dec-d880caa5368c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee6a243c-7e86-4bed-b33f-d0d2d0def974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4571ae-97d3-49e8-b007-87e7dc46c26a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208ef2cb-87e1-4f75-a51d-cad4881111dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "408deb6e-407a-48b2-aa3c-37789c417af1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba51e622-54fe-42cc-a319-33a6308d704a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107383e8-7db2-48f3-bb44-77c979231862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa5cf5a-6d0d-47c8-96fc-39c13a26ae0d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7213bcce-43a1-48ac-87bb-4ab442523e2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73b1f682-55fb-4cab-923e-5e6d302c9a0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "332be93b-51ee-4bb5-972e-fd6172f4ffc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e58e378-275b-4fb4-914b-5c77243c0af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1496d2d9-ebf0-4bb8-9aa0-68616d167233",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4878d276-e8fe-49bb-9ee5-5434d226ed0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33952b12-978a-474b-b196-9b0639b65c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25ecb7d-8d57-4689-b08f-9ac67cbaf886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b2b33e-4d0a-4504-a95c-d057b710c95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f916bc29-d501-46b0-9486-59645a0ecca3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddf98e9-31ac-4b8f-b8f8-845c4d67bf5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f261de3-0411-4b1d-ad2d-a63f9ce2e498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccc1ff4-d372-4097-952c-96935a40da03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aaaada2-3ae1-4add-9cb1-19f6dadc5aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882785ef-37a5-47a0-ae8a-b8986e60e327",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de30ec9-3ec3-48bf-8012-e08017c603d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8992f16-9a84-40da-bda7-ad411e25299d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22750bd-9a71-4e20-890c-f1e0a39103e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc6fb40a-f303-4260-aa9e-4bea6187669a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5254332c-128f-4574-957d-1063d242a10e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebd70b0-5034-4fc8-bcd5-3a4206858e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672fe4cd-6a20-4502-9426-996400578cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8580f0f-8dc7-4cfe-bcc7-b964a8d9a79b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fde1b99-76f7-4d61-9e9d-1d02284ecf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88724b16-ea21-451c-9487-a84b6869c67b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d242e1-ac11-454b-9531-8ce0c9c77679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "219496a4-5ad1-41fe-9abd-515196631255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f812fb5-5679-4f4d-8134-62a89e138340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f59703-0d3c-4fbd-8024-189faaf19bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31eebb3a-c7ab-46ca-877b-e3413c78b2fe",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cc0fad-61e0-4678-90b8-cdff76e915ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5376ec23-5d61-4691-9e3d-11fb4830a1f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39246e20-65b0-4bc0-800d-910759d562fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e633e5-2ee1-47a1-a251-08a7360a4737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d3acb3-34d5-4c1b-b025-ba01a35f7de9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362d97d7-c036-49b0-9a24-e6ed9f2545f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a5c689-cc49-4707-b355-851bb30d8bd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1aeb18-23b0-4786-8c3d-691b4dcc0fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e1b515-83b3-4b39-8c99-8ff535271366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5837110f-32ce-4786-b1da-1a9f4934ac52",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c803b1-4bf7-4228-bd28-ed6bb8040852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a188b43-60d3-484c-820b-7230cdcf59ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b268569a-ab0e-4f9a-98c1-343bfd2fabee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65fcabf9-7d51-4a0d-be38-8a8323da6a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb2d4cb-d7e2-4242-8126-9432640c6173",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdee8f4-f82a-4262-b071-2945752e1d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79a7a6b-c671-42ca-acb0-38e5c303d629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56dfed7b-c488-4de0-9755-c7a7dca1c470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee8f7160-c633-4602-92e1-e498ae7fcf11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b73dbd0-fae8-43e4-8fa0-cc2d4286c424",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3af05a3-b245-49be-8098-e889a483e5cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac9a1860-143b-48ad-a9a8-0a738877567e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad2e9e5-e904-4af2-b4c7-0d6cf9b1a98a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71401527-8bcb-4d9a-979c-cf25860d0851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7cbe6b-8bbc-4730-b8b5-28aa790d4a83",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa591ce-f541-4e61-832d-4aacabe2108b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92050835-5add-40e6-b855-f9f707dbbee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2004d73a-13b2-4afc-8391-4e6c72856b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f266e4b5-9b60-4ffc-8554-b6406d2fb0b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7af1e6-bfd2-47bb-9727-0adda3e931bb",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94072f6a-caff-4762-a2e3-7480751a964d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36e09f22-8afc-456a-98b7-f350467066ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8dc37c-0b94-41b3-a3f0-3a95f458c72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c92fb0-2484-4800-a6e7-5508acb9e201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590c0866-f657-4d38-bf83-b14bd44fe909",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b0414b-934f-4782-a08e-845ed3d60bc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d835c5e-fa82-4104-b986-62251280b9ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81d05aa-3dd4-4608-9af0-8daf74eac80f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96de343b-5747-4a98-9509-f429f6a360ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1cb310-efe6-4c5a-b56d-06857f728e42",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3638e7f-41db-4af4-a56b-fef7502526ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f908ac4-43fa-4582-b433-8fb1a7ba79f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6161f3f2-e764-4ff0-8029-aa5d02e8e3a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd219c6a-0d71-48cf-95b6-5e7d354ff634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710be566-ce23-444f-8a16-331923e3e51b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55a92a2-e26b-48a9-bf7f-2ed2c3fcb84c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2efb535-66c6-404a-9c89-4931d0f887c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14041c79-cd0b-495f-ac36-025cdd3aeee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a598c88e-d51d-4c4c-822b-5d5027a5694c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d62f0c6-ff6d-4524-af63-f656dca6c6ba",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ab8230-240b-498b-8f87-1c0b18e29dc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0de970eb-8e5c-4c22-af19-2b1fe47b8602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7e09f6-ff46-4664-9835-a690ec4dd12c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29da6ff8-383f-4b29-9622-a966aaf4fbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544d4a7a-9a37-4b90-a6c4-8966c37ac78c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729e73e8-0fb2-48ac-947a-c44d668d269e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6588cb50-4095-4adf-87ca-3b45e4f74d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89eb01ec-1744-4966-a72a-ad54d40dbf27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614bf990-34e6-4473-8429-5450a54380ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5ddf75-db87-45a6-8ef8-70ce5b718cd8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2a2fcf-3105-4123-9c25-6ea736bdf803",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fead7bf-5c2b-43d1-b442-a6b92de4cd96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af52ac30-785c-45a1-939c-0f24125018df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a85caab-c12c-4bac-a419-590e3326baf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149d25eb-fd23-498b-9707-b21f94c64a47",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62aab01f-68b7-400d-9284-37555a91fdee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fee27c9d-4b99-4cc5-a23e-4da652022ec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d864dfac-cfcb-4f9d-acb4-217a00cf9970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2627af8f-76af-400a-8173-5c86002583e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da1439d-2816-41ea-a270-d15f88bdbce9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b4d992-39a3-4e72-ba51-a88d852996e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "618a4079-0544-44f5-9fe7-7df3b81e8f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc708435-c1f7-4129-bc96-b6847c79143c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06160da6-3fdb-4704-9aa2-2e29e3882543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18362c2d-c09c-4ecc-904a-e248cfcc9354",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719d02ba-0622-4f36-9585-a1e53688a960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f355d7a-8426-4b1b-a4f2-c3148b63a854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9198095-aac6-433c-a911-661a40b7442c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236d9a1e-ea68-42ca-8b13-e85762e318fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e265beac-e674-4120-8fd0-d5e82607b567",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61640a04-7152-4a4f-86d8-25f5323fca5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f713b9b-90f3-4bba-9644-8a938e9c2204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "229bca49-254c-4abb-9546-c02a6be17c1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ad70f1-89cb-4e9a-86ac-53a8bc47fad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6389a306-ce3e-4258-bf0c-d10b0a60503c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542c09bf-68d4-4689-b3a3-f0692f6ffd2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24108480-7587-466b-9719-18285310fba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5174596d-3002-4297-baa0-e9b08727d00c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8145a99a-30b9-439b-a275-50df572da712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396f6430-ab2f-44f8-8c5f-f78b1f7e48ea",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c654b150-2f86-40fa-b7a2-5ae754c2fbe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab8966de-cddf-4f9e-a13e-9c3c62037606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "820255a8-abb0-45e0-9e9d-64a6cad47ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e09bb52-b568-4105-929f-b901d08087b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938c13b8-0eca-48a0-965c-2f8f432c0d91",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c64e5e-c240-4741-90b4-76e3f859c0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89db8f3-59a3-41ed-8fec-d7807d051088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c193b5be-25c8-4e96-90b2-16515557f7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f23c6f-b224-4914-9cd7-b7959dd76c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4544d471-699c-43c1-b6b4-c1f886386624",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e419de-14a4-440d-b5e2-7cae3fc6d319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea1a37b-432d-4eb6-bb27-5e9d34953a5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7d7eae-29c7-467e-90c8-4961de121c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48817cb8-8332-4512-9504-9d3ff73f7a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e64a55-072f-43f8-8948-041339aa39b1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ef0ebd-9292-4734-89e1-305b7995c229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "940cd161-6ff6-41e1-80b1-cb85906b1d6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a72c75f-f1fd-4cc3-851a-10fdd2a81961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25381b2c-2c8b-410e-9f21-3553320732ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd39eb1d-6914-4fb6-b2dd-a734f8855807",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e89108-7771-4dc0-868b-d0ef22c08036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f7e20a-5e3c-4a60-be3d-d22935d2a733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf562d0-124c-4559-8d5d-de3f3159c995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06517196-a194-46bd-b385-4545000dd954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abe741b-9919-4b75-83e5-76a9292c8ca9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8885a141-57f1-43b6-b42a-5a8da151b9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bedf7ddc-740f-4817-a2b6-bfa7d8fffb04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88609735-581f-41fb-a176-5a4baca26fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbbffb47-7ddc-4f6b-ac74-8f0612277acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa9f052-a7a5-4070-875a-da6e2b150c61",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d03dfc-e802-4b19-abe6-abad10343803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4204e372-f48b-4b70-b724-2c9ac0d1a8ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc23458-440b-41fb-8b32-0cfb3312e876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a2ec4f1-7e3f-4b24-8c3e-96e32f65216f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985201fa-aee0-4dd6-8eb9-cc435c1845ea",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4da04c-8bf4-4453-99f2-7e084b55fda8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73f7be3-884d-41c1-9a55-074bb9857de3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d360fd-fb94-47ce-adbf-31ed6b0b92f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fde5c4e-5b8f-4caf-b323-c198f387b991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b288fc-7c8f-49ea-94b3-c283d55eb7f6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30dcb4c2-9414-4b19-8c8c-343954404317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a397a9-a045-42c1-8c90-f36c2927f7df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec21f7f-1af3-4a2b-8c5a-fd3a230b6778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "757e041b-5e0b-418f-b1a4-db44e9aea5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc41dc07-7f27-40de-ba2f-a3ae73d9519d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57989eb-6ff8-40a9-a0ff-d7cb86ed0a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb24e49-714d-44bc-a19b-d8edb19f87c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf5de84-67ba-49ed-a4a4-11c151939745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1bb4f27-025c-4e07-a206-ed32b661945e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81b6174-eaa9-484c-9c35-4e52da6841c0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bdf3f6-79ba-4c87-bd25-50218d673e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d7d975-14d7-4047-9b8a-0cdb420dd4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "515cb2b7-c5e2-4203-8ab8-de5f31ec9228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ee9301-3779-4769-b9ed-3cbdbbfb7537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472d4dbf-c7f9-4f46-bc3f-94323acce964",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c0fbb7-e927-42fb-9bf0-3099189c1985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255e804b-b961-40f3-862c-11dcddd55b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "120fefe2-37d3-4b40-9333-55a288d2d1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92960ac0-488d-4570-a151-05aa119aa1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d89a70-f009-4b1b-b679-3b0331e8709f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61ccb7f-da26-46cd-be10-c039112d3306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b69860-b7e2-4752-a3ce-761e373fd8b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c15949-ed89-4b9f-a0f9-0221b5b2e395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b4cfa1c-bb8c-4753-ace5-c0031860141e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e839eb-a23c-422d-9e5c-9a92fa809e57",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f65707-436e-4618-a323-6e1bf5c497d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e1388a-f585-4a9f-9537-a47ee28e26aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485d1ce9-6a20-45d7-a5f6-77a1f1cf6508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2004fe-cadd-48f9-9c75-e27815bd0118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a0aad3-d0c1-43b8-b1c9-245c9ab396aa",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b41d79-7ed9-49cf-aa10-1790aa297ecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "609b7353-698c-4bd3-a798-94d91e2269e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb2f916-598f-480e-8150-96e28875eda8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d3399a5-b3c6-488c-8cec-333e41ff4d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c62852-7fd9-4c5e-8f80-7b8311ab4cbf",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d6a666-1fc7-4840-96d5-29d47473549d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead83afc-650e-4c74-bd6d-77294a02d728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41233c29-0279-460d-a1e9-4d6c5dea3f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "588a0607-6aed-4831-8634-c28e0870b345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ceb0ebb-8238-4546-ac55-e1c2999fcda1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a19f47-807c-4c20-9be1-caf43092361c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c35ba83-79c9-477c-a82c-4a37e9ac2c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa4c04a-258d-4d36-a69e-56edca853a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1db6ee05-0c3b-4af4-8547-01c7218fbff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a3ec8a-5d83-4582-8736-a70cbd765c2d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d43f5a3-e43e-4649-be36-602391106f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16853ec-f2e1-4699-a691-05f6b29e36ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6b90c2-ef42-4cd3-9277-9b6fc89e3b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bbfb8fe-cd84-4ecc-a2d7-304b3713998a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8deac5cf-85a7-4398-bc6b-5ed0186328e2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f265b59-627d-4c26-a88d-e668fdf4e79f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b2b4fc7-7628-42b7-8b80-02277e1ac17a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf0401a-b4e9-4be3-9c4b-0637e1016fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf42ed0-2d74-41b2-8df4-f6d90d834f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc05be7-98bb-4cf9-82be-edcb698b64fe",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dbfef2e-1471-41f9-94b7-ed67838fff29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b568ea3-a62e-4c57-89a5-858b5d2d4469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "073b00d6-21f1-4796-919f-5e6d7a75cd2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef11bc20-046b-4f3f-83c5-e712f7977c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526b033a-25e2-4b81-8939-776a6b0d8737",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8655c4-423b-4727-9f5f-55077cd1738d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e731a8-ba05-4925-936f-f89ea349d9cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8b4afc-895b-417b-ab9f-43027f432ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de8c489-7dfa-4858-b182-64b546f16532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f530e08-b2bd-403d-a7d1-00d4dfec6fa7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5b3051-983c-4809-b6df-92aeed50ca12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6215815-4648-4e7f-b529-c430647a38e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe019340-75ac-4bf7-9f6d-462c78558c1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e27e7d-f8ca-4578-9b24-880b09fa686a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb15592-ae8a-4543-b736-4692cb545293",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8150d9ee-1b83-4481-80cc-a391e5e4d8ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e037ebf5-c92b-42ba-98f0-b244aa80187a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "972f0966-ad57-4f4b-acfe-2c4c673187f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "725d2e6e-930a-41d1-b847-b45e5824bca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95400b1-0d28-42dd-89e9-ed78482f7009",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354ea3a0-94ce-43b5-be03-8710f6f9a6a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46198c4-a970-4024-aa90-5e5bd557765c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd355aa-236e-4ea1-b0a4-7ce3911c4c90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3396bda9-8762-4fac-b634-076fd1fd44c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924beb1e-169e-4ae3-9fbf-2305199adb0b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd631522-f751-4749-a5af-67e68df4f2e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930578bc-5527-4a91-aeb2-dd3e75042b32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4655ff06-8d90-42c8-b00e-5e672a361ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe9c93a-7397-4ea9-8e69-3bc46926af8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7314412-5660-48a2-9ab8-7369d44025a9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051f726a-6f37-4c27-a45c-e77d45ea6d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f9154f-c698-4a71-8d22-5ea09ed6086c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9954cd5-0781-4d56-96f2-0e365b05e753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "422d7c8b-34e0-4346-8e0d-2766378ee3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74b854e-2daf-46ec-b79a-86c814bd8ddb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e82fc24-1747-48fc-ba7c-9e4e8b8c9292",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb59097a-c9b3-4a78-850e-d489e33598c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bee30fa-6be7-4da2-b56c-12bfbf5c27ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5c8470d-e6cd-4258-bec9-dadc0642afab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72848d7d-5f67-4486-89c6-392b4db677a4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f864d1d7-53b3-4949-97c4-f169155c5f7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "671d3f4d-0f93-4c5b-b6bc-33ffa25ffdfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de1d3e6-1701-4492-abd4-c9722a0bb74e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4df1171-f159-445b-a13e-2d5710afbfa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199fcda0-43a7-4813-9029-86fd455baf5b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c79d4a-fc68-4ae7-be29-92f9189baa89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba7e5c60-f410-415a-976f-e24f056e8f5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb8ee6e-1d05-483a-ace5-8e2d449b28bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df561953-ce22-45ca-a3d1-51cc26cc67e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad1faaa-3352-4a31-9b99-8daea45f428e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76809890-62d5-4678-98d8-1f1109f0599f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "886de6f3-faab-467b-9493-a4fe2175fb24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b0826e-e02c-4656-9201-9343a5b1e5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b892c1-da19-413d-a93d-11097a79a5d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe3faa5-5972-42c9-ac84-b3b234f6e400",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96310137-15bf-4c08-bd5e-1827df0795cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f55ed3b-d25e-411b-8c7b-b1c3f2146c9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3b5057-9871-48f8-9b27-df75e7d7027f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "429451ff-11c1-4b0c-bca5-25a1f55be36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115911f1-36e5-40a5-9375-27f5d0ddfed3",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604e858f-e044-43fc-a2d5-34fc3e3afef1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "687ced2c-dbc8-4d44-8966-22e1197a5936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0240f2df-7b44-43b5-9a95-9ed6b31c2f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c62b8f7-aad9-4e56-b0ad-925302295f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c929fbb6-5acd-4ec8-8e87-f0f8aec0b0d2",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ddb7df-2c6c-4456-a4ad-b3865b2f343d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b893dd7-fdc8-43d8-80db-94a49f2e6f16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "addb00d2-2b1a-4959-af26-0688df480f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544511d9-28ed-470a-8b47-de894a2da901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758e8999-088c-4d43-b35f-3290eddbe329",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73eb6209-31e5-4405-9e8a-f2a1503ff245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "355c846c-335a-4eae-9feb-7f5c5e5001fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91000e2-4803-4431-b452-b94af14a7f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20eecaab-d0d3-4ad7-a6a8-f799fb03948d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbe1330-b01f-4810-8fd1-c3cb9dbaa073",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb15c48-fdf8-467a-868e-865aeffdff20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "933282da-f996-492d-8841-8875f1717ad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f47ceff-59f6-441d-98ce-7b81b5ccb816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bacb1c9-df08-41ef-b985-5a09cbb22ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8afd41-f609-43a6-a751-d468e7acd3d2",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726af974-4d22-4623-9eeb-5c65f02400ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ec3dda7-3a0d-45b8-954b-e0c5ca7fbddc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38266184-42ee-47ee-802d-7159a6591a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c668e154-51cb-4256-b8e2-9f75106119fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d30b6c-807c-4a93-8dcd-65c71313dceb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e513b46-aec7-4615-a102-0c2124d15ed7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5bff44c-f146-40a8-a21b-c9c0ec50ba37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d132aa17-4da4-421a-b9dc-8517b230c8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f95ecb4-7431-47f5-b768-c5fc32f38357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131ee3c9-6ba0-479e-8680-278d94f56f8c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade7a7d1-3532-48c5-ad93-d2b89b05ba62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff70dc7d-f20e-4991-af61-74dbdc4c3599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d081ad6f-66ee-4199-b9bb-4746d46ec8e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87983d0-8fa3-421e-a818-d3b6fe398461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6528522b-b3a2-48c2-9f4a-0cb7e70bc150",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45432103-19ee-409a-a78f-b12713121ac8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "247abd07-f0e5-46a9-9d85-20443c21d315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb0fb9e-2062-4d92-a065-282519b12dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d4a6cd-03b7-4c90-9344-5fe9f7c0190a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d385c2ea-f098-433a-bc87-fbf081ae98dd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7899c0a-4339-4e95-b4a8-e7751478c367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2634d3ce-dac9-41b3-b9d7-f6bde82e2748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1029be-7b44-4bc8-a914-e0cd181b24c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34342777-bb01-4e83-b60b-9bab4d2b586f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6126d11-6336-4de1-83a0-316e26df3609",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536b02ba-e351-4031-b635-b47f1041ad08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "023a6299-87c6-42cc-9521-4e43e4263570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79fee152-2499-48e6-a114-5152bbc17cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7620acd4-2489-4b59-a607-f2e8983eed44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec4461f-fab1-4f38-a351-4ea5c017416a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbba9494-c093-4564-893a-bc48790b3a8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b99cc340-c479-4362-a7eb-081c61612f79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6f65a1-9ffb-47d7-a9b4-099a7fd14fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e763fb54-f0a3-4f65-973b-ac3432771940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfd5a0a-ff77-4f65-b121-ece26c61e3e2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f53e01-a2d1-4097-9687-7df72a99ebe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aca43692-c31e-4705-aacb-b5f1c470f67f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc949b4-fc70-4c2e-b00a-37bc4eb6f1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d26807-bfc5-4f61-bb87-efb7f07230e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45806bb-5a92-4850-9b91-9819f0cecd44",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7e43a5-2e63-40c8-8bc2-e961198b67c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fd2d551-a471-4262-8af4-0317286e11f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e290087-e263-48f6-9636-595be209156b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f43ad82-8993-4a8b-bd55-1bf444302d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d2962e-e193-46ac-b95e-4ffa70fa6ac9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0b7556-85d7-44f6-92b7-e0fba3d900a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed495cca-00b4-4f47-8aae-317e664db920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c291272-424a-4e11-abe7-e8bc1233a4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149c5137-a992-4e15-b623-b2dbdf04c3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ceb579-667a-4322-920f-9974b72919d3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cf8969-ced8-458f-af0d-d1281f41c60a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d2d35d5-62cb-4e33-bce8-8b885fbd9300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7086363d-4813-469c-b9d1-9fec88f4418d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d50782a-2256-4852-a0d2-913eed2df255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae715ae9-d272-4e20-83c4-4326a66f46fa",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c987628-2d08-4930-904b-592b5cce9cb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1e5fdaa-5e2b-4e9c-80e0-822ccee4fb42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e00390-12f6-400e-a955-81ead99be2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f09c6f-d0f7-48f2-bd68-5394f641353f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a716ebd3-02af-42fe-8aa6-8adc0aaf675e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19c593e-7284-4bfa-8b99-0e13b6152b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a05599e3-0583-4a3c-995a-157337479967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0d5e74-eb47-4b6f-8568-1829ddc93701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b1195b-1652-44e7-ab8e-446ae0bfdb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bd0a90-ef3f-4b2e-88e9-243b01da947d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee6de79-e71b-4061-bd8c-17c5cf9ee609",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2e00254-2eda-469f-9708-5ee69eb22e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb78796-42fc-4bab-b993-2b16582c9dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4714db81-4d46-4443-926f-b15b9df8f598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93515a1-e42b-4a85-9ebc-afb5ac8e186e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0654c93-7802-4947-8b1b-16ea5b3e8f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99e20ad7-6a6e-41b1-bd6f-2ec43aab6831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8725345e-b60b-4da0-870a-df32389bcaa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb527c52-8bc7-4573-9388-7bf1d92e46f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f4ed9a-aa87-471b-8aba-a7d6d5251e68",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7be08e-4bb4-477f-9aa7-a517dc43a27b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f94623-7de4-4020-8646-5b1b72fcfdbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "336a93de-725b-4821-8250-6fad5e3d6f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c0c0f80-9c5e-4bfd-8077-62b3f946e57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc00dae6-6c7c-447c-97fb-7372b8a003ec",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b412e9-0bc9-43b4-8fca-179668c79812",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b15a4668-6a08-4475-a7c7-3bb6e4691fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6109b6-5272-444a-ac54-5742783284f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe161788-01df-442d-a487-9273a3edfa8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e5d5d2-771d-44a5-b2d5-45e7426168d5",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbd202e-e3de-411f-98f3-dd115f03e0da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11bd9d6a-3550-47c4-8acc-3c4fef10a6f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066288c4-f496-4f21-a2ae-27186358d708",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6665bdd2-5eaf-4aed-9207-f616fdf99490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5424f1ba-6952-4aef-abda-334dcf1b7a7d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11df718-bb65-49f1-9bec-0149b6e960ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78af9ec1-3ef3-4fed-887a-15bc3ff4c652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12be9f7-b6c6-47e4-80a9-4e0652de2858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f19e678-287e-4e8c-8ffe-508d70846b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdfa4c9-537e-4bcc-8c98-f2f2031ebac1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aadade7-3e6f-40dd-992f-61932dc99ba5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99f229fc-6b3d-4064-adac-3f282c824198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d994b03-3fae-40ea-9c54-5d9df655ec7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dae57d3-be32-4c54-9b44-14654043ff41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acaef711-06ab-47cb-a2bc-0148151954c1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8c96e1-dab8-46ce-944f-017aebcbd417",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10ebbb25-21a4-4a88-9165-c3f7fe2882ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdf88c36-4176-4475-8c11-ffb2a947bf21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3530d724-4936-4d2c-9716-499cc196cbfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de11108-4215-4582-94a3-ef70a66ed9ce",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05409ee4-aef1-44e3-ae33-7525b856e215",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b626fa27-f2ff-4394-bace-75ef122e615c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5c4535-b0cb-4d8f-8fb2-1e6e948d3f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef2388af-db73-42b3-8ebf-3b6471fb9821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78aa878a-80b1-451c-a2ad-104a27122f89",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d42fba-ee2e-4d05-ab69-e54746b7b1ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ecbfed0-270e-4fc8-a850-fef8139e761d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1fe785-96e3-4cd4-8cdd-56c39e16879b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51edd5ac-21e3-4262-9161-fcce8bf96e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6df7479-273a-40b0-bdc2-aac5eafda48e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa81753-0c5a-45b5-8983-13443e8ccfca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6ed8db3-04bf-4746-ae81-d138bda2f0e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4daca7-fffb-4326-818e-37345a8573fa",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d6e1a6-9fa5-4392-9a19-6b236136cb1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a1b287-501b-4f53-b04d-170462895c16",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05de9dd4-0df3-4507-9eb1-c884c0f9539b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4785baa-cbd1-414d-a264-9b0616cdd98d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd443b4a-16bf-487b-9d77-945655a85eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54e2b6a-38d8-453d-9db8-bad2eabef7ab"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c598fea-c83f-4899-8417-7540126f1bd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df77b69d-4a67-4ef1-97da-29fd9c04983d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "814c05c5-2176-4270-a061-3f53a2fed682",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1898092d-3f03-4ef6-b549-210b21389e6e"
                    }
                  }
                ]
              },
              {
                "id": "db0754e4-420a-4d76-90ed-012faaeb3f25",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "22b7cd1c-7df3-4b45-ba88-742db3339929",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5df982-c8f0-423f-9bd8-f710952e029c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c4ec8338-7241-407a-b92d-5d382454021f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2366f7a2-3e3a-49f1-955e-c88cf16c668e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01d80a3c-b541-4ec5-9dbf-75b084a4b7b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a0ac978-71dc-4bf5-918b-eb4ce00b158e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e76f475-4fc3-48fd-a96f-2c17f64ed194"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "03eab75e-ffdf-47d6-a26f-57ba6db08b1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "169a6bef-08b2-4386-9d0c-d916465203b0"
                    }
                  }
                ]
              },
              {
                "id": "0cde8d98-b6ac-4220-85c6-c80ed5d3dcd6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d82f30d9-0069-4b98-8893-6cda392c280a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468235c4-1e4d-4eda-86d9-a56d20316b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ba1113b6-42d8-40a1-a231-f6548d52213f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a33f115-145f-4180-b48b-9fc254e6438f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "251fb856-90f2-402e-a402-e11c850c5f8a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e69f4a32-464a-4533-ae41-0c194fe62ec2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "50ca62b5-4df9-4168-9f25-18777e8a154e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d2a6b97-220c-4359-b55c-936f8d420717",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "683fbde6-54cf-4284-857f-071898abd431"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0b294e9-6287-4e99-b35b-b6ffb1ac0bf0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4dca7f54-dc42-4461-9b6e-3b0c8c8e8521"
                    }
                  }
                ]
              },
              {
                "id": "4dcfc939-523c-4611-9abe-6ad9ea7de7be",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c793ea37-677c-41e1-9bd7-c1be58b25a55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5febd48a-6de6-45b1-a763-59400f689822"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "263753b8-f64f-4f4f-a2be-778e59a3867e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8200827-867a-46f3-a02e-f9d617cb589c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb271fd0-19ac-4531-adaa-30ec05b9356a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b93e51b6-9739-4745-99e2-40f61b3b6a52"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37100d9d-0828-4905-a1ba-fe8d84a9811a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "495dac5d-2b73-486a-ac0d-64a82c796c9c"
            }
          }
        ]
      },
      {
        "id": "565d5f8a-9acb-41d8-a66a-8ec2896d2d4b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e7606384-0391-45ed-a05d-fb615761f19b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13bc7fa1-578c-4b14-8640-b41f832568f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e96b98a5-2535-4617-9c41-ef3f22b9b64e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eea99f0-d62e-4f88-85c3-024e60e3ad97",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "aa1910a7-3bcd-47cb-840b-aaf3cf76700a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a632f7ac-14d8-4a68-9c50-b86902ff92ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "210ddc0d-7413-4d81-adf0-f5f64067632f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b26dac28-a878-4d8d-9182-8031c8493c77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9e5446e-cdf2-4bcd-968e-f3e94ccabfff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "078fbda7-4d31-4a3f-82f4-70861e99f0ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3754ba34-79b9-4495-9c0c-6e3fa48077d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4cf28342-ca75-445f-88aa-97381bb71aeb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8a57a6ca-9332-4ce3-90cc-6229dcd3f2bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de4b6e23-0d94-46c3-a37b-37a91786fe50",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2710bf3e-c17a-4621-b280-41f697107561"
            }
          }
        ]
      },
      {
        "id": "47cabadc-c942-47ca-a38f-bc73d3994574",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c24e314a-6a9a-47d0-b739-776cb25a56b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "726ba224-39f3-41a3-bbf5-b895ef72a781",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e61c7c4-f0cd-4e9c-8725-04f63382a8e9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d376faa1-bdbc-4c26-85e4-5068d3567640",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2815c0e3-05b2-4dbf-ab22-4925cd886249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f74785b-5d68-47ea-a6a3-7133fb1f89bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77906e9c-40a8-4ef6-8029-8902d5de9820"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4ecd61d-272b-46a3-a8c3-4b426814a19e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e38e1720-b720-411e-8723-fdff89ca35da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d66bb2f-d86d-4f8a-91e1-49645f73355a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "336523f5-40bd-45b1-905c-903cdb1a2cc4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e240c9bd-14bf-4366-86aa-8977db0052e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cf029194-da36-492f-8d50-a733a25edf30"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1513218-d5f0-4da1-8541-d802429cdaff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d933c5ae-4aa2-49f6-ab97-31e40aecf431"
            }
          }
        ]
      },
      {
        "id": "f7a5df95-804b-45e3-b33f-99edf6c4a355",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ae9ab81d-4b29-4d4a-8b59-8191c6bb7365",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e76c2c7d-993b-44db-a843-1d2fccdb4f35",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f6eaf6cd-2f7e-4175-adc0-75c5db6401b2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74618d3-f22f-489a-b6ce-718d1d586f20",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd2d6b75-a59d-4909-8ca8-03cfa5041014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fcd00d-e8cd-4322-a486-b8d69fa75b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f33796c9-cc36-4fd1-ae1b-6416b86f5a3f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29193bbd-05ba-4fe1-b492-3143ca42ab28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49564ba2-e07f-4ccd-86eb-7f30ea0eba2c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38187496-d4ae-4be7-80a3-3b0f701d9191",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8179169-8113-4a8a-9cd7-38d5424e819e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9e048ea-032a-42c9-8550-bfd63569ac5c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "349d796a-ac24-4096-9369-772a58ea2542"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2ef012f-e4c7-434e-a859-bb3396e19f74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3c5d617e-f32a-4633-8c49-6ffab7505d51"
            }
          }
        ]
      },
      {
        "id": "31abab4d-e216-4ac2-ac16-4a15dc917f22",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b9ad02d-2259-4800-8309-13e9fc4db71f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17f39f90-1761-4cd0-b5c7-ff3593da6f63",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6ce8fe44-c5e2-4aa5-b9f6-065309ee7d41",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cbe2daa0-f502-43dc-8553-079d9696e761",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "559d7f38-fc30-4e9b-9ee8-bc704ec5fede",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 110.89436619718317,
      "responseMin": 13,
      "responseMax": 1898,
      "responseSd": 214.36474141664823,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1697330183560,
      "completed": 1697330227361
    },
    "executions": [
      {
        "id": "b6bda1e9-3bcd-44c6-b4f1-1267fa300615",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9a3ae4d9-7a05-45da-96a4-8f80fd1dcf14",
          "httpRequestId": "13969e65-846b-4580-9907-05bd283046c5"
        },
        "item": {
          "id": "b6bda1e9-3bcd-44c6-b4f1-1267fa300615",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a635ed46-c90b-4c78-b39f-0a68cea19c3f",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 0
        }
      },
      {
        "id": "5e315e49-81ea-4f39-aad4-f6955b5cdcf6",
        "cursor": {
          "ref": "b0323a86-8c40-40d7-a595-db339a38ef7e",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6a0a5057-8354-47c6-b109-5f34724467f6"
        },
        "item": {
          "id": "5e315e49-81ea-4f39-aad4-f6955b5cdcf6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5ba51dba-0099-4a73-9831-df5290f8d178",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "dd0f882c-a48b-4a83-94bd-ff4b495064c1",
        "cursor": {
          "ref": "9490b3a0-341d-4144-8be1-c89d8910e2f1",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8ba38c44-a782-46da-90c6-d04563ec294b"
        },
        "item": {
          "id": "dd0f882c-a48b-4a83-94bd-ff4b495064c1",
          "name": "did_json"
        },
        "response": {
          "id": "bc1bf6a6-fc60-4d4f-94b9-20b6b7f9add3",
          "status": "OK",
          "code": 200,
          "responseTime": 216,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc07f8ed-09b7-4241-a783-99a97480eccf",
        "cursor": {
          "ref": "c3c4535d-4fe7-4f31-9128-36caa468a0c0",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1d4cee4b-031a-4989-9ab8-de417644aef8"
        },
        "item": {
          "id": "cc07f8ed-09b7-4241-a783-99a97480eccf",
          "name": "did:invalid"
        },
        "response": {
          "id": "ef21f8d9-ffc0-4945-b64c-c5d02165d38e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc07f8ed-09b7-4241-a783-99a97480eccf",
        "cursor": {
          "ref": "c3c4535d-4fe7-4f31-9128-36caa468a0c0",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1d4cee4b-031a-4989-9ab8-de417644aef8"
        },
        "item": {
          "id": "cc07f8ed-09b7-4241-a783-99a97480eccf",
          "name": "did:invalid"
        },
        "response": {
          "id": "ef21f8d9-ffc0-4945-b64c-c5d02165d38e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d4188a-9d40-47d2-a0e5-de9879525b01",
        "cursor": {
          "ref": "d9567525-fe51-4cd8-bce3-f6b67b33527e",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "51ae3b70-4b13-4b18-a125-01d9a1627aa5"
        },
        "item": {
          "id": "02d4188a-9d40-47d2-a0e5-de9879525b01",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c6574689-8617-4635-8e20-a1730e2ef09f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 116,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253f6e07-184e-4eb4-b7cc-e2fe2d242de9",
        "cursor": {
          "ref": "4ce8b1de-916e-40a2-8e6f-89beaf7e0949",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9419d946-edd6-4f7f-b585-e25175307fe3"
        },
        "item": {
          "id": "253f6e07-184e-4eb4-b7cc-e2fe2d242de9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "34251462-e350-41ac-a091-25dfdd3c9273",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9a5eb2-9196-40a1-930c-052734a8156b",
        "cursor": {
          "ref": "9a70a947-abbd-47db-b9eb-2c493ae3ca6a",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "988dff4c-1e98-4561-ba72-195ec2eb7a46"
        },
        "item": {
          "id": "df9a5eb2-9196-40a1-930c-052734a8156b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2c36e86d-3fff-4dae-bb8f-b8f01c039635",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4961390-3118-4928-aad2-2d75d1071913",
        "cursor": {
          "ref": "87867217-fd90-44ec-a136-4afe887fb136",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b5e4810b-c9c7-47ba-bcfc-bcc97b193997"
        },
        "item": {
          "id": "b4961390-3118-4928-aad2-2d75d1071913",
          "name": "identifiers"
        },
        "response": {
          "id": "fe040f82-ebfb-4367-82dd-be47f21e9f13",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b5e4d5-71ef-4e42-bfdf-4687a9116727",
        "cursor": {
          "ref": "e2c94af4-5dcc-45c1-9593-0bb8fb093c31",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "28c98400-f2e4-463b-9d5f-c81941a584a3"
        },
        "item": {
          "id": "12b5e4d5-71ef-4e42-bfdf-4687a9116727",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6f484182-5733-47f0-bbf6-109239f76ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c959cfc4-89ef-4e9e-82db-4da318293a43",
        "cursor": {
          "ref": "57ea7b56-4c2e-4e54-927c-4489c0a4d3cd",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b10b5abf-517d-40df-91b9-5b4cabc81ea7"
        },
        "item": {
          "id": "c959cfc4-89ef-4e9e-82db-4da318293a43",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1c5bfd5f-0f61-4120-a474-538000cd2096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbd81de-7320-4d0e-9ebc-430c65062de6",
        "cursor": {
          "ref": "de559055-4124-470e-8425-9480cfec818b",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "01a037d3-25cd-477a-8a8d-a989e7b61673"
        },
        "item": {
          "id": "1fbd81de-7320-4d0e-9ebc-430c65062de6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "18b07624-1e1f-4bb5-a3e5-374a6e2737f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05b42a9-52cc-4aed-ad79-c1bb5ab4e205",
        "cursor": {
          "ref": "b55cbeea-1bfc-40c4-afca-45af44f1253b",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b203d329-abfc-4e7d-ace2-9fe557151d44"
        },
        "item": {
          "id": "d05b42a9-52cc-4aed-ad79-c1bb5ab4e205",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e0ad6f4b-55ac-4f99-9302-726c78cce4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab0aee7-dc18-4805-8478-e402a2ec186e",
        "cursor": {
          "ref": "76fc1bd8-25d4-4f95-b1a9-f20e514630e6",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "79f91747-e039-4074-b3f9-2ba1db0330a6"
        },
        "item": {
          "id": "9ab0aee7-dc18-4805-8478-e402a2ec186e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6d8dc77c-3b39-4ade-bf12-10cc4f1b16ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a122428c-63cf-49bf-bfc8-1c4099d6668d",
        "cursor": {
          "ref": "54e663a2-b947-447f-a35d-640c21a02f4b",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ce1ca81e-7fd1-4781-ac4b-6d795fa7b79e"
        },
        "item": {
          "id": "a122428c-63cf-49bf-bfc8-1c4099d6668d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5880d191-dfd8-44f9-a392-14dae6bae404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a91564a-9189-4521-a4ff-ce23334e8729",
        "cursor": {
          "ref": "46cc1189-60db-4992-82d5-53e488aa67e8",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3a4852e2-f612-498b-8848-a8edec9ea17f"
        },
        "item": {
          "id": "5a91564a-9189-4521-a4ff-ce23334e8729",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3a16ede1-0ad1-49d4-88a6-eb1a762b28f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e55cbf-43d9-423a-8e97-02691e8ccd63",
        "cursor": {
          "ref": "55567ca1-d147-44ac-b065-0658ef890666",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a721e841-9fea-45b8-a02a-9429f1b6563a"
        },
        "item": {
          "id": "00e55cbf-43d9-423a-8e97-02691e8ccd63",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f002b20a-d518-4dcb-aac9-0a7260d8461d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383760af-a23f-4b98-9647-99af1dc6d328",
        "cursor": {
          "ref": "840c3a15-1837-4361-9adf-57d7bfdaf4ff",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a7efe521-4b81-47f4-8e2c-5278f5911d6d"
        },
        "item": {
          "id": "383760af-a23f-4b98-9647-99af1dc6d328",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "efd623f1-552d-4706-a65b-e6557c078be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4241dfe3-5f77-479a-a80b-d35c18c4c15c",
        "cursor": {
          "ref": "7334ce0e-24e6-4d47-8115-52f5539ed6a2",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9654109b-f07c-424d-add3-748c3500f519"
        },
        "item": {
          "id": "4241dfe3-5f77-479a-a80b-d35c18c4c15c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "840a268e-8e2d-440d-b936-d5da8b5f7631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f61ef98-66dd-421a-9cd3-49a0befd14c9",
        "cursor": {
          "ref": "2cc6248f-0f6d-4828-b69b-0d5a045020c0",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "664785a7-ffc7-41d8-b4e4-0c80f4a01f73"
        },
        "item": {
          "id": "5f61ef98-66dd-421a-9cd3-49a0befd14c9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c8d23c13-6ad5-4917-a6bf-00b6abd8048d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91715940-80a5-4f04-b349-aed73875a986",
        "cursor": {
          "ref": "9250deba-83db-4568-925f-14a6dfa68011",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1fbd9a97-43ec-4b9c-88d2-9cffc1b497a8"
        },
        "item": {
          "id": "91715940-80a5-4f04-b349-aed73875a986",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a2c6cdc0-a7a7-413a-8559-fe489eb733a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc288d16-7475-48a7-85e3-05a0e749dc89",
        "cursor": {
          "ref": "85eed0e6-f5de-494b-84da-0615350e9935",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6f3beed9-3d3e-4e93-9fe0-dd4c7b479831"
        },
        "item": {
          "id": "bc288d16-7475-48a7-85e3-05a0e749dc89",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6a288e5f-b49d-43be-9d6d-df30543134f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bce6697-9d1e-48f3-8c80-7141bf77c4f1",
        "cursor": {
          "ref": "4026124a-b491-46a1-9849-ca7c40d7ae76",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ed1685d2-f6d3-4f5c-98d3-f021398a95ad"
        },
        "item": {
          "id": "7bce6697-9d1e-48f3-8c80-7141bf77c4f1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2470e773-2eea-450b-b002-c352a7e70f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bf705f-87aa-4dd8-945f-52460b0016ef",
        "cursor": {
          "ref": "4809d276-3625-4a97-8b7f-49c7c52cf22e",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "deb5ee10-6138-40bc-a5f6-f32fcd6a17af"
        },
        "item": {
          "id": "d6bf705f-87aa-4dd8-945f-52460b0016ef",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ec6c7494-41b9-4f44-a54d-4cda5c0e7410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c196545d-69f5-48a2-9e4b-50efe135e26a",
        "cursor": {
          "ref": "c80262ca-f863-4dba-b382-fa65296f30c2",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "05c51d18-00cf-4148-9a91-5f8f94c4c053"
        },
        "item": {
          "id": "c196545d-69f5-48a2-9e4b-50efe135e26a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f695af52-4bc7-43ad-aa03-a483434a9620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1766e5-adca-4d45-b394-adedebc4f792",
        "cursor": {
          "ref": "00bdb9bf-547e-467d-88e7-a87c6e383b8a",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "52151fe3-a27c-47c3-94b4-dedba717e347"
        },
        "item": {
          "id": "9c1766e5-adca-4d45-b394-adedebc4f792",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1f129b2e-2aac-4240-b285-60f73cfc436c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279cc98d-61cb-456e-a09e-3de7887500f2",
        "cursor": {
          "ref": "63056bdf-cbee-4363-af2e-7537751eaf1e",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "68bf42be-3e59-4842-8b30-b2c6b23561ec"
        },
        "item": {
          "id": "279cc98d-61cb-456e-a09e-3de7887500f2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "53ee7f6e-d9e2-4774-8a74-99949e9f6e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad30fb6-3d3e-44a6-9086-6443931111e6",
        "cursor": {
          "ref": "bee506de-67c0-4ed5-ad2d-d30f76592ef6",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d35bb5b3-7748-4f9f-8754-beda07ae1793"
        },
        "item": {
          "id": "fad30fb6-3d3e-44a6-9086-6443931111e6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e94e5783-a8db-4abc-8837-59273513f9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4f0ba8-3eea-4a19-9a59-fdc11881e64f",
        "cursor": {
          "ref": "cfbcd04c-3949-40e7-b27d-e2f938e65b90",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1de39a7b-d161-46d7-a5a1-152799dc8088"
        },
        "item": {
          "id": "7d4f0ba8-3eea-4a19-9a59-fdc11881e64f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8486b81f-d437-4781-b7d5-63849e984dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9158dd4d-09b8-46ef-b61a-9de29e52046b",
        "cursor": {
          "ref": "d101ddf7-2826-45fa-89a6-34ff43d810cc",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fcdbbb2b-9b0c-4000-8ea1-c6f722d43cd8"
        },
        "item": {
          "id": "9158dd4d-09b8-46ef-b61a-9de29e52046b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4963658c-fab0-4425-b250-cd9f1ea0c3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67cdb5d-605f-474c-bcce-981a0552dc56",
        "cursor": {
          "ref": "0d4a34df-d469-49e2-b7a7-06db55e979fe",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d5b70002-1abc-4717-8fd7-71d4b077f28f"
        },
        "item": {
          "id": "b67cdb5d-605f-474c-bcce-981a0552dc56",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6f998723-3856-44ca-820c-3af714202ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3dfefd6-91eb-42be-bf10-db9d02f69444",
        "cursor": {
          "ref": "b95e4f7f-1d03-43d8-82bc-976df2826a1e",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a88551f9-684c-4080-8ea8-c1adb0ebf0c0"
        },
        "item": {
          "id": "f3dfefd6-91eb-42be-bf10-db9d02f69444",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "65f97bfb-4c01-4c12-8a28-36ab295a7946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db6f3ea-6021-4597-9b02-529acfe7159b",
        "cursor": {
          "ref": "945561be-da61-42b8-a0e3-353263e6d183",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "99d1f544-7a54-460e-bc82-5cabf9a49d27"
        },
        "item": {
          "id": "3db6f3ea-6021-4597-9b02-529acfe7159b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ae21ad06-0df1-4e2b-af1c-2af99f710040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e586a2b-e69d-4376-894d-53b2c41719d1",
        "cursor": {
          "ref": "991cd53a-bc1d-4348-9ed4-f15328c93ceb",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3605764f-46a5-4002-8c82-b8f0f85447f0"
        },
        "item": {
          "id": "1e586a2b-e69d-4376-894d-53b2c41719d1",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "11bffb52-cc3e-43fe-9791-fdf29ed8f0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84b5b19-9bb5-4154-bf91-89bee5c8e0c2",
        "cursor": {
          "ref": "3caf757b-a67b-4dcf-b7c4-ea0cd554e57f",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "eda00314-d877-44c9-808e-d51a09c522c3"
        },
        "item": {
          "id": "e84b5b19-9bb5-4154-bf91-89bee5c8e0c2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "13afcd3e-515f-4263-bf10-1f46aa5cdf24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0a6045-a8b7-4db5-b590-4024fa7eee91",
        "cursor": {
          "ref": "b4a50e67-be6d-45a6-bcc3-c0847721b0a4",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "15b24607-c111-49f6-b9c7-25855610389a"
        },
        "item": {
          "id": "9d0a6045-a8b7-4db5-b590-4024fa7eee91",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "82372a48-7669-4c69-b35c-7bce26d49406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d23555-54ca-44bd-bcfc-cd37a2f14d82",
        "cursor": {
          "ref": "5b5eab40-61b2-40be-b35d-49d58df9788c",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fb1c6e23-f4ad-4781-a746-6c7ef938baa6"
        },
        "item": {
          "id": "29d23555-54ca-44bd-bcfc-cd37a2f14d82",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "610690dc-fa99-4815-b4b6-721ac3af152c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5e66af-1db0-49d0-adb7-c7d6cf0378a6",
        "cursor": {
          "ref": "fb531daa-5729-4468-9e74-78e864eeb23a",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bcc337a8-c8e3-419c-be08-b622f6cbe122"
        },
        "item": {
          "id": "8b5e66af-1db0-49d0-adb7-c7d6cf0378a6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "402336f7-8806-4a18-b1a9-d6aa1ba8f172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9f6070-6ef8-4ba8-b6c1-0da091f102d7",
        "cursor": {
          "ref": "ad5b66cc-6e51-4de2-9760-2f8d52576ad1",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "01649369-69e9-48dc-9c9b-4ecf3d2475e0"
        },
        "item": {
          "id": "0f9f6070-6ef8-4ba8-b6c1-0da091f102d7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6e15d627-77d7-4371-9391-6d6d01285ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09a4137-6960-4bd9-b25e-a44a3f76c555",
        "cursor": {
          "ref": "7b7cb932-1a3b-424d-a520-f19c647750a2",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "33bc1b54-062a-4b6a-aca3-9ccd11499893"
        },
        "item": {
          "id": "a09a4137-6960-4bd9-b25e-a44a3f76c555",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ba04fcdd-377f-4c3b-bfbb-693f155b5348",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b06c3bad-8fc5-4b54-a3a4-bf04a34ad2a9",
        "cursor": {
          "ref": "279fc07a-c600-468a-8f75-40fbd627f251",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d9a06510-cb92-41bf-879b-01f51cd196ec"
        },
        "item": {
          "id": "b06c3bad-8fc5-4b54-a3a4-bf04a34ad2a9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d60447dd-746a-491d-adc1-d9725d1ad322",
          "status": "Created",
          "code": 201,
          "responseTime": 1898,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9d8cb6ea-ca16-479c-be31-ca7ccd40e163",
        "cursor": {
          "ref": "c535f46a-765b-4914-93c0-48515f37d2e8",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "185ac531-fa36-41c3-9eab-5190b6575071"
        },
        "item": {
          "id": "9d8cb6ea-ca16-479c-be31-ca7ccd40e163",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0d9a1ec6-586d-4b9b-bcfa-da964071b530",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ff112e10-85a2-4aaf-b47c-10afdc16a39c",
        "cursor": {
          "ref": "a8c4f6bf-862e-40a3-8bc9-0923b64207b8",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6c5f2a1b-aa48-4a0b-a5df-8116795a69c8"
        },
        "item": {
          "id": "ff112e10-85a2-4aaf-b47c-10afdc16a39c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "99a2a4bc-c8e9-444a-ba98-3807b1667c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b16688d-b0a0-4e9d-aa21-af0f6bc4e7b3",
        "cursor": {
          "ref": "e453da86-3faf-44c4-b524-60a78896f2d3",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2a765c4b-8d51-4c1a-b472-beadfde2a990"
        },
        "item": {
          "id": "4b16688d-b0a0-4e9d-aa21-af0f6bc4e7b3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "99cc03ea-7ae9-4674-bc48-bde26a1835f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2e4fb341-73e2-4d4a-a698-dea5a283cbcb",
        "cursor": {
          "ref": "0ff013ed-ced3-4dbc-adcb-1e8aa2fd3de6",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "39ac2489-5e1a-4c7f-b1fc-6ebf166a4e48"
        },
        "item": {
          "id": "2e4fb341-73e2-4d4a-a698-dea5a283cbcb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6a1c1f6c-a193-4077-92e4-d89efdfce2fe",
          "status": "Created",
          "code": 201,
          "responseTime": 1344,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a2d28a3e-e416-44e4-9bea-624d35577c18",
        "cursor": {
          "ref": "6ae711ab-8010-431b-9bf9-6ee7531ba103",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a33d86a1-f1a5-4204-afbf-fabfe50fbbb3"
        },
        "item": {
          "id": "a2d28a3e-e416-44e4-9bea-624d35577c18",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d8abd74a-84d8-42c6-85f4-3d14a36c0794",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e72b2863-00ab-4210-baf0-3feef2e95560",
        "cursor": {
          "ref": "4f567e27-f075-4c99-a200-5a3820498d46",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cf87895c-80e7-468f-b615-50f4749d5a37"
        },
        "item": {
          "id": "e72b2863-00ab-4210-baf0-3feef2e95560",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "752b2545-b246-4eb0-87c9-f708cf71b58e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 608,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e99c981c-0e05-4c5e-8a13-85cffed5d039",
        "cursor": {
          "ref": "88a4c4dc-b6a7-4e5e-92be-9680a7b38b30",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "361cc5bd-9969-4d9f-9f7f-67e8d60f5834"
        },
        "item": {
          "id": "e99c981c-0e05-4c5e-8a13-85cffed5d039",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "dfd5ff63-f797-46fb-8b85-f6c82c349c9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1fc5e8bd-9239-420d-970d-88f9dbace1d3",
        "cursor": {
          "ref": "73e543a9-b2d7-4149-8ef0-2be13930ab10",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a635e5ac-c0ef-4679-83dc-b8e3135a2a7b"
        },
        "item": {
          "id": "1fc5e8bd-9239-420d-970d-88f9dbace1d3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7c127ed6-08b7-4630-8235-208754c99ab1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3d34b086-229e-45df-a878-644eb63530c6",
        "cursor": {
          "ref": "5fc65dff-5ec0-47a6-943c-37947ce1a684",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a1c33822-1153-4be1-9a94-89f8442b8b15"
        },
        "item": {
          "id": "3d34b086-229e-45df-a878-644eb63530c6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bc088d49-08ec-403a-b76a-032fc83f8556",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c4250561-53f9-4f65-b825-c1a6596868f5",
        "cursor": {
          "ref": "3b7670d7-b81a-49e9-a8b4-e16d9446485d",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "41e061bf-b234-4ff5-97a3-4d8c6a5565ee"
        },
        "item": {
          "id": "c4250561-53f9-4f65-b825-c1a6596868f5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8316b05f-2acc-477f-bcad-2bf7f6708cc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "14879741-2b68-4f6b-8807-c69758bc4575",
        "cursor": {
          "ref": "c52fde62-1128-4676-972a-6a286865c32e",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d5f975da-badc-4e8b-b16c-3ac4615637b1"
        },
        "item": {
          "id": "14879741-2b68-4f6b-8807-c69758bc4575",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "12ca6876-6315-4cc7-aa16-28e1004c2153",
          "status": "Created",
          "code": 201,
          "responseTime": 839,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1fb478f3-9fc0-43cc-91af-f767411c6ee3",
        "cursor": {
          "ref": "3da58be8-bbb6-416e-a849-592af6101fcc",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d1f82f98-1a24-482e-8528-a26b2951af2f"
        },
        "item": {
          "id": "1fb478f3-9fc0-43cc-91af-f767411c6ee3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d1aa61d8-8825-4f3f-a64f-af6ae5f87848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a7702d-ae02-42b6-a855-e3920a7f4770",
        "cursor": {
          "ref": "619e21e0-7acd-4d2b-92db-5f6e6c9f6cdc",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "99736340-2f52-4e27-9f32-bf0f20363069"
        },
        "item": {
          "id": "f4a7702d-ae02-42b6-a855-e3920a7f4770",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "25075809-3d6c-4598-9e88-5b6d56fe65bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9c4e7d-6f7a-404b-b28e-9c25a640ffd1",
        "cursor": {
          "ref": "7ae00e5e-16cf-4113-9d89-d835699b3145",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3aed9df3-a210-437e-9b20-ab4e1a3c835c"
        },
        "item": {
          "id": "8e9c4e7d-6f7a-404b-b28e-9c25a640ffd1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8c53018f-56ec-4158-93b5-bdf4fc5dfa73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3fd18f-6c10-4c62-906c-77f9d8c4f82b",
        "cursor": {
          "ref": "96b44cd1-84b1-4b19-930e-0ce2a9705144",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "09f1246e-3a8d-411e-a4f7-3f525be5a6db"
        },
        "item": {
          "id": "ae3fd18f-6c10-4c62-906c-77f9d8c4f82b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "882c4a86-a61d-42f7-8910-986de4fab286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f20a34-8f68-47cf-b7c5-5eaf22e4a058",
        "cursor": {
          "ref": "28c52455-4040-4f5e-a598-0803ca01a2b4",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b30d5e0f-5351-49f1-af7d-be7a3bf65b86"
        },
        "item": {
          "id": "a3f20a34-8f68-47cf-b7c5-5eaf22e4a058",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1f6776d8-0e03-4279-8f8d-418cea5f2779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23145856-ba66-47d1-abbb-fb28d04a4d4e",
        "cursor": {
          "ref": "bb7ba9fc-f331-410c-a09c-27ebb0ec4bbc",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fb8f4a10-4f71-4dc8-9a78-9bf7ff8a93c4"
        },
        "item": {
          "id": "23145856-ba66-47d1-abbb-fb28d04a4d4e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c82e5eaa-da7d-4292-b35d-9ad66c830a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534d3531-f72a-49e7-ab6b-0cd067dee615",
        "cursor": {
          "ref": "c8c5b4c9-cbb5-4192-8172-a2a7f1182bcd",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "829387ea-ab26-4dc0-bfce-522535fc0dcb"
        },
        "item": {
          "id": "534d3531-f72a-49e7-ab6b-0cd067dee615",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "46f43a27-03c8-45f7-9a67-6fb3e9124cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8596e129-04a0-4763-9e0a-5af646498add",
        "cursor": {
          "ref": "f591a7d5-b906-4caa-bd3b-204af2b7a17f",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7ca50db4-d3c4-41bc-90c3-0e39eb832390"
        },
        "item": {
          "id": "8596e129-04a0-4763-9e0a-5af646498add",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "275204b5-8ca5-4256-ac53-d34cea5bd19b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75fe1902-7363-435c-ab09-b38280c77f37",
        "cursor": {
          "ref": "1f2c2b47-2770-4b56-bd93-91674c48e287",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "25caeda0-0f4a-40a0-900c-41dfc696557d"
        },
        "item": {
          "id": "75fe1902-7363-435c-ab09-b38280c77f37",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "764e0c2c-865e-4a08-9e8f-c571f96dc1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54b769f-1ac7-4063-9e15-33f9e85bc73b",
        "cursor": {
          "ref": "5c76b179-6e19-411b-bf6a-8a08cd8ba02a",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "75b09eef-ea70-484d-9dce-91d710f9a194"
        },
        "item": {
          "id": "e54b769f-1ac7-4063-9e15-33f9e85bc73b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0ce2384c-97b8-4971-9139-3c5b85ee1ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45659eb0-2946-4617-8237-70e4e8268856",
        "cursor": {
          "ref": "acd402d5-8cb3-4735-94d1-7110179cffca",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "fc5576da-e2e8-47a1-a324-bca14e4cc26c"
        },
        "item": {
          "id": "45659eb0-2946-4617-8237-70e4e8268856",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "846ecf81-33a3-4f14-87ec-aa36aa7eabc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2cb360e-4d10-441b-9a82-2734bd0b280d",
        "cursor": {
          "ref": "9dc3947d-ce70-44d2-973b-93786c712536",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7388600e-7148-4fd5-9633-99cd2a466bec"
        },
        "item": {
          "id": "f2cb360e-4d10-441b-9a82-2734bd0b280d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d630e869-8b62-4dbc-930b-b515f5ffb414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97eb0af-3c11-4192-aa70-1b6584615d2f",
        "cursor": {
          "ref": "b938251b-eb33-4551-ab8a-2720dc164049",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "240f8903-b89e-4e47-8c5f-f19ac26f56cc"
        },
        "item": {
          "id": "b97eb0af-3c11-4192-aa70-1b6584615d2f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3f2bbd64-2350-4ee7-acbf-189df6440e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf3dd13-1755-488a-ac97-b09a521addc8",
        "cursor": {
          "ref": "a99d7b2c-427e-4a2e-9f74-165be44f11e4",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7e72d65b-b943-4a03-9817-bf1e5d82aefe"
        },
        "item": {
          "id": "aaf3dd13-1755-488a-ac97-b09a521addc8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5fd739e8-9f58-4c37-ac67-72003d563cd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 552,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "201b73db-eb5f-46a1-81bf-3ab6bc57265a",
        "cursor": {
          "ref": "73ed1204-999f-4761-9a22-6efaf3b9c1cb",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e1abb278-e7bd-4f88-b4d9-a83325456860"
        },
        "item": {
          "id": "201b73db-eb5f-46a1-81bf-3ab6bc57265a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "868edce0-3245-40ec-9e71-ba691bde1e00",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 574,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a7f11add-558e-489e-8db9-c23f9da62e01",
        "cursor": {
          "ref": "1c3de49a-158c-4d72-867c-d97c3d9387da",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "da6eae63-16e6-459c-a725-1ff6b1773457"
        },
        "item": {
          "id": "a7f11add-558e-489e-8db9-c23f9da62e01",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "123a4b6a-4452-4f8f-a807-46598ef5ae7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2a1cff02-e90c-463e-9c13-b40640eba516",
        "cursor": {
          "ref": "47cf1c73-55b1-4bca-888e-24518a45f39c",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6b05cf92-6c92-45d6-8165-4805f3d716dc"
        },
        "item": {
          "id": "2a1cff02-e90c-463e-9c13-b40640eba516",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "772d9892-7fc8-451d-ad9f-0b0f0db17e3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 603,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b09254e7-e726-4237-9101-a1261ec22431",
        "cursor": {
          "ref": "eb60daa5-d851-4049-a476-9f54f9d40ff3",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "432ab452-e914-45ea-a038-74df2342229f"
        },
        "item": {
          "id": "b09254e7-e726-4237-9101-a1261ec22431",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e8cacf35-c5b1-4645-b159-1dbf27731097",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "41602b72-1349-4950-84f3-21913dca917f",
        "cursor": {
          "ref": "2a187e4f-105e-41cd-a31a-25c29061521c",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c12fd6f8-b7ac-4541-a1d9-3b252bc3f58f"
        },
        "item": {
          "id": "41602b72-1349-4950-84f3-21913dca917f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ec985262-79c4-4b45-b359-d8d3da82b3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a39b231-4615-4522-af7b-5ea29456f370",
        "cursor": {
          "ref": "644ebc2c-f45e-4ecc-a38b-63f87218b8fc",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8013d898-3d88-45f1-8402-c6a0816ec862"
        },
        "item": {
          "id": "1a39b231-4615-4522-af7b-5ea29456f370",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "33bca25c-940f-473f-8916-a67eb050d121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41091c5c-740c-476d-8f4d-224a8ce24407",
        "cursor": {
          "ref": "9fb388d9-8728-4a30-bcca-407ddcc2c99c",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a8fdf136-9527-4995-a366-3194ea2b4861"
        },
        "item": {
          "id": "41091c5c-740c-476d-8f4d-224a8ce24407",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "802a4096-3b64-415a-a927-c0649eaf9384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa32205-4cb5-4eb4-9220-b07a1e1c7de8",
        "cursor": {
          "ref": "f4002ee4-7708-4b97-b41d-9e7b20ae7dc1",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "efb52016-0557-4e70-88fa-ae0c0322cd70"
        },
        "item": {
          "id": "1aa32205-4cb5-4eb4-9220-b07a1e1c7de8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "19292eef-bb7b-4291-abf3-82539b0b68d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a8c3b2-5cef-4cff-84be-e1f054142e64",
        "cursor": {
          "ref": "3dcfef05-0373-4488-bf10-4eba0e3c1c6e",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "38acdc4f-ed34-4185-ba9c-bd4d6c8c842c"
        },
        "item": {
          "id": "53a8c3b2-5cef-4cff-84be-e1f054142e64",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d799086c-406b-448d-8bdb-058361aea1f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b7d924-fb5c-4ebf-83d2-2e58831c484d",
        "cursor": {
          "ref": "a1502409-25fd-493c-b71b-ab0c7d5b9270",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a938d874-1175-4e2b-a57b-cf764caf802c"
        },
        "item": {
          "id": "e0b7d924-fb5c-4ebf-83d2-2e58831c484d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "01e6d037-1af8-49a4-900b-1b360349be8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cdbc2e8-c930-4bd2-a558-af04ea069cc8",
        "cursor": {
          "ref": "318b1394-8992-4524-aff8-097681e2386d",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c96c05ed-4b01-47fc-a2de-7cd832710119"
        },
        "item": {
          "id": "0cdbc2e8-c930-4bd2-a558-af04ea069cc8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b8fb21a9-750a-45e5-b8f5-bd7da12f3ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee9e9cc-02a1-4edc-8133-d7b6f0e35a63",
        "cursor": {
          "ref": "56735a02-af66-4e12-a23d-24258232bea5",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7a37d94d-20d5-47f9-a0e9-95e9ac15a94c"
        },
        "item": {
          "id": "4ee9e9cc-02a1-4edc-8133-d7b6f0e35a63",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1d56e523-608d-47fe-b951-3541fb3415fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5585da7-729b-43c2-9508-0a65e9051683",
        "cursor": {
          "ref": "b283bd63-0ea9-4b49-bb5b-5a31dae19060",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "42b2c05a-34cd-4e82-b8b0-2da753d53d57"
        },
        "item": {
          "id": "e5585da7-729b-43c2-9508-0a65e9051683",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "28437835-1a56-4b59-8fc3-3db73ef1a759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c341d3c0-07e4-42d9-aebf-9b7cd834f06d",
        "cursor": {
          "ref": "087142d6-5d3a-447a-9ce9-91deea5bd905",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5f571a34-3b28-4445-95ae-82ea78f088a2"
        },
        "item": {
          "id": "c341d3c0-07e4-42d9-aebf-9b7cd834f06d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "188028da-20e2-47c6-80e0-6195921ece31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d119f9db-4217-4400-b5fa-d6a7376cb6e6",
        "cursor": {
          "ref": "ae542e37-95b9-4df0-b238-391b7414ebfb",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "eb827305-245a-40eb-afa7-1408d485282c"
        },
        "item": {
          "id": "d119f9db-4217-4400-b5fa-d6a7376cb6e6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b1bfcdf6-10a1-49eb-aaa9-0011df8d7a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a444181a-4a78-4635-84cd-c0514ffe8d9f",
        "cursor": {
          "ref": "63badce9-000a-406f-b482-bedabe34064b",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5678c7fb-de12-4bfe-9358-73cb2e727e04"
        },
        "item": {
          "id": "a444181a-4a78-4635-84cd-c0514ffe8d9f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "06ee8bc9-1a1c-4ae5-95f3-ef320bd31121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0322065f-8af8-4bc3-8d8d-1f1a278801bd",
        "cursor": {
          "ref": "71c05de4-1d56-49a4-8119-f78a4be04805",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "04ce6515-9128-4fb1-b4cf-57c2377e4fbd"
        },
        "item": {
          "id": "0322065f-8af8-4bc3-8d8d-1f1a278801bd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "84d94380-2eca-4c36-b1b9-f89a8fc21140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02f6028-0f3f-488b-8554-e7863274758a",
        "cursor": {
          "ref": "53e9cd6a-93b8-4acd-b521-d959a78eb1aa",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0d42d911-3030-46d1-ad9c-d790f553bd47"
        },
        "item": {
          "id": "a02f6028-0f3f-488b-8554-e7863274758a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4d7f75a6-d9a0-4125-86cb-13b467583af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965c3047-c574-4c4f-80d5-8d3cc3f8dc3c",
        "cursor": {
          "ref": "11d29ac8-b1fd-4244-84cc-15443850d993",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "273887fc-d26d-4089-a776-f256563b25d0"
        },
        "item": {
          "id": "965c3047-c574-4c4f-80d5-8d3cc3f8dc3c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9a60b007-4300-46be-9185-6e9e9c1f565b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6d496a-ccbd-47bb-bb33-31d728ce50db",
        "cursor": {
          "ref": "2d384c14-2b32-40af-bd29-25b216a7493e",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "089b35c9-b6a2-4c82-8443-ca9bc7fdd7b7"
        },
        "item": {
          "id": "6b6d496a-ccbd-47bb-bb33-31d728ce50db",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "47c75c75-3d0d-4937-a2c8-1d38af583142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f428d0-58c1-4521-85f4-12815d4a5aa1",
        "cursor": {
          "ref": "617f6f1a-6cdb-4474-a115-6dc3bf079152",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6eb24de3-a321-4011-8a1a-ef2265e28cb5"
        },
        "item": {
          "id": "59f428d0-58c1-4521-85f4-12815d4a5aa1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f41b0e28-caa6-4dd5-ad1b-4099845e148f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2af8eda-6b16-44ba-afe0-1e3f3d33dce3",
        "cursor": {
          "ref": "9f240a7a-f0e2-45c2-98d0-852d202074ee",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1b54a273-610e-4fd3-b96e-ed804c441a2f"
        },
        "item": {
          "id": "c2af8eda-6b16-44ba-afe0-1e3f3d33dce3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d932ea40-1678-4cd2-ba0d-ce6173dc6413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee9820a-0505-42af-8e77-b97e016d86d9",
        "cursor": {
          "ref": "561aff79-f96c-4244-ac70-622e847dfb33",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "547d8c9c-b5b8-490f-9113-c1f7e2b1ce32"
        },
        "item": {
          "id": "9ee9820a-0505-42af-8e77-b97e016d86d9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "90e67792-84de-42b3-9831-10f7df61e87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c4548a-c349-4f22-97cb-1c369da1d976",
        "cursor": {
          "ref": "d8b3d322-9f9c-4b5c-a943-384acb03ec55",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e6b099d4-1e42-4605-a215-d3db3101ee69"
        },
        "item": {
          "id": "c5c4548a-c349-4f22-97cb-1c369da1d976",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "aea46d65-aca8-48c8-8a21-4fcf069363cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c321821-45ac-4742-b858-a6b75aaf53e9",
        "cursor": {
          "ref": "a9e33186-3146-4bea-b324-5b4690376d7e",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "439c1ec1-5b8d-4718-a972-3b53960ac2d0"
        },
        "item": {
          "id": "9c321821-45ac-4742-b858-a6b75aaf53e9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9a8d0383-ea4a-4e90-9312-08db29041112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b0adcf-44f3-48aa-bcfd-4fe1f979908b",
        "cursor": {
          "ref": "c0cf5da3-df0c-42e4-a61a-6febf920b8f2",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "aa255276-e772-40c1-ac22-8fa19ac90a25"
        },
        "item": {
          "id": "52b0adcf-44f3-48aa-bcfd-4fe1f979908b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2dea8a3c-c655-4c5b-828a-6a91d3f5e957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac12d1f-05cc-4d62-8bd4-d80058cd36ff",
        "cursor": {
          "ref": "2881a1da-5002-48c9-b14b-90f3ea2e7820",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "97fff8d5-4e2a-4dc9-88c6-f5df063b6188"
        },
        "item": {
          "id": "9ac12d1f-05cc-4d62-8bd4-d80058cd36ff",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ff14dc5f-1849-401e-aea7-56989bb76846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4647164-8452-4980-8711-76c7e9f8769b",
        "cursor": {
          "ref": "4c8fd741-a552-4cfd-85d8-d48ff490157d",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cffe07e9-a8ff-44f6-86ad-a9710eb14b49"
        },
        "item": {
          "id": "e4647164-8452-4980-8711-76c7e9f8769b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ede39a89-2a04-401e-a7fb-22817e7a7728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d80f8e-338b-4b2a-b8ac-97f6564e2371",
        "cursor": {
          "ref": "0529c254-1d0a-4b80-af73-3d3622ee05b0",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0a3dad47-f93a-444e-896d-18e28361090d"
        },
        "item": {
          "id": "06d80f8e-338b-4b2a-b8ac-97f6564e2371",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b7fec084-3d25-404b-b7f4-ca058873b770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fe8385-e743-4e34-8f2e-a9b998ca1ff0",
        "cursor": {
          "ref": "6cbbe672-5be9-4c8a-80b4-492cdd3abaff",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3e8eddb0-6085-4a51-b676-1da87c760f8a"
        },
        "item": {
          "id": "13fe8385-e743-4e34-8f2e-a9b998ca1ff0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7690916f-9be1-45df-980e-71b8cec3af3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c593dab8-4bd2-4897-950a-14b120b14a84",
        "cursor": {
          "ref": "2682afb8-deb3-4e59-9d46-1ea169c99e00",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2222922d-c4c3-4f54-a841-c3f7245db4cf"
        },
        "item": {
          "id": "c593dab8-4bd2-4897-950a-14b120b14a84",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6febafea-cff8-4b3f-88c1-3ecd485ca3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4e0c95-f174-438d-8e66-d8649904305e",
        "cursor": {
          "ref": "63275282-8315-447c-bd50-00c64f0f2c9e",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "985674dc-b942-4f3b-a859-a48c1ee24945"
        },
        "item": {
          "id": "6c4e0c95-f174-438d-8e66-d8649904305e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1182745d-6034-44c0-bbec-6e87ab3853a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fa6ad4-77ac-4410-860f-6cd41fa2adb8",
        "cursor": {
          "ref": "d73a6227-f6ff-4b32-986c-9114684a36cc",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0a9649c0-0711-460d-b330-cf04fa897681"
        },
        "item": {
          "id": "b0fa6ad4-77ac-4410-860f-6cd41fa2adb8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5d2a54b9-1f33-4f29-bf5e-fcf1c4f3c062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620687c2-0b3a-4b89-b7fc-fea3cb6bfcaa",
        "cursor": {
          "ref": "312bf360-e2d0-479a-8838-dd22b74a2e6a",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "eadcaba4-ffd8-4b25-83aa-0481aa9ce9bb"
        },
        "item": {
          "id": "620687c2-0b3a-4b89-b7fc-fea3cb6bfcaa",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "37cfc88e-75a6-4d69-80c8-d1abdda94cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4dcbb2e-4172-43d7-976c-f02b0bcf037a",
        "cursor": {
          "ref": "2f10e727-e966-45f9-b84d-11ebb715cefc",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d3affe71-d5cb-4f15-b497-be250318b18b"
        },
        "item": {
          "id": "e4dcbb2e-4172-43d7-976c-f02b0bcf037a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b6a1b13a-0537-45d3-a03a-a8d079ba5abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd97b33e-4ba5-4b8c-8921-5be80023a9c4",
        "cursor": {
          "ref": "cfdffc1d-60f7-4a2f-8bdc-f5f5eb1313fb",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9443bcce-8c77-4472-8fac-6e654f517af6"
        },
        "item": {
          "id": "cd97b33e-4ba5-4b8c-8921-5be80023a9c4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "67c3386d-03e1-4dee-a13b-b4b7a2942e09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97378997-3d1c-4ae3-b119-77b48949eef7",
        "cursor": {
          "ref": "4d2cd9ac-ecb0-41d1-979a-e4289757e109",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5fbc6f59-e03e-4bc5-8fd3-40ada3750a51"
        },
        "item": {
          "id": "97378997-3d1c-4ae3-b119-77b48949eef7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e946333a-46cf-4503-a2ef-433b9ded50f6",
          "status": "Created",
          "code": 201,
          "responseTime": 1215,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4381a04-ca48-46c1-8ffd-10e7fd101ae5",
        "cursor": {
          "ref": "8cee9265-1843-4f40-aba9-97ff8a9fa845",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b3276ff0-65a3-4127-95ff-c1244c780ea6"
        },
        "item": {
          "id": "d4381a04-ca48-46c1-8ffd-10e7fd101ae5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "94a294dd-5a85-4bdd-be30-029efcc75347",
          "status": "Created",
          "code": 201,
          "responseTime": 848,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d692909-ae9f-42af-8813-586c3ad6d933",
        "cursor": {
          "ref": "36c6ba49-653a-4efd-9f72-e0ef8df9d8b3",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2ebc7ef9-053e-4bef-be50-a7d1008efa16"
        },
        "item": {
          "id": "2d692909-ae9f-42af-8813-586c3ad6d933",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2adb7385-b173-4783-8b06-5627cab362a1",
          "status": "Created",
          "code": 201,
          "responseTime": 862,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedcc073-0184-424c-a304-a3175cab7452",
        "cursor": {
          "ref": "3a5bec6b-c995-40a2-82f2-509edd000787",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9e5b8712-4a6e-4305-bbf9-e6fdb8005212"
        },
        "item": {
          "id": "fedcc073-0184-424c-a304-a3175cab7452",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "17632466-9045-4850-b07d-97b3e64c8453",
          "status": "Created",
          "code": 201,
          "responseTime": 838,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65e0ec9-226a-4766-a2c3-b25a763484b1",
        "cursor": {
          "ref": "d0760105-f740-444a-94ab-4c18e2a5d70d",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a5516f00-2fa1-4b85-a5f3-ca0d18d3add1"
        },
        "item": {
          "id": "a65e0ec9-226a-4766-a2c3-b25a763484b1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "573b35f0-cc53-4ab8-ae1e-1be931204388",
          "status": "Created",
          "code": 201,
          "responseTime": 862,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e3204e-ed4d-4b6c-8624-1019586320b3",
        "cursor": {
          "ref": "d9ad7345-9665-4979-8a5a-09fdbbc525c0",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ac5a2107-be40-4501-a132-5d8bffae142a"
        },
        "item": {
          "id": "29e3204e-ed4d-4b6c-8624-1019586320b3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "230f5052-ce00-4899-b0f3-5460aa89313a",
          "status": "Created",
          "code": 201,
          "responseTime": 1194,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff32a44e-7e6f-4396-9ff5-75515ba74810",
        "cursor": {
          "ref": "4402c5f9-8f51-4b2c-ac25-b2ac581c8e95",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "77d4d6e0-8e88-48be-bd6f-78bd33d059dd"
        },
        "item": {
          "id": "ff32a44e-7e6f-4396-9ff5-75515ba74810",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "293e2556-8738-4365-bc1d-859c7bb68ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818a7fd3-424b-4ff3-8260-4e13fd0a61ea",
        "cursor": {
          "ref": "66d13a56-3c36-4a7e-88c5-c562820a2766",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7e1d4f5e-8fa1-478e-a776-7ab019945aa4"
        },
        "item": {
          "id": "818a7fd3-424b-4ff3-8260-4e13fd0a61ea",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2e6a0f7f-aa46-4ac5-b43e-0c593c4c7543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d165c8-5b41-468d-8d25-6617297b4193",
        "cursor": {
          "ref": "26e13c84-84bf-4574-b696-6518cc43d412",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a48c3d98-2c93-40fe-b3c0-6a22b01d8c9b"
        },
        "item": {
          "id": "d1d165c8-5b41-468d-8d25-6617297b4193",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4bed0107-2312-4c47-9a77-156dc68ca6d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc43f5b9-89ce-4c29-a52f-748995ba400a",
        "cursor": {
          "ref": "5166b341-1a4c-4e86-b908-b8d6b727ca9a",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d9b9b186-855e-46cc-bde6-e0e0c2506079"
        },
        "item": {
          "id": "bc43f5b9-89ce-4c29-a52f-748995ba400a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5696606b-c530-4f02-a3cc-0a08596230a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d402adc-13e9-4917-835b-b6f0a11cf51d",
        "cursor": {
          "ref": "0acc0946-3b48-44cc-8a7f-e42763f9d355",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8068cc3c-aa60-4190-8151-6200e6385ee3"
        },
        "item": {
          "id": "6d402adc-13e9-4917-835b-b6f0a11cf51d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "74404d62-ad60-485a-8700-8d4f0e3113e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77af440-3b02-46b3-9de7-3507b95a3149",
        "cursor": {
          "ref": "db0eca84-49de-46ec-80af-3a4cc438b8c6",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4941ec0c-98ee-41ee-80e2-40808e52fc1d"
        },
        "item": {
          "id": "b77af440-3b02-46b3-9de7-3507b95a3149",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ff7dceac-338b-4841-96e6-05dee179bd6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539f1943-6379-42fe-99cf-06c76e5a748e",
        "cursor": {
          "ref": "69f7eedb-cf40-43ad-be32-eae65b0f221a",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "552ee3bf-8875-4a9c-a3e1-4b192f9b0a77"
        },
        "item": {
          "id": "539f1943-6379-42fe-99cf-06c76e5a748e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8e278ba4-45fd-49e2-9aa6-fb96c8eeb4d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f9f113-50a6-4e81-94d3-704dc4021c50",
        "cursor": {
          "ref": "1d33c85b-962a-4eb3-945b-4a0d3f846f2e",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "03897f16-1dcd-49d8-8630-279c33dfebde"
        },
        "item": {
          "id": "a2f9f113-50a6-4e81-94d3-704dc4021c50",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1624e61f-d2d8-4872-8e05-d55072c74501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee93c50-3663-4d0c-b799-d476297bdaeb",
        "cursor": {
          "ref": "afc24282-75d6-4b32-a764-8ecab7b168e9",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ddace0c0-432b-4626-b062-a814f510cb86"
        },
        "item": {
          "id": "7ee93c50-3663-4d0c-b799-d476297bdaeb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9cde33a1-c0f2-4441-9d95-53b9932e5a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4098677c-7478-45f3-a1b1-14c7c9750692",
        "cursor": {
          "ref": "7fbedf77-c53f-4cba-9f4e-4ec5ec4792de",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8d79920a-58ec-4a90-8cc5-480013142897"
        },
        "item": {
          "id": "4098677c-7478-45f3-a1b1-14c7c9750692",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4f7e5e3b-3ea6-4059-bd47-f4b2b1ab3cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c7e643-97db-44f7-b2b8-585a91791fa6",
        "cursor": {
          "ref": "fbd0522b-38cb-40f7-93c3-70653cc5ba16",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "60968f63-8f55-4e31-891e-acc3275b2cc3"
        },
        "item": {
          "id": "42c7e643-97db-44f7-b2b8-585a91791fa6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "749d4ad2-5246-4da7-9c2e-369721808767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8e3578-a4c3-4db3-8685-327255c4bdeb",
        "cursor": {
          "ref": "47516e19-d893-4816-84ec-8a692a26f9c1",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "747c0585-77f2-47bc-9711-cc32464f2ea6"
        },
        "item": {
          "id": "9b8e3578-a4c3-4db3-8685-327255c4bdeb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b0b75dcd-6c5b-4133-8270-3b7ee174a7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1fa953f-e74f-4ab0-9134-bd9fe94a408c",
        "cursor": {
          "ref": "1ad3fd8b-ab77-4484-936f-6adb96d87ee3",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d84a1a85-f618-40ee-855a-406ca93122de"
        },
        "item": {
          "id": "f1fa953f-e74f-4ab0-9134-bd9fe94a408c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0f2c2e7a-9216-4ac9-ace2-baaf59484913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19cebfd1-ccc6-4fb6-995f-dc49c97caab2",
        "cursor": {
          "ref": "dab90f59-6f0e-497e-a304-063590fbc40c",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2574e3d4-217f-44a3-a6e3-88868cdb42aa"
        },
        "item": {
          "id": "19cebfd1-ccc6-4fb6-995f-dc49c97caab2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5d706de2-58b4-45e7-9609-002021032a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e073b01-738f-4766-bdb2-0c0054a117f6",
        "cursor": {
          "ref": "9fcf6d9b-bf08-46f1-b16f-10fc1af47110",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2ea060a9-e541-4f23-8754-b2282a2fc70f"
        },
        "item": {
          "id": "8e073b01-738f-4766-bdb2-0c0054a117f6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1a458c29-a8c7-4171-9f5c-22eccff4fd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012d7740-e682-4fff-bf51-7d4ba87e37ea",
        "cursor": {
          "ref": "506cb8bb-e1ba-4f41-ad74-b2826129e530",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b196dc2f-925b-4bc5-b309-90be2cd5a90a"
        },
        "item": {
          "id": "012d7740-e682-4fff-bf51-7d4ba87e37ea",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "af570921-5a25-467d-ba48-c698006f4ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5656c8-a318-4ce3-90fc-bcc47066f313",
        "cursor": {
          "ref": "baa7159c-90a0-4099-a139-e0ffdcf58ea7",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "664b3c2f-8943-48de-a2bc-2c867e94f5ca"
        },
        "item": {
          "id": "ba5656c8-a318-4ce3-90fc-bcc47066f313",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "787026a8-4a02-4f77-8016-9912a6aee6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5237c4-0d02-4c88-ae42-547d7335c6e2",
        "cursor": {
          "ref": "a3909102-3663-48e9-9115-2b630d1e15fd",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cf031deb-6fb9-493a-9962-70064cd5f314"
        },
        "item": {
          "id": "2a5237c4-0d02-4c88-ae42-547d7335c6e2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8ddfaa59-fd2d-4772-b17e-493e1b5b46be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f27b02-2eba-42f5-95f8-99b03627baf5",
        "cursor": {
          "ref": "212a056b-a767-485d-9055-e9859a0dc915",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c44eeabe-82c2-45d2-b411-6fe1ed6648a5"
        },
        "item": {
          "id": "44f27b02-2eba-42f5-95f8-99b03627baf5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "959c4179-d7c3-4690-8354-2d1cf923a508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8596d329-7b99-43ee-b33b-9eb600cbd39a",
        "cursor": {
          "ref": "d6a10363-beaf-486a-80cf-d10640947366",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "dbe2e948-bb4c-4254-b978-e3ddf7418fd0"
        },
        "item": {
          "id": "8596d329-7b99-43ee-b33b-9eb600cbd39a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "545a350d-f2d9-4f99-9c87-d1d931212d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc9b5e8-b60d-4d00-a411-164e1b6cb25b",
        "cursor": {
          "ref": "4873afcd-8364-4722-ad16-9cfa3d896cce",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6282dff4-112f-4526-9b9b-e9d1e215d04f"
        },
        "item": {
          "id": "3cc9b5e8-b60d-4d00-a411-164e1b6cb25b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "00b019dd-d1da-4500-bcae-6ec476964abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b58f63-e9a3-4e53-9f1c-fa1952b70557",
        "cursor": {
          "ref": "6c90eae7-9d6a-4524-af01-4a046435c356",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "624491aa-6bf7-483b-a5c0-dd648192ca17"
        },
        "item": {
          "id": "35b58f63-e9a3-4e53-9f1c-fa1952b70557",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "45d2970a-c290-4bc8-bd35-c334f9797c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf29b34-2fda-4322-b955-add91713223d",
        "cursor": {
          "ref": "81c55792-5635-44c8-8968-4e09ba8b2fbe",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "75f42b0d-a066-48bc-8b51-0268880188b0"
        },
        "item": {
          "id": "3bf29b34-2fda-4322-b955-add91713223d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2f1283a1-2e0c-4013-beac-9d314755f2bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4582e65-e489-4dde-a751-11682cc0cfd3",
        "cursor": {
          "ref": "590e396b-6ef9-42c8-91cb-5d6da62cccd5",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6e16c95a-0acf-4469-a75f-f31fb25155e4"
        },
        "item": {
          "id": "b4582e65-e489-4dde-a751-11682cc0cfd3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3ab534d6-fa1e-40a5-9634-f89e05838202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25fbfe4-5d0c-40ed-a716-87fac6dff421",
        "cursor": {
          "ref": "205c7670-d85f-4161-b2c8-cfc846ea3081",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4a773537-d337-48db-bfe6-b52bb37fa390"
        },
        "item": {
          "id": "d25fbfe4-5d0c-40ed-a716-87fac6dff421",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b0c95681-64e3-4c06-8302-9bbc7ada5daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad283ea-0db2-40d4-9162-99dfdcdd6642",
        "cursor": {
          "ref": "8870fba3-a8c8-40ec-91d5-c0e8c31d1ea6",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c8600431-5d47-4325-b2c5-2a9700e88aab"
        },
        "item": {
          "id": "5ad283ea-0db2-40d4-9162-99dfdcdd6642",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "aba154fa-2482-4319-838a-9e522a617740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0215e29e-a47a-4cd2-ace9-348994ffbd44",
        "cursor": {
          "ref": "4063b82a-d056-4b2d-8162-4e809de0779e",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9ba82b12-37a3-4d9c-8df3-8778fae42118"
        },
        "item": {
          "id": "0215e29e-a47a-4cd2-ace9-348994ffbd44",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d63f566a-891a-4587-9480-10b0ef2e899b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219a54ab-44cb-47dc-8d0e-ef36000c4bfb",
        "cursor": {
          "ref": "48db77b4-b9a6-4877-bed9-8b5d789f9a80",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "91934867-8436-4857-b5e3-7ad491f26210"
        },
        "item": {
          "id": "219a54ab-44cb-47dc-8d0e-ef36000c4bfb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "82731015-542a-4dcb-a4a0-b7451565d28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1ee805-2d62-4a3f-b346-152bd3e4d425",
        "cursor": {
          "ref": "5c5eb259-bcbf-4a29-ad2a-694e46793496",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7be988cc-10bb-48d3-bd2c-3017dce5d04d"
        },
        "item": {
          "id": "bd1ee805-2d62-4a3f-b346-152bd3e4d425",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "54d80492-94e4-47b1-8802-4114d9c4dfcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb06467-134f-4a5f-9134-65b6a3a918ae",
        "cursor": {
          "ref": "4dac03f0-1538-459e-8a70-2719b1aec8b6",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "52b2506a-ba14-4aa7-b3c6-29794e2a8485"
        },
        "item": {
          "id": "3cb06467-134f-4a5f-9134-65b6a3a918ae",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "09c2880d-7af1-44c1-aee4-412c99366022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bc4f0d-fb91-4d00-9d26-c43eea33ae8c",
        "cursor": {
          "ref": "fab12b85-5ff2-4453-bc85-d76e95941488",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3006c378-d683-474a-84b1-8ad4b85e612f"
        },
        "item": {
          "id": "b0bc4f0d-fb91-4d00-9d26-c43eea33ae8c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3c06f8b8-4cf5-4683-8d8b-124f3217bb99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23818538-5ef4-4bdd-ac4f-c4dd908ffe54",
        "cursor": {
          "ref": "977905be-f1c0-4a6f-b4b4-33bd70ee09f4",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bb48a291-0f76-4bdb-984d-9f8597d0ae4c"
        },
        "item": {
          "id": "23818538-5ef4-4bdd-ac4f-c4dd908ffe54",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ad3b7e2b-ba36-4bf6-bca1-1a7b944ea066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d322d30-3fde-48c4-aaf9-81cb1ffa532f",
        "cursor": {
          "ref": "074beb15-fda4-49c4-b7f6-19b983704f82",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "542c61ab-46ea-454e-8f8d-85bd5d99b1fa"
        },
        "item": {
          "id": "4d322d30-3fde-48c4-aaf9-81cb1ffa532f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2beb6f97-4a3e-409a-b7fb-c63cb513600a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2410d99b-a8ae-4abf-b3eb-cb6e059dfb38",
        "cursor": {
          "ref": "cf0f4a1a-7539-4dc2-a29d-1a5fa602072c",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c6400092-6dd9-44ea-b425-3b27f8ad92e0"
        },
        "item": {
          "id": "2410d99b-a8ae-4abf-b3eb-cb6e059dfb38",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b760aa01-d345-4dd6-9047-220b333ab9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf7c5ef-6393-4903-9886-95520ad32a59",
        "cursor": {
          "ref": "e2958cfd-20ea-4477-8db8-164383ceb7bf",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7c09a739-9431-4fa6-bc0e-7d79119dd0a7"
        },
        "item": {
          "id": "7bf7c5ef-6393-4903-9886-95520ad32a59",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "349646cd-3bf3-4bc6-866c-e6684d294321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33fdf8a-274c-46c9-9c2d-fddae77f3d6d",
        "cursor": {
          "ref": "bc5b729b-fb3c-476f-845c-66d576468e34",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9f639214-2934-4dbb-8a71-b90ce6b7cfa5"
        },
        "item": {
          "id": "d33fdf8a-274c-46c9-9c2d-fddae77f3d6d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8696f762-1270-4e80-a15b-7827767ab3f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01b294a-631c-4f38-b878-063a984ea639",
        "cursor": {
          "ref": "55cfaed7-da9d-4964-a715-3d582d9c237f",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4c72b1b0-2a23-4598-8b88-539d58d7b28f"
        },
        "item": {
          "id": "e01b294a-631c-4f38-b878-063a984ea639",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6c03b896-10bc-4e04-8478-09441a5aeb39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b9e35b-7345-491c-8699-5821b93fa04b",
        "cursor": {
          "ref": "a658d29b-67f2-4f76-8b7e-122db7fbe9a5",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b8e2a533-59a9-498b-90bd-309d0950e9eb"
        },
        "item": {
          "id": "37b9e35b-7345-491c-8699-5821b93fa04b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "33dc01d0-db52-4b1b-9677-2d898433c8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb15909d-eb0a-4ac1-a679-98124cda620c",
        "cursor": {
          "ref": "4b49fae9-0b3b-442c-868b-7870c79c47ea",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f1a4138f-7b4e-4ced-a949-3dff93636a52"
        },
        "item": {
          "id": "bb15909d-eb0a-4ac1-a679-98124cda620c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "020b4a38-a501-4b8f-9e76-2570a67b4826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7369238-d424-417a-85d7-48aa379f710b",
        "cursor": {
          "ref": "c852a1a2-1d28-4957-9f40-a01e527010d6",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ae31f808-06cd-473a-9216-cbe5a555be1d"
        },
        "item": {
          "id": "b7369238-d424-417a-85d7-48aa379f710b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4bce3bba-a3f8-40da-9bd7-ece0d9be9539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db4c9a1-35ff-4f8a-ae01-55c36f49e267",
        "cursor": {
          "ref": "eabf5cd2-6cd6-4f27-ae94-af4a1822d832",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b64e1dc4-0c1f-42cb-b6ad-519608959000"
        },
        "item": {
          "id": "6db4c9a1-35ff-4f8a-ae01-55c36f49e267",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d87c106e-7dcf-4226-afb0-5f1eeb135168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec44d01-85e0-4c6c-9bd5-a29e3eaa3c2d",
        "cursor": {
          "ref": "a356a46d-a96e-4541-ab7a-ef7bbbb822d1",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "14851c19-149d-4876-aa6c-129d4ad0a9fd"
        },
        "item": {
          "id": "0ec44d01-85e0-4c6c-9bd5-a29e3eaa3c2d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c41fdf75-c740-46a1-9ae7-fd89a58011ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabbac3c-8638-437c-ab73-3be3bccbfe11",
        "cursor": {
          "ref": "ccbb0544-eaec-4162-acb8-dab793e65db7",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e15f12ba-481e-4013-ab05-a5a00a30aea7"
        },
        "item": {
          "id": "dabbac3c-8638-437c-ab73-3be3bccbfe11",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bb594f10-e87e-490b-9ef5-989030dfb644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f28f43-9d0c-40bb-81b9-1505527e939f",
        "cursor": {
          "ref": "cb4f7920-60bb-4f10-b8d5-47702786dec3",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "af19453d-4d00-4233-8a7a-ef3d987162fc"
        },
        "item": {
          "id": "63f28f43-9d0c-40bb-81b9-1505527e939f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1a44b50c-b05c-43ef-8951-7a92733ca557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6c6243-4197-40ec-b6b9-8fde7662ea26",
        "cursor": {
          "ref": "07a41570-50d2-4267-9bf1-366350641852",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d72ec086-bf96-425d-96f6-5e6814421c05"
        },
        "item": {
          "id": "2e6c6243-4197-40ec-b6b9-8fde7662ea26",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f38e92f9-d464-4eeb-b6fc-4d43049bde3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "737019f2-0e6a-41d6-9316-6b0b6eb49aa3",
        "cursor": {
          "ref": "53ccbec8-0a54-4487-9413-246141717c59",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ee2adaee-476a-451e-86c2-daa69ad5b803"
        },
        "item": {
          "id": "737019f2-0e6a-41d6-9316-6b0b6eb49aa3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e4fb1201-033a-4931-9111-6e88e02fc4ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6c7fc5-76ed-4025-80e1-a7b3ff89fb61",
        "cursor": {
          "ref": "bb849aa4-08bb-4724-b773-97dcb252c3ea",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c7708ebd-6dfd-479b-bf69-46e6882d7d56"
        },
        "item": {
          "id": "5f6c7fc5-76ed-4025-80e1-a7b3ff89fb61",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "471e82d0-26d8-4e57-9e52-516d1af5d21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba82e0d-cde7-4726-9a24-6bc25ee429fd",
        "cursor": {
          "ref": "96050e00-c6e0-4ce7-b75f-3b4eecbe30d4",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9f9eb474-68fe-40c2-8132-fd4a0ba2243a"
        },
        "item": {
          "id": "fba82e0d-cde7-4726-9a24-6bc25ee429fd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "95f1e2a8-19c4-46c2-888b-1f6b5c988265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9664d6d-5ac3-4734-a3a7-b4c734d81fc1",
        "cursor": {
          "ref": "1c0cab82-91b0-4972-9a1e-bf4c885b9512",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6891afd0-104b-45a3-82ef-3d13e435bb1d"
        },
        "item": {
          "id": "a9664d6d-5ac3-4734-a3a7-b4c734d81fc1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ba8962a9-ba00-491c-b5ac-463666c84020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a9a01a-df41-483d-aa03-3a15bd4402bb",
        "cursor": {
          "ref": "4b8fd07b-a191-4cd2-94df-698ea3692d2b",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "62547998-97bc-4269-bad4-714e8ab4e510"
        },
        "item": {
          "id": "f7a9a01a-df41-483d-aa03-3a15bd4402bb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "60f5d5d7-e9b0-405b-a428-92b04acbcc90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc71c60b-bf20-4830-8f8b-b68371812888",
        "cursor": {
          "ref": "75264475-5dfe-41ff-9396-92bba59b71f4",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "edb2266e-f5f7-419b-81cd-a7953ab75beb"
        },
        "item": {
          "id": "fc71c60b-bf20-4830-8f8b-b68371812888",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cc10bc35-deb9-4530-aa34-cf32aed0b910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759bf91f-7ff5-4f95-a77b-7478fc50e34c",
        "cursor": {
          "ref": "2e7052a0-e5d6-4814-b48f-a1f1ef9f8deb",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c8273d16-3dcf-492b-9952-599ca912a72b"
        },
        "item": {
          "id": "759bf91f-7ff5-4f95-a77b-7478fc50e34c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cfc104e6-df69-4248-a727-f4eea4642605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ced06c-4fc4-4b8c-995d-3c666079808e",
        "cursor": {
          "ref": "62e590c8-b3cf-472a-a98f-d14e8c6a81d1",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "419fb961-d103-4a16-aef6-cdc5b0ad37cf"
        },
        "item": {
          "id": "32ced06c-4fc4-4b8c-995d-3c666079808e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bf7e7d2a-cb8c-45aa-93cc-9a198489180e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9743fb8-6b8c-4e32-ac56-689410085f67",
        "cursor": {
          "ref": "7bf9e010-a2fe-44db-9398-ea39cd39d806",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2a7d1fe6-7657-49f5-89b3-773300f226ea"
        },
        "item": {
          "id": "e9743fb8-6b8c-4e32-ac56-689410085f67",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d316d34b-1977-4429-a6c9-2101f5e7d3be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7f70cb-c6a0-4c45-9971-316f06772341",
        "cursor": {
          "ref": "38361d2a-61cb-4241-a173-d7a083dffa84",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "31dea919-45a1-441d-b314-1de1003f509f"
        },
        "item": {
          "id": "ea7f70cb-c6a0-4c45-9971-316f06772341",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0979ce90-43ce-49c3-8330-4f0696af6ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d171ec5-a51a-4f59-8171-54fc29900099",
        "cursor": {
          "ref": "fad9ef1c-03b3-4e39-8527-2b103ad6ac6a",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "70f3cfd6-98e4-4f62-8481-f7d7fae5feab"
        },
        "item": {
          "id": "7d171ec5-a51a-4f59-8171-54fc29900099",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d6212e02-13f5-4124-85e2-c996d4d9c5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0328f8-50a3-4874-bba3-54820662e45d",
        "cursor": {
          "ref": "ab3a0049-8b40-4b59-81db-ffff34f445bd",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "726a2964-c9b5-433c-a43e-df588cfd8f74"
        },
        "item": {
          "id": "ef0328f8-50a3-4874-bba3-54820662e45d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "22070566-d17e-466f-9e73-0db32562b2ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19edefad-1d57-43b2-ac7d-5f299b887cfa",
        "cursor": {
          "ref": "0f8650e6-b955-4933-adf4-f063d775b539",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b535fff6-bcce-4f16-8fff-2b163feca0fc"
        },
        "item": {
          "id": "19edefad-1d57-43b2-ac7d-5f299b887cfa",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f03418e2-720b-464c-84e3-1341c14204bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d419da2-6005-4310-bdee-c360b9923c46",
        "cursor": {
          "ref": "113bd951-3bbb-4a95-a24d-9c14360c2604",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e1fb50f5-dfc6-41f7-a38d-25abf5613082"
        },
        "item": {
          "id": "1d419da2-6005-4310-bdee-c360b9923c46",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5182e35f-1ebf-45c7-b462-7708b7a794eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72a238f-0136-4d3b-8b7f-131d10dac053",
        "cursor": {
          "ref": "5089474d-57c7-4ed8-bb8f-415facf7ee21",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e8e107f8-0e9d-462b-8c4e-bc53c6638076"
        },
        "item": {
          "id": "e72a238f-0136-4d3b-8b7f-131d10dac053",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7a92f6fd-b0dd-4abf-8447-8b9025e0afe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b66ebba-0505-4179-9b04-4e02fa4ed060",
        "cursor": {
          "ref": "c238b4a6-70ce-4edc-87bc-e207fb58b339",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e223b962-f3f9-4ba0-9ad3-c0971185acb3"
        },
        "item": {
          "id": "2b66ebba-0505-4179-9b04-4e02fa4ed060",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "66830d5a-7d67-4e00-bb47-510b53307d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b17b773-f1e2-4b04-b0b6-1fe5323197b6",
        "cursor": {
          "ref": "4c9c755c-9700-413f-a17a-ef7c02ab0215",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "eef2136b-71df-4e87-ba04-c3133cf5845a"
        },
        "item": {
          "id": "2b17b773-f1e2-4b04-b0b6-1fe5323197b6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0e81827f-2350-4c46-b00e-6e4d9bdb1e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89edc17-05dd-4efa-b522-ce125c093270",
        "cursor": {
          "ref": "aa19dbf0-92f2-409e-909f-3697b85f39da",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3930652c-b665-440b-b7c5-9b29fc838eaa"
        },
        "item": {
          "id": "d89edc17-05dd-4efa-b522-ce125c093270",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5bc14dac-dc08-4421-9af8-18a9d5f93b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fe38e8-94b0-463e-8985-54d887870596",
        "cursor": {
          "ref": "e95aa37d-803b-469e-bac1-518d3e495683",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8f547b41-d861-4f9c-9a53-6a8fff4e88c9"
        },
        "item": {
          "id": "99fe38e8-94b0-463e-8985-54d887870596",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a2db2df8-9a2c-48ea-93c8-a1713729c5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c82d732-19d1-4f19-b6fc-4b4b5d7349cd",
        "cursor": {
          "ref": "5b57c849-f31f-4ff4-812f-cc4e073af022",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6db3a480-19bd-415c-b4c8-5f14a002d4f9"
        },
        "item": {
          "id": "8c82d732-19d1-4f19-b6fc-4b4b5d7349cd",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "928c40b1-0415-4b1f-87c1-5e088f374c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd27461-a0ca-4a5e-939d-690461f5a6d4",
        "cursor": {
          "ref": "adb003a8-30f4-43ba-becb-daef868fa3e7",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cac40d1a-401e-4710-be71-459b9fd0a7c2"
        },
        "item": {
          "id": "3cd27461-a0ca-4a5e-939d-690461f5a6d4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "446b1511-d28a-4621-acb7-33d0284a9ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9a7b43-8a62-4829-8cea-aa664697be82",
        "cursor": {
          "ref": "c4bb610e-df5c-4181-ac8b-81dd7bb9d91e",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ce4a3b80-da2a-4042-8629-0f5e9bc6905c"
        },
        "item": {
          "id": "ea9a7b43-8a62-4829-8cea-aa664697be82",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "de989462-e505-4178-8760-ba91f75db363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5770ca4-3f8a-4f73-8bba-a89d4ccbdc60",
        "cursor": {
          "ref": "e9499f4c-a7a8-40b6-ba7a-c4162207a66e",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2ca6f5d3-fa1d-42bb-9942-23d1be5e6bcc"
        },
        "item": {
          "id": "f5770ca4-3f8a-4f73-8bba-a89d4ccbdc60",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8a41edce-510d-402d-a9a1-d10ef25a0434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c2ba47-8131-4370-8a03-175a62684736",
        "cursor": {
          "ref": "7ad1c67c-32f1-44b7-ae33-21eaffc10d92",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1906d2ad-eec3-412f-9840-3cfc077bc64e"
        },
        "item": {
          "id": "d0c2ba47-8131-4370-8a03-175a62684736",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3cd65e74-ff4f-4d31-b680-3a399fc1a000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579947a5-1931-4d9c-9558-0f9cf4a5719d",
        "cursor": {
          "ref": "e2ca0fa5-768c-4efd-bc54-fd546c365147",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "53f8273d-be28-4038-9739-a6b426dfa4b9"
        },
        "item": {
          "id": "579947a5-1931-4d9c-9558-0f9cf4a5719d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d50a598f-750e-464c-99f2-116e39c92cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf61711-f6ac-477f-9703-1c5be339718c",
        "cursor": {
          "ref": "dec0cde2-06e4-4a51-95df-98fc193b1d09",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8337e92b-dd9d-4d1e-98b2-ab263b39ac51"
        },
        "item": {
          "id": "2cf61711-f6ac-477f-9703-1c5be339718c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ffbfbf03-9862-4104-a547-c1597b828c45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa3c308a-823c-4c77-9618-25838e5d8d46",
        "cursor": {
          "ref": "ef7419c1-b65e-4f71-b863-7e99f80b353c",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3948929e-abee-4d9c-88ad-c32cab4edab6"
        },
        "item": {
          "id": "fa3c308a-823c-4c77-9618-25838e5d8d46",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b0331c02-ea66-4ec7-978d-b72ce50e5641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22424497-14ee-458c-b894-181d5bb636b5",
        "cursor": {
          "ref": "213bfc2a-7960-414c-83fb-127429328f0a",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2d500c26-6889-425e-acfc-fe38832ff79e"
        },
        "item": {
          "id": "22424497-14ee-458c-b894-181d5bb636b5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5538c71a-0cc8-484b-8852-d619d4ed3b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3afea8-bb22-496f-81c6-d53b5cc8f121",
        "cursor": {
          "ref": "454ea009-1a3d-4b9f-a479-fba0d9d05896",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9543ebde-1d41-4283-9d00-a44a7f7fa2d1"
        },
        "item": {
          "id": "fc3afea8-bb22-496f-81c6-d53b5cc8f121",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4f18d0bc-0eed-4c0a-8652-1babd4bb2e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b28fd5-1464-43f5-8c1e-3ba8fc53ca36",
        "cursor": {
          "ref": "8aa7baba-b077-43bb-ac51-dffb566999c6",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a8b2e168-5cd1-47c8-b881-b60fb7d7da33"
        },
        "item": {
          "id": "65b28fd5-1464-43f5-8c1e-3ba8fc53ca36",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "627ecb46-18cc-42c1-8b0a-6f2872d91b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abde63c6-88f8-4121-a8ce-879ee8e1709e",
        "cursor": {
          "ref": "4b52462b-2f4d-4995-8f2e-0d9bb66c3bf2",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2b6b6e70-4253-4894-836e-db9e6ecfda2e"
        },
        "item": {
          "id": "abde63c6-88f8-4121-a8ce-879ee8e1709e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c3596999-eed1-40f7-b5ec-2d67eb41dd52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba4bbef-4da4-4de5-b5f7-796a73f4ba00",
        "cursor": {
          "ref": "a96e1dd2-91fc-4957-a53c-b8536d22f4d9",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "70ea41ea-1f91-4b2f-a470-a54ece877ae7"
        },
        "item": {
          "id": "3ba4bbef-4da4-4de5-b5f7-796a73f4ba00",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7b60c7e1-0864-4519-8c08-97d84a53a421",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "e2a4873e-95e5-4cf0-b1c1-c4319240c9c0",
        "cursor": {
          "ref": "79ca06aa-353a-4b94-905f-7025a83d8115",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "05f776c8-6da3-40c2-bc06-638988a9f341"
        },
        "item": {
          "id": "e2a4873e-95e5-4cf0-b1c1-c4319240c9c0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2f6b5e74-568d-4388-8626-70e9460da55c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a41a33-c472-4a53-be20-6c98a32e77c6",
        "cursor": {
          "ref": "d48d04aa-abdc-4669-a627-579863db543e",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9d88de85-4a16-4dd3-aef7-a4ebbf7ff9d7"
        },
        "item": {
          "id": "49a41a33-c472-4a53-be20-6c98a32e77c6",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e25a824e-fc52-463e-b853-0942cbccbab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89555ea-7084-4b36-8182-461da8d3b066",
        "cursor": {
          "ref": "adfbf191-be24-4000-b956-77384d1e353e",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "94017538-6c7d-482a-b928-690df6d3d4b2"
        },
        "item": {
          "id": "a89555ea-7084-4b36-8182-461da8d3b066",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e4d5b4ab-f804-4743-aa14-7cae1b9ddac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735f7135-6a49-4122-8905-2f766c90b7c5",
        "cursor": {
          "ref": "7c0e75cd-8523-447a-9cb4-f83990236d7a",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "56dd066e-c8ea-4c08-9b3b-6dd63b3342c0"
        },
        "item": {
          "id": "735f7135-6a49-4122-8905-2f766c90b7c5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5f830c01-7104-4131-bec8-508dea707288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e5f3dd-850e-4818-82cd-a287c13c3fcf",
        "cursor": {
          "ref": "232d071f-59f4-4254-933c-859799402a84",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "77818527-9141-444a-9dba-bcf2304d6f52"
        },
        "item": {
          "id": "24e5f3dd-850e-4818-82cd-a287c13c3fcf",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a4bbb06a-fda8-448b-b78f-f8d0d5920428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d863e0-81c6-4a6d-b285-f3a85611341f",
        "cursor": {
          "ref": "2eb85260-da12-46b1-be55-00929c6ef94d",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cae4edf7-3581-4618-9459-eaae10237afd"
        },
        "item": {
          "id": "99d863e0-81c6-4a6d-b285-f3a85611341f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "62d32c06-ca34-4625-b31e-92c06449abd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4571ae-97d3-49e8-b007-87e7dc46c26a",
        "cursor": {
          "ref": "95ee913d-a914-4d52-af30-3a83b989b380",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "34fae68f-723c-49b8-bb78-49f053467afb"
        },
        "item": {
          "id": "9b4571ae-97d3-49e8-b007-87e7dc46c26a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0d197fa0-2fa6-461f-b158-9462c5b2fd52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa5cf5a-6d0d-47c8-96fc-39c13a26ae0d",
        "cursor": {
          "ref": "e0bf231d-fc91-4167-ab8b-a397fe62d3f1",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e1f92a47-8687-404b-b951-bf427f6764bc"
        },
        "item": {
          "id": "0fa5cf5a-6d0d-47c8-96fc-39c13a26ae0d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "544b3ff0-25ce-4514-a641-a4653c41cb02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1496d2d9-ebf0-4bb8-9aa0-68616d167233",
        "cursor": {
          "ref": "f07d1325-e207-47ba-b0a8-515145134f8d",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b74e30be-13f7-4d81-a56c-a1ca913f6e2b"
        },
        "item": {
          "id": "1496d2d9-ebf0-4bb8-9aa0-68616d167233",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "57810be9-9d11-4b4b-b075-23704b336b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f916bc29-d501-46b0-9486-59645a0ecca3",
        "cursor": {
          "ref": "38e37499-a137-48b3-a30b-df1e690dda06",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "45153cee-0aad-4beb-a84b-a4bbd5604acc"
        },
        "item": {
          "id": "f916bc29-d501-46b0-9486-59645a0ecca3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c3525afb-ebce-4c51-828d-01eb1d913e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882785ef-37a5-47a0-ae8a-b8986e60e327",
        "cursor": {
          "ref": "cac1bde6-59aa-4e1b-ab1f-00f372b3a621",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "bf3f4b37-3d98-4b68-b35f-782ebad5561b"
        },
        "item": {
          "id": "882785ef-37a5-47a0-ae8a-b8986e60e327",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "56e8c930-6f47-434c-9db7-a141b17a23c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5254332c-128f-4574-957d-1063d242a10e",
        "cursor": {
          "ref": "16d7bb06-da39-4e64-a970-6747edfef3a6",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "367dd7c2-bb20-4604-8af6-7f70d28d96d4"
        },
        "item": {
          "id": "5254332c-128f-4574-957d-1063d242a10e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "38b5094e-5826-46cb-857a-50e86a892eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88724b16-ea21-451c-9487-a84b6869c67b",
        "cursor": {
          "ref": "430bd515-e380-4b50-9f0f-7ddc1dc9d80b",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "110fa748-4a43-4157-b2b7-0a5833f7bb14"
        },
        "item": {
          "id": "88724b16-ea21-451c-9487-a84b6869c67b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "43a31224-79cd-4e56-8fa3-61d6660f6c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31eebb3a-c7ab-46ca-877b-e3413c78b2fe",
        "cursor": {
          "ref": "a68be409-c8cb-43c9-8fdd-a8eaf72a41eb",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "99c1c9a3-3280-4cf4-8747-91c1630094bd"
        },
        "item": {
          "id": "31eebb3a-c7ab-46ca-877b-e3413c78b2fe",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "67eb956c-3d63-4987-8f7c-b0f8b091299e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d3acb3-34d5-4c1b-b025-ba01a35f7de9",
        "cursor": {
          "ref": "00d1c778-6993-45f1-8651-0ac0e630619f",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f6f1208d-2041-4c33-b0bc-1af687cba854"
        },
        "item": {
          "id": "74d3acb3-34d5-4c1b-b025-ba01a35f7de9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6bec3da0-253c-47fd-be68-339ed4086095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5837110f-32ce-4786-b1da-1a9f4934ac52",
        "cursor": {
          "ref": "772d83c9-7246-4cfc-856c-7560d4c1b8d8",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "90465078-d68a-4a0f-938e-4391114b0f92"
        },
        "item": {
          "id": "5837110f-32ce-4786-b1da-1a9f4934ac52",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d50aff3f-0dcf-47bc-baa3-6b63d33c4deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb2d4cb-d7e2-4242-8126-9432640c6173",
        "cursor": {
          "ref": "169a8d38-2697-4368-b6f4-075fe9b38fa9",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2293c804-b851-4946-907b-eddbad6e36dc"
        },
        "item": {
          "id": "edb2d4cb-d7e2-4242-8126-9432640c6173",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a34da869-f599-48d3-8662-2caba4cdbc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b73dbd0-fae8-43e4-8fa0-cc2d4286c424",
        "cursor": {
          "ref": "3ec2cf5a-4e8a-42c7-98cd-3c1a3b521cd8",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6a6fb215-3287-4134-aef6-4e5c437b88ca"
        },
        "item": {
          "id": "7b73dbd0-fae8-43e4-8fa0-cc2d4286c424",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d1b4ae23-69f8-4b5b-984e-08057639a0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7cbe6b-8bbc-4730-b8b5-28aa790d4a83",
        "cursor": {
          "ref": "1e64b674-cb0b-47d4-81b4-f6b728583226",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fc40ab3b-69dc-465f-96bd-96d22024f7b2"
        },
        "item": {
          "id": "8c7cbe6b-8bbc-4730-b8b5-28aa790d4a83",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b9585d8e-c47a-4ec4-9e18-f87991432489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7af1e6-bfd2-47bb-9727-0adda3e931bb",
        "cursor": {
          "ref": "8147d6ad-31b3-43ac-bcab-7168b356997c",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "463bd845-366e-4ee6-8843-d61bb8ddae04"
        },
        "item": {
          "id": "5f7af1e6-bfd2-47bb-9727-0adda3e931bb",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c86311da-d159-446a-8879-7a8f4c62c5b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590c0866-f657-4d38-bf83-b14bd44fe909",
        "cursor": {
          "ref": "98b4c109-b570-40a6-b088-ad34af05ec18",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a90d5c2d-da12-4634-bd4e-5c5f4e1434b9"
        },
        "item": {
          "id": "590c0866-f657-4d38-bf83-b14bd44fe909",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "aa746d80-da3f-40ba-a7d0-a07303bac089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1cb310-efe6-4c5a-b56d-06857f728e42",
        "cursor": {
          "ref": "acb25994-700c-4b2f-86ae-555968acf3f0",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "769f3a07-ab21-481f-b0c6-c3d40fd36a41"
        },
        "item": {
          "id": "ec1cb310-efe6-4c5a-b56d-06857f728e42",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "58c3d1e7-010f-47eb-bb61-2480aee44fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710be566-ce23-444f-8a16-331923e3e51b",
        "cursor": {
          "ref": "95079930-cf4e-40ab-9772-27286b25b066",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "df053e1e-65a0-4bef-a0ae-26bb2b5880e8"
        },
        "item": {
          "id": "710be566-ce23-444f-8a16-331923e3e51b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f3dc822b-e440-47c4-9c3f-d9c1f00ee5f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d62f0c6-ff6d-4524-af63-f656dca6c6ba",
        "cursor": {
          "ref": "80e72f9d-af5b-466d-a597-641d7025d956",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7afc794a-c71a-473c-8398-b28b0a96f7fc"
        },
        "item": {
          "id": "6d62f0c6-ff6d-4524-af63-f656dca6c6ba",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cab2debb-affa-4b49-af8c-202e7b325603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544d4a7a-9a37-4b90-a6c4-8966c37ac78c",
        "cursor": {
          "ref": "b65dbf5f-aded-43db-a7c6-031b0c66a955",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "432ff5eb-e8d5-4a4d-ad98-560981263166"
        },
        "item": {
          "id": "544d4a7a-9a37-4b90-a6c4-8966c37ac78c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1d399dbc-8fd7-4365-9049-5aa3b22e3d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5ddf75-db87-45a6-8ef8-70ce5b718cd8",
        "cursor": {
          "ref": "fc4863c6-0525-435e-8da2-ba1a2cf5525d",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cdeb9284-268b-47b4-a0e1-0e4ab77371e4"
        },
        "item": {
          "id": "6b5ddf75-db87-45a6-8ef8-70ce5b718cd8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "511e7bfa-520e-4fc4-8cc2-0744e88af2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149d25eb-fd23-498b-9707-b21f94c64a47",
        "cursor": {
          "ref": "56225072-05dd-4bd0-977b-f96fab1d9bf5",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "230eed6a-4aa9-44e1-8222-7f50f669b99d"
        },
        "item": {
          "id": "149d25eb-fd23-498b-9707-b21f94c64a47",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1d93b149-5d28-4301-b553-50273702e371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da1439d-2816-41ea-a270-d15f88bdbce9",
        "cursor": {
          "ref": "a899603c-7438-4de0-878e-4b8f25bf4d59",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b281e258-8afc-4bf8-951e-14c0abd53761"
        },
        "item": {
          "id": "2da1439d-2816-41ea-a270-d15f88bdbce9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bef25af9-53c5-44ce-bc31-6433f99ee36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18362c2d-c09c-4ecc-904a-e248cfcc9354",
        "cursor": {
          "ref": "769139fe-5d46-404e-ab3e-195dfe9802b5",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e9fcb3c3-8466-4db1-8792-4e494400d3e9"
        },
        "item": {
          "id": "18362c2d-c09c-4ecc-904a-e248cfcc9354",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b67ced33-fa8a-49a8-aead-681e7934ff08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e265beac-e674-4120-8fd0-d5e82607b567",
        "cursor": {
          "ref": "cebaa327-a3b5-4c68-9198-0318a8b53bda",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4d5f2207-06ba-452d-b356-86aecbbba1a3"
        },
        "item": {
          "id": "e265beac-e674-4120-8fd0-d5e82607b567",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9d7bc02a-b557-49b8-9ae2-7bf7c91c405f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "6389a306-ce3e-4258-bf0c-d10b0a60503c",
        "cursor": {
          "ref": "c32a84da-fdf4-45e4-aec3-778b7a2bbb0a",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "06077e95-c17b-4c78-bb2a-61a4b3ff73cb"
        },
        "item": {
          "id": "6389a306-ce3e-4258-bf0c-d10b0a60503c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ce52c36d-816f-4602-b35b-2b1c304ca0d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "396f6430-ab2f-44f8-8c5f-f78b1f7e48ea",
        "cursor": {
          "ref": "44318ab9-a7b1-4524-94e2-bd8531e6f1a6",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7d31e37e-a0ff-41fd-b71d-88b8641b028d"
        },
        "item": {
          "id": "396f6430-ab2f-44f8-8c5f-f78b1f7e48ea",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5ff5eb30-3edc-422a-a808-affcb67303f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "938c13b8-0eca-48a0-965c-2f8f432c0d91",
        "cursor": {
          "ref": "f8f2a22d-a65f-4659-951e-12c3aa366dfe",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "15dd738f-a62d-4205-97e3-b5ddb21b7daf"
        },
        "item": {
          "id": "938c13b8-0eca-48a0-965c-2f8f432c0d91",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4a671e09-2dcc-46c2-b31f-33c1c9945817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4544d471-699c-43c1-b6b4-c1f886386624",
        "cursor": {
          "ref": "b10243e7-9ecd-4335-a9ef-11313e75ffce",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "33b11fd8-304a-4877-b6c9-d4c7d213bdbd"
        },
        "item": {
          "id": "4544d471-699c-43c1-b6b4-c1f886386624",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "517e546b-9958-4ff9-ac27-722214e2532b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "a8e64a55-072f-43f8-8948-041339aa39b1",
        "cursor": {
          "ref": "dd0c50d2-0b8a-4074-86aa-be89d18cd61c",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6eb0030c-2078-40db-bee0-637194bff3f8"
        },
        "item": {
          "id": "a8e64a55-072f-43f8-8948-041339aa39b1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cea41d25-6ada-4d3c-aebd-ebfd1eea42f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 621,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "fd39eb1d-6914-4fb6-b2dd-a734f8855807",
        "cursor": {
          "ref": "c8556cc5-9367-4c66-9dac-75712f69dee2",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9504fe17-c238-4b55-a472-cb4a8c90e991"
        },
        "item": {
          "id": "fd39eb1d-6914-4fb6-b2dd-a734f8855807",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d04fd985-9183-4d63-916a-9c5e6e776785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "0abe741b-9919-4b75-83e5-76a9292c8ca9",
        "cursor": {
          "ref": "4a716e5b-b6dc-4470-99bc-bbb097467a71",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "75120dd6-06c0-451a-a694-b040631d2ef3"
        },
        "item": {
          "id": "0abe741b-9919-4b75-83e5-76a9292c8ca9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2dd7ec36-373b-4c31-b713-b0021e8eb102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "8fa9f052-a7a5-4070-875a-da6e2b150c61",
        "cursor": {
          "ref": "0071db56-f31e-404d-943e-f2c74cd74717",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "80b6b0b3-9d62-403a-a5d8-3ae2e1a76fce"
        },
        "item": {
          "id": "8fa9f052-a7a5-4070-875a-da6e2b150c61",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "56930601-83cd-4dd9-8142-69995a37a968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "985201fa-aee0-4dd6-8eb9-cc435c1845ea",
        "cursor": {
          "ref": "340023a6-1567-4cd5-b90c-b1c85f10593e",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c023ecdd-bbfb-4cee-8518-e62163c14ae4"
        },
        "item": {
          "id": "985201fa-aee0-4dd6-8eb9-cc435c1845ea",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c82ebd81-e6b0-4633-a73c-07086230fcd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "54b288fc-7c8f-49ea-94b3-c283d55eb7f6",
        "cursor": {
          "ref": "292155aa-4d1b-4089-b69b-97d3c9c7ea93",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "00054b39-275e-4c33-bccb-eec23678e266"
        },
        "item": {
          "id": "54b288fc-7c8f-49ea-94b3-c283d55eb7f6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bcc20501-aa87-4a44-af6f-4ccb6b5556fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc41dc07-7f27-40de-ba2f-a3ae73d9519d",
        "cursor": {
          "ref": "375eedd1-314b-43a6-94e3-615605933945",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6749db27-6d25-4bdd-b2a5-069a854fca56"
        },
        "item": {
          "id": "fc41dc07-7f27-40de-ba2f-a3ae73d9519d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bc503cf1-84d0-404e-bd61-594e41c273ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81b6174-eaa9-484c-9c35-4e52da6841c0",
        "cursor": {
          "ref": "5aa89c4f-3f94-4451-8109-1bc2d4d5eee1",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f5a84005-b839-4698-b286-1ef6e361702c"
        },
        "item": {
          "id": "f81b6174-eaa9-484c-9c35-4e52da6841c0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "da3925fe-9ba7-4488-aa06-79c967027ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472d4dbf-c7f9-4f46-bc3f-94323acce964",
        "cursor": {
          "ref": "09b7044b-a185-492b-86fb-f3b3abac42b7",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b2c931e4-8da9-4eae-aefb-0e62f30d9ff9"
        },
        "item": {
          "id": "472d4dbf-c7f9-4f46-bc3f-94323acce964",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fe9f54eb-4bce-43c7-b8ab-4bd02596c00d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d89a70-f009-4b1b-b679-3b0331e8709f",
        "cursor": {
          "ref": "d45a238a-31b9-468f-9971-84a5008fa326",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "dfbffd03-7a1f-440a-acc3-7e530c81627c"
        },
        "item": {
          "id": "23d89a70-f009-4b1b-b679-3b0331e8709f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d9e22d8f-5474-4a99-8682-6141dbd46bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e839eb-a23c-422d-9e5c-9a92fa809e57",
        "cursor": {
          "ref": "dee2653e-fef0-40f0-b4e1-f2c92a24de6f",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "526796c3-1d8a-4073-a909-d7da431a6713"
        },
        "item": {
          "id": "f1e839eb-a23c-422d-9e5c-9a92fa809e57",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "96a2bc35-8ef0-45d7-a31e-a4a63c73acca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a0aad3-d0c1-43b8-b1c9-245c9ab396aa",
        "cursor": {
          "ref": "f5d1b963-776b-4ec0-bdaf-cf7d4b856d09",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "059fccb0-01b5-4434-a3b2-0cab5c257856"
        },
        "item": {
          "id": "61a0aad3-d0c1-43b8-b1c9-245c9ab396aa",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "cd7275c3-50a8-4bee-a859-1597df3dea09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c62852-7fd9-4c5e-8f80-7b8311ab4cbf",
        "cursor": {
          "ref": "5f265f84-482d-4f26-961d-2d92f6c0298a",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4352f8b3-27c9-4273-87df-a58a4169f8e4"
        },
        "item": {
          "id": "59c62852-7fd9-4c5e-8f80-7b8311ab4cbf",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ab3b4cb9-4e39-41b6-9fe6-e26faa17fff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ceb0ebb-8238-4546-ac55-e1c2999fcda1",
        "cursor": {
          "ref": "5f7c9498-3291-4397-84f3-0683290d9fcf",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0fea4c7e-a9e1-4874-9979-7fd131f5c284"
        },
        "item": {
          "id": "0ceb0ebb-8238-4546-ac55-e1c2999fcda1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6b25352e-6a33-4469-82de-9a72be3eccf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a3ec8a-5d83-4582-8736-a70cbd765c2d",
        "cursor": {
          "ref": "0589aeda-7fd6-49b9-b43a-e47f897db06a",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6d5cc72b-80e9-44d9-a3ee-d9cc6f0c5031"
        },
        "item": {
          "id": "55a3ec8a-5d83-4582-8736-a70cbd765c2d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e3ad86c2-4833-48a0-b2ae-4ab0a463b726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8deac5cf-85a7-4398-bc6b-5ed0186328e2",
        "cursor": {
          "ref": "43467cbd-032b-43d3-9f5b-8e78498e7dd9",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "287efe67-c1d3-4ebb-a459-577095df175b"
        },
        "item": {
          "id": "8deac5cf-85a7-4398-bc6b-5ed0186328e2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f05577b1-823f-4ce2-9481-0816afcc0140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc05be7-98bb-4cf9-82be-edcb698b64fe",
        "cursor": {
          "ref": "9d6fa7c3-c684-4a99-86eb-33f6467a6f7a",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "593112a7-0e95-4599-bdbe-ad88c910254b"
        },
        "item": {
          "id": "6cc05be7-98bb-4cf9-82be-edcb698b64fe",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7403d53f-2924-47f2-b660-d58f281f13df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526b033a-25e2-4b81-8939-776a6b0d8737",
        "cursor": {
          "ref": "e7fd02a1-ca50-43ed-9826-0b89fa6ee2c0",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1cd07ba5-4773-47dc-a1fb-09011c7b372e"
        },
        "item": {
          "id": "526b033a-25e2-4b81-8939-776a6b0d8737",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ac7dc52b-9fcd-4c6e-8bf7-3ed38692dcc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f530e08-b2bd-403d-a7d1-00d4dfec6fa7",
        "cursor": {
          "ref": "e17624eb-61a5-4cf4-8f3d-19da1b5bc1b5",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b0050879-f209-4924-80c0-704117e2421f"
        },
        "item": {
          "id": "6f530e08-b2bd-403d-a7d1-00d4dfec6fa7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "59974418-6ddb-436c-bd73-be901590abad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 544,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "7bb15592-ae8a-4543-b736-4692cb545293",
        "cursor": {
          "ref": "3f762747-3539-4e2d-830c-3cddc941e4b1",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e81dc425-c83e-4322-9ff3-cdc6a25b1d85"
        },
        "item": {
          "id": "7bb15592-ae8a-4543-b736-4692cb545293",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b17658bb-aa20-43a6-ba56-ddeff9d3fd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 572,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "b95400b1-0d28-42dd-89e9-ed78482f7009",
        "cursor": {
          "ref": "33b52c63-8dc3-450c-88fe-fd11fc4b87ee",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cfe6d0d4-a4dd-4482-a8b0-cda38a99c381"
        },
        "item": {
          "id": "b95400b1-0d28-42dd-89e9-ed78482f7009",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c244d243-bc45-42b0-b467-670262651e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "924beb1e-169e-4ae3-9fbf-2305199adb0b",
        "cursor": {
          "ref": "b375a292-6cd5-4753-9517-757a48061e57",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "882db2f5-4d91-4fce-a404-dac74dc8e2b6"
        },
        "item": {
          "id": "924beb1e-169e-4ae3-9fbf-2305199adb0b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f8547b80-4b5f-42b4-adb4-9a2012f827f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 563,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c7314412-5660-48a2-9ab8-7369d44025a9",
        "cursor": {
          "ref": "a156753d-d210-4366-b548-8a030abe02a2",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "342b4712-db6c-49c3-8cef-3170c21cb6f2"
        },
        "item": {
          "id": "c7314412-5660-48a2-9ab8-7369d44025a9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6fee860c-2530-4455-884a-7ca4b5447678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e74b854e-2daf-46ec-b79a-86c814bd8ddb",
        "cursor": {
          "ref": "f790e914-333c-424e-a785-23d29cdbac7d",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b1eaca7a-fec1-4fd1-b71f-70c9763c2ce7"
        },
        "item": {
          "id": "e74b854e-2daf-46ec-b79a-86c814bd8ddb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "52cff118-880c-4a2a-a2bb-2a558a05fa81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72848d7d-5f67-4486-89c6-392b4db677a4",
        "cursor": {
          "ref": "9c030702-698a-4ce9-b3f9-60d388b50ab0",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0570f384-c5c9-4138-8e0b-14b932828d76"
        },
        "item": {
          "id": "72848d7d-5f67-4486-89c6-392b4db677a4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "311fc84f-151a-4479-8004-2d5782426548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "199fcda0-43a7-4813-9029-86fd455baf5b",
        "cursor": {
          "ref": "469b203f-6b49-4345-a9c9-5ea7ab041513",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f10fb88f-c4a7-44ee-aca1-b744033ac6d9"
        },
        "item": {
          "id": "199fcda0-43a7-4813-9029-86fd455baf5b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "58809c60-444a-414a-9627-c0dc56d0fcd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad1faaa-3352-4a31-9b99-8daea45f428e",
        "cursor": {
          "ref": "7ac39f3e-2c18-4b49-89aa-3f5886a98792",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8c9ff1f7-5f56-46fd-946d-428c01d3362f"
        },
        "item": {
          "id": "0ad1faaa-3352-4a31-9b99-8daea45f428e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6d46e052-6894-40a6-b2e3-2af74330749d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe3faa5-5972-42c9-ac84-b3b234f6e400",
        "cursor": {
          "ref": "90ea2ecd-809a-4707-9fd4-080a93397724",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e7112e71-fe5e-46cf-a822-f8ee424f919a"
        },
        "item": {
          "id": "ebe3faa5-5972-42c9-ac84-b3b234f6e400",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "74743c16-68be-42ff-a35f-a62df8984795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115911f1-36e5-40a5-9375-27f5d0ddfed3",
        "cursor": {
          "ref": "18dc6c61-69fe-4851-8889-09c424ed0432",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "96aaf166-a15b-45a8-83ed-b01f9f63d037"
        },
        "item": {
          "id": "115911f1-36e5-40a5-9375-27f5d0ddfed3",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "af44a08f-adc5-4870-977b-44ff5dcf8ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c929fbb6-5acd-4ec8-8e87-f0f8aec0b0d2",
        "cursor": {
          "ref": "9ffed336-3d6f-4821-9b1d-702ea29660ee",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c259c8ee-21a0-422b-b1ee-324d31d703f5"
        },
        "item": {
          "id": "c929fbb6-5acd-4ec8-8e87-f0f8aec0b0d2",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "dabe7a0c-3a18-4436-ab21-c2967f23cb28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758e8999-088c-4d43-b35f-3290eddbe329",
        "cursor": {
          "ref": "da3df38c-b248-4195-b35d-cddbb5e96de9",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "16aa7a4f-ff9b-4a4d-a09f-226cdf3008c6"
        },
        "item": {
          "id": "758e8999-088c-4d43-b35f-3290eddbe329",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "beed8e45-b92e-400b-aadc-2a709ab85cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbe1330-b01f-4810-8fd1-c3cb9dbaa073",
        "cursor": {
          "ref": "93bc9a6e-d632-40c5-a18d-3dfc3cb78cad",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b45da701-80e5-496d-b7a3-436f01b5da95"
        },
        "item": {
          "id": "3fbe1330-b01f-4810-8fd1-c3cb9dbaa073",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f193d14e-e2bb-4aab-bde4-349eab0ddab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8afd41-f609-43a6-a751-d468e7acd3d2",
        "cursor": {
          "ref": "04f6a929-5af9-419c-8404-5fd01da24797",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f9d3eb77-1c6e-4e91-aca5-8185465ea26e"
        },
        "item": {
          "id": "fb8afd41-f609-43a6-a751-d468e7acd3d2",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "264340ed-f040-4b72-96ea-3564b21d9b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d30b6c-807c-4a93-8dcd-65c71313dceb",
        "cursor": {
          "ref": "1d5838d6-ed39-4c54-a9f9-a59a911302e2",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fdaa1601-e864-46ff-92e8-3a5e6d272ad5"
        },
        "item": {
          "id": "32d30b6c-807c-4a93-8dcd-65c71313dceb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3d254fdd-f195-4442-8b9c-ccf1ab9e5676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131ee3c9-6ba0-479e-8680-278d94f56f8c",
        "cursor": {
          "ref": "2a890754-2829-4c6b-b3f0-644e72a1cf66",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "8f888e25-bba3-429f-87b0-8e5ef0c19c50"
        },
        "item": {
          "id": "131ee3c9-6ba0-479e-8680-278d94f56f8c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "22326d07-5f53-42cf-a8f8-014fadabf80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6528522b-b3a2-48c2-9f4a-0cb7e70bc150",
        "cursor": {
          "ref": "e418ece9-e4dc-4958-8af7-8ceb3f08e88d",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "46524cbc-d3e5-4281-9da7-4b8d30c095c4"
        },
        "item": {
          "id": "6528522b-b3a2-48c2-9f4a-0cb7e70bc150",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9cc911c1-07ec-491c-be2a-7e25d6be4c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d385c2ea-f098-433a-bc87-fbf081ae98dd",
        "cursor": {
          "ref": "a5c644c6-9ded-4bfd-8304-c60bd6084591",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "7f34a4c4-2505-4cc0-b8e1-047378baeacb"
        },
        "item": {
          "id": "d385c2ea-f098-433a-bc87-fbf081ae98dd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e175786a-2e6b-4b63-b02c-4d043e6d83bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6126d11-6336-4de1-83a0-316e26df3609",
        "cursor": {
          "ref": "90b171a0-d72e-4e3e-aac8-ad1ddc219c11",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "a9cb4914-8571-485a-8896-1394b5367993"
        },
        "item": {
          "id": "b6126d11-6336-4de1-83a0-316e26df3609",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a3298d93-1d3c-4037-bb87-fab8ab417956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec4461f-fab1-4f38-a351-4ea5c017416a",
        "cursor": {
          "ref": "5620e070-bd44-45d4-960c-f7238093ae1d",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "30e79d84-418b-40e9-a50e-3d427c2fb7b2"
        },
        "item": {
          "id": "4ec4461f-fab1-4f38-a351-4ea5c017416a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "89eb9474-3657-4ede-b925-709763ac5438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfd5a0a-ff77-4f65-b121-ece26c61e3e2",
        "cursor": {
          "ref": "3f5c71ae-a42f-4f0d-a5dc-7df9689a4429",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "356fcaae-dd6a-405d-b7d4-48340cf22991"
        },
        "item": {
          "id": "bbfd5a0a-ff77-4f65-b121-ece26c61e3e2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b5d92007-d9f4-493d-b34f-4d226eb138db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45806bb-5a92-4850-9b91-9819f0cecd44",
        "cursor": {
          "ref": "0ac1e7f3-70af-455f-a734-b9367d591c17",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ef41a503-91ab-44a0-9913-e139b267b310"
        },
        "item": {
          "id": "b45806bb-5a92-4850-9b91-9819f0cecd44",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a79ab5f3-c058-4770-b12c-f5d436eed5c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d2962e-e193-46ac-b95e-4ffa70fa6ac9",
        "cursor": {
          "ref": "99048e30-9bfe-4abd-a908-f38498667f13",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "dfde86b2-ae05-4cc6-b4d5-967b499e3344"
        },
        "item": {
          "id": "f2d2962e-e193-46ac-b95e-4ffa70fa6ac9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f59c96b6-93db-425d-924b-9e62aa7ea38c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ceb579-667a-4322-920f-9974b72919d3",
        "cursor": {
          "ref": "1d2becc2-aca5-417c-a75a-543a2441133a",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "219b875f-b934-4dd1-a7db-c7f76ba948e4"
        },
        "item": {
          "id": "05ceb579-667a-4322-920f-9974b72919d3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ea95367b-dd2f-4435-b61d-963e79b9606d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae715ae9-d272-4e20-83c4-4326a66f46fa",
        "cursor": {
          "ref": "55feb6cf-4b02-46a3-b08b-621ed8f42c29",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "61bc2180-1957-4ea8-bd3a-858021efa096"
        },
        "item": {
          "id": "ae715ae9-d272-4e20-83c4-4326a66f46fa",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7e200cd7-bde2-48a6-b2d5-4ed5b38287d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a716ebd3-02af-42fe-8aa6-8adc0aaf675e",
        "cursor": {
          "ref": "dd29eaa3-c915-4375-b15f-730c10bcc85e",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "07bb1833-efcb-46fa-921e-6f898529034e"
        },
        "item": {
          "id": "a716ebd3-02af-42fe-8aa6-8adc0aaf675e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "66a97dcd-0b63-442d-9e82-c16e9f4a5f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bd0a90-ef3f-4b2e-88e9-243b01da947d",
        "cursor": {
          "ref": "6570c5e7-4792-4838-b773-81b229818ce4",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "101364a7-345b-41ae-a4de-1c9e37737fc9"
        },
        "item": {
          "id": "e0bd0a90-ef3f-4b2e-88e9-243b01da947d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b54e5ea2-7734-4c4a-9ab1-ddee7aaa499b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93515a1-e42b-4a85-9ebc-afb5ac8e186e",
        "cursor": {
          "ref": "0e6f065a-4de8-4539-b27d-23636012e219",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "0e73e685-29f6-4207-a662-3b902a3a3bdf"
        },
        "item": {
          "id": "f93515a1-e42b-4a85-9ebc-afb5ac8e186e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a6fc03a8-840b-45a2-904a-436aa180d163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f4ed9a-aa87-471b-8aba-a7d6d5251e68",
        "cursor": {
          "ref": "e86f5093-9c0f-47c8-86d6-cd564ffe1d6c",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f00c09b0-9688-4714-b0a0-cf70ffb51d18"
        },
        "item": {
          "id": "f6f4ed9a-aa87-471b-8aba-a7d6d5251e68",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "20f88ef0-d3d5-4797-9747-256760aa2f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc00dae6-6c7c-447c-97fb-7372b8a003ec",
        "cursor": {
          "ref": "94172ecc-3df6-4c2c-939c-df01378a193c",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "0fda1d50-406f-4700-bf21-1ed62d2191de"
        },
        "item": {
          "id": "dc00dae6-6c7c-447c-97fb-7372b8a003ec",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c007af17-b9df-4843-9c6c-6fdc2b7e7aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e5d5d2-771d-44a5-b2d5-45e7426168d5",
        "cursor": {
          "ref": "e938485d-9ad2-403c-8d89-1e1f03941a75",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "2ab61a46-ce22-49cf-a369-d910c1c14629"
        },
        "item": {
          "id": "c0e5d5d2-771d-44a5-b2d5-45e7426168d5",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4c89f338-e9a4-483e-9fb0-1c4e5de719cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5424f1ba-6952-4aef-abda-334dcf1b7a7d",
        "cursor": {
          "ref": "7c1ae6a1-f4e3-42e9-87c1-e2d16c3bf283",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c49941c9-d58f-4f5e-9f9c-3c65c60b8e80"
        },
        "item": {
          "id": "5424f1ba-6952-4aef-abda-334dcf1b7a7d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4cdb04b5-70ba-4d64-812f-12eabf78e924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdfa4c9-537e-4bcc-8c98-f2f2031ebac1",
        "cursor": {
          "ref": "cf10ba5a-f52d-4b57-85ac-5a76034d0ff2",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "4e718142-4777-49d1-b453-709d9afd9674"
        },
        "item": {
          "id": "dfdfa4c9-537e-4bcc-8c98-f2f2031ebac1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cba06b43-ab89-45f1-ac29-976acee23b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acaef711-06ab-47cb-a2bc-0148151954c1",
        "cursor": {
          "ref": "38393460-65a6-47a9-ab19-78a842741aea",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c0e0922f-c972-4a7f-bc1e-a4fa874c88ef"
        },
        "item": {
          "id": "acaef711-06ab-47cb-a2bc-0148151954c1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8bd4ed11-5e3b-419b-bdcb-77baabfa05ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de11108-4215-4582-94a3-ef70a66ed9ce",
        "cursor": {
          "ref": "fd8bdf86-6b80-4279-b868-e77d3f2b3ba9",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "846a695e-8d83-44fe-80b5-3da046853aaa"
        },
        "item": {
          "id": "9de11108-4215-4582-94a3-ef70a66ed9ce",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d1d56d45-1a35-4eb6-8f9b-f6189fe76dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78aa878a-80b1-451c-a2ad-104a27122f89",
        "cursor": {
          "ref": "6d9b1a6f-6eaf-4f85-b276-04f9b2027f7b",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "0a6b15cf-09a3-44ac-a98c-1325a699fd9f"
        },
        "item": {
          "id": "78aa878a-80b1-451c-a2ad-104a27122f89",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5ac5793f-46d1-4959-8e83-c4dc01910073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6df7479-273a-40b0-bdc2-aac5eafda48e",
        "cursor": {
          "ref": "e3e727f9-105f-40c0-a6a7-1c94f5a8ce92",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "ff0e00f8-6539-4d98-aabd-9b716adee577"
        },
        "item": {
          "id": "e6df7479-273a-40b0-bdc2-aac5eafda48e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f88ca44d-f001-42e9-bc05-ab62f231abf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a1b287-501b-4f53-b04d-170462895c16",
        "cursor": {
          "ref": "3ef4e662-4708-46da-b5b3-bcba339d95bf",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f204cd58-885f-42c4-97a4-0bf775e48486"
        },
        "item": {
          "id": "c5a1b287-501b-4f53-b04d-170462895c16",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5a2ec59e-7e5e-423b-8606-f05daf3633cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b7cd1c-7df3-4b45-ba88-742db3339929",
        "cursor": {
          "ref": "e483fd5f-9e93-47d1-9c7f-0308da9c4442",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "6d81f2fa-264b-42a0-abdb-174bf5247e4c"
        },
        "item": {
          "id": "22b7cd1c-7df3-4b45-ba88-742db3339929",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "39eeb3c1-3602-44f8-a51b-520ec4e6b0cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82f30d9-0069-4b98-8893-6cda392c280a",
        "cursor": {
          "ref": "20887531-d47c-4326-bb50-41dcd683f2db",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "22feeec1-8aa4-409f-af69-7ab55c010867"
        },
        "item": {
          "id": "d82f30d9-0069-4b98-8893-6cda392c280a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "afca2344-e20a-495f-8abd-033401843f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ca62b5-4df9-4168-9f25-18777e8a154e",
        "cursor": {
          "ref": "ef50646e-d7b6-4727-a399-d27b8715bb04",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "308a799f-6832-4375-8d28-ec39ef5fbe21"
        },
        "item": {
          "id": "50ca62b5-4df9-4168-9f25-18777e8a154e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "37e04101-d631-4d33-a2ef-6021f4ca64d7",
          "status": "OK",
          "code": 200,
          "responseTime": 557,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dcfc939-523c-4611-9abe-6ad9ea7de7be",
        "cursor": {
          "ref": "0c58cd8d-642a-4d49-bcd0-45c65aff8b7c",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "61693398-8fe3-466b-a7fe-e5324f4910fe"
        },
        "item": {
          "id": "4dcfc939-523c-4611-9abe-6ad9ea7de7be",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "97fd6073-454e-49b4-9b98-89525eb3652d",
          "status": "OK",
          "code": 200,
          "responseTime": 800,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96b98a5-2535-4617-9c41-ef3f22b9b64e",
        "cursor": {
          "ref": "26069484-ea59-45bf-b7eb-16fed86da5fb",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0ab64364-31e5-4464-98ca-565650ce6d32"
        },
        "item": {
          "id": "e96b98a5-2535-4617-9c41-ef3f22b9b64e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0df567b0-2ece-4e89-a939-481749d5ece4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96b98a5-2535-4617-9c41-ef3f22b9b64e",
        "cursor": {
          "ref": "26069484-ea59-45bf-b7eb-16fed86da5fb",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0ab64364-31e5-4464-98ca-565650ce6d32"
        },
        "item": {
          "id": "e96b98a5-2535-4617-9c41-ef3f22b9b64e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0df567b0-2ece-4e89-a939-481749d5ece4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e61c7c4-f0cd-4e9c-8725-04f63382a8e9",
        "cursor": {
          "ref": "041d301a-525d-4923-ba8d-a1d86462a0db",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ed144e8b-63f9-4fb3-91f1-d63964e0c54b"
        },
        "item": {
          "id": "8e61c7c4-f0cd-4e9c-8725-04f63382a8e9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a9287d9b-c182-4ee9-9707-7c45eaa16483",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6eaf6cd-2f7e-4175-adc0-75c5db6401b2",
        "cursor": {
          "ref": "6482bbc8-1278-4137-a89d-cc8e22e0ff98",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b6bc0bfa-8eed-459f-8061-adb1ba4ff2e0"
        },
        "item": {
          "id": "f6eaf6cd-2f7e-4175-adc0-75c5db6401b2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f1845c73-446c-45eb-9e0f-f4f97819ed84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}