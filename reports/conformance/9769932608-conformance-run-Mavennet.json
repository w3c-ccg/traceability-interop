{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "349b1dce-22be-451a-997c-fc9899779c38",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9366c7fa-9ddc-4918-a748-9abab7823729",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1a8b3c09-be4b-4970-a9e8-332073d26b72",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c46416e1-1c72-4a67-8db3-05aac1265a69"
                }
              }
            ]
          },
          {
            "id": "293b153c-9d48-4e71-b4d1-b20c5d13ea6c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eca1efdd-cc34-41bd-9ebb-537b6ac510df",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4771b6bf-2b93-476c-bdeb-28853e31479a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "deee4600-6da9-45d0-ae65-e7b3c0fc7610",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2d47c156-6aa7-4f8f-b05e-484820c09856",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b9c0184a-201c-4407-a4ca-ad41e52e16cb",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4aea693f-5b89-4678-9ae7-550aa607efa1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b8c65af2-db05-477a-b143-597aaa9cb659"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c826d2f7-f377-4369-9c8a-a09d7f038ce0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fc38c59a-7a38-42f5-a5d2-512a9d873b86"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "456f5b1d-6b4e-47da-b7e2-3b6862611caf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a493b3c3-60d7-41a7-90e6-ab0b42813d4d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a664872-cc22-4e0a-8479-a814989bddc4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5b6ed59a-a871-4c08-8930-4e6d818e2eb6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f20f804-0e30-47af-b50d-26687944eb91",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a1ae978f-03cc-4dfb-96e8-f1b59b3b73c4"
            }
          }
        ]
      },
      {
        "id": "c00f6b44-6f2c-4a02-acd4-a056d7c94873",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "efb973d0-f5e7-4a01-ae0d-ea2d32bd9953",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4b25284-8a5f-4253-97a7-33cda9288f9f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "34730677-d21a-47e2-a943-fc33ebb54422",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97704636-1f23-4972-af97-9da70b5f003f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd93ae2f-f726-443f-b14c-14ea9ac4128c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2298b0-990d-41da-8110-b4c50eafcdcc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6155dd-6ab3-427a-a627-c7145cfab951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f2536bf-c02b-405e-801f-f8fdec2c3aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d731b348-368e-492f-b84b-d89aab8759a7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb62a7e-3432-4b49-af0a-1d25a190b811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f10547a2-fd59-4c99-b5db-7a184ea79a31"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5f531de1-f3f7-4b21-9987-c9a87b5e2605",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87c69452-76ca-4d6b-afc6-c4b7e48f691c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5270e0cf-2b70-4aeb-8db9-8c5eb8621aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd77f787-a719-4697-8b5f-df9a20858fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db846890-1910-499f-9859-c14624692028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0782dac-a460-4244-af9a-c1b628b773ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ff214198-dfde-4dd9-8f51-c66351626fe1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a528b824-e46f-4599-a86f-cbcc3953ddcd",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f7350d1-ff10-480d-8367-ab2059d465cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "09b18cb0-61d0-41e2-a3c5-0c3947023e19"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c4e3604-487f-4556-b5a6-3db2d5e017f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3e478179-d320-4ce2-8bcb-c4d947d67f92"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04e1cdcf-3348-48fa-ada4-d1c87ec55614",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60dc92ae-8e5c-4022-ad87-8e043992c3ab"
            }
          }
        ]
      },
      {
        "id": "8198cd8c-3168-423b-bdea-5bfbb69fd2d0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d0388e8e-6d36-4cbe-8607-9fc8905de004",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d744515e-7b85-4cce-88a9-38851b5426c1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1821d81c-48ab-4f79-b27b-7dbc008f42fe",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88dbf55f-652b-40a3-a8d0-cd46d99c370d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c56e6e12-e3e3-4bb8-a2f0-012bfb6d3c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a6836c-a052-4c94-a6dc-7bda9857c754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c7e492e-de03-4edf-a309-671ee3ae0439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7508d380-759b-4bbb-b8a5-408a19bc2040",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ecd594-1c58-4c5f-b135-156e3ce0318b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e097d8-b589-4b7b-8f92-65b78a76859a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5198a01-1e0c-4f9b-a9cb-9d2647310866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "402222b1-5a3a-47da-ad17-f5fefc82df6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89fb0b8-76b3-48e4-899b-6fc89f80989d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecdde7f-4251-4ed5-bb01-801779186a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a84d98-0f78-4781-906b-6aa6fca90bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f17fa5-5eb8-4ec6-93b8-be4c4b81bab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b5d769f-9689-4a8d-a951-f08ee9d8092c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b7e5ca-6e8c-45fd-872d-93afac902004",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45eca911-a92b-402b-9a2c-a394adea3f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f810db3-2b16-4364-b0ba-1c60c98c3513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ce14c9-4c3b-422c-88be-54784095b65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e90e337f-ded1-4412-89be-01e16dee99c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400590e1-f24f-476f-86e6-bece33894c50",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eccebdb-c9e9-4885-9a8a-1272ca34f860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d78d97af-5245-4c92-9f96-fd656c49bcc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08dfd4a2-8a64-4faa-8d6a-83a4c228022b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbea5aee-ee97-49a2-b3a8-45642018324e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc08aa3f-5743-41a4-85f3-cf29068439cc",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f605401f-8c99-4c18-b58d-81c22c1de305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b73fe6aa-e62a-446a-9724-dd3cc766aafa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e352e8-e41d-4614-b30e-12839bf2486b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b41c12ff-d712-41d6-99bd-06938d27a6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd095bbe-aa36-4027-b6be-c560105a4414",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a660ac8b-d1bf-44e1-94b5-a72d6001448b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c312c1d0-5d46-4b8d-88bf-9063230d1dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d6a175-5912-4873-ac33-daca5944174b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe21aa37-daf9-4e94-ad25-3d7d3872c09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbe6f75-cb33-4051-82d2-1484a5536619",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d2a8ec-a90d-4de4-8c20-23910a53b97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45c907a-7a7a-4240-ac7c-b7a2e94dcbc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e30eca-ca0e-4665-afb8-f555cc62a997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc59799b-aa6a-4dc7-94bb-2a0013102b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1402b174-d7e1-44b2-894d-f6c5eb77fe45",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aeaf234-c214-44f5-a4b5-b6e82ef2248d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d37881d-38ab-406e-b204-886cfd4590a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b075efa5-6c91-48a3-8d33-5a28607a8228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bc69b46-0fc7-4855-a340-30da6766612b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d0a8ef-cd6c-44e8-b802-4af91a5b6a15",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602aa2b5-f2e1-491b-8cff-9c5ef2ca939c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471f1ebd-e42a-4f3d-adbb-748f9d2d8b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b7d04a-38d0-4268-82f2-e639622c8425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8aad0cc-f091-44a4-b95d-38b8c19e582e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f711b2f-18f6-4d5a-9742-a67ff5ca2847",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019c3e3d-6807-4684-ae24-bf115bc55485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f93e7c-8834-4f6c-b545-e115c5412fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4804c8a0-fdf8-402a-9a36-7809f09dd2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df23488f-8c22-4a18-9224-94215cd9fac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a025c1bd-7bdc-40f3-aeff-a5d3a8bfc2eb",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e8f5a3-9b85-4564-bb4a-22909bec5c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506ad41e-be00-45ef-a209-fa73267b9bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d44db2f-89a3-4ad9-b3e3-cf32fc86d12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4e3e6dc-8b2c-4612-ae46-bb7f1f3fea26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49472f6c-6a9b-4188-9cad-38bf4f6032a0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce0f12b-1c2c-4adb-b2f5-a22f9e4a2760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b591d8f3-e0d4-4a8c-a6c2-725a7272d0ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9daa75f-7e93-48da-ba93-4b6ac2d69518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33f22a75-d439-43ef-849d-12b72aa45ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f52c5c9-b23b-49b6-9501-8f79910f9a36",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866edc81-57ad-4423-95cc-c5f1690c87d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5871985a-5ba1-4b53-ab35-a306eb98c763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08faf6ce-c530-4c17-8fa3-27dc714ea492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "def1f218-197f-4f2e-88d6-a75f3c838702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7c55ae-f1c3-4cf2-b2c1-03d82180da65",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4813779a-9588-4e79-9fc4-5716ae4a5af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e179c3a-8c5e-4e3f-8191-8356d90c7f4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf86bf6-bc24-43fb-9c04-46d32be52451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b2f7aef-23f0-43ce-8eb4-51e8260e44a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb139f3-0e26-461b-8c76-8582c90f07a7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd08d1c5-2c3b-4d56-82f5-540673514e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a5ccd74-0c6d-4e67-887b-5553055c2800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e163f0-26a5-43f1-a008-86055d543dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f5339f5-30d9-4955-aaa3-fd5b08f8da65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba617ba-6b08-40b9-8232-c364526567b9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b59656e-9b7d-434f-a785-906d6869b147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d4c4b83-6d7e-4deb-ab73-d4187ea0dc28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c53bc34-7982-4385-aa69-c4e7644b8933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e8e3692-4ff8-41a3-9da2-0784acff34cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c571c4fd-4d00-4ec1-9851-9f5261f27c39",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b984f434-b845-4eb9-b307-78c3b4d4cd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a417f4c8-cbff-4234-8d35-70c9c994b008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc2d919-bc1d-4eee-a229-b04f701306c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5990117d-558d-4226-b9c9-7d90ed3b347d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434330fb-1017-48af-b5c5-c016be3fe4b7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afa123e-be23-4c59-bb6e-42353d5db114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8725f485-b487-4c68-8be5-03efdfe78764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d807c2b-008f-4005-8a48-d7b3ae3b5e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec34b42-dd58-403a-a6ef-367171aba402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abc151b-92b0-4e71-98a6-e63a538b0767",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838fc202-c2a7-4be7-8999-3f7d12f03c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f67489c-b7dc-4e74-8a32-d94d29358d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e60de2-8ae0-4b6e-846c-b1d0185b8973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fb320d6-585c-41f7-a0c7-e2f91e6d87f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90f091f-351a-40b3-bdfc-0ab597acb325",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2540a4b-a45e-4ef5-b809-9d83d9a3c96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cfd72a7-9f49-491e-8982-1e57da3bcfa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3301356a-1e43-4e85-bb70-5d4dce107795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da472ffc-8363-4b93-8b0f-aa72c27cff0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9765d5dd-ba60-45ff-a439-d98df26155e3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40cdfdf-a889-4020-bbc3-bc4661445953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fef5a3e-291a-418e-a3b2-4b24e5426050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67dbd0b-90f1-4ea9-a4a0-2be51f6f72ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec7373d-7cc6-4cc7-a586-954e61c1c9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d94ef5-f862-456d-8a81-4778bfd54a9f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7b1100-fb65-4407-a7c8-4186357ebee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b6b25c7-b2f4-461f-bcfc-1588ffbd6e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0158c461-a6b9-468a-a257-c7cdeecf6a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2af805c1-7c90-440a-9030-805143d19fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1bcc5de-5cd2-4a8c-a64f-fc74866485eb",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9823567c-c06b-4af4-9314-ac059c16874d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a033da-273b-44f9-a5a2-2cf03b866e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752767d7-829a-408b-afd9-58a03b51cd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a07f9c-4ccd-451f-91c4-8f6b2bcdcbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bbe3fc-b71e-40e2-a758-e3d25d1fc1c4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20e09c1-b216-4381-b3ba-9e3edf3d1010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "335e446b-056f-4008-b355-14721335f19a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4096bd4d-a86d-4362-97b3-c080abbcf3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a17e53b-e3f6-4fdc-9a0f-e46207b3c76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3873a1c8-d53d-4f7e-adeb-07007004eb7b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7393e946-2fce-40e2-8416-a6ab2a2f7467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d1451a-9d65-4272-9ca4-ede65270f9eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d86f78a-97d6-464c-a3b2-f9c2c9a569af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce05a71e-a42c-415f-b5dd-1e48cb5eb738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e6947d-a80d-4a0a-8904-0839be1d83cf",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cac359-326a-4b67-97c3-22b0e133dcdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8989e1a5-1018-411b-91d1-f658b7d42275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c491a84b-ee7e-49b5-a20b-0ab53ef42761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0e45b9-972e-4ae9-acc7-10eaac07c918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028bda3e-525b-44d5-abcc-974e19a819c3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b12fd1-834f-4dde-a462-1143df59aaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c0640a5-e1d6-4684-ab64-a3f0d5fc709b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3b412e-9f18-4a7c-b8af-283f8d0cbfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e903637-e0c4-44d9-ac59-3d14a3c41ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e376019-ab1e-4ca2-bad1-cc23d7b8b71b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7f1a32-1a5b-4604-81f1-e51c9dce07fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a934215d-d67c-4966-93f2-6a06bf3c38df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8ca60b-9890-4e62-93b4-e3df4772df0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "034b7477-86e2-4c98-8c26-76e74dd2599b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ba304a-a130-46a5-bd83-e619562dfd22",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec853a5-c52c-40d6-ab3e-7c3ff58a6c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bef3941-7de3-4176-829b-8b6ff5431792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de2afe6-dfce-4e19-9c3f-ec2b6b714de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "58532bed-7617-44e1-9dff-a7d1a3f03585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d68767a-9be9-4a94-b6a2-94dbd2ed88f5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51aafafd-752c-4fab-98e7-14e498dbf4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b190d20a-6ff6-4649-99ec-fab6ad93e4ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e6e2ab-a765-4f42-a94d-2d497f62c384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa7bd73-210d-497e-bb3b-bf233c45e899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9772e803-e7a4-4e19-9c25-f6dfe37679d6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29382ea-8d7c-4b27-b5b8-1dae228c4943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f54c04e-348c-4389-b88d-364a7a4318f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8814a0-08ec-40c5-898f-83dfcc9cb0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e7f8355-b827-4314-8286-f967c5cde2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5566e0-87b0-4ea5-90fa-cc127a959f93",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760254cd-ebb5-46ff-8257-3afa6a32e47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1572c9d1-b5ae-46ea-86cb-a67299aac050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f19fb4-155a-4457-86d1-cca225147846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f80eb75-9c8d-4ce7-a8a7-aacb68851351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7185a810-2464-4feb-90b3-0ce60f1eadf5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db10618-38cb-4d69-b57b-aa50e99840f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30c4ad5d-0d43-4b33-85c3-1cba91ce9319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab808eb-4ca7-4bf0-9d16-2c0623f20e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a13f00ae-b87e-47ef-bb13-5cddfc55fd2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e818bab7-6cdc-4aab-827d-ba0af3467ca3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddc8eee-49ac-4764-bb15-c5806b40bed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd2ded9-3597-437f-a868-5f2399ea0861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e19277a-8272-4b8f-9c51-98585aa2d94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c8eb1eb8-4067-41c0-9bfd-9f09b8a7e8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bde6de-019d-40cc-9cf1-0ff06a164eff",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d344f414-2bf5-4137-a31c-eb14086c0abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b5087ea-a6ea-42e2-8fa9-d62cee1fb4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2beddac-d3c6-4667-b71a-a0ca4b2697ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a62027-e271-48ef-9a81-2fa0e89727e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a17c47-a379-4fa4-88e5-f49d8d121fd0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4ce9f7-83fe-4a13-a967-27974a49f98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6af4484-a07b-4a8c-9864-bd202514b64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9a3365-82c7-402d-8762-d382ac3f6635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4aca16c-d156-481c-9ed1-741adfe16fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a80422-8244-4734-bfe6-1f4f64e03e3d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d988c67d-bfd2-436d-bd58-04f5547b58aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e4b789-0d54-43f7-8c1c-637f50293907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52776b8-2216-495d-889b-b20bd43653e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c53801b7-07fd-4229-9ed9-a2cbdf5bb2c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749e9b97-25dd-4a82-b22c-13acc6869d0b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0422f89c-050d-45c4-b300-3f2f2e7b7644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c9dfa37-d0a3-41ee-96b0-96b2662aedd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2bd98f-7402-49ef-8792-39f82b2cac6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "23db635a-5b57-42f4-85f8-0be17b1e0f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2e0124-9e2d-45cf-8050-a8b0597bd767",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b787a2d8-820e-48b9-9781-4eb979715ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c65366c-90d2-4a3e-b5e8-8e1b5abd009f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c436cd-d500-4698-b024-abd7b2bedfba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "76a037df-2ed0-41d2-acd9-014d3c0d5027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57aabec1-617e-40c0-b248-7697a330d9ab",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b948c5c-e872-477f-9c96-95195c6abb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11eb7c80-8625-4e1c-bf03-2906db07d53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7f5fb2-2b91-4569-93b5-362bbe56b2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9207f647-990e-4180-8480-a07eac4a094f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f810c285-0b0a-4297-ad7f-6d208c341f96",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdd846e-1feb-4669-a0f2-90a28666fbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5396a2b8-72ea-4807-9a5c-92ccc1dd7fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16281585-4f6f-4de1-8931-e87b58528e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad67b07-070a-4307-b187-e77e241b70a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cc943c-7498-420a-9549-3103dbc7a6df",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51a49d6-03cc-4375-a7d1-60c7b1e928e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76156950-deaa-42fc-aad7-962c7cd4c5c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6509a6a6-7499-40d2-a85f-6597e8c28bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d52e8bd1-d6b4-4acb-8b64-548164485fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29257a8b-fbec-4e6b-9b07-d768cd587ea7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a5eee6-e797-48b1-ab6f-011de7b1c728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28925a7a-bd4f-4fac-b421-4b4066ffee0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184bb480-0b29-4a38-adfd-3cb85eaeb3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b850d4a2-94a4-4623-9e6e-d9b5ce75602f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a2a0d7-7744-4066-8a9d-5c2a0120c522",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1905b57a-ca27-46fb-9ded-09498ce1f0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "758731c5-bef8-4919-8da6-ce021236ba0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3640f1e1-f31d-45c2-8f26-b74aca775e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7115011-19f3-426f-bb9d-52941271760c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfb09f6-298a-4287-bfcb-1851b4370ed2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c9325c-28f8-4d9f-94d0-a672ccdc73e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e169f9-7943-49fb-bb06-baf3e5a74de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3119b1ad-7470-4737-b1ed-38fd5869c460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a009a6ca-9a2d-4361-9462-ccc45d058775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23c6d5d-a072-47aa-8754-1d57b81b54e9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e721db-ec0a-4ea2-8cdd-20ec68ec4b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c975cb3-3265-47d2-8b4d-441a9ef3eccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0845f928-e9e1-40d5-8797-bec5f193c008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "232af687-780e-445d-8d93-886e54c38e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47dec4a-2136-419e-8ba1-b8048af8a654",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c1de98-267a-4127-8d07-9228332253f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b35ec319-ecf5-49e2-b441-8adee42c3643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac742a6-4045-4082-b212-34283c8e1b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc7e5c8f-af28-471c-b60f-37b3bddeae10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1d50e0-da84-400d-9593-9950553ce578",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e16fedd-7f43-4951-9424-8b22f4a1d712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d437ff-054f-4bd8-99d8-41a9f1b1d8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f409b8ea-d0d6-4c35-b3ad-80a390bb5904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e88620c-6e9b-4802-808a-4d6ba0b5ef68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8094a34-8755-438d-aef8-751b56af829b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f293d16-116d-4f3e-a8df-78b1c4b96d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30d6cd82-46f9-441c-af2b-62c3e5066322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c062c7-f1d1-4f0e-8ebc-d0483ef4d950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "900b34cc-1b5c-412f-bbe9-4372cfeed780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebccafe8-8f66-405e-8621-67c6f28a47ac",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8112f45b-816f-48fa-b252-4ff209856870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a20d52e-3150-4e27-aca2-e92f77ed2a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7cb1e0-79c1-468a-9601-9cf262cd27b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "54c04b8c-f6e5-42b4-9420-b01d61eeaca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42f5306-0e32-46e9-8863-613c9e7b1c70",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5251bbea-01d9-4ae0-b4c6-438dd4aab8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148c85d5-7001-4f9b-a0fe-a5af67a4343f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84bd6389-49b0-4f2f-b200-f9ad37679eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5aab1c96-def2-4694-93cc-ecf584a32c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d92974-15d1-4a2e-9008-7d1f0f581dd5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619758d4-092e-4ae9-883f-48f460ea867e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e54c9db-7808-4d7e-ba2a-b8a3e436b405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ea1517-2dcf-4897-a8a5-b366b1eb0b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e377ef1-6e1e-4a8e-ae48-4b9dd5b391a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2dcb91c-9861-4b24-9c57-2cbf420141bd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5323e65f-d588-4aef-af68-3bf60bd31225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae57896b-e853-4c32-8042-289ae1e81616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f39dc3-4b2f-4447-a038-0c0648ce00c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2e5bdb-0bbc-4dd5-842d-910bc66d647d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301deca9-2292-4ef4-8ce8-946064e27d47",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17cc5a13-fded-4ed4-b4d4-4d114514db4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd406a25-caa6-4930-bac3-98212716b873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586474c4-d52f-4ab7-a0a5-4069fece284c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a57439a-4776-40d3-8b51-49ca8781588b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfca54e-576b-41a7-addb-272aa14eee28",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "564d6d72-4c46-4c00-9115-8a2daecdf98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e68c8a-79b0-41ce-9df5-e70ea96d254d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751b6be3-f328-46c5-8884-de3ff53c9f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b6a92842-cd40-4644-b8fe-feee191f1070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af02648-2b97-4808-aa88-06f2924b5475",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5261cc-7fe9-4f44-88c4-1ffd0819028a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9bca33e-2d5d-4c3f-9343-8a0ab267f2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9301dc8-2d23-422f-9995-4861920e657a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "047a1283-2d7e-4081-9209-e333d21f0134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e07a62-558c-4a01-a36b-976b80ded619",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f395dfeb-df35-438a-811c-a2af71e729c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a40603-16d4-4534-9278-ad9a5eb37f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1c6d15-7c13-4cee-a3f2-a5e4a3a16254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "209e4041-82eb-466e-938d-93af94836135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7872a62c-c5c8-475c-a95f-1d2e22418a76",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0e9e35-87f2-436c-89f8-ebda9649181b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1edb60a8-6504-4df2-85b4-e5fd19d06fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac81ce7-e2fb-4036-8051-c9eb5445ef94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a494bb25-23f9-464d-9f29-28276bfdde11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f996c8eb-4793-42a8-898d-6552241392e6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a75989c-6e42-43c7-9e3a-74fb11261b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492fa57f-8f41-4013-a2a8-603de6de3450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39d2473-a625-4555-829f-36954023a844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "57872360-7111-4345-9024-86d846ca148c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01820840-b915-4617-9f61-b11619b89a62",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6ed2c1-6e1a-4c0e-a3ff-e79dc06b0835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44be863-89d4-4e11-8f06-89e0ea19af90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273b2636-3529-4b18-83f5-8c4a97d165f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "43cf105e-8f3a-496e-a81c-729e83ae1473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61eaae4-b2b9-4f4a-b365-71d60dde08bc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ef62b5-fb5d-46b4-aa52-c1b8d4138125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf75543-3d44-4bc7-9adb-e5e731c253f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61846c6f-9d93-4e87-b8a0-da0022fafaa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3aae1f30-6d0d-4776-bbf8-b563570bca7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83349e7e-7ea6-48e6-af31-cf7670a5dcba",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ce3f50-5ee7-469f-bed4-deb55ce21c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a6dbb1-55e0-4dd3-989b-716fc2788158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce39fba0-e917-445d-9b49-2a2e2e9d5abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f08c59c4-c624-4da8-b59e-2c0d63ea15e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82545f2c-ac13-4c58-8899-e6dd047a6090",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0d0ba9-8031-495f-b41c-1e737bbbef21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f6f225-dd3f-4a70-a52c-7c94f6f252d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654cc2a8-dcea-459d-a372-1e8f7f2f7e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b843b7-c76c-4c16-a937-72dc85b5964b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070990e0-43b4-45fc-b889-1ce7907a6ab4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba162065-23be-4736-ae0f-384428102ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38a6701-5644-4ff4-811e-4abd43bea4de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7535d7-406c-4472-b74a-2303cd71fcdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7759767a-d816-4157-8e60-b2930780a9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ffa6f0-c78e-41c9-a6fb-cf19205f0555",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebda3ee-b51d-4785-8a69-649cfd700704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "732961e1-fdc9-40db-a8bd-6e268b8541ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6973ba1-2ec4-4377-991a-8aa191ad57ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0aef0e48-7aa9-4170-8f70-95c9291b1bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f86fe9-5edd-4463-952e-1dcbbbf83b8b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3ec85b-719b-4d14-a909-0e8bd6bb7067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c23fdf7-7d61-4edc-8abb-1c90c61a1e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88cc242b-f756-469d-89d3-a163d784e007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44f90c42-00ae-4a22-b92e-af54a9127df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7076bb3-9e32-4036-9376-416961765637",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a888993a-729f-4e2c-909a-6766af4b0722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8f8406-26f7-4d42-b849-cc6a408daaeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4301c23e-9adf-486d-b3b7-116c143ce122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "48b4ab0e-8943-4229-b4fc-471d43cb0458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd83ff58-7084-46dc-9e23-9da57aa8ce12",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ec2efc-6124-49a0-b68d-ce10c9e06a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd360e0d-847f-427f-8805-41bf5eb391b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee82bd7f-af73-4496-bc2b-a0d7ae09fd5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa9e96eb-fff1-4a33-a09b-7770e37c7aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb97fdb-853a-40dd-8c8d-5b0c83c38e74",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4fa7c59-e045-4265-ab33-f33e01a3d76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e540128-053e-435c-81a8-84cc768936ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6383b3c-2bf6-4a39-8613-b4d477650fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f301648b-ca9f-4bc8-ac96-d033cf40f082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5406a3a-954a-451d-85e8-47e52ce83bc6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d864cd-e71b-46b3-bf74-bf96a9ba5e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3477e99-e0e2-4d6b-af61-a0b8bb991449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc40dbea-d504-46f1-a72c-a31f7ddace63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b49e79e1-a1c4-4f57-9d38-7a534a9169bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0cae70-239f-4cd3-8eb1-78d9b381dea8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e6116c-3ae4-42cf-91f0-d442e3fe6da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bea23dc-b4d5-45dd-80a8-b4ccb57fc739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d165a8-5f90-4cbd-826a-e154ce85d90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2d53b8-7a24-4d8e-9e06-9989143a205f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d288fa-7404-4af3-8239-2d82492d8b69",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd99a57b-f959-42a6-baa1-1352edfcd1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec63fad8-b6e1-4a9a-8696-d5835853e11c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8953566-97ae-48d6-82cf-c1bfd7e2e553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef845ca0-8a52-47c0-a3b4-538830d6f0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecd2da7-1367-42ce-ae22-5b10b2294af4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6068178c-e230-457e-9081-5bb25dc97acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d47ba838-1ec7-44f6-b486-6c43e5f312d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8a501e-8bcb-4ef8-b043-3ef902c01f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31787c33-eb11-4c9c-8869-068c54f68b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49609ea4-5647-4065-82c3-12c9c8c007b8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67565f09-88f6-49a2-8997-50b49240eee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6635ecdb-07f6-4345-9f6a-6eb6eed06e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75178f6b-0891-4cde-ad81-3dbf60551d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5b0b219-c53e-4e9b-b73f-607d8a20bd12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f935e662-4f0e-4c2c-bd4d-b0ebb8ee9e4d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0e105b-321c-451f-b872-d0e7ed493af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d521c0-b802-4e37-996c-9daa0b4229cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b73f25-98ee-4170-8ed3-31083fcfb367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae9e9a9-3668-4ea7-80a9-189deee834dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6f64da-aa24-4663-8fc2-c18bc575cab6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cca683-8703-4132-a1be-c8a2b8493929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "646ac783-672d-4fb4-b8b1-b3c619993e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a2f206-bbd1-4a8c-ae42-1a7dc6f7aef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "797349d1-1d65-44ce-95ca-3c18d5590b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871c2095-0f60-4181-8679-d97b658e35c2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0496be6b-40d3-400a-8ca4-df9b71cf5339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449248ac-151c-4f6e-873b-ac6cfbadb1c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6be81d-ec62-4c88-a404-83b8664dc620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca73440a-c44d-4701-9ca0-04e8db31663a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28495a44-ff78-4b33-87d0-d8ee535d9967",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec858d9e-665a-403a-a2ce-57ba9b107b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8218599e-cff5-4d25-9fe5-d658199ef9d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3910c82-872a-432d-a2f4-e724e362974c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d474c1a-56ff-4766-ab80-291da2636913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5bf997-28e6-4d8a-b3c5-645e1a0e4328",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c1a718-4e2d-4ffb-955f-fe1e547704b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974ec884-3a14-4b5d-9934-ed6837ec6a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958df3d7-98ac-48b1-8649-76654e6da1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf593c74-76c5-47de-b6db-79af2cbeb698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7cfa16a-b31b-4bf7-a011-1291161fe889",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "902378c8-fb37-4105-9ff7-8ae58415c7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "065bd983-c957-49f2-86f6-e72856ca1a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a408da5c-8831-4c5e-86de-d2883d65f8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c28967ba-3c9e-46ee-8b1e-90b442906270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05af77dc-9435-4702-8bdc-fa1fa123eb10",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426e2949-6fa3-41ff-8423-9e7690af30b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c185bc40-1006-44cf-af71-78e078a7486e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbf44a6-a799-46ed-8a44-780dd2fa5478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c37deb7-21f3-42af-a9ec-3656c251a222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996164c1-211a-4402-9a50-ddbf5a6edf32",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4638d3-9830-4d11-aec2-e68d7c782a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64edb235-7036-492a-81c4-6ecb0d393391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f12851e-c58c-4e55-a299-1a8409586e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a38c78c-a99e-44f6-857c-079c7bd2f392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b216c7-2aa2-436f-9e05-c1abb1021038",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65a8cb4-5203-4c21-a936-3cb7672c02ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df339449-dd7a-4e1a-adb8-92b1bd07dd56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "664ddddc-ce11-4a1a-bb5d-a0e01f9648b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0217450c-4ee4-4901-8cf5-c6cdfb0ff25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61a3524-203b-48f6-9e75-7f7f9a71d3c3",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5bfadf-3451-4425-beff-8073b9bb7f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "524ca13f-e8be-4019-a93b-ec74a89bea29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34a0543-8c17-4180-9222-d3200564933b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2e2e870-d696-4ba5-b0ba-8d5bde5c347d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b3fc6e-b24e-4231-aed6-f58ebab0525c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4745488c-3405-463e-a538-efc971ca1b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1863b02-9850-4552-b11d-1111fddbfb9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90d00a1-3695-46c0-8e81-ff42dea0c5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5c8908-d78e-4db8-ba18-aba179923a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2221041b-8b2d-4a17-849c-922765dac6d1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13eaa1fa-9f2b-4a93-89fc-ba13e291cea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a2e63bd-b0e0-45de-9648-6f4962f2c00d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd939e2-0acd-46ef-b767-3d69012ea706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bce03442-3a97-4590-ac66-9a678634826b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d549e29-35a4-48bb-a19a-4bcc10ce55f0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d030d0-ac93-487f-aba1-055aaca52fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4541f611-9f12-4d83-adc9-3ef3586edc6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c6e3b0-0413-4dfd-8efb-142c4ded105a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b22855d-86ab-4bff-8f3c-35dc0c30620a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4596a8b-9f6d-4869-8816-1e0a94ee3fc9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6236002-3768-46b3-ba1a-876501d8cbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d4b3e4-4ef8-419b-9686-d3ecaecfd4c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57dcf1af-74e1-453f-821a-cabaf0224025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5741aa53-a748-46ae-bc29-d920da0b5d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84154af4-6de5-4750-b02b-d3748b9cdaad",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb97e76-540d-4af1-9530-2f57f94706be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8981cf9-71cb-4f63-8319-079f073108ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427caf4a-8c33-4d26-aabe-730ea8c0cd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3711bf14-4dcf-4cf8-b9bd-3d772a0faf17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f50a96-6b90-4105-bcdd-c3d74eaf5993",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbf3d3b-377c-440e-9551-f1c50d1131c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8755020b-dcfc-44a6-bc43-008ebb9ead09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7d2d2c-dd96-444e-bd49-af687c2b46b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3511a1e6-18ca-48ad-9d1f-8148e22f647b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919d29a0-3f15-40a0-b1cd-71e63cab106b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911bca7f-a6d2-4b9a-96c4-b15d0506ce65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cc01101e-9c73-4131-9558-065ff288cb55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d928c186-1269-43c0-b576-b9fb69e747fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3003575-8128-4c32-8459-3f7cdb2462d0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7f30dcd1-bce8-4d9a-b101-901756745ebf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ddf3b86-565a-456d-be1e-7f294340982f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2138eec0-761b-447f-bad3-2523ecb300da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89a6bcec-02c7-4d8c-bb55-8ffbf3210c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f96dbc-aa45-46b1-85fd-0939f6f01888",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f79040dd-f8d0-4113-877a-9e1074bc2f93"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b1f330b-5037-4388-a981-4cf78fb16cde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1ef290a-2e2d-4293-9c09-3c03f6d7e2a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98b5a8d7-64da-4019-8b9b-784424b346e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15749232-babf-46ce-aec0-4407a1a4ed1e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "32fcfad7-d82d-4b05-83b0-b8d8ac24934f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "865002de-0554-4031-9d33-57fc17b14d52"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8620e998-f0c3-4c9f-b7a8-4fa4eceb00b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "21ba6c04-8fb6-47ad-99f6-359d6cdfbee3"
                }
              }
            ]
          },
          {
            "id": "c3227752-0e5b-4270-ab20-6cb3c8f70166",
            "name": "Positive Testing",
            "item": [
              {
                "id": "86d0b468-d74d-4d98-868e-276f3aaa511d",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "8fb819d2-feea-4140-bd33-9d4a507c91cf",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc2ff7c-bbfd-445e-a12c-7067b7e746b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f1b05be2-d5a5-40dd-af24-593a95a2bc9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e14f52-9b2f-45fb-8c3f-3acfc5f7b74a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6daeea45-abce-46b9-bd9d-2d1287fd5284"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "13ce935d-70cf-4541-b944-dafa6d7af715",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df7e17ca-13f2-4641-9df1-67e5baf6e144",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "29f70f83-815b-41ad-9752-e638dfe7dc9b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29b721ea-f994-4583-aa15-0a420d7b71c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c1b9cd24-590b-431a-a50f-183c20077122"
                    }
                  }
                ]
              },
              {
                "id": "50f5bdd8-8070-4892-ae93-5c8468d8fb58",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5756874-c0eb-4ff3-973c-7db66fa641f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50654190-7b7d-41ff-88ad-30f554aca198"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37cc0c21-e2c2-45a8-a2b4-a25fd642fa57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "08dd8955-7388-4137-aab6-2c513b43c746"
                    }
                  }
                ]
              },
              {
                "id": "00d6fc95-7365-4c47-9d45-a92bad9a8e19",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef5b11ec-5762-45c3-a078-b26e7e63a47f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ffee337b-8b0b-49c5-8986-0ea4974fca11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8affd004-47a2-4e87-bdab-18c9f551c657",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cb0a2086-d80e-4351-a4c1-f31bbb9c1d6e"
                    }
                  }
                ]
              },
              {
                "id": "c163c0cd-6123-4d91-87f6-e0946bfa6483",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fffce12-1269-4fd5-b030-b50fcd2aa248",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "80b859a7-c803-4d41-a290-5b6ed1951123"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e2384b5-5e9e-4106-a84c-0b14bbbe21b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ca217b01-b509-444f-8ed1-01adcb5b5188"
                    }
                  }
                ]
              },
              {
                "id": "98cde5a5-94ea-4d28-ab5e-b8653c7ed9b0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bc70af0-2c99-4a07-bcd5-b79af504bf27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ccdb7ab-e7c3-492c-8fbb-b069a13b0c76"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c40fcf79-c71c-4bb5-aa0f-8c6b94370627",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1e841603-d0dd-4c58-a357-ef4101677620"
                    }
                  }
                ]
              },
              {
                "id": "949e5906-54f2-478e-83c6-5661178bf80f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e830eb3d-6018-4547-a845-32b2f99f5eba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "edc90284-fae1-4aa7-b019-39968b1ee75d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec6d0780-948a-43c6-b944-81d147871c4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "88c1a490-a3a8-4cf1-80f2-67807c324423"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f8b34bd2-71bf-41fe-b58a-f5f9e8696463",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4140c615-60d2-4f01-9a5d-a3e0026f40e0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d2edd8f2-334c-41b5-a571-8881e1f2d153",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c83c855a-c06f-4363-a171-990a24a14a23"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d8b03c7-e2d2-44f0-94e3-349c9d634aa5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "71767cc9-6fe3-48d4-b1d1-3a428663f806"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "618dbafa-f428-4d47-97cd-b0baf0b8a2f1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d4d8ecf-4c36-42d8-9bf1-5aaaadcd6c8b"
            }
          }
        ]
      },
      {
        "id": "3f980eef-342e-4624-8d94-766475c3e849",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ea58a44d-3a94-490b-8a8e-81eb22e12dcb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1594d8b8-f959-4298-b842-a81fe2e63780",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9aad178d-419f-44a1-9c03-ed01b2f9d9ee",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f81f12-b1ca-4555-a789-301c3acdf7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1561b580-ce49-4a0c-84e3-979e8839dbb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8bdd6a-a96e-4cf1-ab65-f7d7605bb650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "830510b7-9015-4a71-9668-5c6d0fe02b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b9203b-4da3-4374-9441-a59acbfb9cd8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7dd56a-7ae4-4565-bbd2-1868069073de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a982a9-dd39-4cc2-9685-b53ad41d5abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121ba7ad-44ad-4127-ac6a-7c7c941acb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "82a26a7e-3aa3-46b3-85f1-467ba904e060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e32ef3b-397c-4da5-8f84-7d4020877222",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab940a4-f3b0-4a32-b030-496d3a7b29ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e08ee5e-93f2-4ea8-8808-9385c74a5f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03447f2-c101-4446-839a-a5d40635b8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ace3b0e1-6167-4308-9eb7-5214d4ddb226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c225eb9-e259-4f39-ac02-3c8f8f775f61",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95848490-e7d0-4dc6-bada-f4cd46a2442c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead23be0-e406-4bdb-8081-702b3c43f037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "991372fe-0631-4e6a-8e3a-6dd44fdf9d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ec05e8d-43c4-47cb-bf79-f5f3e9ea451f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a07bd0-0016-479b-a4d5-7c54934c10eb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26149803-782c-41fe-8779-dc0b2f680d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159f0a3f-e821-48f5-acb6-f699702705ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e74593b-59c8-4334-9635-1f10de925ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba9a7f14-aaf3-475d-915f-225989c14b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5516465c-2bc4-41a4-9632-0a350c5790bc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efccc4c-90d7-4ad0-942b-6553524905fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f988ef54-d2b8-42eb-9716-d96559968eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b308c7-e338-4cdd-aa2c-d03281073a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d7a323-0890-4c5d-8b57-b446723359c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b018ae-72c5-44ef-b967-b823c402a974",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8961274d-498b-49a8-9aed-2978554cfaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "151e3c94-f332-4366-a320-4dbdc98b8755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7017b341-f5ee-454a-83dd-8351b0e0e957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d0d7163-1e35-409f-bf80-1018f25fd978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd1bbc1-dce7-4eea-bf8e-aa698be8effe",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c799572-cb31-43a3-b741-3f78a557a9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8746c24-628b-47fd-8cb7-99601df3f3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6605f1-d611-43e5-9d4e-92f703e51a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb3fd68-e24d-4e32-9f05-b8f743ee9d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49fc8c8-6ed7-4e6a-9102-fd615c01b63d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a55b65a-d8e9-4506-ada2-7ed856796647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "354c960b-6c67-4ec3-9e5c-163a79fc16be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4025d4-f80a-4498-8de9-06c0a26e2854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f947b9d3-2c31-410d-a07a-8d37572c0969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f8b00c-cf50-4d98-87be-d0a355f3f2f3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd40254e-a222-4af3-abe8-0dc02d3ab14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a382b8-5eba-46c1-94ca-e0d5c50f3e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68434da1-144e-433c-a9e6-dbff2a262164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20ae39a8-e344-42b7-9637-f60ee9cbdb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db4eb2ac-1f7f-4280-8174-5bc22b15d2a9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de572a9d-e3b5-4804-b7a1-736b2fa3fc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc77366-e134-43a2-b1d6-2e382b8520ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a3ef01-9b40-4bd9-8a9e-ffc076e04794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c92542-c52e-4a48-8e0e-ffa263447caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8bc799-9845-44ea-81ca-b05f4d9d1c0d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d97972f-9119-4704-ae89-be4b17183e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf8a7208-b9e3-4bad-bbbc-713d0791e661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf0079e-7690-4dc6-9c64-a70d51921420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eaed9712-5843-4649-a9ac-3507352556a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8235bb0d-bc56-4bde-9093-be163f6ef56b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c6291f-5294-4a8b-8af9-098a353f137f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c568e62-5773-4ba8-bafc-356917d4bc23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146a6e8d-88dd-442c-859d-b0517725dc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "59b994be-a9e7-4a7f-9b13-45930357758b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840f987a-fcdf-458f-99ba-788d8c2dac9d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d40147f-e246-4870-afae-59be850027ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f194cd-b2e7-42f4-a16a-5e4c25f836e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38504745-63f8-436e-8146-c56bf3bee14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "25b782f1-4d4c-4f8c-96cb-ea00e44ee338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca61441f-d572-4798-8bed-8e824d29f6cc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98dde5a5-7614-4cb1-bcf1-07fbf022ad38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c87a664a-ac18-4451-b9fb-8abdc6edb598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e16074-09a4-439c-bdf6-2d17c231a9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ef842c-4e46-4b80-9e21-ac348b02b98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36da211-e9e4-4de4-9568-7eaf66a7027e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890766af-aef9-45d4-842c-6877b82b12ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f93a13ed-0fba-4d30-ac7a-75b5b5c8db55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9e7bab-ec3d-4771-9f8f-287848d4f823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f30cb95-b252-411f-98a2-8b3daa93192a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccff574-6b56-4d0a-81a9-3166abea9f56",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17407bc-a084-4005-b962-b8b8c1cb3fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959e7859-cc4b-4d64-8d4e-9e5761f5e222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bcc5bc8-d7b4-4923-93ca-ebad734bfda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4075bf54-897d-4b89-a267-06cb16ec0c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4912ddbb-d113-4b71-846e-85964c114f7a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5153cb9-1591-4a6c-ba3c-dc1b68b1d4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cedf691-a056-4453-bbb2-7da93a9eb6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1397cb5d-7ed5-467f-a5f7-d7e0061b3f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a2944c3-2bf9-4ce9-88fd-67d2e2999dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6a42df-4ca8-422e-9c61-474a1e2edd5f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13162744-aedf-468a-892d-d247bb275299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82376673-c521-4d25-841a-085441238864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5fad56-04e0-49ab-a5e7-dc345735fcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e77398-0222-49b9-b7f7-4d81dede4c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e175a99-8611-4d8b-a23f-41f0435d95ec",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3680da-75b7-40af-8440-8495d455676f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5615300a-6b5a-4908-a52b-9afa958877d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac0190f-a30e-41d5-ab90-c33777565b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "428c46d5-162a-4f57-ab50-8958385a1543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54970d74-784b-4437-a82c-91972598099c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71dbe169-d72a-4dc7-bf63-d008de3c59eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba786920-6fc9-4148-bfdc-860dfa62f8d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e52f9f-cd6e-4caf-9f87-19aefe2e6b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b2262db-d5d8-46e4-8c23-564777578ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7de7be-0326-4195-b274-7a45f6a39f76",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672fc19a-93f7-4ffb-9397-aca0ecaec6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de81137e-18be-42cb-812a-6e26637e630a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc91d67-7be1-4049-8a3d-ca790a6be183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb88af9-aa51-4511-a556-53ad11225297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284ad698-2d72-4619-a1a1-cf4abb620bbe",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d9451c-b06a-48e5-92fb-446059da48ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9f82d0-2ec6-40f0-8a67-be9dd324f6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d80d43-dc3d-4f46-8382-3f306f0a8829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "166cc565-4756-4ee8-8b30-8289913e8946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e51dfa4-3824-4e99-a1dc-9417a5ea0365",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e926580b-9a8d-45ff-a452-c9f7dd668c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd013625-5522-404e-bfda-65cdcd34e24d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f770bd-14b5-446a-aa14-25e042bb8476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6533757-e561-4c7c-802a-c7a0749c7d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23842147-ecc1-469c-837f-497b8ab2e827",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbfe764-ecef-4045-be0e-2e8ca690794c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26fdcbb6-c3e3-4d73-978e-202c1c1a6f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d2fe434-a162-46cc-adbd-e2249e35a5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3cb248d-10cb-4d6e-8f91-fa5600cc241d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efb8583-5952-4683-af3d-39756175dae8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd83fe2-25f9-4f61-8b0e-ec6520480a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "322fae81-577a-43e8-bc92-44bf2fd4c1a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dff26e7-ac6b-481e-a1d6-706e4d717de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c21f48c-fe05-4de8-b2cd-45b5dd503467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4540d077-c7b4-423c-a37e-41c0d309fc0b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2f6d73-e642-4737-9fc1-78abff64ecc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a46d8d9-67a1-4b76-9afe-4128e65717b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73605b01-adfb-44b8-a9bc-c5712f2ea364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15f5cdf0-467f-4ca3-a6bc-e48382fc5e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6f3483-9798-43a5-bdbf-9665e7ccd771",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd8a4f6-c466-469f-b87f-f6c96e9b9127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d518530-aaeb-4cd5-a306-a1d6f4538a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8df3af-b479-4a0f-bd23-d8db33a67246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a45a4740-91ee-4b4a-9bfc-1923e3df861a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e714b6-8a55-42f4-a55c-1d831d5b8b56",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5f6172-e58f-485e-98e0-5a5dbfa47507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88451bec-b374-4c13-bc0c-b083048fc2a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2e5944-a5bd-40a7-b2ba-bbb9adb7261c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f77c576e-79e5-4a52-ad0e-5dc71c18a8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f7adcb-77bc-4938-adc9-5874ad2c5273",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af998b1a-e930-4fc6-bbe0-24b552b5c631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0193b197-a815-4f2e-a79a-60802642f01c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db5ce73-3029-4640-aa62-1cbdad2615c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bad17c8-5bb2-4221-a1f5-7597f2dbe92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f9cde2-5bd9-4425-8676-8d168f7b0fd8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27157b80-6c46-4369-9ee9-bc904193b251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a43b816d-1226-4eef-beb2-0187c8b25397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6346793c-acb2-4fdb-809c-e93c31c5a222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1704ac9d-52e6-4bce-8e96-ea9d0abc6f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc182eb-f726-4df2-b9a5-b4f1ac27841b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51abff0-f133-4680-9cfc-6c5a0b9ab8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8775ba3-8ca4-4a27-bfa8-f296345668ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44b716e-7cce-4dd1-8032-271e8c48f064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73d9a797-be50-4fae-ba2d-d71a89a336e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d471069-8b11-4a17-ab70-ea5388086869",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a719618-9b71-4a6d-a7cd-6732e97061f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e62e6ebb-caa5-4d61-88ca-2eae3537e015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4dda8b-1d5a-46d8-9db5-a5528866dee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8368cbcd-63db-44e5-93c6-e3b0bd5d29a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2090d8-4784-4794-9432-5ffbb892d9a6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900b5105-4508-4f98-902e-3abb4f71fafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5b8c6cd-fe83-4212-a382-8d80597a6366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8cfcf3-4519-4fdb-9302-e0e3210ea1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "026a0a55-6f9a-45a2-8a53-af6d3aa1f453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f53fde5-0668-4458-9d09-97f73ced0f51",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18269b0-70d2-4b34-9478-737041976d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dadb78df-4217-4d3b-a1d0-89c64f2ecdf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a190e1-dd37-4d7e-9c2f-1e12626a6010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c495f61-4367-41bb-ac6a-f9741c042a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbf8844-84c4-471b-8ddf-4ab0eea8c6d6",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b68680-dfac-4eb1-ba87-41d72e2a2d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a7156e-3ebc-46d2-8976-e093f71c47ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac020b3-587a-4015-a633-f6707ce51d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab35448-4e4b-4f39-9316-434b533a49d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9cd5f3-97fb-43dc-ba43-65799e8777d5",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d083ccef-1f2e-4902-a57e-d83ffedfdbd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e3c90b-7eff-48fd-8c0c-e6b92c4106f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f167ff53-b86b-4d07-b6c7-7fee9d47da04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc2bdda3-3c36-4083-8c34-e9164c7fc673"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3d59d003-de87-4c5d-bf27-7d63ae5a7c51",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "996dc315-35f6-41db-ad87-b1cdbb9c8e9a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b933166a-d2c2-4b83-8b0b-7b718a90e188",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a45412eb-98bc-4236-9154-36c1bf4888b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "432c1656-4a6a-4857-98c6-2015abf9d9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcf003d6-fc7a-4a31-abd4-4937e8b2f3b0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "245792b1-127b-45ff-bf0d-d0ffbe043d4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a44a0b28-7e36-421f-9488-40d3d685d028"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "330629c0-e624-4c54-8de4-1d79c3c90ee4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8455d2a-5f06-4e60-ab52-70d5508f1599"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3517303-7852-4a43-a64f-2364d74391fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e230fc0f-19ae-404c-bd4f-9238094df308"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c94f638-3480-45ee-b312-cfaebb5fec3b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9fbadef4-69ff-447e-9f8b-5ef73af8a815"
            }
          }
        ]
      },
      {
        "id": "3d12f3fb-50b0-487b-a243-01e9fd233ae2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "075be3c1-52ba-4271-9e75-1e3ddd62f2b2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "afab457d-b21e-4153-a6bd-18cd4bf2333c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "81295c7a-92e2-43ee-96f1-70015090290d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f7aead-2b43-4dde-a955-0b0548a2b55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beedf3c0-034d-40ca-b010-03f2a9748398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7254b37c-19d2-446e-bace-95757510f4ab",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33f60b7-a523-492e-864e-368ea94c527d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b4402c1-beb9-4c64-a2b7-a485b34926e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b566ce-0303-4747-8fcd-31b6e65cd14d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b422408-e71f-4537-86bb-1c26ad0e5118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3234b27-6f59-49c0-a797-20178bb13dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db26dad7-e940-47ff-87c3-b1b3f0d5c2ca",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c034038f-d65a-4425-901f-462e57d972ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456741cb-63cb-4e33-9144-c8178a95d6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60966789-1cdf-4d31-aa8d-627dc5af8179",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d23efc-2d62-4aec-9dfc-6c8fc5e7d8ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7cd974-97a3-4475-b883-9d1b38e36589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b3a0d1-2c1f-4a86-b68a-030b1a616901",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a309114-2b8a-446d-9432-c2cf8f30120f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f477663-7f07-499b-acb3-554c4fbc8d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c001b9-8df8-4f2a-92fb-665059618381",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96b6459-66d8-4ebf-9a82-87f5fb9751ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d4b30a-bd8d-4e12-a225-f6e795d4771f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfdaaf8-110b-4833-9492-77873ed29ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eefd8a8-f029-4066-9ec1-f378749b418f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6d3e33-ab59-4eab-9405-1f258953b80b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051dc098-597e-4bbe-837f-e7bfd7c40c9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8fa7241-019e-404e-988d-476622042c08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e64a35e-605a-452d-848b-7eb9ed5da519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bafc3b1-3e86-46f5-af7d-ea2f2b2161ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c8b4c3-b7b4-4be6-8880-0b5d34a94089",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54aa1ae2-18bb-42c3-a57f-fa49c6e63373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f2bbba-2823-4027-87d5-5f5eb66be222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4904d22c-337c-4fb3-ae63-e6652e321376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e18424-af81-43ff-b787-9ad7eb78504a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03377283-a019-4c99-a655-56487ab81108",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3289cf7e-557b-4416-9cb1-fe9751a2e6e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db87d2e9-433d-4c9d-9ed5-f17c18494a4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0f2742-ebe6-4537-9980-3e4efb6a1ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eaeac6f-6b8b-4357-8a45-a5f75cd83130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c86b2c1-d997-4577-801b-79b3f7f17791",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aeea3a4-0c2c-4794-a439-c5ae20ebcdd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd259a31-0ee6-4aa0-84a3-7ee90ffd2461"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4197c2-9920-404d-93f2-d6772d16403a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e80894d-5a82-4444-a6aa-db16acf29dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6619c3-ce48-4236-b83b-ed66208f72e4",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b578a5-fbe5-4a77-8389-f75e233a2929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "572f558e-cb06-4448-9cbb-406a72e06356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ddeda2-f8c1-430c-9a55-4ad44c2e6a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01397b6c-ec7f-4246-9828-f9322bbc3b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46cbab6-00da-4747-a8bf-7a3c8286db97",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8b7e66-f0cf-4bcc-a201-a03f844de665",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fb49fe6-a261-4e5c-a6ca-401e3e08da34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67203d6e-4238-4fae-955c-3dc26dddf002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ccb8d7e-04f6-4525-be6e-cb1724a108c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab10e633-4727-4a94-9b93-a38730fd818a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca4a180-f128-4f9f-b7e6-cdefb8f67de6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3edb4e48-d641-4e19-8e0d-ecc41e0c3756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d790c9-dcce-4b2d-9bce-cb79175011d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "874272fd-b716-4bbd-ac14-a4ae14467410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb736bc-a203-4c31-a201-68e93386d3dc",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b1a5db-f59a-452c-9a22-028d6ca99a17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0263fee-9c4e-4317-825f-07c915d5d69d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7621041-7439-4a05-95a2-83b835e60f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c11459-fa13-4c2a-b091-db61a22ddab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4b6517-79b0-45a1-af38-328e0622444a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6a8390-6887-42e5-aa47-f095dbacfbea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eb989ed-a10e-4e43-94a2-ef2368651a6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0d7cb5-43bf-4840-9c0c-3cdae93c86bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25bf24b2-96da-4aad-9d05-024dce341efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187a7280-00ea-4dab-bb34-7194b5f41fe4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e908fdf-4e40-44da-8a09-2bbc659adcea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "befa4061-2304-4b3e-8ab1-9fd00ef75643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b230d74-d3f2-4f16-996e-c06bcdbfd867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f09786-55cd-48e6-a71b-d4166f9bfe84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c9535c-c523-41ca-b1e7-223cc62b33ff",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc4027c-f190-4d7e-911e-e488b61b2706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f39b29f7-ad65-4535-85dd-ce80c0317a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f904e7-ca78-4878-abf5-62d122bf5649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f79731-8aca-4959-a99b-8a437c4a004a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b07372-b508-4ad3-9db0-5b620ff0d990",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c8f2c4-e545-4aea-b3cb-e5431dda591e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08c17aa-1cc1-4018-bc0f-a28997251cdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7013e0a4-d232-41f4-972e-af5448034fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd65769-3a2e-444b-b320-a58537c75dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c48d3d-6486-47cd-a0a3-e35cd76f4c5c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbb7649-396e-412f-8702-d8e2059ad1e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75336cc9-3629-409c-b634-264f28108cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd583f0-2eb4-4c64-928d-618cc27964ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4adef8a-0aff-477a-8d11-3d081e544aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d195b3b5-bebb-4a7a-9a2f-4e6f01366c8a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93090d1f-ece7-4e30-af2c-9b1ec0170b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47eb4755-5760-4160-9cbb-74c9389c060e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a4e1cd-3c5b-4c6f-9bc5-b34fedbfee53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e646030-51b6-46b7-9e3c-5f76099223e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4de6bb9-47ba-4c8a-8d4b-70144e0e4195",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc70301-5534-4f1a-89fd-a28be421afab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00782eba-edbe-4a57-ae31-fe49ca3103eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "716f98b0-324a-4371-88f4-1394921b232b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3482189a-1729-4670-8dfb-37955f4770b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28174162-15d0-4837-b1f2-cfd45654f94f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4785049-3280-4bdc-b1f6-91a623def65e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dec3d435-1e1e-47e5-a651-25b7bab9fa2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3449cc13-2112-4f57-b020-91fc2eacf616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bcc2969-34be-4314-afee-fda015297e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff20c941-27b7-4677-a45e-87758c97e504",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78ae7ff-81a8-4fef-be13-f473cac6ea0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a0f2f54-fcd9-4344-8686-a0ac713c577c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "083c8f65-293e-4d26-8f10-0f4102eb2766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f36659-f1e6-429b-810e-193c39c294a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59fa1b54-b0c3-4845-9672-337288349c26",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1ceecf-8482-44d0-8567-bc1b55bc7bbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a380ac2-5274-48c7-ac6a-bb641a4183ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1320a3-c1cf-4482-8257-d3469e38c2e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e454eb4-5277-4298-ac5e-3472e1f33ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19a94ef-d3c0-45e1-ba8b-12483152d035",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d5352b-27d7-4e1c-ad03-8a0ee6515cec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "757502a0-d5b0-4328-b73d-ed496cd9af3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "420aee9a-58a8-49fb-a708-1a9d480035c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa1d73d-a4b4-4a8c-8c6c-388a0c0eb35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ba6865-3c88-4633-9f47-da728710fbcc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f8e628-7f50-4152-84d1-4c2279d154d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "063d4513-5f5f-4b8f-a364-dd855f201a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "216348eb-5880-4ff6-8fa9-e88bdca477e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a78843-9cf8-4903-b657-25aa2099da71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca3de4d-5afd-4f15-8aec-07abd02d6fb9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddcba8db-2ee7-484e-ae43-217043278941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "904e645b-d3a3-46e5-b9a6-d59a6706b2c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01b2ab0-e3a3-4592-92e9-188a887939f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d811ffb-3164-489f-9f04-cb9c14447c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fccbb7f-2eec-4fe4-8f66-8d0d818afb16",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1962e46-721c-40e7-8169-21fbbc898427",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1184b08-73dc-4ab5-8d58-6e511b8b1a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e50bcd-20bb-451a-8d75-095dc02254f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0339d6a-f0a4-4532-b778-e2f48e8b641a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c590a88-6b66-46b0-9e03-43f8ac6da602",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff224c40-a210-4e37-9379-bb4ad072c924",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "831c02a1-b285-45bc-80a3-a67bf299baf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63079f3b-c108-4a3f-a147-30d437bf5042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "615cba88-afcf-4975-a1f1-be558b57eb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe5f879-92fc-4700-8af9-d25dc8bd74fb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae634d95-d560-4e24-bd3f-acfb5ccd1434",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "809be839-7368-4ca5-9672-cc838fb1aa5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ce90e7-020d-4f05-92d0-83a1ed531f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39158cfd-24be-4e98-a31e-3fd4b48a55ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf057f0-4472-40af-9bd7-be331dc9ff94",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98717b26-2549-4d4e-bfa8-f40a4ca2af2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbb58ae8-2159-4976-8e3e-2b5e87ccc737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3744a9-5f90-4d7d-b4bc-9de69e0c4fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b88fb9-b77c-4a36-802b-e52a3eb5a743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f40d40e-d1b5-409d-9ae7-6f7bb9b3e3bb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bddfda-2649-4b72-8180-39d95cdac5b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18a3707d-abcd-423a-a1e9-a0267b5c3323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a438adc-8358-4817-a0ae-d7dcd9308f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0298364b-9b30-4eb1-937a-6bdf5119080c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9980132-e14b-4c86-804b-f2a3aff953c7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5705fb22-17af-4087-a061-9241a5f35668",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a850de3a-f0ac-4fc1-98f0-2a9ada167ae4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79115994-b275-4402-849b-eb6ad83a8be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53f8807-a1fd-4387-a3e8-863027c9895b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99865cb4-853f-499f-8c36-bef614d83715",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2041b6-cc4d-4db1-aba7-1d0f772bb2eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5500d080-6f3b-4b46-8c45-8f0c46746d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4086eae-2f4f-46f0-990d-a9d88ea05c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1cbbc7-dd76-4db3-a430-3da950709233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94000a46-c470-4965-bde3-1762ee645217",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c19357-50f6-4c03-b917-975cf6db8a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce41a9c-3030-430f-8e8e-5ac86d6f4eed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f054673f-ad41-44d8-b0fb-7651e4c46bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1777912-ad8e-4155-a6fd-998d74b96e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf4e0cc-c845-42cd-90f4-b3a8f158b16d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b2371a-d5ce-4148-a993-7181b03c97a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26258740-d8d7-4e31-a443-e9158adea4e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda6f472-4aa4-488e-83cf-3c53f1f698a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42debb83-e1e6-4a63-80aa-267d54d6fe7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2ffe99-65e9-45b5-8f0e-4f205a3f0f3c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8bbce0-883d-4727-8f9e-3767bd8409f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "423798d4-d56e-4991-923f-5ba7d0650997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61523db0-ef74-4495-ad33-8b4326dc48d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca8a7cb2-6e85-4238-956c-291d654f5755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ad3c17-6dbe-411a-9e27-62449fb3fd82",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f38514f-bd93-4901-9365-487a59c5fb0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1500108c-cafa-4f6c-afcb-f28270a83857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61897ab6-8d90-4795-a1e5-73a8871937a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e772356-490f-4564-a427-201324684c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435fcef9-421e-4551-8ab6-c279f4139fd6",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8071acd7-65fd-41f3-8a20-880895134ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f5eda5-b1f0-4554-b56b-c278ac40d749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "565c0c3c-ae3e-42b7-b06f-aa5580670f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "368e8fec-58ed-43e2-95b8-d72494585975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeef9d73-3107-45c7-ad4b-a7d33b7f7954",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41bd2e3-2f05-4170-adb4-b4b6a1508fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f7e025-743f-4629-8fb1-a6d08f21bc8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4e5a50-aba6-463a-a383-1f0576bc5207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75eb7f2d-e204-4d63-a66a-1dc1b30afd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d45c5b8-f998-4040-b59c-2123a80676dc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e279e9-926b-41e3-b608-13a0a9a1633f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e2731d8-a4f8-4179-9bd4-15c04a1d5c92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1848986c-04e0-4bba-a60a-4b6379a8a7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef85aa95-4a9c-46c0-9de9-66ae0d6af3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205badb7-30e0-4d48-b099-b9bca79de3e7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5fcf0d-de06-4dbf-843e-a3500d37aebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777a081d-6555-4a40-afb6-c73f132ea989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be88cdfb-f26f-4f44-9a34-f2b0d56ae0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f329e8-cc3f-47ff-bcdc-94850645b0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8221e9c-8b02-4317-b8da-c4bd753e676b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca50b14-4502-4335-8555-e3f4216d58d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56662884-1d20-4feb-bfa8-cfa24de7e51b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda899da-7086-429b-b1d7-70e23ec7dd29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911fee47-94e3-4e54-b225-d0e8a6dc9fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5396edcf-c702-4c9f-b72d-44655ae20f97",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b10486-b3b2-4868-93ee-4ad28f4d6255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdca17a0-d5e5-4b81-a39c-fb3b2049be9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff74606-3f3a-44f7-85df-81d5b99205ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d759ac3-dabd-4447-959a-b91d98eadcfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8b7a31-8dcc-49f5-955c-d2b8e922dc76",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f627eb86-955a-4596-9626-08e1986a8d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb6b091-964a-4aab-b15e-8bab6a88c9fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea15303e-22a2-4cc4-a8f0-12986cd4dafd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f3bd8c-6831-48fd-8508-1833d12f8827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1f4512-ef0a-45fa-a2ee-284c3fdbdca2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7357414-2b67-478b-8930-e536c4840ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d738fc1-e5e6-4f68-b769-513a754bf58f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbdd597b-7ce5-4fb6-aa8c-59731d7951a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664e196a-820c-4038-b94c-d0282fefa282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16bcdc75-5fab-4902-bbce-5e41237176d8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c9bdfd-f2bc-4287-8490-ed9ca0c87c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb27e67-b391-4778-a0c8-83f6ab575b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c938bc67-3e39-46e7-86a9-90157800170f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4067fd4-aa2b-45ee-946a-e1b882cd5605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9226f887-bdd7-4389-a642-191a373685c2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b7a88d-7b1a-470c-813f-acad27284440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d0a2e3b-8d30-45d9-af11-cf6a0f7e9350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9054fef1-0606-44d3-9ee5-b8c4b7acb995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "964cd3bd-8d0b-42b7-9f04-293c20173854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceddbfe5-d07a-4da9-9a5c-adf41935114d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f61c9f0-b547-4f2c-a0f1-d663737a4562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c348d46e-eb09-4f49-bd9b-1c0c905f3fea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d545d79d-89a6-4360-bf7a-d3356340ce6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad34c7b1-6993-4bd6-afe6-d151d3d3b6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074af20b-b492-463b-a591-00005a439a3d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e17274-6fc9-49a6-8f4e-54f57328d2bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9862a155-fc69-4321-9369-a170692eacb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82205de-0e1a-40ed-aa43-94a68f2a2e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "439d6a1c-32a8-47fe-b71e-c15672c1429b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0543d5a5-51cf-4c7e-84f2-55b4d54bbeb1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d41729-1c55-46df-96e1-0109b91487f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f08d3bfb-830f-4a3d-8c70-05835f13030e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6532d52-449c-4b3f-ad0c-2d7ad6d5a1a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e775b5-234f-475f-9dd8-f5bb10468a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d520bca-d199-4e0c-8a9f-97b5f61f9a94",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b1204b-3429-455b-be5b-910e7a651f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "090f8827-07f1-44d9-870a-e8d9ee82e634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dbe221-cf94-4111-a568-426439423a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de2e157e-6239-4d36-946b-ead1e51bb05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ab5807-820b-4b0e-b66d-7dd48bd19f52",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0a8ecb-505c-4823-ac97-e1a53051682e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a6933f-831e-41c5-95ae-134d6e4db65e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1b881b-817c-42e7-b4c7-653e5d1f1dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1b701c-2849-4a13-ac32-3fceb6d1dad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5dd12e-5fbf-4115-9680-97eaceaca21b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31bfc126-3901-467e-96ff-4395b392f15e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb7dcb8-bb5b-4386-9787-2d449e01aa27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6054f767-54b2-4d70-afe7-7f7faec6de03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd1f749-6f4b-4603-829a-fa123d392cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527c14f1-184b-4728-863a-b64af4f11bd2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4847c0a1-da7a-48ac-8db2-189b4aaebcc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9202f2cc-733b-475b-af30-abbe0f426bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9255e9cb-c8f4-4717-b63c-31c70cfee6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a24f56ef-4435-4087-befc-dba6d73a9d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec03fbf9-2b38-4568-a5dc-79cd9ccfd690",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df760de-55f3-4d68-baef-42be092c2341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ecbd654-acf9-4c4b-b305-22d1741e5b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "032890d9-7936-4a96-87eb-45b168f1029a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "937626bc-5d37-4b04-9427-8a4ba940d054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a2652b-c908-438e-bec5-5b15be58f2c5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4416275-08e5-4931-930b-f7b659205457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1114c68-4afe-4a96-aa49-affce089e175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1477fd-ea2c-4a31-9147-9c7ef32d2a54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a348dd48-b569-4ca5-9266-ea484e61312d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8516b2-c2d8-4fa0-baf7-c032860dc2c0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e70bff7-5427-45d8-88d4-868ca710dc11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8162c79a-109d-4ae3-800d-6b0e06fe4aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b595d7-fb12-4818-86e4-120af2f16635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df81c30-bfe0-4196-857f-c4299619f50c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46c5f0a-9174-457a-b854-92c4b6ce66b4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c73424f-7ff3-4306-bc93-f53646a4722d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096b8be0-bce7-4599-9a7e-31a1811ccc6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c749d8-20a2-41ae-b60f-12237652e24d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e09fa2-e498-4cf8-8f69-fcabadd98635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17a6713-e53c-422d-b4f2-90a920b480a4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe159aa1-ce77-4395-88b5-57c12d4d474e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55df3180-360e-4533-aeb2-ae66faa73938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ba7509-5f92-4255-b3f1-3d78866c315f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a1f4e0-7da1-4fa7-a600-bf42d361f930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28f6bc1-dc03-454b-a873-7c9e471d6d05",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04265b29-2294-448c-b7a1-06a047a9c659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de1d48c7-a84e-42cd-b203-96dd3539837b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c14502-a8c7-46b2-8ea5-02162edff96c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9acaf34-8426-4442-a0ff-84eb705587d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d49ae0-2a69-42a6-83a2-0f1b92e32144",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00431b5-36ed-4fd7-8992-f329d544cf1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ea1dd6-f102-4f1d-9d67-a84acde72c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8689d1e1-8f52-45ec-9198-47777494e53e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c11bd10-c7d1-486d-86cd-2b5ba048f8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7d252c-36dc-4317-80d8-a41110b8a18f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8542aeb-c768-478e-aad2-03c201c0fc54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1176b364-9478-4b9e-b617-1f1a785c5bb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79126464-c5bf-402e-8634-0f1c52a25747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef0106b-d4a7-4ce2-a738-a4ac18da06a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2404ef56-51e6-4c90-b136-f5163220a223",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de04c17-6cc8-448a-a622-dd2ddf92bfae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1f2733c-f346-44f5-a338-354c80e2b334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92cea994-0d61-4261-b444-62943b9781bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "417eab98-f72b-4da7-83fe-29e2197e62d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2418d1-e92f-4c52-95b3-1dcec7d29b60",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a68fb4f-7683-4cde-9f2c-3104e0e70284",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a9e0bd9-6c14-4b07-b59d-cf375ce27b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6f161d-7b93-4aa7-819a-51b5a3ef1564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a159d071-f0f4-4902-8d54-f0e389fe3060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ea0e3e-d37c-42db-a459-76137fde006c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6fc616-e085-4572-83a5-41bc6137629d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b879c89d-83fa-4bec-9f30-94270119fb8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f9e61b-9589-433f-bb46-b6eee4378b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "547d7730-f9fb-4627-bc51-90312f47ede6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b375648-4a2b-4b70-843b-2a85054e3945",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cfc54d-c30e-4d4a-b9f3-be28ece89ed7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed5effbf-1080-4118-9e34-807c808d8f5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72bb4583-ff48-41d7-ad78-f31c32283cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd20a10f-f8bf-44d8-b17b-1af62ec359a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f34bf69-8bde-46f9-89d4-22417c74eb33",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a268a2-498d-4048-9501-75398b58c84c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b83756f0-88b7-4e00-a69e-fb3d4f6d8abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a763be-03d0-483f-94f7-4e80cf604f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23e2ec1-0123-4761-b202-741f185bdb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eba5144-23fd-4676-a138-a8aea379c142",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e67e32c-bd74-4b2f-86fa-418ff9358622",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52381cc0-ba1e-41bf-ade8-59af854f58dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e2a33a-81be-4b71-a687-81a95e001ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07928aa3-0550-424c-a954-1f39bf8034f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633f7374-113e-44bc-8eaf-3ecf9c205365",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce6959e-4783-441f-b4a6-bfa0edb5a04f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07529103-618a-457a-bb52-5c565513df36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc62b6d5-4e63-4062-9016-e1347cd74b91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd32c7a5-c93c-4b72-bb25-05897d0a5fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c6e39f-7ae1-47d3-94c1-a3c292e9def4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1e78e0-ef72-4e8f-9c6b-6759e1c5911e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74a9e20c-b754-4d97-a799-bc3529c8c20f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16c5d92-7ee6-4ba8-9966-8eaa8800f04f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10812565-01e9-4a72-a5fe-6e00de0ebb39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24859d8-2839-430d-9282-e8a477e20bd1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4314fe58-9b3d-4b24-9991-836ab60c954c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6011cec3-7306-4e04-8b4a-429eb2ff073a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad04010-4a67-4d57-bf8a-8483814cdc53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "298697f6-ec32-4d7c-88f3-042a0cb02255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7078f78-77ed-4e14-89c3-04d93635f8cd",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3daf090-33e5-49e3-993a-1bb4428691f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "535492f6-c2f3-4a6d-b69b-7406364bee02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b196f9-d56c-4846-9e57-e5584ec46a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9c2937-7099-4f9e-a7b4-9334d7c2cb55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b81b72-8a1a-4f03-9116-7c4fcd28ff7c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8950ba6e-4e98-4602-94a1-b5546aa9889b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a827a87-eaa6-4461-b235-8a9d1b05ea19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3858f9-1c78-4bda-978e-e7ce227414d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad47f8c-7181-4d0e-a5d8-9f8ca0cab885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ed1c33-55ec-4246-8144-16f2f3ab6322",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9921d6-bb7c-497d-9b18-887e7f01baa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76fed781-eb65-4623-a9e7-47c929485c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af6078c-5a09-4981-a23c-c0245dea5ab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59233d02-88ee-49c4-940a-dc3e68ec1b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24906a7-a035-407e-992a-18d7165511bd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b299a3-54f1-4f81-a9c6-d1419bc88a32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15553a1d-55a3-4f49-822e-df79c9c684a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2212e4-3b9c-47d0-8f01-d3eb42bbb850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b81e24d-67ec-4b87-b81f-243eb34941e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b439df-eb2d-4116-8fa3-12f1b9d93b6e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f022b11-11ed-422a-8d8c-1b4936f9a7ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5a9521b-bb92-4be3-ba78-46e67d81eecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91755fbd-c6ca-4ad1-8642-0558d0895cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed879c5-af7e-4380-a916-6efdc2fa2869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d18c17-aae7-49ab-bc23-55a272b4c528",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e8481d-76d8-405b-916b-effe021b4b77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1adb1811-1601-419b-aa5e-43495c8e0124"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "039c5a2c-c050-42f5-9849-d2a5580b9fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696f30de-503c-4e08-ab09-35923be30e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94cdf9a-5d70-4224-b127-de40ecf16a9a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407ec87b-f6c4-4d04-952d-964b4c63775b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ba5a3d2-08f3-465d-b0ca-d7d21fac7853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "276038dc-27c9-41b1-a845-67cf56bebd03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b738a54b-2c33-422e-980f-f5426b462c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce91713-fe39-4e2d-9b98-0bee62f36a92",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a88c6f-91b0-41ed-a448-df3f98b2cc8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d943c60-cf49-4425-8cbd-e9b4bc3cd641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b2e069-79f4-45c7-9fe4-5a0293fec01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd17ec0-9153-4501-99b5-5e8b9f216631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca73883-77f6-4b95-8c6e-73a61d48f557",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e026582-fb38-4118-8741-429e83fad9f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3054afa-a7ae-4152-b8e4-ce5a36504a6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd64754e-6539-4eac-958d-e426d87dbd7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efbd956-184e-471d-891a-89b65e437114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad67f8d8-c0d0-4c9e-9243-faeed3427188",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a31ff06-9a04-4faf-a815-24ace01a3199",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fba7e46-a247-45af-ba9c-cf408a55b7e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f13994c-60b2-4ffd-b8a2-51e9bfa97a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0a263e-2f0f-49f6-9fc0-ca4a2663f69e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e1d9d7-8db3-43ba-a9e4-7e084c7b57a9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23976d9-a139-4fc0-bb4b-547faa6563d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "389b92ac-e301-4e57-ace2-a94f38894727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fecff7-a890-4ea6-8d7a-9ede0a372da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff63255-7ce5-4f5f-9463-17f71ef98c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073f5718-4c19-4b62-baf3-fa3ab9251526",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f4b124-37b5-4de2-aaf2-3c8553cfc561",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b899ceab-ac5a-4b4f-94df-bb251a42e3e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9801fbee-3b3b-4506-bdf0-f585ce58e4ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdac0f94-c680-4ecd-89d6-04be3ff094c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9382866a-6448-482b-9fd7-5d474067d399",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9256cf-701e-43c3-a16f-d7062d3af94c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09735923-3ba6-4744-833c-796bd120fd28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "265b7af7-8628-401a-a8f1-727d178a6a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c318fa6-712c-4417-be1a-676271923404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53e3383-4a9c-47ae-961b-0701110d69d5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22dd54f7-7eaa-46a0-a558-f91aff1c79bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a57fa482-ecc8-444b-9c0a-a742fef69850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87fb122f-7ebe-4950-9c63-10fe40b20c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948859b7-e0c1-4156-9b6c-37de30f7a4ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfd3a3e-e3f6-4a95-82af-95ac4b3183fb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6542f7b9-7429-4d07-af8a-38201df879a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fa05a32-6f3f-4fe1-a94f-9c607de7bc35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47db0784-96c8-46c7-82b9-2109e851620c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e0f874-fa0c-440f-aead-1d345136d725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c58b17-1748-4327-8802-ee8340d37ccc",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b032d130-3fea-4da8-ab80-00e5ca7ddc36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00e0a991-38f8-4c10-92a6-5688f99a8614"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad57304-dcff-42e0-82a2-02597dff8785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb185b39-fc8d-4733-8cde-68fa3efeee46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed02255-39e9-4e02-a116-b5fcca2141fa",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab27a9e-c554-42a1-8558-09e0a834855c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f44854b-4aae-43af-8bf6-6b07eb7ba5a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "588fee68-4be7-4b60-958d-49ec133f86d8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6226812d-953a-4d80-a61a-9e2d1fa23956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8ead51-901a-4766-9795-5452828d66c5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f4db00-d11c-428a-9c77-992a1e898174",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5746a978-93b7-47a7-bd8c-72224b09bc19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6d37bd-ccab-4857-8378-86937e0d2e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7acd20a6-e363-4543-a2d9-aa14ff41f4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db9b7a3-9362-4dca-bb2c-6479b7b122ed",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7444aac6-7836-41fe-89e1-6bbaae9c0e31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d50d1f99-0970-4c22-9cbf-236a3a564aeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "457b2f0e-9729-469d-b888-ee96c641340c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d073549-b7e8-49a6-986b-c09c5f89cf85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc3bd2b-8890-4df4-995e-8827579d5288",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17913785-53ee-43dc-a258-37429befceff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c59cac40-d190-4f0a-9691-87b7064563de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1037c2-cee9-430a-923b-fb8c255357f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1d7acdc-1c18-498e-8d6a-5c3554f3009e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b827507d-3a83-4ed3-aea8-6ca60c74380f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6fc90f-0e4e-4a89-addc-16a9824a3ab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "485dc9fb-5719-40c6-9a98-9ddc7b63ee91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8dfcc9-ecb6-43d9-b388-1d1761f4802d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0910843-9466-43a9-b0e0-50cd673a51da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c1ba4a-324e-4ae6-9738-216132cff238",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6afb831-ad8b-4e76-a804-622b0a8a2538",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f180846-d4de-4a01-b633-6f4774b1e476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef09626e-1f0c-45c2-bd0f-07db7d01b771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846db8e6-2390-4979-a673-802064c2892a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97d5769-4282-42e4-b3f0-7899acd1b0ff",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b7ea31-6dea-4dd5-9e00-d692e26b8c6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4932857-e096-4934-a68c-ab012cb7e84e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ef76b1-d4ec-4f2a-8147-4d69c84bd07a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc891d2-9488-4a78-a2d5-80c18259c396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8921e5-49d8-44db-831a-1371e82141be",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf89cd9-4765-4519-8f4f-b5f4abbc01b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b2af2ef-daff-401b-8289-80fa5ab9c0e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fca155-f737-475b-af75-df9543ef80ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4137c833-fc18-44e1-a69c-17e1a4d44b96"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "daf0d5b3-7583-4d81-b61b-da79ce944cda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31c8a528-d9e5-4c98-aa6e-a49093cefd84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "398aa598-f534-4978-ad8d-9e0cb93a0445",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b90f3f95-4212-46f5-acb1-2110016819c6"
                    }
                  }
                ]
              },
              {
                "id": "78db6136-ba0c-47f2-bf2b-ec72893febcb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a40494e5-f355-4bf8-abdc-1e1a9db14f8b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5daf03-9b33-422d-aff6-575fae043ccf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4851f5dc-8c3c-42b8-a98c-56b411786098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3db6332-4338-47fe-8af4-5f27ada9b383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "589240c3-3ba5-42ff-8675-5f7f4fcdd347"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5d20b82-939b-47c1-aa8a-355540746feb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d314d24-8d2e-426b-a596-654219e6da80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f01d332-582c-46b2-871c-7e0de27555ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69cec8c5-ed9e-4748-b5cc-860d683117b5"
                    }
                  }
                ]
              },
              {
                "id": "0873945a-acec-4069-8d00-55982fd764f6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6834d5b2-a30e-46c4-8ad2-8954dbddad4c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d08ab9-4d67-42ef-9cc7-f17eb07d9e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "50b71da7-8642-49e1-91c3-28ad46cdaf62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed80a6d5-21d2-463e-be9e-beef4b62174c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aefef168-a0b2-47bc-b4af-029225b3adf4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "382a6367-cd6a-49d3-869e-5d293edd64b2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8549b44a-68aa-48ff-a157-0e7081aec144",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cb49c43-dc43-409b-9116-45b36d51bb60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "52e037ba-62a2-402b-b61d-4c9cf051a807"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4feadacc-90c7-4480-893e-651c20bcd7a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea00f3a0-1427-49b0-b328-60c64cdf017f"
                    }
                  }
                ]
              },
              {
                "id": "287fadfc-e5a5-4e29-94b7-ce2686ea1630",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28af684e-f9f1-422d-b7aa-7433392c7a30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5ba20939-a465-4178-bd2f-47880621b6f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df50ae67-aaa1-43d6-9b32-02fb44eb0208",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9a89ced-5247-478e-a6df-b174db2eb2f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e26a0f49-e694-4d98-95a1-a723f29073bd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7e50d0d9-ef77-495e-9dc9-baf5cd56ed80"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33c53282-b3fb-462b-8031-b3fada105d0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c170449-8365-4a87-a965-0b5dbf0ab117"
            }
          }
        ]
      },
      {
        "id": "817dab43-3586-4e57-9a33-0137d097791b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6fa21b64-758e-49b4-8d39-a08b32919e9b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "62ec371e-7218-4ba5-b274-bdb1b796e99e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8395950d-bfff-47ac-a8d3-977a1ed97b7b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c430ee-3582-444d-ab65-5986587ca730",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7ab9cf7d-9a98-4d9d-84b5-7d3dd6a0e47e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e6575f-5e50-4478-b079-1c6a0e3d20b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "269f9f0e-38c4-475b-98be-66a8e16674a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12e08418-2454-409e-a946-e9964f522e1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d15b1b13-3d9b-4569-bac1-05a47e4fdee3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "64a289c1-5c0a-481d-af19-5965713447b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bf6b644-35b5-4ed2-8fe5-63c919c27104"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da06ff18-b88d-448f-9355-14659173bce0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1a411ac3-4b29-42a0-aaaa-fac5e8b13007"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "100f3a97-05d4-47c9-a367-56d63b3db444",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "290fb9b2-e200-4e02-9c3e-142c840e992b"
            }
          }
        ]
      },
      {
        "id": "6cc4b076-8913-4958-bf43-16f99f6b84d6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5c0fc668-cdc1-4238-bb44-b50e9ee7f97d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4566c426-9785-47e3-8a1a-1db3ac8653f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c73f35d-d9ce-43cb-9f9d-ad9fb74e2581",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9d730a-15e3-46f6-9d13-f4ca35ac6fa6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13d3fb49-e4f1-4813-8479-df943c4be32c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7892cfa5-98c4-4425-8223-24871b175426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80845ae4-8e0d-47d8-9320-5e48b44b3ab0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee244344-a4ae-4887-b08d-c6fc12b308c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8bf7555-790d-4c21-b311-be3f64cfb9a2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "09ce142a-b190-4ca9-b60d-84ea59856ecd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e19ffee4-3caf-417c-886c-481bf1dba12f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bca6c91b-2d16-4635-8633-7e7429285967",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "97ee37d3-c5be-48b1-af53-ecf279241baa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "495a9eef-c88d-4471-999e-fb94e8c30ae7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "014f6ca2-ca9f-468c-bfb6-afc5c050db20"
            }
          }
        ]
      },
      {
        "id": "361cbe42-3029-4f33-abf5-4e90d78e09ed",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b4adb538-02b7-44f4-87a8-8a11f7875caf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5738d7de-e3a7-45ee-8cf5-398d51024459",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d388de6a-f79d-432e-93a7-b09e956b4d55",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ff2082-4cf7-4341-a816-8b1373ffd3b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7f9b9c0-cf6e-4b13-b478-af0adc8ceeac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3419fb-e56d-44d0-8a97-a11d1001f081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aaee621d-917b-43b7-9cda-7aa5bce40bec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74a4e4ac-5afe-4fb8-a02f-e5bdf45328a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b882e72b-36ed-43e0-8fd1-e59cd2a94b03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1f1325f-55e9-45c5-88e6-880bd59b59b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ff6bf8f-4a92-472c-bff1-498d0b98081b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c50484fd-005b-4cee-b2f8-ebb05e785882",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "280c9b84-8df0-4e0b-9a88-48e67620307e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ba2e328-35af-477a-a2c2-1d8a41086fe6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a12da1e-3c94-43fb-8c1d-0e50b60f09a8"
            }
          }
        ]
      },
      {
        "id": "00e6e7c0-4a24-464e-ba49-a133b98fc5fe",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce7e2bc2-5c51-44ae-819f-729923cedba6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6fcb2823-a10b-4180-82a8-47ff148bd379",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "30fde5a6-49ef-495c-ba09-e55c0d423b60",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95a33d2f-229b-4346-b481-29bf6250c5c6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2dcb87b-bb36-4154-825f-8865c2f92711",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 72.95634920634917,
      "responseMin": 10,
      "responseMax": 697,
      "responseSd": 87.9511164696562,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719967120102,
      "completed": 1719967146792
    },
    "executions": [
      {
        "id": "9366c7fa-9ddc-4918-a748-9abab7823729",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4319fa6c-0c2f-4cac-8123-1574afc258ad",
          "httpRequestId": "a6b2241c-7f67-4c49-9f89-c66130bf635c"
        },
        "item": {
          "id": "9366c7fa-9ddc-4918-a748-9abab7823729",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "cfd9d639-cec8-4d87-bf32-c7f023969386",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "293b153c-9d48-4e71-b4d1-b20c5d13ea6c",
        "cursor": {
          "ref": "da972b50-855d-4386-aadd-b905036e4406",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "87c0103d-e4c4-4587-b621-b56f7c5947c2"
        },
        "item": {
          "id": "293b153c-9d48-4e71-b4d1-b20c5d13ea6c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "77da306f-05c1-4e75-83f6-431f2acd5ca3",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "b9c0184a-201c-4407-a4ca-ad41e52e16cb",
        "cursor": {
          "ref": "f1e02de2-7a27-4bc2-8376-9c64adb5da3d",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "36445870-91b0-4520-a501-80b1bf0ae5d2"
        },
        "item": {
          "id": "b9c0184a-201c-4407-a4ca-ad41e52e16cb",
          "name": "did_json"
        },
        "response": {
          "id": "f0566c90-eb4c-4d26-a6ba-d8433f8fd479",
          "status": "OK",
          "code": 200,
          "responseTime": 336,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34730677-d21a-47e2-a943-fc33ebb54422",
        "cursor": {
          "ref": "0832f9be-5942-449e-8faa-4cc7cc45920e",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "471a55be-5b88-4894-bbd0-788fee578695"
        },
        "item": {
          "id": "34730677-d21a-47e2-a943-fc33ebb54422",
          "name": "did:invalid"
        },
        "response": {
          "id": "6ffabaf8-3449-4cf2-9a9a-87742cea4525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 526,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34730677-d21a-47e2-a943-fc33ebb54422",
        "cursor": {
          "ref": "0832f9be-5942-449e-8faa-4cc7cc45920e",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "471a55be-5b88-4894-bbd0-788fee578695"
        },
        "item": {
          "id": "34730677-d21a-47e2-a943-fc33ebb54422",
          "name": "did:invalid"
        },
        "response": {
          "id": "6ffabaf8-3449-4cf2-9a9a-87742cea4525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 526,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b2298b0-990d-41da-8110-b4c50eafcdcc",
        "cursor": {
          "ref": "584dfd9a-d501-4193-b11f-9e46aac3a905",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a630d260-4d61-4dee-8a0d-fb3fa6134aef"
        },
        "item": {
          "id": "3b2298b0-990d-41da-8110-b4c50eafcdcc",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "25dbef0f-ab5b-44c4-a8a4-77b130389f82",
          "status": "Not Found",
          "code": 404,
          "responseTime": 324,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d731b348-368e-492f-b84b-d89aab8759a7",
        "cursor": {
          "ref": "1b860b27-26b8-424b-9e71-a6c2c1ee7dc8",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a8fcb4e9-ba71-4154-afd8-f8e56770ab19"
        },
        "item": {
          "id": "d731b348-368e-492f-b84b-d89aab8759a7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "dd35deba-d35b-4e3a-a4f2-910bfc5c1a6d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c69452-76ca-4d6b-afc6-c4b7e48f691c",
        "cursor": {
          "ref": "b78c12cb-89de-42c5-86ae-fd91bde8e60b",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "32b8b908-065a-4136-b481-3dcabc0bc83b"
        },
        "item": {
          "id": "87c69452-76ca-4d6b-afc6-c4b7e48f691c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d2c4cfda-0e9d-4817-a5f9-707847825b72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a528b824-e46f-4599-a86f-cbcc3953ddcd",
        "cursor": {
          "ref": "198f4752-09df-4bea-816e-56e92891db78",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c38bb532-de01-4b71-98f4-41ca56378467"
        },
        "item": {
          "id": "a528b824-e46f-4599-a86f-cbcc3953ddcd",
          "name": "identifiers"
        },
        "response": {
          "id": "8775c4b2-b80b-4985-a188-e76ffd87a8c9",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1821d81c-48ab-4f79-b27b-7dbc008f42fe",
        "cursor": {
          "ref": "63c65589-aea3-498e-83a3-2c7626099fd8",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ba24dd2a-413b-4b24-9256-b4a12228fe9b"
        },
        "item": {
          "id": "1821d81c-48ab-4f79-b27b-7dbc008f42fe",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "27cc395a-7ce9-459f-b45e-ecef79540421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "7508d380-759b-4bbb-b8a5-408a19bc2040",
        "cursor": {
          "ref": "a93875c4-c924-41fd-85be-0258c2171732",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "750fcd01-e388-4357-b794-93dcf53b1e2b"
        },
        "item": {
          "id": "7508d380-759b-4bbb-b8a5-408a19bc2040",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "098a1fa1-6551-4287-8b43-dd3b0ed6b6d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "a89fb0b8-76b3-48e4-899b-6fc89f80989d",
        "cursor": {
          "ref": "4d88315e-c7c0-496c-9b9e-b2372d7ea9f7",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a3ce5e08-ec10-40f7-9945-5ac47152e9b1"
        },
        "item": {
          "id": "a89fb0b8-76b3-48e4-899b-6fc89f80989d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "33359bc4-b6e0-4ee4-982e-e257e6b25c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "f1b7e5ca-6e8c-45fd-872d-93afac902004",
        "cursor": {
          "ref": "065448ec-0b8f-408d-be7e-a31d1fae8e2c",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "deb38bf6-f384-4689-b40e-e8b8f4633adb"
        },
        "item": {
          "id": "f1b7e5ca-6e8c-45fd-872d-93afac902004",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "34ccde13-475a-414f-9ada-8b3ebd6e65e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "400590e1-f24f-476f-86e6-bece33894c50",
        "cursor": {
          "ref": "fb21db84-ea11-4e67-bdfd-f91c70a2a02a",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4b28c682-0d2e-4370-8419-9958d8d99760"
        },
        "item": {
          "id": "400590e1-f24f-476f-86e6-bece33894c50",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fd7d26c5-ff65-4e2a-b40c-aa7cf1b5bb5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "cc08aa3f-5743-41a4-85f3-cf29068439cc",
        "cursor": {
          "ref": "21187c00-53a4-4409-b20b-1912ddb0c446",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "36ad6ef2-e368-468f-8a03-266289b19fb3"
        },
        "item": {
          "id": "cc08aa3f-5743-41a4-85f3-cf29068439cc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b0f69088-2493-4caa-ab2a-dc15758461c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "cd095bbe-aa36-4027-b6be-c560105a4414",
        "cursor": {
          "ref": "8f67ca84-2412-4711-839d-d808bd060dbd",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cfc06fa0-6236-486c-adaa-0f397093099f"
        },
        "item": {
          "id": "cd095bbe-aa36-4027-b6be-c560105a4414",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "284c2925-79f9-42ca-9f06-4608b8ad0bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "6dbe6f75-cb33-4051-82d2-1484a5536619",
        "cursor": {
          "ref": "f13c4df8-084b-4a94-aa6e-cbbe95e88d4d",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b4ad0056-2aff-4cc2-aab3-b29f13101c4e"
        },
        "item": {
          "id": "6dbe6f75-cb33-4051-82d2-1484a5536619",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0c931f20-8260-48bd-ba16-a8b66e93b978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "1402b174-d7e1-44b2-894d-f6c5eb77fe45",
        "cursor": {
          "ref": "bfc6458f-46b0-4279-9a0a-e7d488f490f8",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bef8dbe0-be2c-4bc8-bb36-d5489e11b8d2"
        },
        "item": {
          "id": "1402b174-d7e1-44b2-894d-f6c5eb77fe45",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "24e09286-dad2-45b4-97de-538067cbb2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "e0d0a8ef-cd6c-44e8-b802-4af91a5b6a15",
        "cursor": {
          "ref": "abc4430a-1779-4649-86a6-971ab7082ac1",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4b0a096b-fc0a-4174-889a-c0507ffaa9d3"
        },
        "item": {
          "id": "e0d0a8ef-cd6c-44e8-b802-4af91a5b6a15",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d4b010e8-66b0-4b22-9069-a241f7548e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "2f711b2f-18f6-4d5a-9742-a67ff5ca2847",
        "cursor": {
          "ref": "c3c4a39f-4bfd-45f6-bf29-21b6495bcc8f",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "bb499dd0-046b-400e-9938-c651dd03319f"
        },
        "item": {
          "id": "2f711b2f-18f6-4d5a-9742-a67ff5ca2847",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "dce57d91-b657-472a-9c21-a1c4efa20055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "a025c1bd-7bdc-40f3-aeff-a5d3a8bfc2eb",
        "cursor": {
          "ref": "a472e730-6654-4a80-86c6-54ea501b751b",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "80dcc00d-d3e5-4f5b-a5b7-3a70ebf7809e"
        },
        "item": {
          "id": "a025c1bd-7bdc-40f3-aeff-a5d3a8bfc2eb",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3fd17304-741c-4b8c-b94f-fab2e1ecff74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "49472f6c-6a9b-4188-9cad-38bf4f6032a0",
        "cursor": {
          "ref": "49c178ae-c2c3-4dbd-bc89-a90e3c54ad7e",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "498d2135-d7e7-4609-bf74-56d1857908a6"
        },
        "item": {
          "id": "49472f6c-6a9b-4188-9cad-38bf4f6032a0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ba74d28f-9018-4a09-b86d-16477b18c691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8f52c5c9-b23b-49b6-9501-8f79910f9a36",
        "cursor": {
          "ref": "f2a775db-bc5f-4214-a436-b26df65d0eb6",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5ee46c66-7fa6-446a-9c69-c8566d0ff53c"
        },
        "item": {
          "id": "8f52c5c9-b23b-49b6-9501-8f79910f9a36",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "da6b1650-1724-41d7-9b67-3ebd23d3d932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "fc7c55ae-f1c3-4cf2-b2c1-03d82180da65",
        "cursor": {
          "ref": "57720f7e-06d4-451b-acf6-6e44fd9ba2a1",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d3eafa75-81eb-4d65-9083-1d04f548f1e4"
        },
        "item": {
          "id": "fc7c55ae-f1c3-4cf2-b2c1-03d82180da65",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b69657ce-52d9-49f1-b879-afa967510ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "0cb139f3-0e26-461b-8c76-8582c90f07a7",
        "cursor": {
          "ref": "54fb12b7-db83-4ea6-a9d5-d45e22a257a2",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a8490617-1986-4704-9c20-0b76a9a01f8c"
        },
        "item": {
          "id": "0cb139f3-0e26-461b-8c76-8582c90f07a7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a744c016-b8c3-42be-bc8d-3eda32dd08d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "5ba617ba-6b08-40b9-8232-c364526567b9",
        "cursor": {
          "ref": "454cfd4d-80d9-4bd4-b635-7be541fd1e9b",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f6d1fbfb-c865-4846-86bd-5926c54e3ca2"
        },
        "item": {
          "id": "5ba617ba-6b08-40b9-8232-c364526567b9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "145a66c3-46df-4db9-b2b1-e5314705294b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "c571c4fd-4d00-4ec1-9851-9f5261f27c39",
        "cursor": {
          "ref": "73883d22-39a3-4897-9b1d-a79d76497bc5",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "82817576-3ff1-4f2e-acdb-c5bbd415b058"
        },
        "item": {
          "id": "c571c4fd-4d00-4ec1-9851-9f5261f27c39",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "82f7c62a-733f-4981-ad7f-dcc2474578df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "434330fb-1017-48af-b5c5-c016be3fe4b7",
        "cursor": {
          "ref": "46054ba2-5350-46a0-9f5a-21b308310718",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "62283010-493d-4b1c-b62f-93a54bed4cf8"
        },
        "item": {
          "id": "434330fb-1017-48af-b5c5-c016be3fe4b7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f33d1cb9-0611-4678-8613-515bf5b2b557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "2abc151b-92b0-4e71-98a6-e63a538b0767",
        "cursor": {
          "ref": "081549b0-7bd0-4460-b6c0-214d6e008c8d",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "00ccdeed-c28e-4c2e-9944-54667c1f5a4b"
        },
        "item": {
          "id": "2abc151b-92b0-4e71-98a6-e63a538b0767",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ebfd13f1-a2d5-49af-8862-0b69a3543222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "f90f091f-351a-40b3-bdfc-0ab597acb325",
        "cursor": {
          "ref": "392a020f-30e0-439f-a122-f1f5f5294792",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1125d8e5-893c-4d47-a864-c2ebb34001b5"
        },
        "item": {
          "id": "f90f091f-351a-40b3-bdfc-0ab597acb325",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4c86241b-4e22-422b-9317-6804ee80a8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "9765d5dd-ba60-45ff-a439-d98df26155e3",
        "cursor": {
          "ref": "0c3e913e-7b9e-4ade-856c-193a86155c2d",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "79fbb09b-1eff-453e-8d75-2de0c7973d3d"
        },
        "item": {
          "id": "9765d5dd-ba60-45ff-a439-d98df26155e3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e7f934a2-3240-4391-b8f9-07b2b609e195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "04d94ef5-f862-456d-8a81-4778bfd54a9f",
        "cursor": {
          "ref": "adf81f29-9cf1-4354-9270-dc38620311c1",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8120febb-a6c2-4329-9281-ad28f9a00c69"
        },
        "item": {
          "id": "04d94ef5-f862-456d-8a81-4778bfd54a9f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7f44c899-cbd8-4171-ad27-7a9078a944cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "a1bcc5de-5cd2-4a8c-a64f-fc74866485eb",
        "cursor": {
          "ref": "6129e6eb-cd61-455f-a0e0-ebe1bc6f972f",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0099addf-0d47-47c2-9381-55ac530cdbc0"
        },
        "item": {
          "id": "a1bcc5de-5cd2-4a8c-a64f-fc74866485eb",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d62fd27a-54b8-4031-bd06-9c97e98dfa95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "84bbe3fc-b71e-40e2-a758-e3d25d1fc1c4",
        "cursor": {
          "ref": "b53af59f-12f3-4656-91dc-99857e5511ad",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1f459a64-f20e-4ffc-814b-a2b35b799979"
        },
        "item": {
          "id": "84bbe3fc-b71e-40e2-a758-e3d25d1fc1c4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0169357b-f15e-4372-93d7-0701e650fdb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "3873a1c8-d53d-4f7e-adeb-07007004eb7b",
        "cursor": {
          "ref": "932f5736-b4a1-483e-bf1c-27be6c7a988a",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "16672bf5-07ba-41e2-b20d-40f946e6c12f"
        },
        "item": {
          "id": "3873a1c8-d53d-4f7e-adeb-07007004eb7b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c441b9c9-95b3-4474-a207-13369f321a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "e6e6947d-a80d-4a0a-8904-0839be1d83cf",
        "cursor": {
          "ref": "7ea7d66b-451f-4907-9bd3-4f2c0340e927",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f25be0d5-d95f-42b0-b610-e168af02231f"
        },
        "item": {
          "id": "e6e6947d-a80d-4a0a-8904-0839be1d83cf",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0735230e-d71c-49da-bdea-d0469786f470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "028bda3e-525b-44d5-abcc-974e19a819c3",
        "cursor": {
          "ref": "fed6a181-5c20-4622-8364-ce344a113523",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9ead230a-9cd8-4f1e-9404-e2b19fb8d0ed"
        },
        "item": {
          "id": "028bda3e-525b-44d5-abcc-974e19a819c3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "75f61cc1-44f9-43cc-a0f0-e4bac34e9c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "0e376019-ab1e-4ca2-bad1-cc23d7b8b71b",
        "cursor": {
          "ref": "3caf2de9-36ed-42c7-bf21-beaa40ee39f6",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2d7629a3-ad36-40db-ba1c-d8e84260a132"
        },
        "item": {
          "id": "0e376019-ab1e-4ca2-bad1-cc23d7b8b71b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "664070f7-f5bf-4ad3-8f78-c0a70111824a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "20ba304a-a130-46a5-bd83-e619562dfd22",
        "cursor": {
          "ref": "d0b9b665-afb3-4c40-8785-71c63a229526",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0b25b915-bedd-49b4-a2d2-699a7d60235b"
        },
        "item": {
          "id": "20ba304a-a130-46a5-bd83-e619562dfd22",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3191ca25-0067-4c19-b1ef-6400fc729199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "8d68767a-9be9-4a94-b6a2-94dbd2ed88f5",
        "cursor": {
          "ref": "6844dfe9-73ee-4da9-8235-c8a91a71e37b",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "72b704fc-b937-4462-8286-9ea3556d5e35"
        },
        "item": {
          "id": "8d68767a-9be9-4a94-b6a2-94dbd2ed88f5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f1095eee-d074-465d-b5d3-cf65f3e26e1b",
          "status": "Created",
          "code": 201,
          "responseTime": 697,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9772e803-e7a4-4e19-9c25-f6dfe37679d6",
        "cursor": {
          "ref": "3c2bd681-19b3-42d1-b0bb-94c19eb0fe9a",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cbf072ae-480a-4604-b5b8-bb8006da6cab"
        },
        "item": {
          "id": "9772e803-e7a4-4e19-9c25-f6dfe37679d6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "98212264-33b6-4f2e-8edb-291762a60372",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "bd5566e0-87b0-4ea5-90fa-cc127a959f93",
        "cursor": {
          "ref": "91d114b3-7d63-431b-bffe-ed8d4d4f8731",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2cb554d0-0c26-4d2e-85fc-e739d08bddd1"
        },
        "item": {
          "id": "bd5566e0-87b0-4ea5-90fa-cc127a959f93",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "221bb6df-f7b4-4dac-b815-e2b2f4834e7d",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7185a810-2464-4feb-90b3-0ce60f1eadf5",
        "cursor": {
          "ref": "e10a24a5-fe32-4a44-bff8-13accdcd9622",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3c1b7cd8-f8f7-4edb-9252-bacb192d1cb2"
        },
        "item": {
          "id": "7185a810-2464-4feb-90b3-0ce60f1eadf5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "92f99c10-32d7-498f-99c3-d8b7c01fb0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "e818bab7-6cdc-4aab-827d-ba0af3467ca3",
        "cursor": {
          "ref": "d5df20b1-c986-48d5-920d-f236444c22f4",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c6c27480-290c-4618-a144-62043e603a9d"
        },
        "item": {
          "id": "e818bab7-6cdc-4aab-827d-ba0af3467ca3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ee2ff6a1-bbf3-4979-b091-80aeacf24e91",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e5bde6de-019d-40cc-9cf1-0ff06a164eff",
        "cursor": {
          "ref": "c9e8e6a9-460b-4070-8602-be7ad2aaa740",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "54e42bc0-e690-49a7-a459-37d7da0e5251"
        },
        "item": {
          "id": "e5bde6de-019d-40cc-9cf1-0ff06a164eff",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fd068518-7f94-4014-8853-2fefcc2a7e78",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "26a17c47-a379-4fa4-88e5-f49d8d121fd0",
        "cursor": {
          "ref": "2ef01241-424f-4b90-88cc-befd555b12b5",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6e445f28-001d-4026-8cc1-a4bc69fa54b2"
        },
        "item": {
          "id": "26a17c47-a379-4fa4-88e5-f49d8d121fd0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "50417f77-a404-4d35-90f4-c001ce6fad72",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e6a80422-8244-4734-bfe6-1f4f64e03e3d",
        "cursor": {
          "ref": "4848780d-9815-438f-bddb-f3f9aa4a50e5",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3345afeb-cd6c-4261-bc53-a1ac08a17015"
        },
        "item": {
          "id": "e6a80422-8244-4734-bfe6-1f4f64e03e3d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "43afc65a-4b4c-4c5c-8a1d-c5b4b696b1fe",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "749e9b97-25dd-4a82-b22c-13acc6869d0b",
        "cursor": {
          "ref": "8c61bdca-02f4-4e55-95db-fda079728f72",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d43625dd-db2a-4c39-ad14-0131486dcfde"
        },
        "item": {
          "id": "749e9b97-25dd-4a82-b22c-13acc6869d0b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "43264035-d82b-4e03-98f7-51232473740f",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "4c2e0124-9e2d-45cf-8050-a8b0597bd767",
        "cursor": {
          "ref": "9f94de06-8641-47e0-89e0-f76db0f1547a",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8e0ba912-543b-40eb-a2b3-21608557d016"
        },
        "item": {
          "id": "4c2e0124-9e2d-45cf-8050-a8b0597bd767",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c1a0fcf5-13ee-41fc-85ca-02334586c2f6",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "57aabec1-617e-40c0-b248-7697a330d9ab",
        "cursor": {
          "ref": "cb81a704-74e8-460a-a828-1fe3e96691c1",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "81aa5b39-cfcd-4b5c-be6d-83adecc519c8"
        },
        "item": {
          "id": "57aabec1-617e-40c0-b248-7697a330d9ab",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "36f09db3-fdb7-40ce-919f-9301e8086701",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f810c285-0b0a-4297-ad7f-6d208c341f96",
        "cursor": {
          "ref": "8bd32d33-28c3-4331-97a7-99e891f4136b",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c6f25a40-e5d6-4a05-b8aa-b026ec983dce"
        },
        "item": {
          "id": "f810c285-0b0a-4297-ad7f-6d208c341f96",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6d39adbc-eb38-4a70-876a-227f2a769313",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "20cc943c-7498-420a-9549-3103dbc7a6df",
        "cursor": {
          "ref": "8af0a397-2cff-4c67-9b26-d7b22cea6d67",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e7653b61-58fa-43f4-b691-414b40213a8c"
        },
        "item": {
          "id": "20cc943c-7498-420a-9549-3103dbc7a6df",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e4e4656c-6dde-4549-87cf-38cc294063b8",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "29257a8b-fbec-4e6b-9b07-d768cd587ea7",
        "cursor": {
          "ref": "d3c2190a-96aa-453d-8e27-5e02c8d4969e",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c16efe76-5fef-4be0-8169-b2675821f739"
        },
        "item": {
          "id": "29257a8b-fbec-4e6b-9b07-d768cd587ea7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cf4573aa-9b18-4108-96cd-4c7c4a2b7932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "37a2a0d7-7744-4066-8a9d-5c2a0120c522",
        "cursor": {
          "ref": "2b5f3ceb-c7cb-4c81-8bcc-cdb622631ae1",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "38d0da65-ebfa-459c-9c05-0d1732b4c645"
        },
        "item": {
          "id": "37a2a0d7-7744-4066-8a9d-5c2a0120c522",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a542f419-f571-47ff-a09c-b8bd90483ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "fbfb09f6-298a-4287-bfcb-1851b4370ed2",
        "cursor": {
          "ref": "d0c131b7-bcdf-4400-bb92-968555d99ea5",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "30d93643-2713-4ab8-aeb0-f78444db1b59"
        },
        "item": {
          "id": "fbfb09f6-298a-4287-bfcb-1851b4370ed2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ad3d62c0-554c-4ff4-a127-70fe0efa10fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "d23c6d5d-a072-47aa-8754-1d57b81b54e9",
        "cursor": {
          "ref": "ac400216-c076-4205-828a-19d38536c88f",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "267d5231-f218-4b93-8c02-465a06a284f1"
        },
        "item": {
          "id": "d23c6d5d-a072-47aa-8754-1d57b81b54e9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3f27a81f-1395-4855-b9ae-fc095bf878a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "a47dec4a-2136-419e-8ba1-b8048af8a654",
        "cursor": {
          "ref": "4371e774-bc81-46be-bd6c-215eea385154",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3c5e9ed7-70c5-433c-9beb-c3b8b5b9582b"
        },
        "item": {
          "id": "a47dec4a-2136-419e-8ba1-b8048af8a654",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "837faf84-bc6a-4deb-9f87-8c8a7ff9d4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "4f1d50e0-da84-400d-9593-9950553ce578",
        "cursor": {
          "ref": "bfc1e12d-90b5-44eb-977e-c3e01895a48d",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "44d0c09c-4255-458e-a557-507df0cdc6b9"
        },
        "item": {
          "id": "4f1d50e0-da84-400d-9593-9950553ce578",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9042d14d-0768-4fea-863f-e973c8e1793d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "a8094a34-8755-438d-aef8-751b56af829b",
        "cursor": {
          "ref": "e6653896-a351-41b4-8aff-3c8f5134c490",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b7b3b54b-e41e-474e-b2c0-ecc0918b64ae"
        },
        "item": {
          "id": "a8094a34-8755-438d-aef8-751b56af829b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c20c8d59-2eed-4255-88f8-868512945103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "ebccafe8-8f66-405e-8621-67c6f28a47ac",
        "cursor": {
          "ref": "37c78a79-4880-424f-bc93-be3683ee2ccf",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fdb89922-3c65-4cbb-a557-c8831fedea79"
        },
        "item": {
          "id": "ebccafe8-8f66-405e-8621-67c6f28a47ac",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "14646aa5-3999-4c5b-b207-222e3758d39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "a42f5306-0e32-46e9-8863-613c9e7b1c70",
        "cursor": {
          "ref": "0bc317cd-1b91-4601-ba5e-cd19a94155fd",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1ae5f05e-43aa-4318-8c3a-3ff26fbb2a41"
        },
        "item": {
          "id": "a42f5306-0e32-46e9-8863-613c9e7b1c70",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0ebff883-2806-433f-8512-dcb22f77e6d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "14d92974-15d1-4a2e-9008-7d1f0f581dd5",
        "cursor": {
          "ref": "161cfa50-36fa-4d24-889b-e34d1cfd5c00",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0dde996f-e3b5-4be7-a549-7943a114ea50"
        },
        "item": {
          "id": "14d92974-15d1-4a2e-9008-7d1f0f581dd5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3e91214f-0351-4eff-bc75-065ed0d659a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "e2dcb91c-9861-4b24-9c57-2cbf420141bd",
        "cursor": {
          "ref": "ef7c3baa-1788-4a88-bf83-b1e917cf525f",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1f35e266-c16e-48fd-825c-1d96bbc32ad3"
        },
        "item": {
          "id": "e2dcb91c-9861-4b24-9c57-2cbf420141bd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2857a59b-dc75-4f97-ba4c-28ca26817e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "301deca9-2292-4ef4-8ce8-946064e27d47",
        "cursor": {
          "ref": "7c0210b9-db64-46ab-8b66-a72fabd46e5a",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "72521508-c43d-4a66-a812-ee2b0f34a6cf"
        },
        "item": {
          "id": "301deca9-2292-4ef4-8ce8-946064e27d47",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c525d7b8-d3e6-47fc-82b6-0aa970d2e966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "1bfca54e-576b-41a7-addb-272aa14eee28",
        "cursor": {
          "ref": "640cd7ce-afd4-4faf-857d-188877a26f92",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e1d81da5-20a3-49da-b921-db90a6848e64"
        },
        "item": {
          "id": "1bfca54e-576b-41a7-addb-272aa14eee28",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "54098edb-97fc-424d-a43a-d28970606f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "6af02648-2b97-4808-aa88-06f2924b5475",
        "cursor": {
          "ref": "d2c69616-c8f0-4788-97ab-201279ed2882",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "41ed9e35-6cc9-4736-93e3-376a6af3758d"
        },
        "item": {
          "id": "6af02648-2b97-4808-aa88-06f2924b5475",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "34ca06cd-b1e0-40f3-92ef-176ece3923df",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "87e07a62-558c-4a01-a36b-976b80ded619",
        "cursor": {
          "ref": "193293cd-9a71-4fc0-b90d-7e46356f4d73",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b228aecf-652f-46e3-af53-9b58408a9a54"
        },
        "item": {
          "id": "87e07a62-558c-4a01-a36b-976b80ded619",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b4ab291b-5c23-4519-a231-7fe202e400f4",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7872a62c-c5c8-475c-a95f-1d2e22418a76",
        "cursor": {
          "ref": "91ef591a-12ee-461a-b356-51b0629dbbae",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "da36ef77-0421-4d71-a661-c37ab9e837b1"
        },
        "item": {
          "id": "7872a62c-c5c8-475c-a95f-1d2e22418a76",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c20f7519-db52-4894-ab8c-3bdfbb191226",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f996c8eb-4793-42a8-898d-6552241392e6",
        "cursor": {
          "ref": "fe8238a5-5e54-4d49-a80d-6c1d6a0801fd",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "98a30d5e-ed89-4306-af8d-89b0eb573215"
        },
        "item": {
          "id": "f996c8eb-4793-42a8-898d-6552241392e6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "da9f19ab-6a91-45c4-8786-3dad6590529a",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "01820840-b915-4617-9f61-b11619b89a62",
        "cursor": {
          "ref": "5fdfbc22-cf5e-42e0-80af-684a9f2c07e0",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "673fa93f-d4a8-493c-b9c5-100af645aede"
        },
        "item": {
          "id": "01820840-b915-4617-9f61-b11619b89a62",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "99e66333-f023-45e2-8c65-4c0358a89b54",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "f61eaae4-b2b9-4f4a-b365-71d60dde08bc",
        "cursor": {
          "ref": "0a7114ff-7e77-481f-bba2-b61d630b0ede",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2e06a8a1-8788-407e-a0fd-e6f7684194e8"
        },
        "item": {
          "id": "f61eaae4-b2b9-4f4a-b365-71d60dde08bc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b7131103-4028-4f58-98cc-185afd5202a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "83349e7e-7ea6-48e6-af31-cf7670a5dcba",
        "cursor": {
          "ref": "9f0d822d-8d09-4d4d-ac4e-132f2e52e5d3",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a710f999-6748-419d-ae85-d0a112490d5f"
        },
        "item": {
          "id": "83349e7e-7ea6-48e6-af31-cf7670a5dcba",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c09505c1-4cca-4c90-9016-8165488f1b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "82545f2c-ac13-4c58-8899-e6dd047a6090",
        "cursor": {
          "ref": "74dc5e61-8875-45f3-b97d-a2939388ecac",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "87a548ab-926a-41c6-aba8-a55052de29e1"
        },
        "item": {
          "id": "82545f2c-ac13-4c58-8899-e6dd047a6090",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6067dd7a-b4c5-4b14-8233-9f8a8986fec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "070990e0-43b4-45fc-b889-1ce7907a6ab4",
        "cursor": {
          "ref": "5d41606a-e067-40eb-a423-dcb0e23e0374",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "96e9e2c3-7a23-4a54-b8b0-9dbf00659521"
        },
        "item": {
          "id": "070990e0-43b4-45fc-b889-1ce7907a6ab4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "df9d1603-4eec-4ac2-ab40-fbe9cd3076f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "45ffa6f0-c78e-41c9-a6fb-cf19205f0555",
        "cursor": {
          "ref": "61b4fbe9-3e53-4a08-85b2-6a635abb801e",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7808930f-36f4-456b-b519-18da2b9c20bd"
        },
        "item": {
          "id": "45ffa6f0-c78e-41c9-a6fb-cf19205f0555",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5a657b6a-5077-4b0f-9c3d-b17982f2d840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "94f86fe9-5edd-4463-952e-1dcbbbf83b8b",
        "cursor": {
          "ref": "a39ef81b-0ece-4563-9381-72ac7a7360ee",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d62ab398-ca03-46ca-9dba-8ebf92c607cc"
        },
        "item": {
          "id": "94f86fe9-5edd-4463-952e-1dcbbbf83b8b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "cf3e414a-7ea6-46cf-8e5c-e5877b8c2ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "c7076bb3-9e32-4036-9376-416961765637",
        "cursor": {
          "ref": "32119a14-d89e-4c72-a521-d40b580154a7",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9b980384-7b50-46a7-bd84-785255979870"
        },
        "item": {
          "id": "c7076bb3-9e32-4036-9376-416961765637",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "073b7c4e-9ac0-45c5-8ec0-51bb251c1ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "fd83ff58-7084-46dc-9e23-9da57aa8ce12",
        "cursor": {
          "ref": "cfb57f10-2deb-41e9-a60f-d6ca45a6b605",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d54684f6-da5e-4f08-b179-3da67ee48083"
        },
        "item": {
          "id": "fd83ff58-7084-46dc-9e23-9da57aa8ce12",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a48a4fcb-28c4-4ba9-a230-4e92f32c1cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "efb97fdb-853a-40dd-8c8d-5b0c83c38e74",
        "cursor": {
          "ref": "f119121f-4379-44c8-888e-83624ef94658",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a749c62d-4831-4eec-90fb-0e1e9ac6c6cf"
        },
        "item": {
          "id": "efb97fdb-853a-40dd-8c8d-5b0c83c38e74",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "fe2d537e-3d11-4ebe-a1fa-ee14e907fc00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "d5406a3a-954a-451d-85e8-47e52ce83bc6",
        "cursor": {
          "ref": "6b026e34-4c66-4ac5-9a4a-b003f277c105",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "04e42081-7bfd-48e3-bc95-4df85b9476b4"
        },
        "item": {
          "id": "d5406a3a-954a-451d-85e8-47e52ce83bc6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a5ba0257-7006-47c9-9656-2ae2ba9623c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "3c0cae70-239f-4cd3-8eb1-78d9b381dea8",
        "cursor": {
          "ref": "be3a8306-22c6-4732-bd28-c256eca8c6cb",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "75deca6c-e5b3-45a2-9291-a93c1484d376"
        },
        "item": {
          "id": "3c0cae70-239f-4cd3-8eb1-78d9b381dea8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f359b08d-fee1-4791-88c8-1b0880fdab6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "92d288fa-7404-4af3-8239-2d82492d8b69",
        "cursor": {
          "ref": "596cca20-4d5c-4683-9629-ccd613e521d9",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1a5508a1-a071-477f-ba9d-c7c9a14c1a6b"
        },
        "item": {
          "id": "92d288fa-7404-4af3-8239-2d82492d8b69",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9bffc7b4-0c67-4ce5-90d3-5c2649d1914a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "6ecd2da7-1367-42ce-ae22-5b10b2294af4",
        "cursor": {
          "ref": "f1737a96-eed0-4025-a883-3b0275092172",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f2e72edf-4657-4169-90d0-8854e9c33ad7"
        },
        "item": {
          "id": "6ecd2da7-1367-42ce-ae22-5b10b2294af4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "42c4f01b-549d-4df3-9ec4-30371ae14d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "49609ea4-5647-4065-82c3-12c9c8c007b8",
        "cursor": {
          "ref": "765c7060-2e15-43bc-9c2f-8804ed0efaff",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e4591ea1-0626-4483-a424-5c3a7b749936"
        },
        "item": {
          "id": "49609ea4-5647-4065-82c3-12c9c8c007b8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "efa75bfb-6cfd-4971-b7d3-2b593470f9d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "f935e662-4f0e-4c2c-bd4d-b0ebb8ee9e4d",
        "cursor": {
          "ref": "ec74b4b0-82e1-4d89-9ada-1e8310cb51a6",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "15d018f0-a97a-4957-97ce-a7f240638447"
        },
        "item": {
          "id": "f935e662-4f0e-4c2c-bd4d-b0ebb8ee9e4d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2588cf12-4f9b-44a2-ac76-8ef7e9cec896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "1e6f64da-aa24-4663-8fc2-c18bc575cab6",
        "cursor": {
          "ref": "7a8d8134-7e07-4f42-bd83-ad02d87f9ba6",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e996479c-6ee4-47bf-9337-034e0a002a82"
        },
        "item": {
          "id": "1e6f64da-aa24-4663-8fc2-c18bc575cab6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8f2bc836-5a1c-4773-a13d-60d6f9c0fc10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "871c2095-0f60-4181-8679-d97b658e35c2",
        "cursor": {
          "ref": "548ff99f-b7ab-42cb-b3cd-f9e20da7ce91",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d7dcc42b-d7d2-4854-8c0d-917456f27c56"
        },
        "item": {
          "id": "871c2095-0f60-4181-8679-d97b658e35c2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4eea95c6-53f5-4d98-955a-699e529eb65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "28495a44-ff78-4b33-87d0-d8ee535d9967",
        "cursor": {
          "ref": "8ec8c4b9-aff4-46e9-bb46-60460ec66b9c",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "69afa4ce-8e0a-48cd-9ee3-acf6477322d9"
        },
        "item": {
          "id": "28495a44-ff78-4b33-87d0-d8ee535d9967",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0b217b7f-ae84-46e5-90f1-743841b163fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "ac5bf997-28e6-4d8a-b3c5-645e1a0e4328",
        "cursor": {
          "ref": "09d0925f-03b0-4d22-abd6-d6e945fa9027",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c054a72b-4ea6-445c-9346-6370dd1cfbeb"
        },
        "item": {
          "id": "ac5bf997-28e6-4d8a-b3c5-645e1a0e4328",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9819019c-d6e4-4cf7-aa08-bbfc2ebdffa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "f7cfa16a-b31b-4bf7-a011-1291161fe889",
        "cursor": {
          "ref": "0fc15f72-ff99-40b9-bbd0-42b5fa88a42b",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d5246e59-bed9-47dc-b077-94857a85a28e"
        },
        "item": {
          "id": "f7cfa16a-b31b-4bf7-a011-1291161fe889",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "dc22943f-849a-494c-b202-7d552d2808d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "05af77dc-9435-4702-8bdc-fa1fa123eb10",
        "cursor": {
          "ref": "1cf86362-4551-43f1-9014-d72e3c71ca56",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "801e1b4b-1add-4c34-93ac-9a20e03fadaa"
        },
        "item": {
          "id": "05af77dc-9435-4702-8bdc-fa1fa123eb10",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "16cc5d11-12e9-40f1-8d98-fb473dca91c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "996164c1-211a-4402-9a50-ddbf5a6edf32",
        "cursor": {
          "ref": "e48c10ff-ac63-4b79-8f79-bba5d72e4e7f",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9b6bac07-9ddb-4998-87ff-9c22ab0da6e4"
        },
        "item": {
          "id": "996164c1-211a-4402-9a50-ddbf5a6edf32",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "907895e8-d15e-4a3c-98d7-aadce0fd6a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "d3b216c7-2aa2-436f-9e05-c1abb1021038",
        "cursor": {
          "ref": "064aac1d-696d-4179-8330-b71589f2a328",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c1ca02e4-21ca-407f-9293-26b7cf1e70b6"
        },
        "item": {
          "id": "d3b216c7-2aa2-436f-9e05-c1abb1021038",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c49a81ea-b30d-4090-a29d-caed9ffa7a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "a61a3524-203b-48f6-9e75-7f7f9a71d3c3",
        "cursor": {
          "ref": "d95f47c3-78a3-4ece-bef0-e825d4b1ecad",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "dbcf5b85-eb9d-459a-9cbf-08534403d68e"
        },
        "item": {
          "id": "a61a3524-203b-48f6-9e75-7f7f9a71d3c3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "19cc6438-3c39-49cd-b6e5-576c5deaff48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "88b3fc6e-b24e-4231-aed6-f58ebab0525c",
        "cursor": {
          "ref": "13f1f24c-4ba6-457c-8605-a75b63a9650b",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8c2fb5b4-9a8b-4bff-afa1-83e8653cf6d2"
        },
        "item": {
          "id": "88b3fc6e-b24e-4231-aed6-f58ebab0525c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "77d3bf08-b51b-4907-8e99-ebfe33135c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "2221041b-8b2d-4a17-849c-922765dac6d1",
        "cursor": {
          "ref": "952b856c-57ae-4836-a29d-8f4c19fc9bb5",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d6f8f406-5f0c-4a96-bc78-12a8e55061d9"
        },
        "item": {
          "id": "2221041b-8b2d-4a17-849c-922765dac6d1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ddeae5ea-6a8c-494c-b0ea-06e9e91a56c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "2d549e29-35a4-48bb-a19a-4bcc10ce55f0",
        "cursor": {
          "ref": "59e7b93f-c4e9-458f-b917-4e553752937f",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f2737665-b3c6-48b9-9254-9006b319a2a6"
        },
        "item": {
          "id": "2d549e29-35a4-48bb-a19a-4bcc10ce55f0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b2b77c92-bae1-4649-ab13-55374dfee9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "f4596a8b-9f6d-4869-8816-1e0a94ee3fc9",
        "cursor": {
          "ref": "5cfa061e-ca00-4e77-b15d-8b36fdaada4c",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "75704675-365a-48f2-a4d4-f2ed444b8ee6"
        },
        "item": {
          "id": "f4596a8b-9f6d-4869-8816-1e0a94ee3fc9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6478149a-931a-41ee-8465-7692e5af1f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "84154af4-6de5-4750-b02b-d3748b9cdaad",
        "cursor": {
          "ref": "e3b23f83-24b3-4c14-94d6-3a583c20535a",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e53544fd-df6c-4246-a4db-7febbc104a6f"
        },
        "item": {
          "id": "84154af4-6de5-4750-b02b-d3748b9cdaad",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "18e3d2ff-46ec-43b1-a546-795737db66a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "e0f50a96-6b90-4105-bcdd-c3d74eaf5993",
        "cursor": {
          "ref": "80ff625e-9323-4d97-8858-3a987ee9c5ce",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1ab51a62-9c17-48ad-b9c4-00871ab10343"
        },
        "item": {
          "id": "e0f50a96-6b90-4105-bcdd-c3d74eaf5993",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "dbe91159-a40c-410e-b577-0e24a3df2c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "919d29a0-3f15-40a0-b1cd-71e63cab106b",
        "cursor": {
          "ref": "29398b9b-0467-4604-9ae4-9bd2043e983d",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7df271b7-5e28-4d55-824d-b65b1ac595bb"
        },
        "item": {
          "id": "919d29a0-3f15-40a0-b1cd-71e63cab106b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ff47f2e5-f0db-4403-8463-a58ce3d95a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "0ddf3b86-565a-456d-be1e-7f294340982f",
        "cursor": {
          "ref": "cb25859a-4e44-402b-a7e9-9670b775fa5e",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5fe3215f-ab48-4811-8d0b-36b05fbedfb2"
        },
        "item": {
          "id": "0ddf3b86-565a-456d-be1e-7f294340982f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e2d63e3c-6b62-4661-ab70-f4859c07f774",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb819d2-feea-4140-bd33-9d4a507c91cf",
        "cursor": {
          "ref": "ccf03392-d401-4632-8511-5b9fa3c9e842",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "366ce6e7-6544-495e-bae8-6e7ea5081759"
        },
        "item": {
          "id": "8fb819d2-feea-4140-bd33-9d4a507c91cf",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4caf0bca-c869-47f3-9bee-0136757fd326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "13ce935d-70cf-4541-b944-dafa6d7af715",
        "cursor": {
          "ref": "74e8f578-e5ee-4674-a98e-8389acd1f4d3",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "70a352f5-bdb0-4ca2-a9fd-43270dfb7637"
        },
        "item": {
          "id": "13ce935d-70cf-4541-b944-dafa6d7af715",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7ff3ccee-7c9f-4434-b2ad-1372bdbec637",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f5bdd8-8070-4892-ae93-5c8468d8fb58",
        "cursor": {
          "ref": "b6d9798d-1a3a-4fe4-9a78-3347a234cf82",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c7576847-a62f-432f-b215-9333c0d8df45"
        },
        "item": {
          "id": "50f5bdd8-8070-4892-ae93-5c8468d8fb58",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "442c49bb-7f03-48e9-8ecd-f8dd6d48695d",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d6fc95-7365-4c47-9d45-a92bad9a8e19",
        "cursor": {
          "ref": "1a0c6815-9b66-44a2-b09f-2738de0bc06e",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "bd3eaa3e-66f0-4a48-b25c-175f7db971d8"
        },
        "item": {
          "id": "00d6fc95-7365-4c47-9d45-a92bad9a8e19",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5fc0cca4-da92-45f9-a3ba-6ca3c27c0e94",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c163c0cd-6123-4d91-87f6-e0946bfa6483",
        "cursor": {
          "ref": "7d7b18b7-cdbe-4214-9254-feba676ad586",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "398ce819-5e7c-4efe-b44a-1494e8650f24"
        },
        "item": {
          "id": "c163c0cd-6123-4d91-87f6-e0946bfa6483",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a09d73b8-321b-4476-8992-04d8be2ae6af",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "98cde5a5-94ea-4d28-ab5e-b8653c7ed9b0",
        "cursor": {
          "ref": "e66925a5-7b0b-4e25-8ed4-895c34518b30",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bb6c828f-5ef3-48be-8389-ab3a746169e4"
        },
        "item": {
          "id": "98cde5a5-94ea-4d28-ab5e-b8653c7ed9b0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ef9234da-d1ff-407c-9480-b3de96f38308",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-07-03T00:38:55.188Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-07-03T00:38:55.188Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "949e5906-54f2-478e-83c6-5661178bf80f",
        "cursor": {
          "ref": "e1293660-bc14-45e4-8b17-99e4863ae2be",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6d2e936b-c0d7-417d-8425-1eff4e777628"
        },
        "item": {
          "id": "949e5906-54f2-478e-83c6-5661178bf80f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bcd3e9d4-c7d8-40e1-a09a-dff52dd26f03",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aad178d-419f-44a1-9c03-ed01b2f9d9ee",
        "cursor": {
          "ref": "e98cd9b6-54b1-4c6c-9ede-faf2d39bdc6e",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bf8f986f-9cc8-4b26-9d23-f9917edbe364"
        },
        "item": {
          "id": "9aad178d-419f-44a1-9c03-ed01b2f9d9ee",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1aa6d185-1c0f-47df-8673-b982b0a30a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "81b9203b-4da3-4374-9441-a59acbfb9cd8",
        "cursor": {
          "ref": "d0b8a973-194e-42d6-b19d-95e754bf47c2",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4a258f22-6bde-471b-8342-2304fc875933"
        },
        "item": {
          "id": "81b9203b-4da3-4374-9441-a59acbfb9cd8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b48e7c35-a5cd-4205-b58f-f067bc336879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "5e32ef3b-397c-4da5-8f84-7d4020877222",
        "cursor": {
          "ref": "235ecaae-e60e-4cd6-8e67-a6915435cefb",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b62a43f6-8524-446e-82fd-dadba23f4f29"
        },
        "item": {
          "id": "5e32ef3b-397c-4da5-8f84-7d4020877222",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a5293bb5-6029-4b05-802d-ac122e746fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "0c225eb9-e259-4f39-ac02-3c8f8f775f61",
        "cursor": {
          "ref": "a371e068-777e-4c69-8693-d03782dd624d",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "381eacd1-787b-49bc-8af7-b27e5a902290"
        },
        "item": {
          "id": "0c225eb9-e259-4f39-ac02-3c8f8f775f61",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b50ba45a-a1c1-446a-bbed-ba1c731e34ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "70a07bd0-0016-479b-a4d5-7c54934c10eb",
        "cursor": {
          "ref": "46d6e2e9-3bf7-43b8-bfe0-bf94912967f3",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ab0de1bf-6df3-46cf-b196-91d96580cdae"
        },
        "item": {
          "id": "70a07bd0-0016-479b-a4d5-7c54934c10eb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d15bb3ef-c8d7-40e9-806e-91529c600249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "5516465c-2bc4-41a4-9632-0a350c5790bc",
        "cursor": {
          "ref": "d19c8408-ea4d-44bb-8549-f9381a75246c",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f37d22fb-e7e1-4b38-9f6e-b889a039acb3"
        },
        "item": {
          "id": "5516465c-2bc4-41a4-9632-0a350c5790bc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "145092e7-0f6b-45f9-a84f-2347ea86cfca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "68b018ae-72c5-44ef-b967-b823c402a974",
        "cursor": {
          "ref": "e7c19af0-193e-441b-96c6-bf9435a07928",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3924c950-f9a1-4f84-8e21-f2a4023c7785"
        },
        "item": {
          "id": "68b018ae-72c5-44ef-b967-b823c402a974",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5a5a4490-6bec-4621-8e7c-9114f80a0f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "4bd1bbc1-dce7-4eea-bf8e-aa698be8effe",
        "cursor": {
          "ref": "7c5d6f0a-be3e-43d1-bd11-e6f407534e33",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2d03fad1-8cf8-4773-9191-45a3ada8fd40"
        },
        "item": {
          "id": "4bd1bbc1-dce7-4eea-bf8e-aa698be8effe",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e276330a-2699-4d97-b25f-8254af4405cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "f49fc8c8-6ed7-4e6a-9102-fd615c01b63d",
        "cursor": {
          "ref": "db79b6a3-1918-4da5-88de-c2d02c75a933",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d3cfa5f6-7f45-4014-9fb2-c939ab4a004a"
        },
        "item": {
          "id": "f49fc8c8-6ed7-4e6a-9102-fd615c01b63d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0a91ebbb-fbd7-4da2-b419-17af5ab0e925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "81f8b00c-cf50-4d98-87be-d0a355f3f2f3",
        "cursor": {
          "ref": "83432f3c-9ced-4c6f-8ea1-a77a80b6cd17",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9c291f26-3b84-4221-b0af-b56c9fc6858f"
        },
        "item": {
          "id": "81f8b00c-cf50-4d98-87be-d0a355f3f2f3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fb9119b4-8fc6-4386-910e-41dc417e4916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "db4eb2ac-1f7f-4280-8174-5bc22b15d2a9",
        "cursor": {
          "ref": "e2b913ef-7158-4c4a-b64e-abd63447188a",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b4ac4d15-44ff-48d4-a9fd-7403954a3117"
        },
        "item": {
          "id": "db4eb2ac-1f7f-4280-8174-5bc22b15d2a9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "caea7a5f-4669-4158-92e5-e36c5d3c54df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "4e8bc799-9845-44ea-81ca-b05f4d9d1c0d",
        "cursor": {
          "ref": "58f92350-476e-43c6-925a-5fef5dbd32fb",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1909916f-c8ea-4fcd-a736-1da94c15f2ba"
        },
        "item": {
          "id": "4e8bc799-9845-44ea-81ca-b05f4d9d1c0d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "60f7edf2-162e-4657-8a77-3dbd65d44a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "8235bb0d-bc56-4bde-9093-be163f6ef56b",
        "cursor": {
          "ref": "af754969-f625-41ef-8d6a-70dc79f1159f",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b8f7e510-0826-4f5b-8552-18532b2fa8db"
        },
        "item": {
          "id": "8235bb0d-bc56-4bde-9093-be163f6ef56b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "27848b95-04d0-4869-a9b6-aa4bd88d396a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "840f987a-fcdf-458f-99ba-788d8c2dac9d",
        "cursor": {
          "ref": "1e87e555-428c-4084-9127-1bb0226f8203",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3df938e1-0e9f-49f0-95b3-70fcb8be6198"
        },
        "item": {
          "id": "840f987a-fcdf-458f-99ba-788d8c2dac9d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cd1e9c52-a1ec-43f2-8e67-91fbd7d8a02d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ca61441f-d572-4798-8bed-8e824d29f6cc",
        "cursor": {
          "ref": "cf1b38a0-523e-4cad-ab95-58ca5e1ea682",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "755cdfde-31f2-44fb-8a21-f237aea0f87d"
        },
        "item": {
          "id": "ca61441f-d572-4798-8bed-8e824d29f6cc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6063cdab-45a1-4020-a5d6-5afd96c8005d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "d36da211-e9e4-4de4-9568-7eaf66a7027e",
        "cursor": {
          "ref": "c3e34424-37b2-443d-88bc-eddfb7de4e99",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9240c9de-a7d3-44a5-8ec0-7b84afec1688"
        },
        "item": {
          "id": "d36da211-e9e4-4de4-9568-7eaf66a7027e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bf42e3d2-0468-4b1d-9177-0f4a72c14ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "2ccff574-6b56-4d0a-81a9-3166abea9f56",
        "cursor": {
          "ref": "ef56b505-5462-48cd-a1d2-1bfc7296f04d",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "89db13c3-1d7a-486b-bf62-599a82f095e5"
        },
        "item": {
          "id": "2ccff574-6b56-4d0a-81a9-3166abea9f56",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "386282c9-45f9-4f68-bbcd-3d2fa50e827a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "4912ddbb-d113-4b71-846e-85964c114f7a",
        "cursor": {
          "ref": "ce135523-95e2-40f5-a4e4-13cc1044b75c",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5015a89b-b2ba-4932-92e4-e2fecc63c5f4"
        },
        "item": {
          "id": "4912ddbb-d113-4b71-846e-85964c114f7a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "99594345-f1d6-409b-beff-47fed1e6fe1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "cb6a42df-4ca8-422e-9c61-474a1e2edd5f",
        "cursor": {
          "ref": "4a361460-6235-407d-afe4-2172a56f3c41",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e890db26-8188-4753-b938-6e858d2c2106"
        },
        "item": {
          "id": "cb6a42df-4ca8-422e-9c61-474a1e2edd5f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ec0dd345-590e-4b9f-a205-50749efb9536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "6e175a99-8611-4d8b-a23f-41f0435d95ec",
        "cursor": {
          "ref": "852aaf2f-596b-46b7-a4e5-f0a17fdfde2e",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4e7c4795-c79c-4f3f-900e-a4e75660d157"
        },
        "item": {
          "id": "6e175a99-8611-4d8b-a23f-41f0435d95ec",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b59e3fef-df1b-469c-bc3c-e3852e086a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "54970d74-784b-4437-a82c-91972598099c",
        "cursor": {
          "ref": "294a9643-660a-4a60-a691-547681890f35",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c67e4728-3538-494e-a67b-50d179addc97"
        },
        "item": {
          "id": "54970d74-784b-4437-a82c-91972598099c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9ddc6a9a-9aaf-42a1-9dbd-d51a54094b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "2a7de7be-0326-4195-b274-7a45f6a39f76",
        "cursor": {
          "ref": "89c3bbe3-6a2b-4a7f-9785-c0b79416b3e2",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0e3435a1-df94-4c02-9750-11c8a42a53c6"
        },
        "item": {
          "id": "2a7de7be-0326-4195-b274-7a45f6a39f76",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "13daa825-2ca2-484d-a387-ec4aab3da646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "284ad698-2d72-4619-a1a1-cf4abb620bbe",
        "cursor": {
          "ref": "f4d4f2aa-8489-4305-8e95-4f9f2b205c19",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7856c817-c7cc-48ab-b9eb-b82d59a5c0b7"
        },
        "item": {
          "id": "284ad698-2d72-4619-a1a1-cf4abb620bbe",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ab371395-0ba1-408e-8556-2f5b43ce1b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "7e51dfa4-3824-4e99-a1dc-9417a5ea0365",
        "cursor": {
          "ref": "67e911c0-582d-4c65-afa0-29959bf866f0",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d18e1b30-4711-43d5-988c-f01c9406c0e7"
        },
        "item": {
          "id": "7e51dfa4-3824-4e99-a1dc-9417a5ea0365",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ec3ea16b-873a-49f1-921f-069f668e0130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "23842147-ecc1-469c-837f-497b8ab2e827",
        "cursor": {
          "ref": "88dc77ed-ca32-4619-84e1-5040d26b6cd1",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5e831f64-5b1d-4621-b3bc-97607da45868"
        },
        "item": {
          "id": "23842147-ecc1-469c-837f-497b8ab2e827",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cb2b9bfa-a036-4273-93d3-e7bbc69e7668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "9efb8583-5952-4683-af3d-39756175dae8",
        "cursor": {
          "ref": "6832e2cd-b5cb-4688-a5d0-3ddb78989c43",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "51e35dc1-a199-4df3-8246-04bbe91d535a"
        },
        "item": {
          "id": "9efb8583-5952-4683-af3d-39756175dae8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9c29430e-ef54-4054-a76c-00f49136cb7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "4540d077-c7b4-423c-a37e-41c0d309fc0b",
        "cursor": {
          "ref": "f0ea591d-b268-4e45-872d-7c54c215e8eb",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5ecf7438-c79a-452e-9594-4368b8fdc8e7"
        },
        "item": {
          "id": "4540d077-c7b4-423c-a37e-41c0d309fc0b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3b25c98f-8dc4-4611-ab3c-02e158ccba41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "5d6f3483-9798-43a5-bdbf-9665e7ccd771",
        "cursor": {
          "ref": "ca37e60a-362d-40e1-be43-fee9fbc424a5",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d5c398ea-fd7b-4c2a-b818-7ed570bca5ac"
        },
        "item": {
          "id": "5d6f3483-9798-43a5-bdbf-9665e7ccd771",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "04752cdd-5ef0-4539-a509-6b54f110f695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "56e714b6-8a55-42f4-a55c-1d831d5b8b56",
        "cursor": {
          "ref": "db5e500f-bc71-4921-b10d-ead9cdd53e0b",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e1adba5d-84b4-48ef-9e7c-0e47176a04fb"
        },
        "item": {
          "id": "56e714b6-8a55-42f4-a55c-1d831d5b8b56",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "94c60bb9-506e-4310-a3cf-3bd242b41721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "71f7adcb-77bc-4938-adc9-5874ad2c5273",
        "cursor": {
          "ref": "58f1d6c2-4bb2-4292-a5b5-4d93de3f2c32",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "bdaed48c-4d88-46f9-8679-7fb989581e3f"
        },
        "item": {
          "id": "71f7adcb-77bc-4938-adc9-5874ad2c5273",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e6ea9945-15cf-40d8-b40a-4d0577b078e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "22f9cde2-5bd9-4425-8676-8d168f7b0fd8",
        "cursor": {
          "ref": "15f8287a-8ab3-443e-9ba5-fe5ec66bee95",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "42e79148-4293-42e7-a361-e075a33893f9"
        },
        "item": {
          "id": "22f9cde2-5bd9-4425-8676-8d168f7b0fd8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0d8cb2b3-6c75-4a7a-afdb-0a623023134b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "4bc182eb-f726-4df2-b9a5-b4f1ac27841b",
        "cursor": {
          "ref": "3a0692e2-7409-417b-8330-03bd6608b59f",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "78ddb2d3-24f1-47a8-b3ef-abffa7e5e2c6"
        },
        "item": {
          "id": "4bc182eb-f726-4df2-b9a5-b4f1ac27841b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "19ef632e-4033-41fa-9839-0d403e2aef58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "9d471069-8b11-4a17-ab70-ea5388086869",
        "cursor": {
          "ref": "e4b20dc4-7f16-4064-bea2-39a5b55c2652",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "82ad071b-723c-43e6-b262-ec3e9106d34b"
        },
        "item": {
          "id": "9d471069-8b11-4a17-ab70-ea5388086869",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2c183bec-3382-4b25-9984-4ecd8a7638c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "4c2090d8-4784-4794-9432-5ffbb892d9a6",
        "cursor": {
          "ref": "299d862b-1b33-404e-ba31-6bd11af263b6",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4465623f-cfb4-46ee-bd62-9ad51753c06d"
        },
        "item": {
          "id": "4c2090d8-4784-4794-9432-5ffbb892d9a6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "bd9430a0-d1ce-4dd7-84b4-decc40bed654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "1f53fde5-0668-4458-9d09-97f73ced0f51",
        "cursor": {
          "ref": "fe002427-7942-4f29-9fa6-d0b1b266bb28",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7c9a2ef4-1b2e-40ef-99e3-487fa66761f3"
        },
        "item": {
          "id": "1f53fde5-0668-4458-9d09-97f73ced0f51",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a4c111d1-495c-451b-8246-3070d9e98adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "0fbf8844-84c4-471b-8ddf-4ab0eea8c6d6",
        "cursor": {
          "ref": "12b065f3-c75a-4a40-b5b2-138c0c906207",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "541b81bd-0a43-49b0-a5de-2562b274ee1b"
        },
        "item": {
          "id": "0fbf8844-84c4-471b-8ddf-4ab0eea8c6d6",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4f3f97d5-f99d-4a39-819e-f5b4040de2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "1a9cd5f3-97fb-43dc-ba43-65799e8777d5",
        "cursor": {
          "ref": "1dcf6110-517b-4a64-869c-984793c00817",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1e8982f1-1c45-4b7f-884c-896d224a1c58"
        },
        "item": {
          "id": "1a9cd5f3-97fb-43dc-ba43-65799e8777d5",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a4576ea4-1a1d-4fe8-8128-e5f7e10c31b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "996dc315-35f6-41db-ad87-b1cdbb9c8e9a",
        "cursor": {
          "ref": "34db706a-55df-4934-a59a-c6af88f2c085",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e63496e2-994d-4e8a-aab9-fbb40850bc8b"
        },
        "item": {
          "id": "996dc315-35f6-41db-ad87-b1cdbb9c8e9a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ecf99e31-cd16-4227-8fe7-44926f3a657c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81295c7a-92e2-43ee-96f1-70015090290d",
        "cursor": {
          "ref": "ca282db7-6577-4621-a3c1-69f9c29cc8ef",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1e349b3d-6add-4cba-bafd-e19a846cf3e0"
        },
        "item": {
          "id": "81295c7a-92e2-43ee-96f1-70015090290d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "43ff7e17-fae5-45de-b2a9-c2b885076fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "7254b37c-19d2-446e-bace-95757510f4ab",
        "cursor": {
          "ref": "5358b037-15ec-4281-adf6-062e37d9d388",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5ba4778f-5ae0-440b-8fdf-675c90b49ea0"
        },
        "item": {
          "id": "7254b37c-19d2-446e-bace-95757510f4ab",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d836f876-8b05-4942-b890-98b1bd38c338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "f1b566ce-0303-4747-8fcd-31b6e65cd14d",
        "cursor": {
          "ref": "acb72459-434d-4302-9b98-428046787996",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "32db626a-e8ba-4d37-8d8c-f92891cf4f72"
        },
        "item": {
          "id": "f1b566ce-0303-4747-8fcd-31b6e65cd14d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "828a0f83-b07b-42a5-beb6-4a5d8848060e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "db26dad7-e940-47ff-87c3-b1b3f0d5c2ca",
        "cursor": {
          "ref": "ea4d921d-58f7-4918-a472-7b24f8dcebe6",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2275da18-961b-4503-b42c-9d9200eb0381"
        },
        "item": {
          "id": "db26dad7-e940-47ff-87c3-b1b3f0d5c2ca",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cf56f507-609b-4093-bd69-ce54be172145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "60966789-1cdf-4d31-aa8d-627dc5af8179",
        "cursor": {
          "ref": "f36a0f42-e85d-4ef4-9707-5b35ae569b77",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3586cdd7-0c2b-4b3d-931e-741e43ce5925"
        },
        "item": {
          "id": "60966789-1cdf-4d31-aa8d-627dc5af8179",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6214fc4b-7978-409b-8238-ad91de3ee7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "c1b3a0d1-2c1f-4a86-b68a-030b1a616901",
        "cursor": {
          "ref": "714d57c0-23ca-4553-9fe4-297031172005",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8a21501e-d137-46a1-9e10-879782c6c3e5"
        },
        "item": {
          "id": "c1b3a0d1-2c1f-4a86-b68a-030b1a616901",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "785cd4a1-4e20-42d6-8fdc-ab71074e792e",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "03c001b9-8df8-4f2a-92fb-665059618381",
        "cursor": {
          "ref": "2eeeae7b-83ff-472f-b645-ef4148186383",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e10f874d-f6a0-44c8-9a09-56fd770650e5"
        },
        "item": {
          "id": "03c001b9-8df8-4f2a-92fb-665059618381",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f1588051-09d1-4a25-abfd-8a9f76d5d4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "7c6d3e33-ab59-4eab-9405-1f258953b80b",
        "cursor": {
          "ref": "b99a46ca-d591-4717-83e0-ea6c522f9a86",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b98f2a70-d8c1-44dd-9973-af109fff419c"
        },
        "item": {
          "id": "7c6d3e33-ab59-4eab-9405-1f258953b80b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f1afd8c2-271f-4a3c-9f4e-4078c83229cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "b5c8b4c3-b7b4-4be6-8880-0b5d34a94089",
        "cursor": {
          "ref": "94b62391-ae97-43ac-88db-7639c2fe52a4",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3cf3bb00-810c-43a1-9730-c84b92fc7a8a"
        },
        "item": {
          "id": "b5c8b4c3-b7b4-4be6-8880-0b5d34a94089",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cf4c129b-583e-41d9-9296-9a4a27ec6d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "03377283-a019-4c99-a655-56487ab81108",
        "cursor": {
          "ref": "d8f7cab9-5c7a-4fe4-83f4-8cde18b7122e",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9a8a0b9d-51f8-4d8d-82a9-41cf59be4446"
        },
        "item": {
          "id": "03377283-a019-4c99-a655-56487ab81108",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8b3d901b-9dd7-43af-8ece-5469bd0503c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "7c86b2c1-d997-4577-801b-79b3f7f17791",
        "cursor": {
          "ref": "b69bf1a9-9a6f-411f-8d67-1196b4300bba",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "aac758af-f050-4258-a4e9-66d7b29540b1"
        },
        "item": {
          "id": "7c86b2c1-d997-4577-801b-79b3f7f17791",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "524fe43d-79cb-4f44-825f-17d982c807b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "0b6619c3-ce48-4236-b83b-ed66208f72e4",
        "cursor": {
          "ref": "aff4ffc8-d839-43c1-9ea7-62d709d33eb7",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "48975b7c-9009-41cf-8651-63f087bf4c87"
        },
        "item": {
          "id": "0b6619c3-ce48-4236-b83b-ed66208f72e4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7a42620f-e2b0-41aa-8e1e-732002bcf192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "c46cbab6-00da-4747-a8bf-7a3c8286db97",
        "cursor": {
          "ref": "4a2fe019-fa8f-407a-a6ee-672ca64658bc",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5f1fe3f0-58b2-4663-8fb4-c03bca276f0f"
        },
        "item": {
          "id": "c46cbab6-00da-4747-a8bf-7a3c8286db97",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "935539df-a04d-4035-9a90-c1d7d98c8fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "ab10e633-4727-4a94-9b93-a38730fd818a",
        "cursor": {
          "ref": "ce860b33-9b2c-4fc1-b638-d67cd7fb5727",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "10dc0526-f0d8-4004-9865-719fb5bf9460"
        },
        "item": {
          "id": "ab10e633-4727-4a94-9b93-a38730fd818a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b2ff8c31-6fe4-42e0-aa98-afbf827b3468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "5cb736bc-a203-4c31-a201-68e93386d3dc",
        "cursor": {
          "ref": "c8d8295e-5ab2-41e8-bcb7-2fb39140ea95",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a88d4bb0-c579-4b38-84e4-4c2e8f4af8c8"
        },
        "item": {
          "id": "5cb736bc-a203-4c31-a201-68e93386d3dc",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "465f89bb-e0d8-4eea-9d7c-cb54f1ad7f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "cd4b6517-79b0-45a1-af38-328e0622444a",
        "cursor": {
          "ref": "0fe32cf5-2bb5-486b-bbb3-94e46dddaf7d",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b259a47e-2057-4b75-8f87-6576807a2cab"
        },
        "item": {
          "id": "cd4b6517-79b0-45a1-af38-328e0622444a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a27a559f-a341-498e-a155-de60b304d125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "187a7280-00ea-4dab-bb34-7194b5f41fe4",
        "cursor": {
          "ref": "f0bf55a3-826c-41e5-b360-26f1ff787e8f",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2f634c61-e1e4-4ef4-8ec6-a4ced2f68bb2"
        },
        "item": {
          "id": "187a7280-00ea-4dab-bb34-7194b5f41fe4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8c345101-ee39-4c3d-bf66-2a864ece0236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "c1c9535c-c523-41ca-b1e7-223cc62b33ff",
        "cursor": {
          "ref": "7ca6fd7c-6643-438e-a17d-6d6b136c234a",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8865844c-e105-4de8-b447-b3eee0196a66"
        },
        "item": {
          "id": "c1c9535c-c523-41ca-b1e7-223cc62b33ff",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cbabf32c-5da3-44bc-a2a7-5b1d159ac77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "74b07372-b508-4ad3-9db0-5b620ff0d990",
        "cursor": {
          "ref": "bfddffec-dae2-4e3d-8bbf-60f2facddb18",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8483e8bf-48ca-46e1-80eb-d2f9104189ff"
        },
        "item": {
          "id": "74b07372-b508-4ad3-9db0-5b620ff0d990",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "26cd05c1-20f6-42ec-aa07-0209ebdb4fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "f3c48d3d-6486-47cd-a0a3-e35cd76f4c5c",
        "cursor": {
          "ref": "ca8bc807-0b2d-4079-893b-537784e80be2",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f9177d6c-e187-4d39-a409-4078e8670485"
        },
        "item": {
          "id": "f3c48d3d-6486-47cd-a0a3-e35cd76f4c5c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "02db37a7-4ffc-4361-92c5-916b5cf2f4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "d195b3b5-bebb-4a7a-9a2f-4e6f01366c8a",
        "cursor": {
          "ref": "e2bac6f7-a9ce-48b7-802b-54737c52d0dc",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6500318f-9de1-4359-b317-0edabeb10bbd"
        },
        "item": {
          "id": "d195b3b5-bebb-4a7a-9a2f-4e6f01366c8a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8bb6db03-f86c-499a-9800-bf55cd194209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "d4de6bb9-47ba-4c8a-8d4b-70144e0e4195",
        "cursor": {
          "ref": "a57791f2-77e6-44a7-b13d-c79020368bbb",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7cbaf9bc-4f2b-4d28-bc64-e97198fae62b"
        },
        "item": {
          "id": "d4de6bb9-47ba-4c8a-8d4b-70144e0e4195",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fb5d6376-e66e-431e-8da3-f98bcc8cf5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "28174162-15d0-4837-b1f2-cfd45654f94f",
        "cursor": {
          "ref": "2bb9e360-d1ab-451a-8134-55afeedde13f",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "77ce7e26-d766-4a67-b507-fd005311ae78"
        },
        "item": {
          "id": "28174162-15d0-4837-b1f2-cfd45654f94f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "63ffad08-a170-492b-9bb7-75a3e5143f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "ff20c941-27b7-4677-a45e-87758c97e504",
        "cursor": {
          "ref": "7eb5e230-8830-46e9-8d45-89638e76cbe4",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ce346425-d50c-4038-b129-815be803aa9e"
        },
        "item": {
          "id": "ff20c941-27b7-4677-a45e-87758c97e504",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "14c3e3b0-4cbc-4c90-bf5d-2bcfd8ad89a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "59fa1b54-b0c3-4845-9672-337288349c26",
        "cursor": {
          "ref": "cda3c0f2-36fa-48b3-be7b-7abbb0d692c6",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9458d264-7ccc-4976-bc98-cf300e961de5"
        },
        "item": {
          "id": "59fa1b54-b0c3-4845-9672-337288349c26",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "22b3707f-1199-45a1-a5dd-cdd685844915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "a19a94ef-d3c0-45e1-ba8b-12483152d035",
        "cursor": {
          "ref": "d1a5f294-8da3-4960-8a83-cded58f57e74",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "aa1c1a01-d419-4da1-9434-496b9fe8b68a"
        },
        "item": {
          "id": "a19a94ef-d3c0-45e1-ba8b-12483152d035",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f78e069b-92a9-4b54-9edd-1e1fcf04561b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "97ba6865-3c88-4633-9f47-da728710fbcc",
        "cursor": {
          "ref": "78e4177b-019e-439e-a0b1-c76701d802c7",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0facbbe2-103f-4004-8230-00c8a0587f60"
        },
        "item": {
          "id": "97ba6865-3c88-4633-9f47-da728710fbcc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c77ed3c0-0d7b-4adc-8439-d799f89ada3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "bca3de4d-5afd-4f15-8aec-07abd02d6fb9",
        "cursor": {
          "ref": "86072ac9-52e0-43ed-b201-af85a27bcf1b",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8a7dd654-b2b0-4d9e-8524-ab676a2c4d4c"
        },
        "item": {
          "id": "bca3de4d-5afd-4f15-8aec-07abd02d6fb9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c51a6521-49b0-44fd-90db-2020f6c87a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "9fccbb7f-2eec-4fe4-8f66-8d0d818afb16",
        "cursor": {
          "ref": "fb63b3d4-0af3-4b29-9789-530bbedbbfba",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9b92effa-4039-40eb-b8ba-b0fae317f2f8"
        },
        "item": {
          "id": "9fccbb7f-2eec-4fe4-8f66-8d0d818afb16",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d1654976-b006-4d38-bb6f-a30fe3abb517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "0c590a88-6b66-46b0-9e03-43f8ac6da602",
        "cursor": {
          "ref": "d1f408d0-c1cc-4df5-b886-452bb2f2b34a",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6a8f2bd2-b19e-43d0-8656-d8ac1eb9c545"
        },
        "item": {
          "id": "0c590a88-6b66-46b0-9e03-43f8ac6da602",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3c6e7dcd-a650-4eeb-8069-d0425ae3fd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "7fe5f879-92fc-4700-8af9-d25dc8bd74fb",
        "cursor": {
          "ref": "97a5ef00-e3ff-4254-b458-24e402a9f656",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c48f279e-f93d-4641-8056-a58528032bfc"
        },
        "item": {
          "id": "7fe5f879-92fc-4700-8af9-d25dc8bd74fb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c5759cf3-cd51-483a-9abe-a37cefe4b7de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "baf057f0-4472-40af-9bd7-be331dc9ff94",
        "cursor": {
          "ref": "5e0d693b-0e94-4906-a861-c99473d456ee",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6de1efde-03fd-423d-8c68-c889c9deef37"
        },
        "item": {
          "id": "baf057f0-4472-40af-9bd7-be331dc9ff94",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a686faa0-ef58-4aba-bbf9-b53d1a7b26b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "6f40d40e-d1b5-409d-9ae7-6f7bb9b3e3bb",
        "cursor": {
          "ref": "58e569f7-6f26-495e-8e24-1863af4dc868",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "442a90b4-f5b2-46df-8386-38b8aaf58ba4"
        },
        "item": {
          "id": "6f40d40e-d1b5-409d-9ae7-6f7bb9b3e3bb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "0db7b674-c898-4732-9f11-f0030c3c30d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "d9980132-e14b-4c86-804b-f2a3aff953c7",
        "cursor": {
          "ref": "03241954-d9b5-4840-a7c3-7703c5ca742f",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "46fa6bdf-381d-40d5-a791-af1368452084"
        },
        "item": {
          "id": "d9980132-e14b-4c86-804b-f2a3aff953c7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ad4fdab1-b790-4bbd-b485-7b316dcd25f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "99865cb4-853f-499f-8c36-bef614d83715",
        "cursor": {
          "ref": "de95d4b9-b8a1-4849-a790-af5fbb804508",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7738dcaf-49cb-4a2c-943e-57d6ce73a6cb"
        },
        "item": {
          "id": "99865cb4-853f-499f-8c36-bef614d83715",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8bad3afb-21dc-4baf-b0e3-c8011caf10b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "94000a46-c470-4965-bde3-1762ee645217",
        "cursor": {
          "ref": "e41ad53a-4cd1-41c3-860c-dd34b9b00034",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9932778f-b581-40a6-8d76-dcb70100cb2e"
        },
        "item": {
          "id": "94000a46-c470-4965-bde3-1762ee645217",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "10a354ec-e7cf-479f-a669-06b61b65339a",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "fbf4e0cc-c845-42cd-90f4-b3a8f158b16d",
        "cursor": {
          "ref": "b25a50ac-2d85-4d56-827f-6ab1e2c5e3a9",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a7b418d7-a3f2-4c3f-8d87-cf40c9d77e6e"
        },
        "item": {
          "id": "fbf4e0cc-c845-42cd-90f4-b3a8f158b16d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "63ea4a68-c4d4-4768-96fc-456f8f810e66",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "4d2ffe99-65e9-45b5-8f0e-4f205a3f0f3c",
        "cursor": {
          "ref": "9e69faf1-b28c-4906-a10a-5644899edaf0",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b045fdce-652f-4033-b04f-3c5b8827ff0c"
        },
        "item": {
          "id": "4d2ffe99-65e9-45b5-8f0e-4f205a3f0f3c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0644c37e-bf1d-4566-8d5d-9864023d358e",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "22ad3c17-6dbe-411a-9e27-62449fb3fd82",
        "cursor": {
          "ref": "2e54d947-3c70-4630-86a2-e8fd1103bd9d",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "848693bb-470a-43ba-9949-949b43aa8d8d"
        },
        "item": {
          "id": "22ad3c17-6dbe-411a-9e27-62449fb3fd82",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b6192f6b-65b2-4f58-9f31-1c058fb0af35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "435fcef9-421e-4551-8ab6-c279f4139fd6",
        "cursor": {
          "ref": "ad3a4069-1c95-4aa3-b67b-fce72610d1b3",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "097d3916-c4a5-47c7-99ac-52019ebdb542"
        },
        "item": {
          "id": "435fcef9-421e-4551-8ab6-c279f4139fd6",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0b5bb638-d871-4305-9fc9-d3da46c41258",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "aeef9d73-3107-45c7-ad4b-a7d33b7f7954",
        "cursor": {
          "ref": "7dffe17d-8955-440a-948a-83cc27436135",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bf47a529-e789-42f9-9e28-8552fa345bf7"
        },
        "item": {
          "id": "aeef9d73-3107-45c7-ad4b-a7d33b7f7954",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8eefdb1c-bcc3-49ab-8246-f352f086ec4c",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "8d45c5b8-f998-4040-b59c-2123a80676dc",
        "cursor": {
          "ref": "0d31b1c2-1cbe-4210-8ed0-30c275afd7e9",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e9be68af-d879-4459-8e06-43f74983e87f"
        },
        "item": {
          "id": "8d45c5b8-f998-4040-b59c-2123a80676dc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c5985f32-9b24-4d2e-8aab-6479e9de7740",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "205badb7-30e0-4d48-b099-b9bca79de3e7",
        "cursor": {
          "ref": "ead576e1-a0f5-41f3-bdd7-483d28dcf2a0",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "266a440e-0376-4e60-b234-cf7a6ab1c6d1"
        },
        "item": {
          "id": "205badb7-30e0-4d48-b099-b9bca79de3e7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e73b9a1a-13eb-47d0-97f4-90af27a9f65a",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "e8221e9c-8b02-4317-b8da-c4bd753e676b",
        "cursor": {
          "ref": "3ce9886b-cea8-4647-b16b-393acf024f74",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "18491204-097d-4a52-9ed9-de2b95ce570f"
        },
        "item": {
          "id": "e8221e9c-8b02-4317-b8da-c4bd753e676b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e23120c3-d380-4b8f-8afd-f5bf00bb8aa2",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "5396edcf-c702-4c9f-b72d-44655ae20f97",
        "cursor": {
          "ref": "2d0efb13-7fe1-4c4e-9c8c-99db3315599a",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2d99e8c7-5dfc-4f4e-974b-dd00ab012c3a"
        },
        "item": {
          "id": "5396edcf-c702-4c9f-b72d-44655ae20f97",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e1feda88-798d-42b5-a5f4-75f70d759076",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "2f8b7a31-8dcc-49f5-955c-d2b8e922dc76",
        "cursor": {
          "ref": "ea5cbff6-a276-4823-b37b-452da6e53f09",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "79c2ef9c-3fb3-40d3-8387-d6a6940b7e11"
        },
        "item": {
          "id": "2f8b7a31-8dcc-49f5-955c-d2b8e922dc76",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "713b8135-66bb-4b7c-98b7-d6265dac4f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "6c1f4512-ef0a-45fa-a2ee-284c3fdbdca2",
        "cursor": {
          "ref": "6b08515e-aef5-4a98-adf7-ebe17459ff4e",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "abe8802f-c1d4-4b7d-92e8-c0b01746522a"
        },
        "item": {
          "id": "6c1f4512-ef0a-45fa-a2ee-284c3fdbdca2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c43ac2e4-7967-4954-ac81-36d62cec6176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "16bcdc75-5fab-4902-bbce-5e41237176d8",
        "cursor": {
          "ref": "3dae065f-b3c3-433f-a754-43e847b20f09",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f6ed6835-4880-4cfc-aaf4-ef9ea6d7ecae"
        },
        "item": {
          "id": "16bcdc75-5fab-4902-bbce-5e41237176d8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7f3e3792-0033-46ab-8026-771508c6666f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "9226f887-bdd7-4389-a642-191a373685c2",
        "cursor": {
          "ref": "0efa0fb8-6c7e-4300-9cd5-e95cd138df42",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e6a41e84-f252-449b-9e90-11a34f4e78ad"
        },
        "item": {
          "id": "9226f887-bdd7-4389-a642-191a373685c2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3456b251-fc8e-43c6-a95e-cd7947b87a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "ceddbfe5-d07a-4da9-9a5c-adf41935114d",
        "cursor": {
          "ref": "44f8c3c1-3c3c-4897-b9e2-91df596a6023",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "219774e0-7ee9-4c7c-aea2-30dd0c02bf18"
        },
        "item": {
          "id": "ceddbfe5-d07a-4da9-9a5c-adf41935114d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4e649484-dffe-4f11-80c1-341aa605868d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "074af20b-b492-463b-a591-00005a439a3d",
        "cursor": {
          "ref": "857183b2-fdc7-46a8-96ed-d7fc2d3c056b",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "77625960-abf1-4a76-bbce-a5c70d1cb65a"
        },
        "item": {
          "id": "074af20b-b492-463b-a591-00005a439a3d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d04891d4-577d-427f-93d0-124417f24db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "0543d5a5-51cf-4c7e-84f2-55b4d54bbeb1",
        "cursor": {
          "ref": "55fba8ac-f60e-44bd-94cb-139af65deef7",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7f0e24ee-2e47-4700-bc17-ad35bfadad21"
        },
        "item": {
          "id": "0543d5a5-51cf-4c7e-84f2-55b4d54bbeb1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "246f831e-6da6-4445-87f9-083fb2ea3e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "2d520bca-d199-4e0c-8a9f-97b5f61f9a94",
        "cursor": {
          "ref": "31e97dca-70d5-439d-a7bb-a1b255cedc43",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b952eb36-a2fa-4121-9c43-9c8432ee71b4"
        },
        "item": {
          "id": "2d520bca-d199-4e0c-8a9f-97b5f61f9a94",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f320a36f-90fe-4b1d-8c74-8c26ec1d9564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "f8ab5807-820b-4b0e-b66d-7dd48bd19f52",
        "cursor": {
          "ref": "b939a9d7-5b72-4f79-a862-efa6243fac18",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "31b8a78d-324b-45c2-9ce6-4f3df7defd76"
        },
        "item": {
          "id": "f8ab5807-820b-4b0e-b66d-7dd48bd19f52",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4a6fa5c4-b10f-412e-adf5-f57b7f901d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "4d5dd12e-5fbf-4115-9680-97eaceaca21b",
        "cursor": {
          "ref": "59da547a-700c-493d-9a67-4fb5e5d00174",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "64f845a6-43b5-43f3-9470-619b497559fc"
        },
        "item": {
          "id": "4d5dd12e-5fbf-4115-9680-97eaceaca21b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "56f1dd85-41e0-4bec-9eb3-85e192e543ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "527c14f1-184b-4728-863a-b64af4f11bd2",
        "cursor": {
          "ref": "7adf3cbf-8fca-4a29-8e59-08c92941dcf5",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f5ce1746-b295-4665-9c98-52c4bc8e0d34"
        },
        "item": {
          "id": "527c14f1-184b-4728-863a-b64af4f11bd2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "53045b3e-cc85-465d-8236-a5ea3051e756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "ec03fbf9-2b38-4568-a5dc-79cd9ccfd690",
        "cursor": {
          "ref": "6222021e-8eca-4436-be44-f5fc27db23c2",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "20db5f74-2914-4b6b-8a38-1ccca7ed9641"
        },
        "item": {
          "id": "ec03fbf9-2b38-4568-a5dc-79cd9ccfd690",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "030a5f47-a523-439a-aaed-58dc97c5836a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "d4a2652b-c908-438e-bec5-5b15be58f2c5",
        "cursor": {
          "ref": "1d4d62fe-9bbb-43b7-b1ed-bba1c901efe9",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3a33e984-8f97-4ea8-9713-5491beffc4e4"
        },
        "item": {
          "id": "d4a2652b-c908-438e-bec5-5b15be58f2c5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5ed3bb42-3b4d-4fe3-8acb-aa739fcb3829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "cb8516b2-c2d8-4fa0-baf7-c032860dc2c0",
        "cursor": {
          "ref": "763412e2-6348-494f-baf6-cd6bc8c2ac18",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "058417bc-9fe2-4fff-9c1d-6073e672f0dd"
        },
        "item": {
          "id": "cb8516b2-c2d8-4fa0-baf7-c032860dc2c0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9055592a-7b62-44b9-88d5-fea9bfbd3007",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "b46c5f0a-9174-457a-b854-92c4b6ce66b4",
        "cursor": {
          "ref": "d369bce1-2e60-4eea-ac72-b8134528df8f",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d1587cfa-ab1a-459e-bc40-fa2f3478e34e"
        },
        "item": {
          "id": "b46c5f0a-9174-457a-b854-92c4b6ce66b4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fe7808ae-3e6e-4d10-93bb-a845287201b2",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "c17a6713-e53c-422d-b4f2-90a920b480a4",
        "cursor": {
          "ref": "92e8093f-37a2-410c-ada6-553af9524eef",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6e57642f-f06d-47f4-8dc6-5878e8d06c06"
        },
        "item": {
          "id": "c17a6713-e53c-422d-b4f2-90a920b480a4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fefc7219-c4f5-4323-b15d-af9d4c2f854a",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "a28f6bc1-dc03-454b-a873-7c9e471d6d05",
        "cursor": {
          "ref": "4cb69e7e-9fba-4583-bfa5-2d98ce70c5c6",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8d926ea1-922a-4445-b82a-9dccaf81b164"
        },
        "item": {
          "id": "a28f6bc1-dc03-454b-a873-7c9e471d6d05",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "392641f5-345c-4a31-b66e-ca9d80961c4a",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "33d49ae0-2a69-42a6-83a2-0f1b92e32144",
        "cursor": {
          "ref": "61495c1e-f4e9-40ef-bda9-04aa56e49640",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1a05f0ba-fa82-4461-9355-dfae2c450816"
        },
        "item": {
          "id": "33d49ae0-2a69-42a6-83a2-0f1b92e32144",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fd5d33ea-0bb1-4792-8529-a5eb258f76fb",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "1c7d252c-36dc-4317-80d8-a41110b8a18f",
        "cursor": {
          "ref": "8e160fba-de1d-49e4-a72b-d20a6af4f781",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0d762e85-753f-4427-ac82-c43492d1621f"
        },
        "item": {
          "id": "1c7d252c-36dc-4317-80d8-a41110b8a18f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c55772d0-f2d8-4d66-b3d4-d87188861acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "2404ef56-51e6-4c90-b136-f5163220a223",
        "cursor": {
          "ref": "28c0be5c-9383-4ee0-b1e3-ac8a6d407022",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "66a14605-ae1c-4eb4-bdd4-5670e71c697a"
        },
        "item": {
          "id": "2404ef56-51e6-4c90-b136-f5163220a223",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c70189b0-d675-4eee-b525-b28416018060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "0f2418d1-e92f-4c52-95b3-1dcec7d29b60",
        "cursor": {
          "ref": "384c7a71-93ae-4e77-9660-63645b39c9d6",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "eef9386c-67c2-4fed-8a7b-399c64e3e239"
        },
        "item": {
          "id": "0f2418d1-e92f-4c52-95b3-1dcec7d29b60",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e7b2b7cf-b33b-4711-b063-1d7c5d00a4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "13ea0e3e-d37c-42db-a459-76137fde006c",
        "cursor": {
          "ref": "133a2675-0308-4345-9fa6-1c6bf7c5d4ed",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2808679e-b392-43b1-9f89-721e2de557e3"
        },
        "item": {
          "id": "13ea0e3e-d37c-42db-a459-76137fde006c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "78dbcd11-3f36-4ee0-aa5e-c1d1079830b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "9b375648-4a2b-4b70-843b-2a85054e3945",
        "cursor": {
          "ref": "b36a37ee-3d20-4a4b-9a28-e6a759adcae2",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "dcae56ca-d671-4e7d-b96c-b0965f4dea01"
        },
        "item": {
          "id": "9b375648-4a2b-4b70-843b-2a85054e3945",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "058a6754-8c16-4e3f-8d5e-4547258b6884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "8f34bf69-8bde-46f9-89d4-22417c74eb33",
        "cursor": {
          "ref": "abf2da2c-efae-4d9d-9d3a-3b1ff4633b16",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "24a9f13c-7ff4-487c-b112-fcc1e183bfb7"
        },
        "item": {
          "id": "8f34bf69-8bde-46f9-89d4-22417c74eb33",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "34810047-67dd-41f9-8406-1464aea4ee91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "0eba5144-23fd-4676-a138-a8aea379c142",
        "cursor": {
          "ref": "85bb14a3-a657-4ae3-997e-ea1073d90fb5",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b3d63f68-e5da-4108-889a-7f654c51f5d5"
        },
        "item": {
          "id": "0eba5144-23fd-4676-a138-a8aea379c142",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b4845f02-9e3a-4faf-a499-84118f8f98f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "633f7374-113e-44bc-8eaf-3ecf9c205365",
        "cursor": {
          "ref": "f29f40f1-abd6-4c8b-96d4-b16096b8bf2f",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "03bf6d9a-1dc1-4092-bfa4-91bf3a852233"
        },
        "item": {
          "id": "633f7374-113e-44bc-8eaf-3ecf9c205365",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "70cbc93e-931d-4788-b5c8-fb576ae1971b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "16c6e39f-7ae1-47d3-94c1-a3c292e9def4",
        "cursor": {
          "ref": "503f6685-0e55-457f-b18e-5a8a77a88783",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e869a0cf-51d8-4eea-9133-8826079732e1"
        },
        "item": {
          "id": "16c6e39f-7ae1-47d3-94c1-a3c292e9def4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "41f302c3-43a7-40ba-b690-f6d2fc618033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "b24859d8-2839-430d-9282-e8a477e20bd1",
        "cursor": {
          "ref": "6a29d741-b735-45be-a695-b20871fda206",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4aef22ab-0b86-4bf6-a540-ccdb364d904a"
        },
        "item": {
          "id": "b24859d8-2839-430d-9282-e8a477e20bd1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8b9fddee-3a71-49ba-a5cc-651668724903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "f7078f78-77ed-4e14-89c3-04d93635f8cd",
        "cursor": {
          "ref": "ef3550ee-90f2-478e-a4b2-35187a47a39c",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "15457253-351a-41c9-9f51-1b98b77d03ed"
        },
        "item": {
          "id": "f7078f78-77ed-4e14-89c3-04d93635f8cd",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "41d26a83-edce-487c-84af-3afc7f41a381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "72b81b72-8a1a-4f03-9116-7c4fcd28ff7c",
        "cursor": {
          "ref": "ecb854fc-1f87-423c-8845-d0570e3e97ae",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d73cebc9-1bf1-43f2-bbd2-8c991be9b239"
        },
        "item": {
          "id": "72b81b72-8a1a-4f03-9116-7c4fcd28ff7c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3db3dcab-e89a-4dbc-9f38-cf4f13c38eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "91ed1c33-55ec-4246-8144-16f2f3ab6322",
        "cursor": {
          "ref": "50824ce9-f2a5-4074-b20f-18d246e5c278",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4641ab0e-dbe6-4b75-af57-08136291bfb8"
        },
        "item": {
          "id": "91ed1c33-55ec-4246-8144-16f2f3ab6322",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7ccd4809-c068-4b55-9c62-ce98a5c40d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "c24906a7-a035-407e-992a-18d7165511bd",
        "cursor": {
          "ref": "b1908e0d-e014-40b9-987f-dc6cdd49f828",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2f54ea74-fd99-47b1-8fa5-439aeec17d78"
        },
        "item": {
          "id": "c24906a7-a035-407e-992a-18d7165511bd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6ebed8c8-0f8f-440d-89c6-c6c42a4e24e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "57b439df-eb2d-4116-8fa3-12f1b9d93b6e",
        "cursor": {
          "ref": "981aa0b5-a173-462b-bcf2-34b5ba2cc39f",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7cf7c3d4-3529-4bd9-91f7-591259b83108"
        },
        "item": {
          "id": "57b439df-eb2d-4116-8fa3-12f1b9d93b6e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "371fcd56-01ee-4bd3-a8ab-37d226dee746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "53d18c17-aae7-49ab-bc23-55a272b4c528",
        "cursor": {
          "ref": "e98e6e54-2460-4b14-be36-84ce74ae4984",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ec0d9311-f369-4c18-bc33-8d62556ab4f7"
        },
        "item": {
          "id": "53d18c17-aae7-49ab-bc23-55a272b4c528",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6065c214-7ccb-489b-9d13-eea8be93c607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "e94cdf9a-5d70-4224-b127-de40ecf16a9a",
        "cursor": {
          "ref": "cc4b3722-c004-407f-a01d-73637f078d45",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "98611a35-822b-4fbf-83fc-e017ba5dcfa9"
        },
        "item": {
          "id": "e94cdf9a-5d70-4224-b127-de40ecf16a9a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a089230c-bf6c-4295-ba4e-3f1d7da9d64a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "5ce91713-fe39-4e2d-9b98-0bee62f36a92",
        "cursor": {
          "ref": "8128d96a-224b-4fa2-bf87-6d55c2be14af",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e88ee366-c0f8-4e55-a058-96bd1c34b118"
        },
        "item": {
          "id": "5ce91713-fe39-4e2d-9b98-0bee62f36a92",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ac4bf73b-cf6e-40d6-87bf-b96a57885805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "9ca73883-77f6-4b95-8c6e-73a61d48f557",
        "cursor": {
          "ref": "fc1bd1d3-d01b-4f86-912d-616b3024b93a",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6b4820bc-44ac-40e7-a806-22e95722513a"
        },
        "item": {
          "id": "9ca73883-77f6-4b95-8c6e-73a61d48f557",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "32bb83d0-5c26-4077-be10-c3f6f90975b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "ad67f8d8-c0d0-4c9e-9243-faeed3427188",
        "cursor": {
          "ref": "36dffeb8-3aa4-40fd-8f75-d3256c14948f",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2ffc328c-af64-43d5-affa-3cffbfc0cb60"
        },
        "item": {
          "id": "ad67f8d8-c0d0-4c9e-9243-faeed3427188",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "38c87782-5662-44ce-9f2d-e5a97543bdf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "27e1d9d7-8db3-43ba-a9e4-7e084c7b57a9",
        "cursor": {
          "ref": "fd1ac8a7-f041-48ce-8413-70b2cb225b28",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "64b31a3b-c287-4631-b3e2-9de1256b1c3c"
        },
        "item": {
          "id": "27e1d9d7-8db3-43ba-a9e4-7e084c7b57a9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0d3b757a-01d9-4e25-953a-b28820e9a56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "073f5718-4c19-4b62-baf3-fa3ab9251526",
        "cursor": {
          "ref": "1a9140f7-92c1-4db5-9be6-f14e10cbe142",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cecc1a1c-2936-410d-b572-d7448207b016"
        },
        "item": {
          "id": "073f5718-4c19-4b62-baf3-fa3ab9251526",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7bfdc995-276d-49fc-9096-eeed07cdf0a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "9382866a-6448-482b-9fd7-5d474067d399",
        "cursor": {
          "ref": "2e5b102b-d263-4877-a733-c34804510d1f",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "763b2c37-9588-4061-b21a-072ead4bbbaa"
        },
        "item": {
          "id": "9382866a-6448-482b-9fd7-5d474067d399",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8df25271-cc2f-4b97-9d54-8dbc828b2c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "d53e3383-4a9c-47ae-961b-0701110d69d5",
        "cursor": {
          "ref": "dfe39985-5b06-4203-9f89-b676154e6ea0",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5ab81908-1b34-4635-b1e2-3697b0f68776"
        },
        "item": {
          "id": "d53e3383-4a9c-47ae-961b-0701110d69d5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8eb882fc-7ef5-4b1e-9607-ad713d9f96ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "ecfd3a3e-e3f6-4a95-82af-95ac4b3183fb",
        "cursor": {
          "ref": "95aad189-7c87-46da-b3fd-222d3a0c1364",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0b956fa1-8c60-425a-bbf1-c287c3891b1c"
        },
        "item": {
          "id": "ecfd3a3e-e3f6-4a95-82af-95ac4b3183fb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b73a4aaa-61f5-47da-a4c6-0a9c1d340645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "65c58b17-1748-4327-8802-ee8340d37ccc",
        "cursor": {
          "ref": "b333a1d0-a836-45d5-929f-1910fa0278dd",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "77043f26-3bb8-4ad0-97e7-31843d0f48f2"
        },
        "item": {
          "id": "65c58b17-1748-4327-8802-ee8340d37ccc",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cf4e03b1-bc84-443f-ad71-28e414973b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "fed02255-39e9-4e02-a116-b5fcca2141fa",
        "cursor": {
          "ref": "13006512-fac8-4871-8beb-5bb598130b77",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "38a3f06f-2461-4fc8-85b0-9cc683798a18"
        },
        "item": {
          "id": "fed02255-39e9-4e02-a116-b5fcca2141fa",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b36d0a5b-71ab-4d60-9195-49c9a6f994a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "ec8ead51-901a-4766-9795-5452828d66c5",
        "cursor": {
          "ref": "5cc02473-e93e-4198-8f90-ad17e8566a8c",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e95984a2-c676-4112-90c6-10e8c7e43cae"
        },
        "item": {
          "id": "ec8ead51-901a-4766-9795-5452828d66c5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b7e3b19b-8046-4b59-9de5-df08c9333612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "8db9b7a3-9362-4dca-bb2c-6479b7b122ed",
        "cursor": {
          "ref": "828cdd6c-5984-49c6-a1b7-3f8cbf02dca6",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c73b02f5-4259-49af-84ea-62890d9ae1e8"
        },
        "item": {
          "id": "8db9b7a3-9362-4dca-bb2c-6479b7b122ed",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d058e450-b603-46a4-ae22-815b9e14b842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "6fc3bd2b-8890-4df4-995e-8827579d5288",
        "cursor": {
          "ref": "3e7f026d-a10c-43c5-8086-96db1bcb3273",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "25dcad2d-eca5-4389-bfb5-7f1b9eb34f1c"
        },
        "item": {
          "id": "6fc3bd2b-8890-4df4-995e-8827579d5288",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3da4b331-a82c-478a-b70a-6688afd5aa4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b827507d-3a83-4ed3-aea8-6ca60c74380f",
        "cursor": {
          "ref": "687b9744-8d30-46d5-848d-abd11bef4030",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "91b7f1c7-4b6d-4e29-9dae-d00d893b1650"
        },
        "item": {
          "id": "b827507d-3a83-4ed3-aea8-6ca60c74380f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "19dd7231-0173-44b7-9cfe-151f9d9d1882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f9c1ba4a-324e-4ae6-9738-216132cff238",
        "cursor": {
          "ref": "d88ad1a1-89f0-49d6-8dd4-d951067f962b",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5add6e67-b68e-458c-a52f-9f6d35683939"
        },
        "item": {
          "id": "f9c1ba4a-324e-4ae6-9738-216132cff238",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ef13b22e-2196-4685-a60b-7ca82af9511b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b97d5769-4282-42e4-b3f0-7899acd1b0ff",
        "cursor": {
          "ref": "ef2914e0-939b-4f76-801f-8271dadbf818",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b1197f97-22ed-4362-832a-eaf050099148"
        },
        "item": {
          "id": "b97d5769-4282-42e4-b3f0-7899acd1b0ff",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8b9a4123-8e9f-4610-84bf-6d7cac0578e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ac8921e5-49d8-44db-831a-1371e82141be",
        "cursor": {
          "ref": "5227708c-d55e-4f29-9f88-0b49e6d8da05",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "779d0414-737e-465a-8892-4bca20b383f9"
        },
        "item": {
          "id": "ac8921e5-49d8-44db-831a-1371e82141be",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3bada161-337d-4f18-bbd8-2f05ff2aeb51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "a40494e5-f355-4bf8-abdc-1e1a9db14f8b",
        "cursor": {
          "ref": "faa84f82-3424-4624-b17e-ce269f1462b0",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d538fbeb-c83b-4af7-8f0a-2705918671d7"
        },
        "item": {
          "id": "a40494e5-f355-4bf8-abdc-1e1a9db14f8b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "04cb0937-08b7-4e88-9a94-04831ced3def",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6834d5b2-a30e-46c4-8ad2-8954dbddad4c",
        "cursor": {
          "ref": "9c33f418-fd2b-4cc3-8eb1-8e71b884ce30",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "514d19d5-9e6e-4d27-8fc8-cdf828401225"
        },
        "item": {
          "id": "6834d5b2-a30e-46c4-8ad2-8954dbddad4c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a2126e5b-9bd2-4c4a-ba41-7429937b5c7b",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "8549b44a-68aa-48ff-a157-0e7081aec144",
        "cursor": {
          "ref": "820a3c91-8cb2-4d22-b070-c3a1a2252840",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3b42a87c-f5bc-49de-986c-3900bc5988e0"
        },
        "item": {
          "id": "8549b44a-68aa-48ff-a157-0e7081aec144",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f543ba84-67e8-4566-9291-38971c4c7973",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "287fadfc-e5a5-4e29-94b7-ce2686ea1630",
        "cursor": {
          "ref": "8fa072dd-c157-4105-8434-3beb36855195",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2ceeeb22-6f88-4749-8af8-746cda0f4b37"
        },
        "item": {
          "id": "287fadfc-e5a5-4e29-94b7-ce2686ea1630",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bd2dc254-e5be-4a32-9012-95a88e12c994",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8395950d-bfff-47ac-a8d3-977a1ed97b7b",
        "cursor": {
          "ref": "eb129e94-057e-4a2e-95c1-8ec9c2c4f793",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "72f6f8ab-b5c6-4a2e-8d3d-009145a6782d"
        },
        "item": {
          "id": "8395950d-bfff-47ac-a8d3-977a1ed97b7b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7980e7d4-d2ad-4057-866a-c0ba3652cdaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8395950d-bfff-47ac-a8d3-977a1ed97b7b",
        "cursor": {
          "ref": "eb129e94-057e-4a2e-95c1-8ec9c2c4f793",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "72f6f8ab-b5c6-4a2e-8d3d-009145a6782d"
        },
        "item": {
          "id": "8395950d-bfff-47ac-a8d3-977a1ed97b7b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7980e7d4-d2ad-4057-866a-c0ba3652cdaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c73f35d-d9ce-43cb-9f9d-ad9fb74e2581",
        "cursor": {
          "ref": "e6bcf949-fed8-43a4-a8b0-663432958e3d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1bafc9bc-95b6-465d-9784-74e0d1d49f38"
        },
        "item": {
          "id": "8c73f35d-d9ce-43cb-9f9d-ad9fb74e2581",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "13de3eba-4137-4833-897c-f2a90955ef0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d388de6a-f79d-432e-93a7-b09e956b4d55",
        "cursor": {
          "ref": "b8949dbd-5e6a-484e-a6c3-910824d6714b",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "37fe8ddc-42bf-4dcc-bbe3-3f881e94328b"
        },
        "item": {
          "id": "d388de6a-f79d-432e-93a7-b09e956b4d55",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3f6761ce-b4fd-4d1d-a745-b6c06901d5fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}