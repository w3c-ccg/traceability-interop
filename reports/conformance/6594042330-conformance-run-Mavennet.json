{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a8c74a2c-93fe-48e1-9120-21d3b95b447a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5c8ec404-bac7-407e-b0e3-a396d8f67565",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5448fba-104c-4a65-8b56-eb64702a36a3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "56e2410f-c99b-4746-9130-4cbe2e53c253"
                }
              }
            ]
          },
          {
            "id": "79c83c34-2320-468e-9308-da5766e715e5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1f70a1f2-b0e3-45ca-9e47-61330e301c30",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4981085e-1e23-40cd-9cdf-cc2a2e1ee4c6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1b9f9eaa-6356-43b6-8b6f-9485a18ea0a0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "84a09235-24f9-4aad-8d60-5333cc03be44",
            "name": "Positive Testing",
            "item": [
              {
                "id": "660f20c0-707e-41b5-b79a-c2b54d55e9ea",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78775c77-aee6-4c29-a620-23634a5ec703",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96dbbcef-b4c3-423b-bb45-f12ae90638c5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "64d345e6-d289-4962-bde6-2fa080838a65",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0619003f-7872-48c1-9ac3-f125c02fb02d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "550c28d6-b8db-4253-bac1-5fecda21976d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2caf6bbe-8792-4aea-aa36-4ef867aced56"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5a3705b-71cd-42ee-b627-970790e8c8e6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6b9fcb68-280b-487a-be94-85e9b337d902"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b66b173-0130-45de-8960-1f6ae2b9cea2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "75f5e67f-a3dc-427e-aed6-71b67147a223"
            }
          }
        ]
      },
      {
        "id": "c21adc05-be5f-4bec-9015-42bb65c0f0a5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a87f1289-30e3-4413-b117-1d706d963093",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0265b6c1-53fb-4628-8dad-ca2b734d64f1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3fc373e0-5647-48aa-8b46-5e57cec8a757",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fb0277-f360-4a1b-82c5-3fff39383b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d64e70a-db9c-471c-9861-da22b2d8352d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39eaf6ec-7b36-4f34-be92-b0be5348c1d4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b043db-fd1d-4075-9491-87a069ee9857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "daa5b691-9cd6-4226-b7c3-ae932b6a74c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5128231-6fe4-4b08-9c65-378690b8332f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5792689-dbe1-463a-9c61-3d5760e79c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "612b3dc3-b693-40d2-b4f9-d621b0f8233d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "940d7662-d38d-45a9-839d-feff7d4c420c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4da9c534-27bf-4dfd-8f73-ba326209fe7d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c164d5ab-03c7-4f44-b6ab-e4264ea9668c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69125105-07ae-4012-8f38-dab472c7864e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac97fafa-88d2-4309-8f6a-4e4a8e363653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40835813-c86c-472d-94a2-7eee01d1f506"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c60d134b-173c-418a-a242-3d8bc2d6d5cd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d3ba9023-b2b1-4dd5-b3a7-2e027c4bd7c3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3164c71f-beba-4543-a1e8-7e3cf9a412d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3ece56eb-177c-4895-89e8-6932a2099d24"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a97fc9fe-749e-4121-93d1-f092d3c5aba6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ad4bfa60-2c25-4bca-8fd2-086115ad2c1b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84b8a65c-42c9-4034-a93b-079002a83dfe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "834c52c0-9e0f-4e66-ab0f-4244747cf224"
            }
          }
        ]
      },
      {
        "id": "7ab39dfe-c795-41d7-af13-07221799e9b6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1b5c39ab-021d-46e0-b645-f5b8ad43e53e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a5bbbc60-50d0-468b-96f7-c5581811a861",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "80cedbae-bca4-4c65-aa4a-42dfe7eedd02",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb05e5b7-3073-4065-a26f-27e0da3c93fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a585c8a9-5d3d-4247-8a01-ff04641ef361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33ba3a0-f250-4923-ac7b-d5a393775ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fbf29e1-877b-4ddc-bfad-021233e30340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56bac69-4757-4b53-a002-2ef797eb315f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa024de-01d0-4f74-88af-ae0c7ef751c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f48977a4-9fee-4e29-a388-3eb1c7551692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a649b995-ecd5-40aa-b937-bfdfd6bb4b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9aefadca-3ea0-4f8e-9ba5-ffb93319f981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681d989c-11e1-44d2-a1d3-a7a0a389f000",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b3365e-2cc3-4204-8b90-b7b4465bbf36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5712d69-9d3f-4514-8d4e-5282ef4e76e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8396a003-91dc-4011-9936-676d7a62077b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e6a4898-124d-4022-b0f0-4da595884de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9008cdad-b392-4b8c-86af-12dc4c84aea2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24418248-2bcb-434c-b29d-2630cadabc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a218179-7568-477d-8fa9-31036549862f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4bc83a-e2a5-4e4b-ba33-085d4012fc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb3aa32c-61b7-4c4c-8f46-19b77fdaa2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91f5b85-4031-4533-9bb0-c5cb023056d6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "240eebba-5b21-4471-bdf2-eae11074f560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a65ea5-1faa-4ace-8aa5-ed117694d94f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a929661-efcd-4e24-b762-b7ec3e7384cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d4a6a0f-7f81-4905-a145-bdecd9be0a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35bc8f7d-fd1c-4537-9464-686acc28f9f0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8e20a2-50e6-4a84-89b0-00755f779e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98966999-2cb8-45ff-811e-5954e359de0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9c0243-a311-4ac0-996c-7ad6286ce69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3eca1d23-64db-441f-857d-6c8f7955390d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f3094c-cb84-47c5-90e6-56150c68aac7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca61f098-993b-49c1-b2f9-b8d7cbbdbdb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98755aaa-bc87-47c2-8cfd-dc248b49c779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca324d6-5f5c-437e-a273-c1e6378caaae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4e38ddb-f664-409b-bdbd-540fc6146963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6ce7ed-e22f-41e3-9f49-f0a4feeff523",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0e7ded-de0c-4653-afef-13a3cadedfc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64ec01b3-2498-44dc-9ace-6608121ba374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617757c6-19e1-49a1-a11a-61da7d0ca7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9e16961-9b4a-428e-a35c-f4041f3c161d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9b06d7-3796-4899-80f0-e243520abc4a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f458c4-485c-420d-a01b-47af1304d2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370a86cf-d416-4a3f-9cec-bbb37ea715f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95449543-65c0-4ba4-84eb-46e7703c3f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b72a2b3a-af66-4130-b68d-f4de48e5bd90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5c98a9-527e-430e-a726-f22b74dd6381",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a201c5d-1091-474a-9c93-9ca224881fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea10e33-9fc9-4ab7-b1c0-35940b44eb2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5209f943-34f4-44f9-85c4-4b95b16d07ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fbb1e41-1cbe-4347-a0c4-58cebc2f5975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb86db9-c52a-491d-9417-214431fdb6d7",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0842ee52-7bee-4135-88eb-db730b068f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71330984-63c9-4525-ad59-ae002075d481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007d854c-7ca3-4b73-bedc-d1781191510c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "854eeddb-8b29-41da-9f44-208b42330773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0b76cf-f7d3-492c-96b8-ebbce924eb69",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301754c9-e820-48f5-b216-c7d2c3ea4b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c66dbab-8280-4b03-bfe5-f4f51970ad84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0f477e-561c-4592-9853-1c57c687878b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "974d9e49-8070-4978-86d2-63d96db2e8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d88a7ea-e733-4a0e-860f-2f1102e91f38",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a921ef09-b07d-4aed-b743-2f5ab6330ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e5d4bc-cc4c-4200-900b-0065577b979f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a7aa06-4a82-4fba-9499-91beba6435f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00d051c7-a64b-4594-aa86-0c6254d7779b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c6b8a3-6e1e-44e1-a642-d310e84ebc16",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a489d3-7099-4f2c-8575-99a5182e92d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c22b0b-cece-4e6a-8c74-f5a5fb16c8f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca933fe2-effd-4aeb-aa4f-388f13d37fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa66ed30-3eaf-46a8-82a2-28441468f031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daee698d-5b4e-44ca-a9ba-6724f249bc53",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cfad39-8d76-4b0b-a735-1402151287b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a1308a-7b78-4845-bbf9-8475173cfb43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7645a17c-ee5c-4f99-a1aa-ad2cefb69c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7e3b72f-24cb-4092-8094-13745485bb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e62f4e-e2bd-49a1-a531-fc29dd2bf4b4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a94ddef-5281-4a34-8dc0-67306face3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed89bac-6472-442a-bc4a-92ea65343f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee9ba8d-9686-425a-85a8-6e48463b63be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0125e2d8-9f7c-4452-9d02-e4f3532d0436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1fa8f6-923b-460f-9982-9830f2904344",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2104353a-e19e-4664-b41e-517a31da2d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfdecd59-97d2-4b3a-bd67-0e2ad5a961de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f124ad4-ca41-434a-a85d-fec96acd8a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d0eb43f-0e90-428b-94db-4c0b40f4363b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a665d2-f311-466f-8695-d1f36a4c1821",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57659157-ced4-4b2f-86b0-6d6afd8b189f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d18bf64-22ec-4564-879e-bc21a7891170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3292c4d-5729-4e7a-8ee1-849bb32a57a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "45b9d327-8757-4fb6-8391-d94131b26717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32886a34-5cd8-4526-8a53-273e7354efee",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7410cd93-e389-43f0-bddb-eddda6bdfd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f33e46-1965-4f37-a918-08f8c06380a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d4e188-c629-4409-b8e7-6aa69e8afa74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a614075-fb27-4bee-924a-bf634b61c7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1513a9-2d02-43ca-9afc-76d1d4474c63",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3846cae-b793-4b12-87a3-51c4eff31c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ce5868-853d-4cb9-ac6f-4966c20d0da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755184cc-6edc-4b3e-b95d-41cf88f06153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6deca7e9-cafa-4d37-9a82-491b3f3945de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d76b78-5c8f-4bdd-ae47-ec6b4b6b118b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0442d732-25fe-4249-a973-77ee7a1d3e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7524d7f5-b01f-4825-830e-8d298d886e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b2ae372-0f54-4020-88bf-2d252315d817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb4d9ce-2c87-4a96-ac8d-e9cecc54aad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d140d49-7462-49e2-8110-5e5b4de93450",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b029fec1-570e-4686-abea-0ea579906288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "493d1eab-2a69-4eb7-8be2-0a84fdbabe1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c4f05b-1d62-44ef-9fef-931051eccb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e486ba5-12f0-4439-923f-b39001959d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882272d1-48fb-48e1-a4df-875d560d35c3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ac3845-95c0-424d-9652-d3380c6d3e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac14786-1416-423a-a6fc-748f1aaa5b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b107711e-799c-49d3-9a93-3b79591b9440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9cd44f1-7752-420f-9605-457aa46c80ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db211ae4-3bfe-460b-9067-3ad8d7260127",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55bbc1d-3bc2-4f09-a34c-94af4c6a8bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e476c7-99ba-4f32-9515-7b82eea4b989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6618241b-2d89-40a8-8fde-136b4c8bfa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b9fec7d-f2c0-4b67-8dc9-40f406136cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a8d8be-ce0f-4280-83d3-0845c4e5190f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b3ac65-7196-4155-b35f-95d86603ec72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bca8f70-b553-4cb3-b9fe-e5502af3427a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f432a4d8-6e50-426a-91e5-e4049bf71d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbda74f1-4132-46eb-966d-4a4f46c6b82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7491c9e9-ea77-471d-9b6d-ef5728cfa2b1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100714bc-4d4a-4734-ab2f-b95cfc05721d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf9dbc4-d1db-411a-8a2d-1233e419af1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19244a99-3a4d-487c-a1b0-055be0877bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1651f85-6c08-46e7-8f10-542d8d1a28a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f5d053-4212-401d-8de5-1834ace28545",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90179b96-bb68-4332-8543-66826aaaba63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b841f1c-bd63-468a-a790-9b16b7ce9c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2099e32-f2e9-43e9-b30e-c890938740f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fc1020b-9dc2-481a-8be6-2ec554526aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36662227-3e32-4e05-8fc7-dbc3822480d2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd0ca56-9e1d-4ab0-8b1c-30b4df388bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "009658e6-03fa-4965-a599-7b716f12246c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5632159-f5d9-4a54-8359-e365b29d6d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e19ebc5d-d653-49ed-a1a9-e6dae356cf70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21353441-acbb-435a-90f3-934b11008244",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21bfd861-c486-4a42-836f-9329c2c23b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d1ae15-623a-4e1b-8268-a506db9b4505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1e58b5-c1b5-495a-91f5-161c680e54c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2794c70-77d4-4dff-b2fe-e45577d80bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70992020-2a65-4ff7-8bf1-0eb6c3c46a47",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90617e9-a05c-44ad-8470-dcd2ad53c44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b26b3a0-5000-4266-bdfc-babc9c942fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43b4efb-f096-42ee-bdaf-3c406eae6c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce0c6f73-8513-440d-93e4-685793f38f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd742a9-cc36-4d6a-abb7-d30c6dc86904",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db08dff9-e7ba-4a76-afbc-a4ccb8bde8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31ef4a28-6fcf-4ce6-bdc0-9b83a2576cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e29a31-d110-47f9-8071-ebd9fa25ede9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2176989c-0858-4504-8b90-4a87bb7f4d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f9a825-65af-4905-82be-326da271d764",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249416e5-8501-4479-85ca-611dae3dbd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b2b98f-8c83-4c5c-9a00-bd7970981483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1863e405-94c4-41a9-9c07-f47825ca682c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52bef9b8-663d-4f6c-ba75-b271094f0150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b57c41f-33bd-4637-81f5-b28e32856d25",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1117e4-c66c-4c75-ba8f-e0b5f8ffb75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c35f8b99-246c-4777-9fb0-193684969281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb747a86-ac67-457a-9ac0-d0f15c9669d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ed8354e-a1ce-4b7a-bcda-eb68e550f79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c608c7-c694-44bf-85cf-00d8f1cad7a3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64f74fc-48ba-49da-89c0-858e765eddbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57564302-9988-4e06-9166-5fceb3e44e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a54f293-102e-47a9-bbf3-010faf532441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7aa983c-b4e5-4a4e-9299-effd832b9ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d78283-5259-4a42-91ee-af62b313d4f2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5a0d58-7c8d-411c-9982-f4d84f200729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3892d6cb-b4e1-4687-8867-56c67db9b588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba65e23e-f1f4-4573-8d93-792bab814f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4a995503-f3e8-4514-a559-2c457d926c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc46cca9-60ed-489f-8603-ed820c17c375",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628b7df4-8c17-497e-9f22-7878f6739e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd978b0b-4e08-455a-9fde-7495756aba3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb8a8c1-3039-4de2-a1af-4a0996e9f4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "155dc3bb-a813-4d62-9595-76c6e95659a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e252474-0c63-46fc-8b5d-603568a1a7c7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf819f0a-dc4a-467e-8b53-48b695ca2302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2187ac9c-0f3c-4952-828e-68209d0d2cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9785190-6f9b-4d89-825d-b02142f42e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a58a017-04ae-432a-855e-40fecd5c9a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5932b5f9-08d3-4447-87f0-3a13b95d5eb0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9448fae0-bba1-4f0e-bd39-4edb2d2f01d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "222c6176-7f79-4a6c-b048-257d87e4861b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186a1f36-7185-4d79-b72d-ecb8a6687d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a544e68-8df8-4288-9c77-e66162488576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26f3d5b-3d20-4ce6-892c-e563cb902a16",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe68c2e4-355a-4a29-9859-c7d4d14489b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0573d16-d5ad-40fd-bb49-53322327abb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8a4f14-d1a5-4ac5-9ca7-5391381ce6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "23ff0a9d-3594-4656-920a-817005c0d352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b2825a-ac65-4446-ad30-15c39733d318",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7b7f9e-c1f8-4de4-b533-b5ab106d767d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615bce64-4e6a-44e5-b393-485e092e6b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1cef7c-a1ab-45b5-b35d-8903a0cc78e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b40fbbe-104f-4a8a-9651-5342b2225530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7590d02-3e83-4cb8-8574-d69cdd1d6c25",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413228c1-6913-420e-a05c-bb8bbd34f886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5779fd4d-b41e-404c-b5b0-d842b248e78c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837ffd64-05ef-4453-bc79-5f1240cbfabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9742e98c-2c3e-4ac9-b42a-9aae94affae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c1624b-3337-4e1d-87b7-8c2da33bfc10",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f240847-eca3-405d-9772-f21a623ce253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "836457cf-3195-4d78-98a9-7f68eade0073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a829de5-1a10-40d7-9d3d-308cadaa4db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "20ce1b6d-e0af-4b8b-b038-ba3edb3c1f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e852864-ad80-495c-a2a7-327f1675b1de",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b8a5fe-7fe1-4fb5-a5fb-4230f3099848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1af6a36-9034-42fd-b90b-4711bd5db0b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bb3b79-13ec-4483-b541-f00714c2da12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd2af6b5-7590-490b-aab7-eaef8cfb0102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31d88d6-dc9a-4c04-9bf7-429b0d48c794",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1bad2e-4868-458f-b0d6-588670d69517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc0551d-9a44-4a44-a92f-8f35a2fed2f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6de429-127d-4441-9756-961c8e0c1408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7f8df35-3e63-4423-9d04-7deb5e035010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ac8fab-7f76-4beb-a4f2-171444f34f09",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "727803d5-08f1-40e5-a04b-90e713d69491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e70f26-9d3a-49f2-8490-98a0d14e2319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f95cae-0bd9-4cae-aaf5-0d58bdf0e5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ee7ff7-3a6f-40b8-b7d3-f0f6fbddcc21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0788df1-9966-43d5-bb70-0421cc8cdf7b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77dcf19-d618-4f2c-a8f0-217b1c5875ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202adcca-2af8-48d7-845d-3f1b2c347850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5798c22f-46c0-48ad-897e-2a3d9f0b77a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f90cc84-6fa3-4bef-9073-20642e4e7a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed73e0a6-ffe2-494a-9b70-2e3ef91c972d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297b5136-f77a-4dee-a429-6bb18c3cf10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19168091-0fb7-4052-9cd3-28a380c41541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b2c4db-5bca-41e2-afc8-28dd8a820adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f153750e-248f-4839-a754-e953fef3e0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37779f5-c854-406d-8acf-0a7e0cd0a3fd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9d424d-74d3-4213-a3f2-ffd81dfd7acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f788c6-8fac-4fb0-94fa-caafdc326f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87baaa4a-6e86-4977-8454-544c9e66e006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb6a028-959e-44a5-94f5-08e587b29b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a481ac1-b6e9-4b41-b8ed-299b72d4afef",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e077c616-a33e-4a30-93cc-e2789c2e11a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df957ad8-6844-4724-908d-3e45284fa2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb19134-cde6-42cf-b18f-e4b49fd4fb29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55ed486e-5d38-4160-b28a-0c17787083f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbac1141-e750-4265-a0f6-e8827feed2f1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af389a22-196f-4201-9a5f-c569cd7a5557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02890102-99af-41fb-b9d9-5da99179cebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13c0dd9-ab48-47b2-98c8-4781dd496fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7f7a9ed-015b-479f-bceb-63f6093a8199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170e81ca-3e4b-48c2-a7ed-a3e0521bfcea",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a571090-279a-4061-ac7f-9eddb81d3fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a713351-5d30-45ea-b760-1902ddc11626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434b9d56-3b53-45d5-9b58-f5710f2af86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "23214b1d-faaf-4f2e-a8f2-567228582ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68ff6ac-d5ee-42d0-ae8b-fe2ab76e2857",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf33614-bb87-4915-bf7f-d8d2f4278c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ada0673-c30a-4363-97f2-5837e6c504e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5dac74-8647-461e-8eb2-f713b9bd9652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f9902cd-528a-40ff-a6dc-2c0d7ce42188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fef834f-fde9-47ec-9781-e4af3a762460",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c3856a-2c24-4e8a-9708-22e7b0334f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8fb3e5c-ac2b-4a81-b179-a84db546a082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f99892-422e-4d90-8894-3d4231faa90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c85220ec-602e-4809-8586-9648c1d7e82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a731321-d719-4e61-8ab9-15ef20bca3a2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8703e20-b178-4cda-9cea-a2b945959cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "634e90e5-2ef2-463e-8c1c-485e63f4988f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e32892c-4bdc-4372-9412-6d3b39ba936c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4c3c0a-181c-4fd7-9a53-7f7417964699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46bd70ab-a61f-47f7-88e9-eaaa90123dbc",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9638e2-7f7e-4175-8ae7-32cd44d046d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d562223-6599-4a0d-bba8-51ea8c86cada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c477eb5-8813-4370-9e6f-c586f9d1c2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d22aefe3-8d7b-499d-9b3f-d90661d4af3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f95021e-947f-4593-87fe-c773f88fb092",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a0af49-a387-4305-8dc7-613a97bb2d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb072f45-a65d-42b3-963b-c4481e6baac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3dc4384-d864-41fb-9882-b681cad3a15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6b93987a-ffc0-4bf7-8832-8150598d2ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b837a14-be82-4cc0-9ae3-92c9388904f7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df40a8c-d9f5-4069-aa5d-245737f89506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c5c50d-a41d-45d9-a002-93737524e78c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f746d62-6968-473b-b190-b4f9cbe5c8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "17bad85c-555e-4a9b-8e7a-1c62375acdd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd9bafd-b8de-40da-ad22-1fd05a289297",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be88d56-ab33-42d2-a963-396a3e66b20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1b4733-40b9-488a-8fc0-0fc304605ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09a9372-52b1-411b-b842-748fb6c25caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f73100d3-6ed2-428a-8b33-cda6294a3151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3b05b0-b49e-4ce0-9e31-b549f0a20eb5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1816a820-e003-4e49-8211-59fa119b75d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30af1e8d-24a6-4904-8d33-0fc284cc5868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e8a71a-0ad3-431c-afbb-8b4367f2314b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0cdc5af-fd94-45ef-876f-547c180456f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b9e257-c039-4528-af1e-1821f4915458",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd53fa92-0f1e-4592-aeb3-2fdf028638e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aae457e-001d-415b-9fcc-77787ae7fcce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0976b7-bcbb-4ef7-93ac-e00136f117d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3909af63-e740-4337-86ef-6c7db7f5391c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed51624-c7bc-4ece-9c99-1e3c3717216a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5710dc88-40bd-4513-8548-1c20e17c9fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48566b6-f8a7-4308-a8f6-57cd60dce9e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a9054c-21b8-4412-90d0-a8c2118c5b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "48c7c160-8bb2-4a03-959a-d66b81f8fb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9909c0fc-e77b-440b-9379-11cf11991521",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7587202a-c5b6-435f-8954-591d3550aff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78862ffc-70ec-41df-bbff-e466cc7b2bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68793a2e-4279-4e8f-aaf1-e98a159c7211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "23f54fdf-ba53-47e8-a8b4-a9fa9566296b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013b8831-311f-4708-a548-bb4f5f7bb819",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e362d778-1812-4b46-82ad-ca796cdfcbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30c93d1a-13dd-41f7-9b1e-b2d4c251694c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6de0006-e213-4d0e-9ffb-a5988a2f18ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf41b32b-428c-46a1-8669-f8968de4c905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315eb038-fd73-4fa8-b938-66b97b1ea17f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce2d3b8-3abd-48d3-9e8c-8132ec5f2604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbfeb74b-d904-4d75-b8e3-5b0580cfc76f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92321486-ef68-4aec-82ca-79f8950ab0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c9330a0-63bd-4753-a467-c23e4cf1450e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e800637-18b0-4d30-973e-5e9dd5b7f09e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "555f2fd2-03e9-4aa5-aa7c-028c6c758ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2830e778-b7b0-4538-a102-24084a82b50f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3273ca4-6487-4d35-bcb8-0c7955103b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90d98b81-da35-4994-8a9c-375d55d5e1a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2b60d6-d3cd-4b23-8423-3b1ad2ab5d50",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef62216-3825-4976-a531-3fa4f006627a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59fa88d5-5a9a-4a13-a04e-b9327df35ad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea521329-9f0d-485a-adcf-829ed4a35eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9637ed54-9a67-4771-afb8-e1c00559e0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e576eb6-3d4f-47c1-8d0d-9f3d3d856378",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1479ba9a-a7be-447e-b582-3b26c333d94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198468fb-8f31-4bde-b859-131433bfe03b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac1a3e2-420e-4afb-ac25-cf48be5a5e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "47771403-96ac-468b-9000-3f507eb61ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37788fa8-b8e9-43f7-abd6-0d670feacdc5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9533a0-4edf-4775-a48a-0896013f31e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37396e18-a808-4175-853f-9d1cc7057964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba103ae-17fe-4aeb-b8b0-bfd38cefaf39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e14b1037-a833-46a1-a353-643e871fd0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b5ccea-dac8-4301-ab71-227c5629fa74",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad87a2c-3512-4d63-ac5c-021c0cfeb747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a2225ce-7932-4dc0-9724-5b6de6cbfe09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0eb9b53-9a90-4a83-ba44-8416098bd3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5785e237-8346-4f76-b192-c74c79ee4a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e29308-472e-4240-8364-9f53c7426022",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e1f557-8133-4e7c-8279-a9c04ba627b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6027c4b-1d78-419c-ae78-6bb0e21b571b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477cfa92-a974-4819-9880-abca649324e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "720825a8-1344-4871-9a71-5899ce2fcac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39494d36-5a77-4543-8e21-d03298c41837",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc07e1eb-b70c-45cf-9013-112c2a8f298c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b75b9d-1dc7-4b17-8be8-f4ec1f8751ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8baa80d-187c-47c3-8a22-df48a9c25338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e577b64a-7031-4494-958d-af26c0370706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f645888-ebfc-4fe3-b47a-6efc7e7ef916",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38aa3de5-21d7-4163-b3e5-71de48652d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed23a53c-0ddb-4c2d-a817-6488de52f64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37350f01-3e44-4519-afe6-e794d22b48c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25702431-85ae-420a-ab70-964c1b7832e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923b547a-6266-4352-a8c5-a35066b6f824",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1160853-de90-4e44-bb16-3cf13fe48e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e30d78-f93c-4cf6-9d9a-78df61caf2a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263bfddd-7a97-4a71-a9c6-f52e15484477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b185c8c2-417b-4eb3-b3b8-7432f01f9e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de221fb5-acbf-4248-913a-1dca62afb728",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324f7447-85f8-4034-9556-4f4856e2d355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18c7a69-904d-47c3-9165-748c71dc9706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2d757d-a075-4ae2-bc70-8affaedb12d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91f7aa23-61e3-4cc2-a237-c0d00c5be181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d48d024-d866-484d-9c3f-0f264a62dedf",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57397602-8db6-4f71-af92-ef8ede63bce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "321e2d3e-8d16-46e2-8cfb-359844d10b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf91a906-63e4-4913-904b-eff74cd7c944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ace2ec9-ce04-47a8-b68f-d8cdcccecbab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af2e36e-3ae7-4185-9e0c-a804a5b00341",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d56af0-402f-49f6-8cec-87914f37e2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba44739-0a5d-463e-b9a4-d7327d01c737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22082775-3862-4cc1-b9ec-4f986a0a8836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b21a11-d6ab-4f56-ba28-ec2445035034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7053d046-c8f7-4b93-a4ba-62071ba77ec2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7befe765-75a4-4d3f-829a-e6a679fdcbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24dee23-0b36-4a3d-aabe-179bb3ef94b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a3c1d7-4682-4572-8c20-f841308cd513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17a395d4-1e80-4c84-ae35-e0d6ef0a18b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e93dfe39-c174-4d42-9141-958d3ba5f1bb",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2dbba78-0c70-47f5-b9a7-3680e9af2eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cfa69ac-edca-45e8-a70e-9079f287de3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59708195-d369-4e91-a594-24383a63b994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e425e5c-00c5-425b-b115-f4a0f04453ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460874a1-5dc5-4a73-ae48-2d9ca59d2511",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b96d9d1-1f6f-44f0-9813-f0dfc40650f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd17eed6-198d-4345-bb66-fcdfddd39568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f9a44d-408a-40b1-bb15-f77bf26dd709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b93db92f-434e-4f1b-8c46-9632b455ddf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85a27f3-1a09-461e-a498-512b0206c56f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf9317b-c0b8-4bf4-8b4d-5c09d36dfde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1037df8-7088-4853-b5c5-a6be7163a72e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5782a22-350f-4806-8866-3ca2e36b09a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "33bb75e9-12b7-496d-9036-4bd3fa3c642f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b670536f-b9a6-47d8-bdae-cdab7e8f4992",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5379ab-bf7d-49ce-a159-ae2457a23c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31e8140-5087-4b80-acb6-42180ee884b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fd2a2d-7c95-4d47-820d-fadacf75c35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "abd7b444-03ac-4283-a818-0f4ae9c8c48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1953863-8816-4311-961b-3368b3238cd6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ec9330-1411-4913-ae20-b6d9a4176132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0192539-e59c-4bab-b1ad-ead5bad3b1c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433896bd-8fd9-4c63-9a9f-3a34db997b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "330989cc-ae97-4647-bff4-e7b32dbe4fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f5d410-d679-44cc-8305-50bb635efd9b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35cdfd0d-cd2d-4784-bc22-b3bd9dcd2b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91cf157d-e08d-4d11-826c-e7ce2e991a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c66a0e5-fc4b-4e49-864f-6197980b04fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c9db13-13bc-49c2-ab03-ed6e7f498154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4e8fb8-8369-46f5-bcd2-0e2636b5bc78",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49758dfe-dcd9-4f7e-b886-66e1f5539797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8a0f6e-e952-42ff-a265-223a99ac4aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a9b7c2-72a5-4468-84be-2d1795792c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c57dc357-e8cb-41c5-b3d5-0aae8f8fc94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760945bd-4a97-43eb-9e9d-7abdad33678c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425e804a-6b28-4da5-80f8-fa75a5035736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d809a2e-be1c-4683-a4ca-c67bd171f469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419d0a07-1a05-41c0-b617-2f91bd27ca74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f38357cc-f741-466a-a472-4ac2b66e01bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1570ff58-6a2c-4388-a610-1ef283ea5381",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850c25d9-9345-4454-86b4-f9ae8291da3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e14f450-c3f3-42c3-8b92-d97d6e41aff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd3265d-4ef8-406f-a9f4-50ece932cd0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac595905-4840-4e9e-a023-80e241092a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07bf16e-f27e-49ef-840f-eea5c3cf0874",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b737a2-9455-4cf0-b700-893691410405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db048b1e-84cd-4272-aabc-a1db5adb68bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63f64e4-38ba-4d98-8f9e-d6e3760fe96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "efc34e15-e427-44c5-a352-c37a84a78893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74d0417-0b3f-4faf-a882-053c2df2cf54",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef49840b-7db6-4bd8-bbf8-829fb0962a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47047e02-dc2e-4e61-bf08-b678687c2991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1bdbe7-4a17-40c5-a59c-da3c299ab030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "54306210-6c4b-49d3-8255-4d468f0f9911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13eab32-9bc7-406c-b6fc-82dbf78a7da2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c77d00-6db0-403d-ad1d-c8269c89faa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ade3959-7d7e-400e-bfe1-adce16a9bfba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c730cb70-aef7-4542-ad8e-35f490fb75f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f847298-7ff4-496c-8d16-e0e4bc2f07cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7412b7e8-8f1a-4bf5-a694-e08a11a92a0f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a91898b-46f6-485d-8820-7496fc7f1876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b1a0ae-7721-4cc2-81ef-5817f3241dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e7789e-55a1-4d47-8a16-ba231d8476af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7800b2-9db4-42ac-8e7d-8a144ec0ffa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c289a9d7-5d2b-4a6b-a8c2-2aaf16595504",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac6fde3-bf16-44f1-8a15-6ad40d6983a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025a3517-4a50-42c3-b2e7-20de9ed54468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61cd69b4-cfe7-49e1-b72d-c839401c0431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "df23a350-5c5e-412c-a31c-1f6df8978cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c5a816a-1559-4ecb-9e1e-fa1fc1db2dec",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3543c54c-fa10-4145-b5c5-3eec3ed352e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "98a192c7-2599-4d21-a924-9d1af8a4d31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e0f944-4836-4dc5-befd-c55b3a301b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "db955d42-482a-484b-8ae8-1b33599946c4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ee179263-b8eb-48d1-8bc5-43679f90d1e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "579cfdba-c258-4fb3-8fbd-fb6a21702335",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c306ffce-e7cc-4735-84de-1928e4881a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c17857ec-0cb4-44ee-9622-d5eb7e01ced2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09306032-581c-411e-aacc-67d61ff27c69",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d415e13-03f8-45d9-a090-051ff97df80e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7d6e138-40d3-410c-8449-c7775691d994",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28d3bdda-513b-402b-90dc-314c1e5bbed0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8d2a003-ca90-4bcd-983c-0108030cc49b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ae9ee3c-bb72-43fb-bfb7-70c30101af34"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "76b8309c-6013-436c-9f01-45d8cf3c63ad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d2f2c9fa-c082-428d-9d20-fa731fd72807"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5d164559-1279-47f2-b01b-3ef7fac354ff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fabe8325-7119-40b1-8202-1c1878434765"
                }
              }
            ]
          },
          {
            "id": "eb55e801-a8f0-4bd8-b046-8118ce821cfe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3494830e-25ae-49c2-91de-6f954409c489",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "45c1efb5-54c7-4bd3-b854-07870049bdae",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20818a11-7990-403f-9843-d64ef5808477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0f69fbfd-ae11-4ded-af16-e821765b03ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9a91fb-1593-49ba-a3c3-f87b4f995d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa187347-a2ad-4a61-b923-053a3506b37b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7dc7ce37-63e6-486d-87df-6a60c43beaf9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "006ce3e7-0403-4680-9dfa-5ee4ab614281",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "389c3ae5-5749-4e9c-81a7-8d2447e2110f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a87bef2-a27a-447a-b692-beccb3068a23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cd63e950-c12d-4eb2-9141-d8499215c0a5"
                    }
                  }
                ]
              },
              {
                "id": "60b74671-5598-4dfc-ac19-65444932205a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "afae037c-1ab7-43c3-b9a2-b8ce9b04d6ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3c5f0aa-fbf7-4a34-a9f0-e565c38b412b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3dd9e4a0-5213-407c-a703-534a8aa08306",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bb58524b-6b39-49f5-9929-4314663d8e60"
                    }
                  }
                ]
              },
              {
                "id": "58db6582-2389-4232-8bfa-0f439e564df9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76d8b5cf-992d-4ac2-9760-e1f5fe57863e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ffc9d599-cbe2-4a97-91d6-298d42739756"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ddb150f-64a9-40bd-a685-303dca69aaa9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c1970db6-9313-4abb-86b3-03985ff7032e"
                    }
                  }
                ]
              },
              {
                "id": "bb0c5a01-1216-4081-8922-e6d39d7618eb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01423712-1171-4708-b742-8a53cbcec52b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "be33ca44-323e-447c-9a6b-2fc5767333b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4737a2df-32d3-4e9d-b1fd-27923b52e175",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5d724568-8f6b-4eab-b3c8-50ec0c97074f"
                    }
                  }
                ]
              },
              {
                "id": "7f54ce2b-5e6b-43cb-b103-b585fce49bff",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ec98e02-382d-424a-a377-412edcac6358",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ada6ccc9-f162-4200-a336-85de76d61bc3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dd14622-fd05-431d-97c6-b58fe9e245b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "efff3beb-dc8c-499c-b68b-d127cce704ca"
                    }
                  }
                ]
              },
              {
                "id": "2048dca2-b9fd-4fad-945f-6a64947145a8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd843e76-5918-43e2-a17d-938418463f97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e651279-5582-4903-a6f4-00cbcffcca0d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ce095a5-25ea-4ba7-a083-27bae619af6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "87123c41-eebf-424a-8853-8c916ade6970"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ecd62979-d07f-486d-9d64-77fab38d1ffd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4380df8e-7c2c-428a-86a0-c810410e1700"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1fe163b3-daf5-4442-9436-fd8395587e5d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a60da321-a011-4566-b018-2dee94f3c6a1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a41d3d7f-1e9e-4b0f-b0de-84feea2f64fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ff65542b-3045-415f-aee8-a1263ee865e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e087d9e-87e5-40cb-9590-777c17392007",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "526c6484-95d3-4dbd-9c7f-7eec917fef36"
            }
          }
        ]
      },
      {
        "id": "8ee4f550-8d9e-4c8d-9fa0-c9ccfd07d748",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ed44e5fc-b168-44b4-8d85-369991479db8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "74d7449f-ec2a-41dd-bbb4-21fdeee3cc4d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f1d07f6c-d9c4-4efe-a5f0-48902e0399bf",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b07f0b6-1a7a-4abf-8708-2af9db50e835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7edfff-de28-4b78-8eab-071102aa2eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510b4d3a-d953-48c6-80e8-25e4555ff3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb592b66-28c1-407b-957d-4da9c0ca1623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef29f5c6-5da0-4421-b7c6-521633d0bf70",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a637cde8-63af-4b8c-a932-4e1615afb022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca88b4a-94f8-47a5-8d09-d0edf799109f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044a9a08-c575-48f0-a21a-25b50ff22b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab4396d-9df1-4d12-a3cf-43593aa84e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e6f324-c270-4623-88a8-83e0d6d65c93",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d537399-e181-4554-87f2-767762f529ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee78ef55-53f8-4cd6-92e6-4ca130807a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8101182b-ebaf-4561-bc57-52f4631b26fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf517640-6e62-4409-89a4-1ea93f0c61e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f83fe9-049b-4977-8fd0-c14dc6151e23",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b717c259-4f67-4bed-911a-eb36e3b32344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d6f288-dce6-439c-8ddf-5678edfefcc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32c078a-de28-4dcc-a8a6-17807fe22fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9188c6b2-01f4-4c10-bf0f-ad3975cea7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea6d079-56cd-4188-bc99-f9ec853a72cb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "780b2c91-a106-4395-9e16-3cbc10ad00c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a899da-cf07-4623-af29-a8d478105f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1f43be-7a63-4046-a403-e9a840eb06e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17eaf52f-1e1e-4781-9354-5fe7b4b75ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5e3703-c984-4b9b-86d4-01292c7381e5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664af330-bd1b-4e0a-a6a5-d2f92d7ba901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d25660f-bd1a-4275-9f63-052743da72c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76633dee-2a13-40bc-8489-68c9e4be1d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "32b43321-cbca-4ac4-bda8-c195797386e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d15caa-e4aa-4beb-bdbf-da181d76361a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd73587-cfa2-4364-be3e-1c5dfa519870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc563da-21d7-47e4-a3dc-d7821fe12b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bccc886-db2c-42c9-833f-7f5dc47c77a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a2c42c-20fd-4de4-8d39-e7adb1a9e64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d902dc-5953-4591-8e29-bf4864e2446d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67607eb1-4825-4478-b580-e44ffcb9c350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20604c65-eaf0-4782-b8b7-d26448aa7796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49681b72-ec85-4b1b-99a1-cf919aefc4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c56e6fa-2b0f-421b-a814-8daa18f36ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b89536-b3c8-478e-81d5-264a71021ca9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8ce8e1-bdf4-41e3-9dc1-d1f195001b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeade7aa-7355-492b-98da-64af4e81fccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26266419-a824-4dd5-a95c-fecce3ee2f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "464befc7-7083-4b5d-af78-c9353f39faa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfacba4c-52fd-49f5-b657-33da1266fdfa",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b53347-f2ab-4901-8423-a2f1b0289feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e560620c-d83b-4e37-bb30-8561425fd2c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79d9f52-8989-4709-82e9-882357dccd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "683bd48c-7e28-423b-ab97-7e0a1a79f218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb3f3bb-ff2d-4ec5-b263-1bba5e4c09f2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d3480a-31f8-414c-ad00-d42efceeb2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c6eca3b-7694-4d79-ab9a-d24115897363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc81cf0-66be-4bfa-a94f-fe858aa52c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "63fbd430-e2a6-4c47-9fef-3c66ecf0dcbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cf57d6-790f-4668-bc2c-023816622a11",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e685baa-2119-4a12-af1a-e2382d14e7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17a06570-83af-4cd1-9ad4-c5e1f692a70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a513c9-7f2d-47a5-8784-847fa2828a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93172d8e-b6f4-4936-8357-27c4546d1972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc34ab6-be49-440f-b78a-5790be3fcc8e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f946a7ba-5231-4800-95e3-96366e13e414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91176296-e276-478e-9f8e-63f03a236fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aaeb2da-9f6f-4372-8909-09c36f499a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c09e53b0-d44a-402c-bfb1-db2f45d521df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f46af9-3ffb-423b-b53b-53262ac8ae7d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e10452-705e-4a15-8a8c-1389dfb4ae81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c35c9c3-0ab4-45fe-9ee9-76e17de2f86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48305938-2cd6-47b7-8f0a-8a3d440711e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d167d1e6-21bd-44d4-9831-8b52a4778b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8935c93-5c4e-421c-8c3f-804f42bf30d9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b5d91f-7b1f-46a6-a4c9-3e2d456cfbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "194199f8-1dd6-48e9-b57d-349c6ed01a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f28e705-87eb-4abe-a8f9-afbcbf0ee5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca899f8-476a-48f3-876d-d10f205b3f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e4af31-2cdc-4e66-8c53-a8ed0488bbfb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26a19b1-f06d-41aa-a0e9-e6c7a7b7e110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064e14dd-8955-44da-953e-3683db761f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9b7035-8e5f-49da-9a86-fca4da1a6a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c5b4fa-2ef9-4753-8b7c-ffea41724ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b6a577-1ead-4d1a-8ff7-3992fcafd63c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf33fa0-5960-480d-86cb-fb484a149dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3061e57-c9d3-4be2-8563-aa79cad6d8e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc6aa60-66ef-480f-afef-61c170198313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b709bae-4109-4e4f-ae5a-9689332c0043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e340cc6e-f877-40ca-bbca-32114ad85841",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "704e83a4-ef2f-4f6d-9976-0773dbf8458d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d51a0f55-1ab7-49c1-94ec-c1e14fa00463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1783256-488f-4f15-9c2f-da1f0fe0a1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "44f222ef-cafc-404f-9e9c-82785857d8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ca16d4-b064-48a8-aac2-03507e90808e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ef1481-f184-4727-9233-ee6f9ea4937f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd66855-0e89-403b-b882-e0c4b47f8e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc2c83f-c81e-46a5-b869-0e58dba72862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fae2316d-a6ad-4b4b-87fb-588328aa6b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1189463d-9fd7-4a78-9d61-fb986aba248b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f99d11c-dbfd-4e1d-ba29-57eb85884048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b8eaf1-db6e-4acf-83be-659fa1dffddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fcf77a-68cf-48fc-9262-efcf8d3d5a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee3db8a3-1d36-42e4-baa4-be4905bad51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb26b6d-4086-4d40-b5f0-05e0a0c227c9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b487ac96-8d28-4b8f-8289-860ebc7125cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0bc6399-15b0-4aab-9a1f-2c96823d8a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09eea0b4-bbe9-4b4b-a014-3859dacab852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd3a398a-306c-4428-9570-59ab64e80166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976fe0f7-eb80-44bb-92f5-ed12cb8ebbc0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "663a1673-31c2-4fcc-aa88-b175999ee4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17d65cad-f421-4adb-b904-73029f889d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc003e9f-b4df-4e78-a6b1-ca9a4d4bb2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "930d366e-0e93-4b96-8c98-f9b57f33e91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd12e75-a93e-4f4e-8d85-6761aee755ab",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137d6e90-871a-4c33-8051-6b4607dd3612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc233ace-dffe-4cb4-9b0a-ad6206cb66bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ff7a57-5fd9-4c8b-b1c7-9a3d32a74ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4baeea20-bc67-4dc3-b2d7-84811f676132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c10f577-3a69-4985-ac45-5536f743e5e9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f582ec8-379a-40d4-8958-c5980887a6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78bd7c08-b946-427d-9564-45670dcb07e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3316a33-4c27-4551-8531-52ff857e6cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cba9b277-f0d4-441a-a621-3a5d9ccc5cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb4a8b8-e9c3-448d-ab13-c341c150ba55",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9687bca5-846f-4763-ab39-a7c0166a7833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c37ec5-3fdf-4e34-bfac-97a47dbc6bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a7a6cc4-5095-4ee9-98b5-dced8d3f3136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d15ca0c7-b927-4b7a-89b6-bc9de4ef40ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5f2d81-c233-49ac-b3f2-ea9c10b968e4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "736f81fd-6eee-4b47-a426-90dbba124f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7f68d6-558d-436a-b31f-65e0a19c0886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc868675-8918-4c8c-ae95-639863c15dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e44043d4-968f-4f85-a2fc-a4a6777eaef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6e13cb-208a-41a7-bf81-b7b169cecf8b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f057ed-af19-494c-b2b3-bba26fa2a5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7786f93d-0249-4d96-9c9b-0e5245d0d378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d2c19e-9757-4162-9315-0b393d3e358b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a03c5d7b-ef51-491e-8b93-bfbd325f7ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0157b84f-68d6-4741-acc7-9de741996350",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d26fd4a-2245-4584-9682-4820b3da1bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86bd3494-b4a3-46a2-8402-136535158812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085b66b2-d2a3-42fa-aa84-59e105dd5c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "586ec473-fc87-4ab5-9862-ace515b2cb9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8d014e-2888-4450-b418-1049df527049",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335c21d6-97fc-4b37-8e65-e2a2305f2dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f13cac-44f0-43c2-944e-976ffce82c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f46e98-b00b-4867-8f97-77890f4e57cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "645768b7-7c85-4ecd-8a7d-589d04f4a927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639e6c70-265e-4fd4-853d-45e47d96b466",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd25a9d-c020-4b4f-a2e0-4461c1b26174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "696c726e-0aef-4207-ac83-1d0945eff1c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef95774-995a-465a-a3a5-8d80cacf0b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9727a29-1a31-4e9e-a33c-470b67bd8840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546f844f-dcb8-47d9-8321-2723eecc2eb8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f58d402-16fd-4f44-b6fa-a94ee621d319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a3109c-d052-426c-a80a-05a9ace629ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58aa9d9e-14d2-4415-b8a6-b287cb90978b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da24f49d-9917-4dd6-ac9d-9c48d8b96101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5eaa3b-b78e-4360-acf2-57584556d439",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ae4771-9901-42d3-b93b-5d267fa65f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996ae7dd-18ac-49a8-b943-efc28f7f53b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847c0a8d-2025-4062-ae55-854385ee0c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6bf78a2-29bd-4fc2-84fc-f1ab82b036c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "84c397bc-c8cc-4093-9164-822302b2e09c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a6e0162-0979-4689-8e96-f735b71892b4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef44aad8-1184-4add-8b98-d7ec4e069ea4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e86223a3-1886-4712-bda8-6cdf459e3203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4b4b5f-1e0e-47fd-8a89-834e65cd5ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e75d2942-cb70-4673-837e-71a0f7c3e697"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0168eef-986b-463e-9719-a0dd47004c75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "009d3d73-624c-4246-a61e-b58bc3f70017"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d82e0c75-7f68-41b2-87d2-3c64517f8df0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f628831-7483-4ea6-a7ac-f4b84d2f4cee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d77bc14-9598-4056-b0e9-bbff5c5dde79",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "15a8e5a3-1231-4930-9b31-ff54ae4083f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d844cdd-2198-4845-bfe2-23f6b51c17ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "17f4b7ca-699f-47cc-9fbe-c0e1da80101d"
            }
          }
        ]
      },
      {
        "id": "b4edfff7-09e4-437b-a23d-4bfa45f4a938",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "b1c2bdf6-3b90-4639-aaa1-93e0c11d63c9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8f15e5d3-824e-46d8-8e1e-ccdbc690f575",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d209b878-e42d-4040-9e9c-3d21ded24cf1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a4f8d1-d531-4118-b70a-d825f84c054e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4633abbc-9d9d-423a-9397-d0ab6ddd2a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07c7198-a96c-4972-afc1-0fb6fe058faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e86db7d-33a4-4901-a65f-5f431a3af73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ffee5b-e5cf-41e0-a960-c3ae999f32d2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18e3bd1-1b1a-4f2a-92b8-56308cb94685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a0e995-44f1-43c2-af2a-3fbe530de5c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfef352-a0cd-4af0-9ae0-667ce20f6271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cac24f60-8705-4636-9427-7184384a6c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d2127d-4f44-43f8-880a-9763a346f2df",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e49997-9365-4810-add2-8154e99cbbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb74b210-9828-4589-a180-729df4fa3a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba042ea5-981e-4913-8da0-1ded739c76fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f16c777-6f11-4f68-88ef-8d8522cdf5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089ae629-8ae0-4f34-9e0b-91522a492f8a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7d13a1-b067-4b41-95ff-24e18e2fee1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e1389b6-27ce-46d8-8260-0e7d2942df12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cfcd2fe-6f1d-440e-9dff-e025a26e94cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8160159c-566d-4f11-8961-2b0b30ebe27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24229d47-b309-4ad1-9085-418c03c40703",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5994a685-dd84-4128-936d-15161ea711ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601c02eb-a546-43ed-9f94-2bae271f6c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153e706c-38ba-4fee-9cb4-d90c43d202dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a864bfef-8ec6-4e8e-98c1-9b2d943e49f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f253c91-bef5-4332-a0ba-01ec37b98078",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f084bcb2-4fd0-41d2-9427-5476f7fc607f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "088b7ea7-aa91-491b-917f-4ef01fdb4fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c45f88-181f-4abd-b6e0-f949b8b0894c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e26a3c8-95f9-41ec-9667-0773cc9d1415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12962ac7-43d8-4497-9eda-ee2f28e484fb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2272db89-b600-4db3-a4be-08dfa9a4592a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd3873a-b758-4158-8982-e39f9a821f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641a434d-6ba3-453e-8a3e-02eddaffb562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c86047ee-70bf-4aac-9e88-6df91fa916d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c93625e-05e7-4e74-9301-f16d4bed5150",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c8dfaf-1e84-4e09-a4e0-0bed6982e3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6d02bf-1a3f-47cd-9941-f28e7070c97e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c1b8a9-b49b-431d-af99-6b1c11a05ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8369b9c2-421b-4823-bb71-0a47380e4206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f86bf8-c334-4046-a076-24443fb51f26",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdf439d-f9ce-4657-8744-b14cf9b446df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebae3452-8920-4d17-a8a5-37d3e73f6048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e048e0e-8c6f-4fc5-9405-aaac53e69f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41838655-7de6-4f6b-b515-92a08e315205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6e49dc-7f40-493d-b0c6-289f795b58b1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01c9884-7b59-4ec3-af7f-fdd60e373248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fce2195e-9dd5-4999-8f24-e78922258cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa105864-fdcd-43db-80a0-2f3543733a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8674a6dc-2eeb-4cce-888e-a8e02f997820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd19828c-e59c-4cae-a53c-2390fd0aec21",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b86cef-8a92-459b-88ab-85bae8f3aebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7b5fbe-711a-41b8-a481-61d4bd032818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff97b4ac-098f-4d75-9731-3cf291ce5b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ce15b1-932f-41a8-8481-b25f0acb9051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ff70f0-6a3f-47ac-9ed7-a7749b36f17a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d479ae37-44a5-4e1c-a582-cb006a7d2a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326fd554-7d99-4b8c-9843-fece6068a465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa243d36-7076-4021-94f1-d72274eed9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3e389e67-506f-4777-a9ef-c24229456561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce79e272-3d94-4cf5-8a8a-8f35910f3452",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027f68de-c4dd-448b-96d3-55b56e777df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5816d97f-e3b8-4569-abd0-d8f3b7e1a3ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d16e89-6e53-460a-997a-cbefe0daa708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a48ed41-0a8f-4bd2-b8ed-b8a3d16afa82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f551681a-4c2f-481e-b285-e81a91ddcf0e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d20c8a7-a600-490d-b71c-5e161e8fcfc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "330411bc-7740-46cd-a085-9edd979d7b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6fafc8-8c95-478b-9456-cfd9b8a5fac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1443dc13-fbc1-4acc-a80e-cbc061db3ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc40649-d1f0-4c26-999f-bd3eb533ba46",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc866158-5649-4adb-b0c9-d12f1224c3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b58c1f-784b-4dd3-8453-f6c451397875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c358a11c-2c1f-4fd1-bb3a-ea7970b31b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2276ca31-997f-4a35-a269-58201503d328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753fa77f-f667-4c7e-b1d6-ec7b01a68564",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf4f3df-a0a4-4d41-82bb-97f1c9caa19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d05efc2-b277-4b31-8468-16f1ccc1a196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f428b5f9-a3c3-40d1-bd2a-2165ed15d449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d24d8c5-29a0-4113-9370-b8de31c62489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6703246-c1d1-42c9-a434-39ef9b5bc14c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aba2d90-65b0-4fa3-9cc7-5e098d3e4f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afaa1323-42df-42b7-ad30-abe97b4e4d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872b5e00-a63a-4991-8f10-d346c4c09501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3954fcfa-ec8d-4aae-8a07-3b41809ad9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f854d77c-f362-47c0-b0ab-364651e58189",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c543434b-04c0-4760-921c-3c49a438b868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8de9e50-7571-4925-bcb7-ab691a8df18e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27af3920-0feb-4f37-9b20-6c3c6c216f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "80a778ee-7dc1-454a-b43c-86cdbbf665fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5410e5-0e66-44f0-aa22-50cabaf36a0b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6cf3818-b021-4848-a9a2-1bfe2067419b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a918677d-5fd3-4b37-8569-96f4c3fce271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92999bb-3d91-47f6-8182-0e9bbd6b8581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b5be09c-c624-4855-a1c1-4af37bc36841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec4977d-4563-48ea-bcc1-d07c7946c212",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a21f50-a1a5-4dc4-8fe8-87a1676921af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221a2f81-5520-48c2-8981-7adaf2a9688e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877ecbd3-65ea-40ab-9c4a-dfd61f56dfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "270a7dc0-8d64-449f-9cc2-416c97152b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b045abd-285d-43b5-80b3-f67855318213",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a92a503-ff3c-48c6-b093-5da4dddb2917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41c11f5-5b3e-4e71-86aa-455f6f56aa2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89111a1-a238-4d06-be88-90bac6e142a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b7430d3-559a-47db-a30e-7dc339156a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee993043-11ad-4457-bd45-1c22a63667b0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfb5876-4c58-44db-923f-103b7e9ebaa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328745c3-c71d-4063-8ee6-c6725e181c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ade0f8-d5af-4c41-993c-26d3cdeee174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c987f7-3f14-4734-84bf-7c5c3fa9dbbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec69d150-9d61-4eef-bf62-d68d7ff154d7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c0157f-1da1-448f-be8b-f7857ea4b318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f94b1508-943f-4406-834d-41cadd0258ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a270a7-39f4-44a2-a676-5b4a7ef87b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "525e5a04-37f6-4ee2-8b20-193edd81515d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4534b5-dfd3-44e2-99de-3ee98b33eee1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb388e7f-25bf-4199-b1ad-b657cccd1e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317093d3-ca22-48b2-b825-95d1ba6327f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7debf972-e7c4-4ea0-9557-7f0d7eec44d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a205a1-9094-4a84-8ccd-b7fc6171f85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9efba8-501e-4299-9196-deccd0f9def5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a36f844-0264-44d6-99bf-e3a56088dfe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a83d79-6fed-4e95-9205-12d19667b9a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0b62ee-b663-4020-ba02-5ab9f26da5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b07447dd-0d3d-436b-b009-20af74c5783d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57da41e7-6d26-465e-8354-ec98ddd75169",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "facdc227-4f78-43fa-a3ef-ec4bb07d031e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b47245-ac33-4d0f-8e8f-a2dfbe54d19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c521baac-286d-4fc6-a5c5-7a9e35212240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "991e37c2-ac63-4205-824b-1b9af0258305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9fb652-dd2f-4901-9eae-9624c34f2425",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c83a73-3f55-4720-acde-8c65fda7b799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b93be8-eac7-4c72-bbd4-2934de4e47c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079c8b98-aad7-4aec-a635-1501a041b7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c2741cc-3ec4-4071-bc22-2c11256d5618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9806a221-9cf2-46d5-87c6-9b586bc4ae60",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d78315-448b-43a2-890a-5a8789c5c879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3007ac42-6bce-4bd4-bf44-44a796679e9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12daa7e8-f1f1-496e-ba64-5bb287301f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a87c3a75-d95e-4864-ae20-f3b2d4fa9e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c792946d-930c-452e-9ddb-d1abe57d43c9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a742058-cb42-438e-ab5f-d3e4891fd3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8bf65cc-a1f9-49c6-8bb8-c8c279d2c011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229106f0-84e8-46d2-bf89-007b32ab70eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3666fd2c-39f1-48a2-a3f3-94aa625b3efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7073f13-ad15-4f98-934a-83330b62c381",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d061ad09-5455-4c13-a4ac-ef9648cd3668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d61d64-e94c-45f2-8bf8-e7866683870f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e52814-9989-440d-838b-68ed7236718d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c4e3b7-372f-42af-a2d1-d884841b2908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e50b62c-28c1-4030-b412-7f561d0a4e3a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428ec7f6-529a-4c0f-b3db-da14fa8bab43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa1333a8-dc7b-4b25-97fd-b8fd7aa43aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e707fe-af9e-41b7-b742-581482209297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f60ff3-cd52-4427-924f-b961524e0450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0a9ee1-4699-486f-aa92-abe5c106208a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1b8cbf-d100-4343-ba20-78431f35e140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0681d18e-fb17-456e-9176-f13c423c5c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6abdaf5-7c2e-4e41-a5b1-d34e2efe34f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f448f9a-0259-417a-a8f7-fbf7a6b40fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e2076a-a05a-4ad4-8003-f3d70e8e4ecd",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c637dfca-1bd7-4553-baad-53594cdf1133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ddb61e-4fa4-481f-8ade-237ac32ebd53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e77119-aa52-431c-8545-3a6d4a1343c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6856cb9f-12bc-45c1-aec5-4f1f215308d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61dce485-c019-4550-95d9-c62e6b816c9a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3dae11-ca1b-40d1-9c5d-3ff96e369b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d453de-dc18-47d8-9287-17843569fadf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56624750-5510-48f3-a14b-07fc4ab9c366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8730f53-96d0-40d4-a377-959918a58c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca5975a-62a9-4483-a38c-a909021eeef6",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee4ae21-951f-49bc-b42b-0cfbbec4f16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d005f55-7a46-4a8a-bb7a-f2b2d858d3de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7bae4d-bdee-47af-8bc0-3122cb0d19ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bb25c80-af97-4934-9e7a-7596b890e5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943fd9aa-ceab-44bb-b812-877fc0fd0c92",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62cdae49-2b54-4d18-bfc4-f46d38a17773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "832b81d4-4c48-46b9-b44e-e35beeb3df36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c180fc4-2ab2-46c6-b31c-c742d8453791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc049f7-6514-49ea-998e-d77bfc2ff632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13766463-8f09-402f-af8b-63cad7428a5a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1a59f4-f1ac-438d-a0a0-c501930dbc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ea741a-6cbd-4b60-9649-6878275d6c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1e327c-831d-4cb1-8e5f-79b3b1ab643e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04e4395a-009c-4cc1-9217-d896b2479410"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fa9ca137-d881-47a0-9162-62309d43cbb5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49003f68-8b5a-4abc-a0ba-3f0763134fea",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5cf375f-62d7-4721-b03a-aaccb606de75",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b109ede0-771a-4204-8da1-be3f05e26b79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2446c77c-e37a-4bcc-9fff-b2094eaf2309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb271565-cbe6-45b0-b8ab-76ba5be606a5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f57a26dd-9218-499e-b114-3054172bbea7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1979159b-deba-4a45-981b-89ecb62f70b0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "94291b60-b2e5-48cc-b6e6-819aef5ed9b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d2d10b8-ede5-4b9d-a42d-6aab8a0e6995"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4af9155c-f99f-4a38-a6b4-96a05f25c157",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "df23088e-bbfd-47c7-b28e-83e41a70185e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5f1ad82-0e67-4521-9946-6a3164c0a690",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "921e7e11-3fb7-4399-aecc-cfecb1930d43"
            }
          }
        ]
      },
      {
        "id": "f22875a3-ba72-4f0d-b03f-d6fd8c05f833",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5330e97e-b392-4179-b16a-3f87e77cf2d5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1dba60a4-e686-46d8-80af-f6715fb2fde9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3aee2fbb-6154-486b-a5da-4298b25ef5b3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356e7e08-6beb-4cc2-ab9b-66e8b9a49e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "323cb4c9-3065-418e-afb9-3b7f5491c286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5dd6bf-3fcb-4e0b-ac59-78c46b85303d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1212343c-acde-4229-bd66-3e3440d249a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c993cc3-7084-4ed2-bbe6-063d6b6e9ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdf8c45-d51c-4f7a-a632-97f446284122",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bb6b23-c885-44c2-8ebc-53d16d0b4ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f1ddb60-e538-4072-999e-c6b443fc3db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faef89ac-ac70-4ab0-8a6b-c5156cfe4b9b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8457b1bd-5677-44b3-b637-b5897a525792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb13043-be7d-49d5-885a-aeaf5cd27bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7fe559-a001-4fe0-930d-7ba8779dd656",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e311b35d-7e0f-4f2c-af2d-a5c57c6dfa78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4b7aa7-fba8-495c-a125-481632cb026f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9862aa-ac4d-45d9-9326-565fba9c80cd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65d13c9-58f5-40a0-ba21-4098098ddf7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51fc704c-26fe-4f41-86c8-2ca637baf1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba3f110-855d-442d-b46a-9f6c949baa98",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a547834-e7bf-45d4-bda0-2142c7c35afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d2ece16-b8f8-4c47-8a61-cc237c861457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b3ea4d-f2c9-4386-8c20-d6d9cb39e624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ddde88b-e070-411c-a184-49ddba64aad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d09e9d8-dc05-4dd0-8445-f02a017565ff",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735ca2d7-0b69-48c6-9440-98c30344799b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00f00b86-81bb-4c08-a0f9-9e5de7922293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8b7be8-b9a2-4bb4-8318-2bb847bda509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ac17d6-63d7-4592-9e50-7204f650b03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821169b1-1294-45c8-8ed2-bf14af0fed7d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab90e3cc-3dab-44e5-9e3f-1a44920b111f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d251f20-4c74-4902-ae36-ecb83a34f157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b532bf40-99ea-4c5b-869d-85e10442fdf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd0db2d8-b989-419a-8e28-e3b2f955d199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e150d5-ebc9-402a-9c4c-cea3ead6ee75",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd59e04-4608-4a40-9334-0a1592ad57db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22dfff2b-1e77-431b-9524-d8ce3c4aaafb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8133ea5-acc9-4a28-86ac-87b319036af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29441918-6337-45d4-ae8a-064cb00713df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb7b7b3-b13e-4a63-a0e8-2d0e222358c8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da8f5719-9032-4193-83f2-48febc618c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b266923-a4d3-452e-8391-2145c0da4bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f34846a-5dd1-4fb4-8176-0eb167ed753e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2627928b-a6e5-4cfa-941a-1e1b3282e356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d568154-aabb-4fae-b791-1cc24bb481f0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40aac8cb-2673-46d6-99e5-5dcddcb45f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c543e406-ccb8-4c03-959d-f34fac97272d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "704cd973-8b4a-4312-b628-c0c965a0f5f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66bb0f8-5cab-4281-bfc4-4b373c115bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cea577f-1678-4f3e-a3e4-3e6c8df89715",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31f76cf-5c5d-40e9-8648-06bb14ec9d7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03998162-54a1-429c-b46b-93d7e6e2147d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24e9643-4982-4709-90b7-6ad839b5c686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b998b9b0-943f-4ba7-b18a-19dc9a548ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a31b23-3b7c-45b7-9dc3-227c6123cf61",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3051331-7d4d-4984-b4c6-30c879a27dc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17597680-aaac-406f-b2a4-2329caa5fc42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8abfb6-7fc3-4f37-a5e2-ca931b267c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9bf594-25e8-4d08-b29d-2e93a789c841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740927e5-ff73-4c77-9611-131138afd4e0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c63228-a8ad-4a79-9302-0f00df7a8f1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f06bd69-b56d-4853-850c-bc808b3d1c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ac22db-27af-4ed4-972d-cde2c958d455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4897208e-5bb6-49ac-857d-cd00f1c9d490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c257a9f-9191-44ce-958f-88e6b926f1b1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a2853c-19c9-4110-8ebd-726e60a1ea48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "352c6d4c-d186-4963-bff6-f8bc54700697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf20766-6ce9-4426-9ac5-f7fa9290c1ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c57bab-2279-4aca-8dd3-db48f9ccae8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a188db-8ffd-4fe4-8b44-49182e8e707a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eccae66-8ccd-4153-8828-f49ec53b0afb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fffa0f6-a345-41f0-9db7-928fd68630f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97e49bc-bbcf-4da0-bf0d-98a8227e3a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d81d61a-b622-4781-b881-f4828561c25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c963ac-02f7-44fd-894f-6eb6cb2f5cdd",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627eb7b9-3557-49b5-b6fb-62e336f3680d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a77086-39f9-4625-a4c2-80f567a838f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9da2a59-9679-472d-96a0-f33ca34d0a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c672ba30-ebd0-45c4-9aa7-f31e562232b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d305c2e7-5714-4c63-ab6b-2c3fae216cf9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4305a5d-ec53-4b60-9aa9-b22280cbb645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e104ca2e-6d7b-44b2-8431-eec0f2dec2d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25206146-25bc-4520-a3a5-06269bc71676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eed7ff8-41f4-4e19-95ea-560793a34da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a3ca83-b63b-4235-b4ed-60b727001079",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f597b9d6-e43c-43f2-83c8-d3577330ac40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ee1d671-5daf-4cd8-8001-b2619c878773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdcc0b1e-1b5c-4299-9ab4-692b9c620eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d069efff-4835-48da-ad0b-94d4c1ba050c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117f62ef-bf97-4700-bdf7-fd87531778e2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc60541f-c395-4454-b298-b7bee6c97c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aba901df-0c20-4f4b-a924-3e13de30d994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30355047-e1a6-4244-b67a-cbce8cea21c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c52de3db-0e3f-4130-a747-257952c6f7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c0d504-a1c5-44fb-8337-5801e464699b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ac7f91-ef7d-4663-9987-9bda368f9157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e34274b-ac5f-4e70-bbc1-b17d52d9190b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3668b2-710d-4957-83dc-faa6404ae4de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a241cc-02e6-4f46-ab1f-f1dfd0551cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294ca81e-0486-4fd6-afdc-da9c34e541bd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a549e416-2e7d-405f-9ac2-957ddb0cb494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e9bd1d7-1313-46ec-a813-ee05b05a41e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1161e00-8c87-4524-a54a-f7d468fdb04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a76326a-77da-453b-a284-100c1a1a1767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a567eb1d-0498-4a19-871e-aee4ddfb8355",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccda6d06-afab-4ba8-8696-70b508b2b9c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24006c1b-3823-4ebb-886a-29c620ca6242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d595c37-2ef9-4960-8477-dc732aaa7447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412c9d36-0860-4363-b1bc-13ee87bafcc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79342e4-8505-49d8-b6d8-b5ef2e53a860",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100b1e59-6971-464e-9f6f-a27fdbb8ef32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dbd671d-0a4b-44a0-a3e1-57df40bff912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92f9049-918e-4423-901a-711f3133a603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17587391-ce7a-4702-91d3-3ed4677f3294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ab172c-02be-47c6-869c-75df268e1cb0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d61bd66-d840-46cc-a109-03530f605b56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "915517e3-e968-44a5-940a-b6b3c117d87a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2277fa0c-b8e7-4a79-9fba-897a6f29f9f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75f6bf5-d14c-4c49-be1c-a90b64602f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e81bf20-025d-4944-9ae3-cf277ed13d03",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8a2dcd-2851-4ac3-9a25-50d3ef76866f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10d1da59-1f87-450c-8e37-cca86373354d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79c6bfc-a797-443d-a100-94c1463d9426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22415d73-3757-4c3a-982f-63eda631c499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69d3494-3f05-4551-af06-9a8ee131b8fd",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ad36bd-e71c-4f08-9975-0d205ea99ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d764b72-b6eb-4dc6-9bc6-c7c5bede36d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "116df942-f92f-41fe-8365-142fc2902a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21fefd74-72da-49a8-abd0-3d239b12222f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dadc74e7-3b99-45a6-974c-3f70793c7f78",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838eb46f-ac8c-411b-bede-ae25ffaeb16a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4358a7cc-abe8-41b9-a578-a675fb69dbfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6428d5-1664-47f9-9e87-3f82387cb602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0005ac6c-079f-4f46-bf2e-1fee7fdeb384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77951e2-193f-40e7-ab57-80d45e5e8698",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3dfd80b-879b-42da-a299-0b6c41d1e9d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42206884-e6f9-401d-8e22-1b54236aa37b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad014e0-a456-433f-927c-e93a8b812a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d030a62-72e8-486d-9866-b256d3ec911e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2353b1be-59a5-48a6-9146-8dde995f462b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e958f19e-1e53-4a03-82ac-2d6afd2be091",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b25765c5-3e6d-4bd3-bf2e-bd3af1340843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bec40e-6907-4924-9353-3076fc0785bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b9d78d-a048-47c2-9182-0bc63898cd5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff64fbf7-dd26-473f-ae09-921ff7e9b33d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03d460e-2ca8-488c-affc-8dbda6e229b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73a50ad1-e9ad-48a1-87c0-19cecd401ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf010d8-020c-40cd-9140-d884e3545491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "020831d5-6a1a-4540-b487-7d2e5c27dbad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07d0dc0-b234-4e92-8759-b178de2c1683",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac1bb79-6e96-42ad-836b-02948b320d9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65d23d70-0c1d-4d55-be62-b63a37dce88c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5442a84a-ba6d-4162-8997-d08270f62609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "476724d6-82dc-4dde-8ad7-7df4b4ee4d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85191df2-27dc-4c73-a607-d8327e3c0c5f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95baa15f-ef19-4254-8e84-eb67f9292abd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbb52abe-22b7-4a18-bf9f-6f95875cdcb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6c5956-7af8-4827-9b30-a830aa71b097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de31c3a-cd2c-4d7d-8a04-78e8c664c117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587ec76d-6a31-46fa-8d1e-619634f2c98d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532b9d86-9487-4b23-acc1-0d453d8a9704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48fcc279-ecd7-491c-8acb-f5ca2e5da666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de975f0-fb1d-4a6e-b0d8-a7d9a791c4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81aa8451-636f-498e-bca4-23e31686b98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f606e0db-2998-4a2a-afb1-56c5bad5d9de",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc46994-0cf3-4d18-a182-36727c82735a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96e3a5e-a743-4764-8adf-8036c4d1a7d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3fea77-c5ab-4196-abfa-ed71f8a04486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a79ba9d9-6372-46fc-8bd1-9605d0407226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6068d578-efd4-4140-bc6a-770e301afac2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320c76a8-31e1-43dd-82f2-d181a0fdd63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d5aa216-e94d-424c-ab45-9716e3986026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20398302-3794-400a-80ce-aa5155411053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23fc4da4-5c61-4225-9551-c814d7f40a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d618f12-c7fe-4ec4-a4eb-81e7f152ad6e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad99f4b-36f4-45f8-97a0-d0b444cd42b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8533db-fbf6-4be3-b5f8-f95163b53cbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e92178-212b-4f19-90af-aeda123cec75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58e56b4c-38aa-4d84-acbb-ec28f514af75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d8e286-b208-42cb-8da7-1ce3dce0588e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a75f6e2-8bf5-4e04-8651-acf40fc69ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2828b6ad-8199-4f7d-b684-962f4a63bde0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9060029d-8f7b-43b2-b1c8-9cb41a049c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87895df5-b144-46d1-95bb-459be170277f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e85b762-62c6-4448-be65-de113509e798",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b63d009-c15a-4936-873e-c794853feb30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f8e929c-e16e-4f07-8f1a-5b701b139d06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e4cc93-b59d-4a01-9a2d-5dc40f867d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee151e8-69a8-40c4-bfd3-80d1c9ee2f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32d3a33-a14d-4009-8296-749a5c488af4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afef1c2a-9fe8-4e79-9abf-8afbdc44bddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1033aa8f-42fe-4368-9e57-85a2ce65cb42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c358dd-5f52-4e6b-bca8-f3dc1a091304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b535967-8f30-4715-8c3d-1bd41c650266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4242fa4d-8a0f-44f0-a31e-e5ec678571ef",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83333660-e422-4f15-874a-4a65d9b94938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2a0c0c-41bf-4d88-abd2-7861c62c39f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0fdc74-e57e-4efa-b8f6-6fa806a1583a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975be717-27b8-4a58-a90e-9f0e3e7596ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79dcfd8a-6048-497f-a0e6-81da0e823795",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8165efd-0ba3-4837-bcdf-523a820ea74a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8ad2b0-4f3a-4ca1-a6b3-a96f2b71b0a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1d8774-73aa-4520-a72c-e89e25e52933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a3cd501-75fd-4ca2-8427-9f27ecbcb094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd524ea7-ae47-48ca-b76f-61eeb30e2dc3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70401bc5-d626-4beb-8bed-2c866bdba693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5cc4094-fdfd-46af-b77c-ef9da2838ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "921fae50-b505-48cf-8a7c-1883b654ea94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "474f03ec-a8c8-44d1-96f1-071ac6834953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1f0357-2cdb-4493-9790-347795bf0299",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1424eb-b6ab-42dc-b876-d9e592580c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1e9d87-50fa-4283-bcdc-3ec0a02cfb43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb18393-ebae-4e21-bac1-d34584c2f9c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ea84e6-b858-4de7-a175-14bd89e1c4ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a79c78-7437-4a8c-8a6a-88a748bf531d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515886cc-994c-4caf-860e-7bbc9cb4398b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3af0057-11f4-4784-a501-fd43c308479e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c578da89-e0df-4982-8b1d-ce79b71dd57f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f8bc29-5197-422a-8caa-34c8bc23cd9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405bc6c8-4797-4945-9c17-3366d15163c9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77452d87-c212-4aaf-a596-a62f3b4c7668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38a8514d-69e2-4c28-9d49-2efbddecc807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f09f4a-9dc8-40cf-8a03-e1d7fb52305b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d451eee-66eb-452c-aa22-91b52bf28275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634ab9fc-f6ce-4be0-bac6-a35184df6987",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9016756-1b1a-4bc8-84c8-d8852710f7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "766ce14a-cf9c-4081-9821-0ff5f60b4d33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f99e0e3-c63e-4f69-9f3b-8f54639a1222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1492a9f-305a-4d8f-9beb-8d061882e902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd9fd98-bb1c-4fd3-b942-f7d05c44309c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ed80fe-08ae-439e-9b48-31d2c2e693f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df4f39f-6106-484a-9e76-9580c6771a87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "978706a3-b448-4abf-a26a-a80fe4a0d683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a66222-6021-4ad2-903e-b6cac874df19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f501cff-f7b9-4b17-9a56-7b53b47552cc",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943d4bb3-a4c9-4322-ac4e-6d7e266656f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df901179-5620-4deb-8db4-1cdf0de35dcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f522593-a63e-4172-8c6b-40183a56ddf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c33d95-6730-40bc-b2ce-71a1542027ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19adfc37-fa0e-46c6-9ccb-3e1c291551c1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b419f9a9-4d47-4812-bec7-673b116f8d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1895714e-70cb-44b4-8fdd-44d53129aaf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23c7cb6-74fe-49a2-91d3-4bf5ad52f5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9fd94cb-a7da-4773-910e-028a2c806724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae0babe-7d0d-470c-a7ef-03f7c47c33db",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13ab6bb-8bd2-4482-bc85-0820aa56c72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c924b333-62ed-4b0e-afcc-857105dc647c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb7e8fc-6d97-472a-a75f-1c4466874cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb61ca5f-7738-480a-a9bd-8d1b9ee0f6aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285e788d-0427-461c-b89e-192e1d0fd65a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f1a4b0-913e-4580-941a-4b9829d5e31e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19aedf32-66ee-47dc-876b-a737aec53dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9961df-c547-4c89-aa2f-48bd8b5b3f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "518ed8c0-cdbe-48a9-a2a4-20d477cddb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e8d46c-6f88-43ef-abe2-7b9970c9b752",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c74126d-175d-49f7-8e70-ae27f094690d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a572402-9e74-42c7-ac83-70149dd2c634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd7e652-4607-4716-aa18-9a8910b79363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c6cc066-29cd-4201-aee3-c830c695ff33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01601118-ea70-4301-a764-5c48ed0d483d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73671a76-6b35-411a-9309-f006c4d10d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb9cee34-7242-46bb-8582-acf208a64b27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9269363-16ee-43f3-940d-15e2d8cc9907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7856d0bc-7e21-4a01-99de-396b620fb965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1ad195-53fa-46d3-851a-9698234197ec",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccb7feb-a9fa-423f-8b72-53677a0c0445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62bf047-597e-4486-b081-e70f3a4449d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc398b0-7533-4d6f-a20d-801d0e827029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ced4f33-877e-4ed1-b75e-3a9d2c9b9384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57b185d-1a61-4253-8d38-cea2149a1a10",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2562625-36dd-4799-828f-d020b98d2b5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec37bab9-2a87-4319-9f07-7acda59da615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c374e1-f305-4dfd-bbb5-c7bb2974818d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d963ee-952d-4013-aa91-74cf51472734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3adc13f-57b0-4c42-83d3-07f1f9d572e5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d34482-ae3a-42e8-bd4d-d552b5549bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b7e9b50-db23-4713-b3e6-72d64c3f0abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b30aca7-ce66-4108-81ad-c13ab990d3d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b33ff35-8932-4284-9950-10af31e72e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3960a9c0-c58f-4206-b06e-1b87fc3fa4fd",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd4b7b7-d187-4b4c-8f2e-fd1d77660901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baeda42f-112d-4a73-9a5d-c4d3c5e4b5cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7534e9ba-ceaf-4c8a-9ce2-da3a70550372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e16cfe-bb85-4aab-bf74-113881007483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a45416c-212c-41b5-98d3-8219ef2ed6a0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65b3688-6e5f-43fe-b48c-660c1b6afa53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb287adf-030c-4c81-b7b1-7333b2acca45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32d6a56-3239-4632-9d1c-983ac7b809d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce066991-84d7-44cb-80d4-e2930102ec19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9a58dc-b2a5-46d1-932f-24e622c0aba7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f341f4-ef21-4cd9-9625-e29516ff2c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40ed12d-17e2-4dd1-bbfe-4a5bd7faae2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11736b5a-96aa-40f2-b2e5-09f9d44905ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff312c3-9126-4801-a1cc-bdbce4eb8310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c108696a-ea0d-4c16-80f3-254be1bf70ee",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c2f4d8-1af4-46d6-9036-aed189b40652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95aa3823-42c8-471c-b099-dce1b64349fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "424ae81c-a883-4641-b0ef-e963ff29bda6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edca4845-7469-49f1-88af-afef127385b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd74756-46ee-4273-9059-bc2c2e499072",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be2a1b6d-fb2c-4c58-8bda-ffaf6555b700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbd8edb9-21c5-4343-8cf0-2b64e7ceb83e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9b371d-893d-4f3b-8fe4-18bc5d5d1e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d93e901-840f-4bcb-94a5-487800df2120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea18fa4-9dc6-441f-92a8-aa8a2a8438f1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979e06ec-f669-496f-acd1-554a37a7e216",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb300003-9ccc-4e80-bffd-a22e8540c83b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0ce0e7-1bd8-4b98-8c7b-5dcf395b35e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f7cf1a-243d-4db5-bf6e-e65e1882892e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eacec2a-9178-4e7c-b56a-a77b9da34a63",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985db863-74ab-4f9d-a59e-290bcf168141",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61032cb4-2cc7-48b1-ae0a-fe0402e398bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "702ffc6e-e06e-46dd-807d-56e3a4476dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a10bbf-8f79-4f68-ab10-09eb742f56d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4fa24c-0cc9-4687-89e7-8323e117eea8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02a886b-2679-49f3-a442-164bcf7e90e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd332d67-de32-40c3-a3f3-2bf8564f99cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49a1617-473a-4e94-a784-db41beadca03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "874c6ca7-c6c5-49b2-8fcb-0057498f5e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614a77b6-4a23-4c2b-956e-91b0e54227a1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66e822f-0974-4e26-ba5b-9941ac429ea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99f0c83e-0d59-41f7-b183-9b21cf9c7a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2094bd20-9458-4299-bdbe-98c7a87919d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952abf93-30d0-4a6e-893d-35f015e2d3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333282cb-5134-40b0-a4bc-cf9b68ea0776",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7325d57-9ca6-49a2-b575-61ff42a0a5e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb9a8856-3e8d-443e-bc3b-cb2af9f5e87d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2084b299-6d8d-4544-a65d-1e2017eeedf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914bed0d-ce35-45e9-b4b7-050d3329ae3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b636abd-d1b5-4433-b89b-c407d974ef90",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a2bce0-394f-428c-937d-2356c06cc2a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60b845c8-af9b-4877-8530-b842e121a720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a139de-162c-4639-87a5-cea163203b4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e384e18a-d773-4fda-ba83-bc7026bea4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3a85d9-6263-494a-9294-febe067147b6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e300508-ffcf-472a-bbb0-4cb988f0b7aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9309ad96-05b8-4724-b4c6-cde1a619b786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99c4d19-fc5d-4f82-b0c0-1d8befa02a33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a5113ee-3431-4067-9d92-c3339f73bbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ac0436-cf14-4567-99d1-bf5f20f6e4d7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd722538-bbd5-4751-8dab-dd78f85a5626",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd696f57-fb9b-42a9-85e0-fc21dcf08b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcb782a-7c3b-4382-8e7c-9eab51ccdc42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c40b4f9-c0ba-43e0-b47d-5eb92043da35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b67786-117a-4286-8d23-bb000771cd1a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97298f3a-3e91-4c7a-9308-5b2aaab06e4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21b84ba7-a68c-4d90-bb1b-61e7e3daced6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e749a7bc-51da-4add-bdd4-e8385323e09b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d173fd4e-6cd4-4ee2-83ce-cd0377ead56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbd1a07-15b0-4e7e-b3e3-114b45f41756",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1953fe94-a3e0-4685-adcb-39b675bdf322",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b6908f7-e2ae-4f1d-bcea-5c3cb5d20193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e31b45-7ab3-4a5c-a5a0-14da4e5e7ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224f0a4c-6fb7-460c-a655-f08f472aa192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ba12ae-2136-40a1-b916-9cc1745c9e71",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30023066-85cd-4e11-b726-b1604d72b93e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "269d43ee-9f5f-4b9a-a860-dea8d6815310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11241fa0-9f50-4abd-ba44-4cb2d6faeeee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751cc95e-6b43-4061-af7e-f373c72a421b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cebb0e7e-e3e8-4c6a-86a2-c528d78f86ff",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92211df0-c17f-4769-94c8-0701ce161af7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "205ad1fc-e653-47ca-989c-ed342f750fad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8339003a-da3a-4f99-a9d1-56cce39fd79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca65267-1375-42a3-9099-28d9425c5ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bcda85b-9679-4ee0-879e-148c8cc3c2b6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6f6db9-464b-4295-bddd-f221dd7cc7e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5ff0b24-dd96-45bd-b694-1e16864756ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7d6df7-28c7-4624-9078-e35e344eca23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a820c0f5-b1e9-446e-8064-040767bf8882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f836a24-4527-4b19-b6ad-46566ea77ea8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac1de53-7e29-4f75-b871-b0563ce8f9e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1a0e569-b5a8-42d3-a501-34b1f2c716c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b450e4-64f3-4a5a-aa8b-5c732b069343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6288cc89-1bf6-495b-a7eb-6fbde43c5d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946a3235-43de-4cc4-aa8a-c66443b132f1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86151bb8-1ae7-48a6-b3f2-4fc61ee7ebe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dcce5cf-202c-4b2a-a2f2-1db09cafb741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f252d2c-4375-46d7-b0c3-daf303e9fd90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6b7051-829d-42d7-ac22-05e57e7c4774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf630349-db39-47a0-86dc-d6396aae4613",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81727b5-d294-46a2-8ed5-e5929e820894",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "497727c0-cc0c-40ba-b9f7-99ec65331f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "021f003e-6f87-4cd9-9200-22aafe3e635d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0921be-83de-4125-a34b-a9c2ab63fa2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd5892e-b2f4-47f0-91dc-fc2667486fe7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2a5e35-660d-49e6-a5e3-029a12a2f6fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0c533e9-148b-457d-a5dd-cc29e02258b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46acb182-8217-450a-ab61-30d738290eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7eda22-24a3-410a-b534-1e1b230b5d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa0f600-86bc-40f3-acb6-6aa0629a9844",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5187bb5-8ae4-4de6-bfe9-097f0692d346",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc458942-9c3f-4dfa-832c-a0f94b949f21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a030a7d6-d900-42c8-b085-31b534121065",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c463d0a-56d2-453a-a3f3-b6c199791a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8864f0-6891-4650-ba5a-28c8f6a49520",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7434cd6b-ef0b-4123-bd23-a266354b1d39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8f92183-8504-413b-8d52-6ad38107d736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8399d56c-59e2-4424-9d4c-ede21bd4ddfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "505de946-5038-42c0-afdc-03a39a61cf6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d571f406-ec08-42c4-9b39-10893a119aef",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291e3016-1e5c-41c0-86e0-9bd4f42a4b4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e3b20f9-23eb-42ec-8f36-1f3315d44409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59eb3b32-16b3-4647-a770-3e8c10e193d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e86ee99e-64da-4198-90cb-c79c67c6b2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286484c3-43b1-420e-a2d7-f39ffb80df88",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d58cede-6301-49e6-b520-7db5bb47f3c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffd0e38d-08fe-4a18-8aa6-d3f289c94665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80322813-b141-4b97-b65e-99c0ed3241c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17813c92-ae3f-47e6-9930-6a4ed58e0441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a41795-7ef4-4dc6-9a40-ed039abe47ef",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a223ff5-d1fa-4e30-a21f-ec44c61fa28b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0792b02-357a-4284-a823-3891314d5cca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79006960-7161-4a8c-9b4c-23ba55cff09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8346ea72-d1c0-441b-ba91-a0159f0be909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240d1603-90da-457a-a41b-73c935218240",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447c1f78-eb38-4095-8051-bf506fb07e92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2431fc04-a766-45b4-a2b6-48680485cb24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b6c426-62eb-4cd3-a1b9-a2e2a7acc4bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4261dcb7-f9ee-444d-98da-5f9b0d1d4ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a0be05-9c1d-4552-9c93-10e61ba8fcf8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d56ea1b-a26f-44a6-8866-b8006ba35f99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42c31b53-e9d9-4e40-8844-091344ced3c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "507596f6-a07f-4207-b946-4f0e17c2e7c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0196e0e-005d-4b04-9c53-d57914985aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd11a9d-b747-425b-b3cc-103574d86990",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d484aca-4a36-41a9-af1d-f9275b9ced3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76790773-c2ae-4a17-8382-53393a54ecf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "732a474b-dd9d-432a-8564-65b70269afb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "274dad28-2c2d-4e60-94d1-350a1d1886d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc93ddcb-7c69-4e77-933e-331392930345",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c01ed3e-0b7b-447c-9b05-bfe0852075f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78419bf1-0f58-4718-990a-1e275955898d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6482fed-13d4-4350-85eb-9ec8a4006cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2fda965-c946-4f23-8265-faab4df41500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58064f6-b1d5-4dfc-90cf-e612acebb25a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7942f7-cb27-46f7-81c5-3e0e53ac94e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9b1d8b8-f1ca-4737-8395-145a166ada39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71437a63-0e29-4fcf-a408-cd8fc797fbfe",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6362d34b-15f9-486e-a0a8-c2d788b2d2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b556534-4561-4d0d-b716-cfa71e600cc8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d41359-a9fc-4974-bdc8-2894e77564e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac05bfb3-cc81-47df-b95e-18e3abe3f360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0212db-8172-4bcb-a501-73ff62b570f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c239be-10aa-4b5c-bf9c-702bdbc5cb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99fa69f-8ce7-4bd0-ba15-0407aa86832d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164b01c8-63fb-4867-ac07-7399ce1fd40a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a42866b4-3a83-4aab-ba14-7b88b23c659d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44cfbbcd-3f8d-47d8-a96c-e74c142bcd3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c625f8a7-bb7f-4502-a569-3a857932e0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09b5e81-08dc-496a-8fbe-d0a25666c164",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5c153b-af84-4255-9a78-9ce9dac28a12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f22448ef-01d4-4639-8274-05bc84ae9d5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ef007b-d797-496b-bad1-086e6d83018c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "920b830d-0887-459f-a5bd-4969f9128872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba52d82-ff34-4e0f-8a09-5c07dec4e477",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae2553e-b32a-42ae-9b9b-f03d3a63269b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01089824-a313-41ee-9c90-48ba3bc4b566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1078ab1a-8a05-4799-b9e3-22f89c2a303b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b56e41-3182-4f6d-9471-625aa13f9e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825431a1-fb41-4b2f-8400-cfc7e9a88acd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1572b2-26ee-487f-a698-85e43534cb7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66fcaca1-c101-404b-8f13-2818d7e10759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b577ac-3d15-4b2a-a126-5372cf7b10e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b375b340-d663-4143-bf10-47e99ca0a1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c749476d-004c-4d0e-84ad-b861dfae1ea4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828bfbf7-c32c-4ad9-8c53-0328f27379c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da30c3ea-965d-4809-aa69-9825bf72d98e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0839a86-2dc7-4bb8-879a-7977816135bf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e4609c-c9a7-4cfe-b07a-060cc0b13b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff31659-007e-4960-989e-c72991b41df1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5edb186-802c-4ec5-933e-dcbe24c09d84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8edb549-ea2c-47a6-ae5b-742ddf37bf2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f553207-5e58-48d2-b989-e9ea152d89d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a582dfd-58e2-433c-af42-27a648a2b2ea"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad9ee9b8-7cc0-4be1-b91a-82b51a0aee35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8dcad6d8-fadd-4675-bc98-7c0d7f04ce52"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6f9d190-8e85-4ce4-aac9-4e6cd8f083a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b204b046-e70e-4041-aa52-a80fa390b217"
                    }
                  }
                ]
              },
              {
                "id": "57873c5d-86f6-464c-b9d1-2a5b556d9227",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "95e21e96-e61b-4c12-86b0-8d040b6af96b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7a72c2-1193-47d5-8666-4d4bd33f33e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1105f658-a6ad-4c8a-8b44-9ea800bc6208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2b1979-14bf-4bae-9279-455ca6b28202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ce9a170-d539-4b21-bbb3-02135e0cfe3d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46926265-8b04-4c60-8daf-b059e9ac15ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed99973a-db3e-4d38-b2cc-7fb3be04fd40"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4382ffc1-c437-4206-9b7a-501ef216b90f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28f389b7-543c-4821-9de7-2eaef07901b7"
                    }
                  }
                ]
              },
              {
                "id": "a5f0392f-4846-4fd8-be0e-448bfeea7708",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3577c5c5-9d55-4a26-806b-47f01696279a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba22ffa-71db-4bc9-b873-e0dadca35d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "34622108-3c11-477a-8a1b-71eaf46bae91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6ce017-9515-4f3f-b9a0-4369d79b76a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c0b534-9b4c-4ef6-b114-212eac3130d8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1c9ef9c2-e37d-4cd7-a62b-d4ad53828334",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9466fe05-5f77-402b-9183-1c225c8d2ffe",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab5bd17c-b92b-464c-bf28-11dc97255cb2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6eda3ec2-5fed-4d37-b1e4-71ea11dfb4ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58e8f80a-9187-4f04-aca7-6f24756f6d9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3f2fd9e-a974-4333-bd99-bce48c74c23f"
                    }
                  }
                ]
              },
              {
                "id": "52941789-2b5e-4e6c-a4f1-62bd9dae87fa",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10e35c68-fa55-4df7-a525-bbd7de6d8849",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "11d0be9a-da42-4a12-8e12-944ba2fbd16d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67093c78-4f42-418f-886e-35366647317a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4d100f8-206d-4059-bb3e-1f07073c3090"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "462cb9c3-8fff-421a-8392-87b878df43be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e699f770-6676-4703-80f5-8ace54988f7d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e391fbd-bdbe-4724-8399-2e4ac3721163",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce475fcb-1c93-4269-9266-8ede983eae03"
            }
          }
        ]
      },
      {
        "id": "739477c3-d920-4c30-940a-9e1edc2fb355",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "39eee5a4-4bac-405f-89dd-3d9eb63bda9c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08bb2dc5-7237-475d-8d35-2437aea3f6f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77d7c23c-b414-4e71-8fcf-3f929be54b23",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f10b672-bcdd-4aa0-9984-97dc761769ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0f989beb-6050-4f46-9682-8f5563843865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ca2bc1-eee1-4a6d-b58f-f7aa2ab70e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24ff6b23-69b5-4cdb-bad8-1430fe0dc429"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0f1fd81-563f-4969-bfc7-49c8ae5fd45b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff3b0d2f-43ef-4211-96ad-7b1793871b74"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "287445bf-5718-4130-971b-b483b6e99418",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4cb0923-151d-4ae4-8451-71ab1ab1c9aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aee84541-0f16-40f1-bba4-d56176881a9d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7ced8b6a-06be-4cc3-a375-2d988dc2fe30"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70d5af00-dcc2-4ee1-a3ef-9a2148f75e09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6027150c-d6af-4e6c-be55-84d8be065eb2"
            }
          }
        ]
      },
      {
        "id": "1d61773a-1266-41b6-92e0-e5216890ed42",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "de0c1ec2-2dfe-4a17-86e7-4d38ac0ddc3e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f446945d-27e0-4adf-8491-6c002c6fdc66",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c678e3b8-b90e-4737-bb5e-dd28b5a91571",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3ee260-2e86-4e4c-a02c-8e95d73a6636",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54cd0484-aa8d-4350-a200-f8ac55233268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60aa86a-a674-46a9-86f0-ec40d3bf2f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95ba9352-4856-41b6-b233-78bcc5e1e9dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f20b5b0c-42e8-4b93-a086-3a0f1e1a20f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d283bbb-a82a-49d6-b51c-605b95b167c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "120d4a63-3967-4725-8f2d-07a137ec79ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a197e234-36a6-4d78-8772-6e31bfa577fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a599dce-2cac-4c0c-a105-b9d08a0bfebf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b179f35d-f785-4283-b71b-5245756d4bbe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5fd8bb84-0f01-43a1-9c34-c75221cc5a4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "592ead55-def6-4d26-87bd-f1e133714e2a"
            }
          }
        ]
      },
      {
        "id": "7f16386f-0dd5-4ef4-b9d9-7f9d960375d8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3b9bea07-dd7d-424a-b85a-d6841808d94c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c26ba5b0-4419-4dcf-9fbf-77f660508ebf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee2271cb-9047-47e9-b57f-ad68fb482aa1",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736329e9-da1a-4f33-b7f1-4f190f34ee04",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e89077d-8a6b-4ea9-80e8-336ce02c3158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed4a064-4f22-4ba0-ab00-e9fc213ef879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6aeb92ca-ee01-4ff4-917c-7ce050bb1cb5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a238a23b-b08c-4208-97b5-4d4147d6fd97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00a4ccfe-6e95-478a-b3f0-fecfbb277567"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aff9c5b3-8c1e-4ffd-9f53-ec42e97f9290",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d769eb4-24cf-44b0-8ea5-07041733bc07"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ace064b-5dc2-4384-af82-519174467840",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b480916b-4d9f-4342-836d-d3bfef7cce6e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73a7ee3d-66a1-4692-aee4-e961eb176a82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb7d3d53-66e4-4eab-aa12-a7e918aa9614"
            }
          }
        ]
      },
      {
        "id": "a95a8ebc-fa63-453e-b137-f9000c80893f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0bf45752-2eb3-4c09-b3c8-0b119c1dc3c6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8931d2fb-7ec3-481c-b610-396a7f9c21c0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "20befa27-2a4d-4912-bd27-243b4ffc8ab9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf73676b-e65a-4d26-a6f0-865ef5bd7e31",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a963bb3-7cb2-4f27-b9f0-191cd3cf434c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 123.66315789473681,
      "responseMin": 7,
      "responseMax": 744,
      "responseSd": 82.36520435398258,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1697848369679,
      "completed": 1697848419002
    },
    "executions": [
      {
        "id": "5c8ec404-bac7-407e-b0e3-a396d8f67565",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6ca1729f-3ec6-4405-8bf2-bc20aa256938",
          "httpRequestId": "afe1b74a-91ea-4ec8-8a75-7e7dbe7b3ff6"
        },
        "item": {
          "id": "5c8ec404-bac7-407e-b0e3-a396d8f67565",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "daf22329-e44b-4217-8e62-bc8a86f697d4",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "79c83c34-2320-468e-9308-da5766e715e5",
        "cursor": {
          "ref": "fe8380b6-14e1-4a16-947b-c71f6e684c3a",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "688e62e0-46ea-45be-8844-1ed8cbe3116c"
        },
        "item": {
          "id": "79c83c34-2320-468e-9308-da5766e715e5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c29c2101-bfe4-48ff-b2c7-ccffcf9cb887",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "660f20c0-707e-41b5-b79a-c2b54d55e9ea",
        "cursor": {
          "ref": "c8e409cc-7d74-4a23-bb12-886c2b037862",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b9ee2588-1a6f-41a0-9b28-077a58348008"
        },
        "item": {
          "id": "660f20c0-707e-41b5-b79a-c2b54d55e9ea",
          "name": "did_json"
        },
        "response": {
          "id": "eac24e7e-f726-4f43-b83b-de22ad366da0",
          "status": "OK",
          "code": 200,
          "responseTime": 271,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc373e0-5647-48aa-8b46-5e57cec8a757",
        "cursor": {
          "ref": "564bbda8-f122-46bf-b725-1c1b5bf549c5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b1fb2837-2c08-4719-8487-a3462563c9ca"
        },
        "item": {
          "id": "3fc373e0-5647-48aa-8b46-5e57cec8a757",
          "name": "did:invalid"
        },
        "response": {
          "id": "b5a761a9-10c0-41ef-8b8c-36d3d75fa417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc373e0-5647-48aa-8b46-5e57cec8a757",
        "cursor": {
          "ref": "564bbda8-f122-46bf-b725-1c1b5bf549c5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b1fb2837-2c08-4719-8487-a3462563c9ca"
        },
        "item": {
          "id": "3fc373e0-5647-48aa-8b46-5e57cec8a757",
          "name": "did:invalid"
        },
        "response": {
          "id": "b5a761a9-10c0-41ef-8b8c-36d3d75fa417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39eaf6ec-7b36-4f34-be92-b0be5348c1d4",
        "cursor": {
          "ref": "9b4433e8-d822-4448-84e0-413abc8c09a4",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "051a38d5-69fe-41f8-babd-4984e697567a"
        },
        "item": {
          "id": "39eaf6ec-7b36-4f34-be92-b0be5348c1d4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "37fb7ab8-5a89-4212-8394-7fdc19b4657d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 154,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5128231-6fe4-4b08-9c65-378690b8332f",
        "cursor": {
          "ref": "8232dc2c-7666-40a0-a678-4c78b33c06c1",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e40ea697-2b32-497a-80d2-6c26d07c46f3"
        },
        "item": {
          "id": "d5128231-6fe4-4b08-9c65-378690b8332f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b38a9678-837d-4642-8ea7-ababd30f33fe",
          "status": "Not Found",
          "code": 404,
          "responseTime": 101,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da9c534-27bf-4dfd-8f73-ba326209fe7d",
        "cursor": {
          "ref": "ae8c9a35-4bb5-4523-89ea-2859c922b76e",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d53c30c5-9d80-484d-b5a0-7f069fc7ad20"
        },
        "item": {
          "id": "4da9c534-27bf-4dfd-8f73-ba326209fe7d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "03d869c3-3a1c-4bd2-b118-978dba359fc7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ba9023-b2b1-4dd5-b3a7-2e027c4bd7c3",
        "cursor": {
          "ref": "5dfe0188-427e-48c1-93a1-a2caed370093",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e4622c6c-455f-4628-9a0e-8233584a6562"
        },
        "item": {
          "id": "d3ba9023-b2b1-4dd5-b3a7-2e027c4bd7c3",
          "name": "identifiers"
        },
        "response": {
          "id": "51f58f41-ee9b-44ef-8869-f835c3e756be",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80cedbae-bca4-4c65-aa4a-42dfe7eedd02",
        "cursor": {
          "ref": "de6db117-14ad-4876-a183-485c2fff3cdf",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "21ce8167-d4c7-4ce2-8a68-f90f50740b8f"
        },
        "item": {
          "id": "80cedbae-bca4-4c65-aa4a-42dfe7eedd02",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6bc05fae-6d74-466e-a0dc-91bc6cd220b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56bac69-4757-4b53-a002-2ef797eb315f",
        "cursor": {
          "ref": "7b8f9dd4-d879-4d8b-81e7-a8100c7a03c4",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "84ab0ea9-b8d1-405c-a46b-36ba1cdf19ae"
        },
        "item": {
          "id": "a56bac69-4757-4b53-a002-2ef797eb315f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b263588a-f52e-4c06-9701-d5bdf05a9f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681d989c-11e1-44d2-a1d3-a7a0a389f000",
        "cursor": {
          "ref": "ba425a4a-123d-4ac5-8ea7-ecbc326c55b8",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c5c287be-745c-4f07-a489-52e0ae742f71"
        },
        "item": {
          "id": "681d989c-11e1-44d2-a1d3-a7a0a389f000",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "45bbdc2c-b8bc-481a-937a-59f994e98395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9008cdad-b392-4b8c-86af-12dc4c84aea2",
        "cursor": {
          "ref": "d6f526e1-9dfc-43be-885d-3db509f89a44",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e2a62040-7a1d-443a-ad22-c1d108995bdd"
        },
        "item": {
          "id": "9008cdad-b392-4b8c-86af-12dc4c84aea2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "24dbbba0-2bcd-42d7-abc2-6b06ad5575d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91f5b85-4031-4533-9bb0-c5cb023056d6",
        "cursor": {
          "ref": "9168bee0-23d9-4d53-9e20-4dec55351e19",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b8976889-7010-4b50-b8b2-d9b798b2b12e"
        },
        "item": {
          "id": "f91f5b85-4031-4533-9bb0-c5cb023056d6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "cdb5f04d-fb91-4381-95c4-b6421eeef4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35bc8f7d-fd1c-4537-9464-686acc28f9f0",
        "cursor": {
          "ref": "2733e0a8-7c48-432a-b830-3146717ef5ca",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b9c4be84-e75a-4e14-9885-4a71474af09c"
        },
        "item": {
          "id": "35bc8f7d-fd1c-4537-9464-686acc28f9f0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f69dee98-4c1c-44f2-b639-1598d558eb4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f3094c-cb84-47c5-90e6-56150c68aac7",
        "cursor": {
          "ref": "7e645769-e811-4e81-aaba-cdd833a1b11b",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "188106be-3cc4-4bf5-9a48-ea8ece1bfc75"
        },
        "item": {
          "id": "49f3094c-cb84-47c5-90e6-56150c68aac7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "03189bfc-e6ff-4b68-93d5-a01a74a0c723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6ce7ed-e22f-41e3-9f49-f0a4feeff523",
        "cursor": {
          "ref": "2ae8249d-1e72-4ab9-b50c-34631d44970c",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "792e8cf2-4575-4710-81a9-2a9949888623"
        },
        "item": {
          "id": "ff6ce7ed-e22f-41e3-9f49-f0a4feeff523",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "24583e9a-b39f-4d58-9253-51e47579176c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9b06d7-3796-4899-80f0-e243520abc4a",
        "cursor": {
          "ref": "2d61512e-8edf-4d90-b74f-f50292855262",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2b211a83-c2af-45b7-b474-0f138d12bca9"
        },
        "item": {
          "id": "0f9b06d7-3796-4899-80f0-e243520abc4a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e0cc8d70-66df-4bad-8b8f-8c384c7ce13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5c98a9-527e-430e-a726-f22b74dd6381",
        "cursor": {
          "ref": "82b13f0b-f553-45e3-81d7-300dad817b3f",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a86c24b6-a789-4bd5-85c8-e10a60b325fa"
        },
        "item": {
          "id": "fd5c98a9-527e-430e-a726-f22b74dd6381",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "80311fe6-c1f5-40ec-a883-e7129281513a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb86db9-c52a-491d-9417-214431fdb6d7",
        "cursor": {
          "ref": "8a73dd3a-701c-4403-8ed4-8455475f2280",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ade86045-ae2d-45b3-8378-1340d703bf88"
        },
        "item": {
          "id": "dcb86db9-c52a-491d-9417-214431fdb6d7",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "73e766e9-208c-4201-8637-64b142142cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0b76cf-f7d3-492c-96b8-ebbce924eb69",
        "cursor": {
          "ref": "3ec9515a-2846-4734-983a-32bd03db75c8",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "23580b24-a0f3-4898-8330-c74265363f28"
        },
        "item": {
          "id": "fc0b76cf-f7d3-492c-96b8-ebbce924eb69",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b0ba3e37-b5c9-45d9-a061-215e3d6d15ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d88a7ea-e733-4a0e-860f-2f1102e91f38",
        "cursor": {
          "ref": "3aa5cade-e9aa-4b58-aa39-4cbb36a4b469",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ae069562-5886-43a6-a80a-e852793355b6"
        },
        "item": {
          "id": "3d88a7ea-e733-4a0e-860f-2f1102e91f38",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "93f410fd-daa6-46b0-bc97-b274fcf81c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c6b8a3-6e1e-44e1-a642-d310e84ebc16",
        "cursor": {
          "ref": "8d630332-aa17-412a-8171-749a0cf58be3",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e0c3acec-fd89-4909-b343-249f069eadbb"
        },
        "item": {
          "id": "a6c6b8a3-6e1e-44e1-a642-d310e84ebc16",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0666edee-f629-4b68-8eb5-49bf544e2b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daee698d-5b4e-44ca-a9ba-6724f249bc53",
        "cursor": {
          "ref": "a39e1e58-7a28-4fe0-917e-92d2ba3fc277",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a3032359-0c3a-4f5b-8731-aaed40d361f9"
        },
        "item": {
          "id": "daee698d-5b4e-44ca-a9ba-6724f249bc53",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5ae06f6b-a0a6-493a-970c-f9b552b494d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e62f4e-e2bd-49a1-a531-fc29dd2bf4b4",
        "cursor": {
          "ref": "19ad42ba-28a4-42d0-9200-10d6299791ca",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3dff226f-236e-485a-8a7a-ba8e5ca70f87"
        },
        "item": {
          "id": "c6e62f4e-e2bd-49a1-a531-fc29dd2bf4b4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7f1dee93-0b67-4a1f-ae8b-a5d7c72482f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1fa8f6-923b-460f-9982-9830f2904344",
        "cursor": {
          "ref": "1f3f8b56-6643-40d6-a588-370c448d4d20",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a845b9a4-7c59-4088-9660-0fc640f429a1"
        },
        "item": {
          "id": "fb1fa8f6-923b-460f-9982-9830f2904344",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d26d4ed9-70ea-47a6-b935-aa36abcfacb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a665d2-f311-466f-8695-d1f36a4c1821",
        "cursor": {
          "ref": "aa74b9d0-b171-42e7-a33d-f242e2800485",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4de2e470-1cd0-4f9f-b317-4f748ffd0ac5"
        },
        "item": {
          "id": "94a665d2-f311-466f-8695-d1f36a4c1821",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b233bd2b-f916-4f6f-8d0b-83f26cca008a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32886a34-5cd8-4526-8a53-273e7354efee",
        "cursor": {
          "ref": "a06b5fba-4404-4edc-b6b9-f88b1a34bcae",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0973e4a2-b4cc-4b8b-9276-2e124fc03acd"
        },
        "item": {
          "id": "32886a34-5cd8-4526-8a53-273e7354efee",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0a29dc01-46a8-4358-bc82-bc333810310a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1513a9-2d02-43ca-9afc-76d1d4474c63",
        "cursor": {
          "ref": "bd41da3e-b93c-441b-b72e-3eeb39073553",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6c5ee80c-dea3-403a-95dd-781a76b242d3"
        },
        "item": {
          "id": "fe1513a9-2d02-43ca-9afc-76d1d4474c63",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ba65700b-73b0-44f6-be46-2cb36e76f0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d76b78-5c8f-4bdd-ae47-ec6b4b6b118b",
        "cursor": {
          "ref": "78b4f5cc-6b98-4af5-84e3-4e2e19dce870",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cb850f9f-6a39-4038-91e5-239f62ab7aad"
        },
        "item": {
          "id": "94d76b78-5c8f-4bdd-ae47-ec6b4b6b118b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9d532411-c00d-4066-a693-0028d888987e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d140d49-7462-49e2-8110-5e5b4de93450",
        "cursor": {
          "ref": "9fbffce0-6af0-4d35-8dad-17e4311afa8e",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ceb84769-1560-4c6d-afc6-527e1b29b77d"
        },
        "item": {
          "id": "6d140d49-7462-49e2-8110-5e5b4de93450",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ba3a79ce-c9b5-4a84-a48a-4226ce21393f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882272d1-48fb-48e1-a4df-875d560d35c3",
        "cursor": {
          "ref": "1b235c5f-5f49-4b3e-ad0f-a382e8914456",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "71add923-944c-4c35-8b8a-5a4a58de656e"
        },
        "item": {
          "id": "882272d1-48fb-48e1-a4df-875d560d35c3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "482556a4-1376-4667-845d-2877924edd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db211ae4-3bfe-460b-9067-3ad8d7260127",
        "cursor": {
          "ref": "aa51d20f-7a92-4671-8781-df0f89fdd079",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a083f63d-a962-4c19-8d69-cb771a771084"
        },
        "item": {
          "id": "db211ae4-3bfe-460b-9067-3ad8d7260127",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "01a81183-f588-4088-926c-6a74b3fca204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a8d8be-ce0f-4280-83d3-0845c4e5190f",
        "cursor": {
          "ref": "323ec65d-59fc-4140-931c-11bc361690c0",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8d745095-641b-450c-8e31-bf28e744a5ad"
        },
        "item": {
          "id": "b3a8d8be-ce0f-4280-83d3-0845c4e5190f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9e5ab969-dfb6-4914-908e-7171d8e8fd87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7491c9e9-ea77-471d-9b6d-ef5728cfa2b1",
        "cursor": {
          "ref": "75c6636f-4e6d-44ee-ae06-bdcce809da14",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4168e6f2-03a1-42f1-b443-887edbefe8e2"
        },
        "item": {
          "id": "7491c9e9-ea77-471d-9b6d-ef5728cfa2b1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6ee85939-1656-47cf-bca5-514e077ce12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f5d053-4212-401d-8de5-1834ace28545",
        "cursor": {
          "ref": "f8496147-29d5-4a2e-a51c-2bc55e9b5249",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "06e4c511-e0d8-40ae-9094-84aa0259592a"
        },
        "item": {
          "id": "97f5d053-4212-401d-8de5-1834ace28545",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c6691cad-7b87-4e65-be57-b0a3b422a632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36662227-3e32-4e05-8fc7-dbc3822480d2",
        "cursor": {
          "ref": "d9be45e8-4f45-47d3-bb06-22fb1629108f",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "244bb98a-204d-408e-880c-93ded622a80e"
        },
        "item": {
          "id": "36662227-3e32-4e05-8fc7-dbc3822480d2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fdd86e5a-7d31-4d59-9b49-5894f4ed3a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21353441-acbb-435a-90f3-934b11008244",
        "cursor": {
          "ref": "093f708c-6146-41cd-abf5-a39186653a4d",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "73c6dece-4dc6-4c61-9bf3-f76664de66e2"
        },
        "item": {
          "id": "21353441-acbb-435a-90f3-934b11008244",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9f89e0a9-9726-4e7f-b86e-576b5923d993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70992020-2a65-4ff7-8bf1-0eb6c3c46a47",
        "cursor": {
          "ref": "bedec00c-e6b2-4439-96c3-d11f6fab1027",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3eebdf4c-8dd3-469d-be28-5f09ac397af9"
        },
        "item": {
          "id": "70992020-2a65-4ff7-8bf1-0eb6c3c46a47",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f816f79b-ca99-4e87-afdc-cda915f2131d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd742a9-cc36-4d6a-abb7-d30c6dc86904",
        "cursor": {
          "ref": "d11d0643-09a0-41c4-9816-b7aa19eeb371",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5d09072a-71d2-4782-9191-d531762f4d07"
        },
        "item": {
          "id": "cdd742a9-cc36-4d6a-abb7-d30c6dc86904",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "eb5ef045-ff68-4a73-a78a-5087aeb444dd",
          "status": "Created",
          "code": 201,
          "responseTime": 601,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "73f9a825-65af-4905-82be-326da271d764",
        "cursor": {
          "ref": "fb85769a-d49f-405b-87f0-11e7e079d7a2",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ec153d75-3cbb-4962-80c4-6c674aed0356"
        },
        "item": {
          "id": "73f9a825-65af-4905-82be-326da271d764",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d13ebe97-fb6b-430a-9707-1d371a1dc3e5",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0b57c41f-33bd-4637-81f5-b28e32856d25",
        "cursor": {
          "ref": "b642a2bc-396a-46d1-bad4-b635d6e4ece8",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c24ebdce-ce9e-4ab2-8f1e-bee7e8bab96a"
        },
        "item": {
          "id": "0b57c41f-33bd-4637-81f5-b28e32856d25",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6693ea96-7ccd-4a4a-a28f-313c4da5ef72",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c7c608c7-c694-44bf-85cf-00d8f1cad7a3",
        "cursor": {
          "ref": "e0d7240b-1a90-44fd-be2b-2fec63ad71f3",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ff6e6a79-a9bb-4a31-9efd-cbcd7716188f"
        },
        "item": {
          "id": "c7c608c7-c694-44bf-85cf-00d8f1cad7a3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "68a0dad9-4157-4088-9e40-62a0c5f6e545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d78283-5259-4a42-91ee-af62b313d4f2",
        "cursor": {
          "ref": "4f07e5ff-f244-48e8-a0cb-ffe7de3e3500",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0fbff539-2071-4431-8528-876e0ca620a3"
        },
        "item": {
          "id": "e8d78283-5259-4a42-91ee-af62b313d4f2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a46aa78f-3438-4cb4-afaa-5070e906ce65",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "dc46cca9-60ed-489f-8603-ed820c17c375",
        "cursor": {
          "ref": "de43197b-496b-44f8-b55b-a3d8a7619a06",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6481545c-083b-4a96-bf4d-691f854e1584"
        },
        "item": {
          "id": "dc46cca9-60ed-489f-8603-ed820c17c375",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ca013add-aaa0-474f-9189-ccf7f9f5b173",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8e252474-0c63-46fc-8b5d-603568a1a7c7",
        "cursor": {
          "ref": "ccf2741e-41fc-49a2-bf86-eb25e029c6c7",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "24eefd4b-3107-4f01-817f-a10005e27d4c"
        },
        "item": {
          "id": "8e252474-0c63-46fc-8b5d-603568a1a7c7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "469f8d1b-99a6-4951-9ada-539fe32b7e30",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5932b5f9-08d3-4447-87f0-3a13b95d5eb0",
        "cursor": {
          "ref": "4c542d9f-6a96-4180-ac6c-f2d3bde6f8aa",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "89731e00-ec9d-413c-8b57-cad9931d0552"
        },
        "item": {
          "id": "5932b5f9-08d3-4447-87f0-3a13b95d5eb0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b928c806-06e9-473a-96ee-79a167c58f0a",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e26f3d5b-3d20-4ce6-892c-e563cb902a16",
        "cursor": {
          "ref": "8b43fe02-ddaf-4976-b85e-c6a8fe333ef8",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6fbe2752-cf23-4b90-b566-da35ead78bbe"
        },
        "item": {
          "id": "e26f3d5b-3d20-4ce6-892c-e563cb902a16",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "376d87f2-a849-444f-ad89-d2c8779fcfc9",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c9b2825a-ac65-4446-ad30-15c39733d318",
        "cursor": {
          "ref": "07c85a06-cb6c-46e2-9b7a-50cc4ab49fd3",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1249b3a6-19b1-4a32-83a2-25b977f74d3c"
        },
        "item": {
          "id": "c9b2825a-ac65-4446-ad30-15c39733d318",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0fd151da-e261-46de-818a-4735d39547c5",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e7590d02-3e83-4cb8-8574-d69cdd1d6c25",
        "cursor": {
          "ref": "5f31501f-ef26-4d86-9862-90ac6b583716",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7912cce0-578d-430d-ab55-fa584142ca64"
        },
        "item": {
          "id": "e7590d02-3e83-4cb8-8574-d69cdd1d6c25",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "cd7f0c78-a49d-425f-9011-e072d911efb8",
          "status": "Created",
          "code": 201,
          "responseTime": 380,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a1c1624b-3337-4e1d-87b7-8c2da33bfc10",
        "cursor": {
          "ref": "690f24f2-5aec-4ffe-9888-cc9639e24c0a",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b1386a2e-3136-46da-a7f4-0d26ea834c86"
        },
        "item": {
          "id": "a1c1624b-3337-4e1d-87b7-8c2da33bfc10",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cd792c29-2754-4181-b02c-6c5f85f8cf54",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7e852864-ad80-495c-a2a7-327f1675b1de",
        "cursor": {
          "ref": "97ccf9be-7be2-46df-95c5-372727fa0dad",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ccd82b57-e706-4db5-abc2-d61c2cf77b8b"
        },
        "item": {
          "id": "7e852864-ad80-495c-a2a7-327f1675b1de",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "729d03f9-0ec2-4763-9320-16e82df83ef2",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a31d88d6-dc9a-4c04-9bf7-429b0d48c794",
        "cursor": {
          "ref": "ea77695d-2aab-4ad0-a2e2-3b1ad4e5609a",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "12579e6d-b3b2-4ef6-809d-e97b13c0e346"
        },
        "item": {
          "id": "a31d88d6-dc9a-4c04-9bf7-429b0d48c794",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f541e69d-c4fc-4639-ad8c-27ad98e58179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ac8fab-7f76-4beb-a4f2-171444f34f09",
        "cursor": {
          "ref": "1164c252-35c8-47a0-b4df-ff40dec7f488",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e4476cd8-7f8b-49d3-a7c8-486d9e1a5514"
        },
        "item": {
          "id": "11ac8fab-7f76-4beb-a4f2-171444f34f09",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1c5193bd-eb26-455f-9aff-fe69cd4ed276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0788df1-9966-43d5-bb70-0421cc8cdf7b",
        "cursor": {
          "ref": "6a44070a-89b4-4942-9c3f-e56a976ab172",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8274bbf6-a838-4218-b749-6f2b99510db0"
        },
        "item": {
          "id": "a0788df1-9966-43d5-bb70-0421cc8cdf7b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "79df289f-2bdf-4cbb-990e-57ef4ea25d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed73e0a6-ffe2-494a-9b70-2e3ef91c972d",
        "cursor": {
          "ref": "987b33d5-3bb4-4c4c-9565-06d7ba3ed16d",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7db1a6c1-e129-449d-b62c-a31c7f68ef24"
        },
        "item": {
          "id": "ed73e0a6-ffe2-494a-9b70-2e3ef91c972d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "45eba8b9-f7bf-4263-9b42-0e5011446afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37779f5-c854-406d-8acf-0a7e0cd0a3fd",
        "cursor": {
          "ref": "4404a08f-c114-4b34-8ae5-c80d05f3769e",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "468a7cb2-e56c-40f9-a93f-20edfef8bfa3"
        },
        "item": {
          "id": "d37779f5-c854-406d-8acf-0a7e0cd0a3fd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1fc640cc-44b8-4da1-9c11-2b221e11a832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a481ac1-b6e9-4b41-b8ed-299b72d4afef",
        "cursor": {
          "ref": "50b6fcab-43ac-4b67-83d1-c28fb43f93e1",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1e9608ba-ebcb-42e1-b854-55f9949ffd6b"
        },
        "item": {
          "id": "9a481ac1-b6e9-4b41-b8ed-299b72d4afef",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2f6154ea-a518-4995-a5d0-6f119f543f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbac1141-e750-4265-a0f6-e8827feed2f1",
        "cursor": {
          "ref": "ab21d4be-e177-488c-a16f-0c871b3a2707",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "18318637-87a6-4c5f-9b42-6f59575bb803"
        },
        "item": {
          "id": "dbac1141-e750-4265-a0f6-e8827feed2f1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e061668e-009b-4925-8846-bb51409c5d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170e81ca-3e4b-48c2-a7ed-a3e0521bfcea",
        "cursor": {
          "ref": "9ff6c183-a596-41c8-9e9b-1ae5a74c7aba",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6a3612a3-3dd1-461b-a687-74f0d0fe95ae"
        },
        "item": {
          "id": "170e81ca-3e4b-48c2-a7ed-a3e0521bfcea",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7e3834c4-33fb-471d-9356-b8de27e932fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68ff6ac-d5ee-42d0-ae8b-fe2ab76e2857",
        "cursor": {
          "ref": "faf20d2b-e313-4221-8a01-afa8c0b5bb5e",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "92a2c7e1-9c37-489e-9d2e-42afc2c22295"
        },
        "item": {
          "id": "b68ff6ac-d5ee-42d0-ae8b-fe2ab76e2857",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "76e90111-515f-43f3-984c-90d1a3aaf2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fef834f-fde9-47ec-9781-e4af3a762460",
        "cursor": {
          "ref": "5adf257c-8ebd-4bf9-90ef-65460cda17f3",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "10af01a4-e9a3-4759-87df-faf4795e4003"
        },
        "item": {
          "id": "4fef834f-fde9-47ec-9781-e4af3a762460",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "308442a1-5ca5-42ac-9c7e-2468512cf1b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a731321-d719-4e61-8ab9-15ef20bca3a2",
        "cursor": {
          "ref": "66ca52b1-c14f-45cb-9de9-6c471438987e",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7feb2949-ba1d-4f00-88b6-3698a37afce2"
        },
        "item": {
          "id": "5a731321-d719-4e61-8ab9-15ef20bca3a2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "19a1be68-1ec8-4675-915b-9504af17d1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46bd70ab-a61f-47f7-88e9-eaaa90123dbc",
        "cursor": {
          "ref": "8efc1710-8525-4ddf-90a1-2d4935d0fc08",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "461a9f43-017a-4c73-85cd-6bd7dee37bd6"
        },
        "item": {
          "id": "46bd70ab-a61f-47f7-88e9-eaaa90123dbc",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "92dd3b20-56df-4e73-9530-bcb7998d5211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f95021e-947f-4593-87fe-c773f88fb092",
        "cursor": {
          "ref": "62369180-f674-45f6-a918-c9b4ba077b03",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9feb6a9e-bff0-4dac-95b0-4158c9073013"
        },
        "item": {
          "id": "1f95021e-947f-4593-87fe-c773f88fb092",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f38db7e7-2460-405c-b14d-660000e179c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b837a14-be82-4cc0-9ae3-92c9388904f7",
        "cursor": {
          "ref": "9ecf70fe-d4c4-4996-95a0-33d7efcc0bfe",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a7519328-b751-470b-881d-9164e4d5ab73"
        },
        "item": {
          "id": "2b837a14-be82-4cc0-9ae3-92c9388904f7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0e3e9d3d-d6da-470c-9557-77621cae540f",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3fd9bafd-b8de-40da-ad22-1fd05a289297",
        "cursor": {
          "ref": "ee73888d-4a41-46ff-8c67-28d961de1ec3",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "11e33ef5-a497-47e9-92a6-b859078a9c4f"
        },
        "item": {
          "id": "3fd9bafd-b8de-40da-ad22-1fd05a289297",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "135c7c6e-88aa-4f87-b56e-278f406dbb85",
          "status": "Created",
          "code": 201,
          "responseTime": 744,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8e3b05b0-b49e-4ce0-9e31-b549f0a20eb5",
        "cursor": {
          "ref": "85ff4270-2826-4c84-8b75-3ce609333081",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a8bd6309-3ad5-47fc-8c42-a786467d59e2"
        },
        "item": {
          "id": "8e3b05b0-b49e-4ce0-9e31-b549f0a20eb5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "6f5ab2bd-ee20-44cf-9bdb-f73f2354a794",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "66b9e257-c039-4528-af1e-1821f4915458",
        "cursor": {
          "ref": "d97fc8ef-d5d6-4c53-a4c2-cdc6f53791c3",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "053bfb18-aa50-42a2-aeb9-f26739e62e39"
        },
        "item": {
          "id": "66b9e257-c039-4528-af1e-1821f4915458",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "82dd4d86-b596-49e2-b490-5dc0ea13dfac",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "8ed51624-c7bc-4ece-9c99-1e3c3717216a",
        "cursor": {
          "ref": "c89af25e-a83e-4eda-babb-494b23d11ea5",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ab05fa81-a47d-4ad1-9abd-1df8b7e1302d"
        },
        "item": {
          "id": "8ed51624-c7bc-4ece-9c99-1e3c3717216a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a2826dcd-b2de-4138-b4d6-3df82083dc04",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "9909c0fc-e77b-440b-9379-11cf11991521",
        "cursor": {
          "ref": "2f39974a-e768-4164-aef4-03633799554a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fb20460b-81a3-4432-94eb-fb9afbf995b2"
        },
        "item": {
          "id": "9909c0fc-e77b-440b-9379-11cf11991521",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "59ca4aaf-ce1d-4bb0-b8bc-3d3e1998b4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013b8831-311f-4708-a548-bb4f5f7bb819",
        "cursor": {
          "ref": "b7aba189-4790-4492-a22c-05901f377374",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "15db978a-5631-4548-9099-3cc5b32f1cba"
        },
        "item": {
          "id": "013b8831-311f-4708-a548-bb4f5f7bb819",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e55cef90-5e2f-43f5-b7a4-a51c9b699b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315eb038-fd73-4fa8-b938-66b97b1ea17f",
        "cursor": {
          "ref": "f001568a-bb1c-4a2a-b0b3-60d7d57dfb14",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fd8df0a4-13e2-4aa7-b8bb-56a982f88525"
        },
        "item": {
          "id": "315eb038-fd73-4fa8-b938-66b97b1ea17f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "70188143-162b-4f90-832a-0f1cd2b4baf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e800637-18b0-4d30-973e-5e9dd5b7f09e",
        "cursor": {
          "ref": "ec955b4e-48bf-455e-8d5f-f6258b858848",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "edf706d5-606a-41ac-ba88-efe95efabf29"
        },
        "item": {
          "id": "2e800637-18b0-4d30-973e-5e9dd5b7f09e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "638a41b6-52d3-48b3-8908-ba5fb08cbbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2b60d6-d3cd-4b23-8423-3b1ad2ab5d50",
        "cursor": {
          "ref": "e0a1b823-2012-4bce-aa3b-39c7eccebc45",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "494d8594-9a51-47e5-a6d1-189112b9b264"
        },
        "item": {
          "id": "0c2b60d6-d3cd-4b23-8423-3b1ad2ab5d50",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a1c55f54-85a7-4b59-a406-43968f5dca9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e576eb6-3d4f-47c1-8d0d-9f3d3d856378",
        "cursor": {
          "ref": "001e8bc5-b793-482d-8e37-6a448ed9dc05",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "507c96eb-68f7-4d2b-823f-0fff3c4a7207"
        },
        "item": {
          "id": "3e576eb6-3d4f-47c1-8d0d-9f3d3d856378",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2ce18288-faa4-46c7-840e-09589f63ff1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37788fa8-b8e9-43f7-abd6-0d670feacdc5",
        "cursor": {
          "ref": "abf26889-ad94-418f-852c-f64564ed8809",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7c3aab38-234f-4c78-8e39-cb1f63461b08"
        },
        "item": {
          "id": "37788fa8-b8e9-43f7-abd6-0d670feacdc5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ee588332-9fec-486a-a162-08ef67b42e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b5ccea-dac8-4301-ab71-227c5629fa74",
        "cursor": {
          "ref": "b409e4ad-379c-4f73-a99d-c26599704b2d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3e3b3c8a-ea81-41bc-ba58-2b5ac2eaeb7e"
        },
        "item": {
          "id": "29b5ccea-dac8-4301-ab71-227c5629fa74",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d635881b-2289-4c56-8628-9e98ce3b79ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e29308-472e-4240-8364-9f53c7426022",
        "cursor": {
          "ref": "41102cd5-f157-417e-b653-0482d9765271",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d9705d61-2a46-49ce-8b51-e5879e0c4dba"
        },
        "item": {
          "id": "19e29308-472e-4240-8364-9f53c7426022",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "12526d43-cda2-44a8-9996-965acd081b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39494d36-5a77-4543-8e21-d03298c41837",
        "cursor": {
          "ref": "9ae28dbf-2790-41f6-9f2d-0e56e845f34f",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bf888398-f2a9-424b-8cdd-6729989d82fb"
        },
        "item": {
          "id": "39494d36-5a77-4543-8e21-d03298c41837",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1f5d484b-0e1d-462e-a1b5-afc8cae2499e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f645888-ebfc-4fe3-b47a-6efc7e7ef916",
        "cursor": {
          "ref": "5bf4d26f-1d77-4664-a9f7-29eb04cda9d7",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "03d6f790-ba92-4da3-acfd-ccc4a91961ac"
        },
        "item": {
          "id": "3f645888-ebfc-4fe3-b47a-6efc7e7ef916",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "48fc39e1-8322-4095-a222-1af9f1a1b0c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923b547a-6266-4352-a8c5-a35066b6f824",
        "cursor": {
          "ref": "d0d3ac81-07e2-4ee6-bc02-b1c5dcd88c24",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ad7e3f78-6840-4619-a852-2dfc79acaa9e"
        },
        "item": {
          "id": "923b547a-6266-4352-a8c5-a35066b6f824",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "64cc7029-a2ae-4e7e-93ed-52a95694a8c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de221fb5-acbf-4248-913a-1dca62afb728",
        "cursor": {
          "ref": "cfc1f4ce-6aa0-4d17-8cb9-19d254a3a2c2",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7a81a8b1-9a0e-426f-908f-f22ef151dff0"
        },
        "item": {
          "id": "de221fb5-acbf-4248-913a-1dca62afb728",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f91fa765-9175-423a-bdb9-ba86f8fd1828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d48d024-d866-484d-9c3f-0f264a62dedf",
        "cursor": {
          "ref": "6c66fb67-8285-4ca1-a349-589c4c537568",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cdb2a5e6-14ac-4679-9e61-6dc5b3479b5e"
        },
        "item": {
          "id": "2d48d024-d866-484d-9c3f-0f264a62dedf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0fce45e5-8211-4179-8b68-3228848238a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af2e36e-3ae7-4185-9e0c-a804a5b00341",
        "cursor": {
          "ref": "3651fb0a-fcd9-43ee-81be-cf7361da0228",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4681e08d-2c5a-4391-a490-e9d4db59545d"
        },
        "item": {
          "id": "6af2e36e-3ae7-4185-9e0c-a804a5b00341",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "66bb60a6-749d-487a-9c34-45c2d47da6b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7053d046-c8f7-4b93-a4ba-62071ba77ec2",
        "cursor": {
          "ref": "8554b7da-f38f-48c0-937a-de6113f6a2ec",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "77e2fdd7-dc7e-48d9-b837-25ba26e4c484"
        },
        "item": {
          "id": "7053d046-c8f7-4b93-a4ba-62071ba77ec2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5a58cfac-2982-4712-bbd3-f46f7388941f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e93dfe39-c174-4d42-9141-958d3ba5f1bb",
        "cursor": {
          "ref": "0802f333-d032-4877-9b09-6370836115a7",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6f71fec5-f6e2-4150-823c-d0c418227fcb"
        },
        "item": {
          "id": "e93dfe39-c174-4d42-9141-958d3ba5f1bb",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ddc1cc0b-2846-4184-aa6a-afc140981df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460874a1-5dc5-4a73-ae48-2d9ca59d2511",
        "cursor": {
          "ref": "f3f25c52-3efe-49b7-b84c-233e9ffc4768",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7fbef787-6c10-4a61-90b3-f80db1b677cd"
        },
        "item": {
          "id": "460874a1-5dc5-4a73-ae48-2d9ca59d2511",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "85ac1082-30a5-46fc-9a6c-f8c7220a4710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85a27f3-1a09-461e-a498-512b0206c56f",
        "cursor": {
          "ref": "198b9722-1fe5-4527-83c5-8181ece9442a",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "38d6eaeb-95c0-41ba-bd23-2c1a28950f35"
        },
        "item": {
          "id": "a85a27f3-1a09-461e-a498-512b0206c56f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6d1dc6fe-cfd3-4510-83f1-2be4365d3f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b670536f-b9a6-47d8-bdae-cdab7e8f4992",
        "cursor": {
          "ref": "fcd7dfed-97a1-4b2f-9589-49285c6249fb",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "28610d0d-6def-4971-8704-22219322ad41"
        },
        "item": {
          "id": "b670536f-b9a6-47d8-bdae-cdab7e8f4992",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5393874d-4f52-41b8-9aea-791853c4994e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1953863-8816-4311-961b-3368b3238cd6",
        "cursor": {
          "ref": "336e5838-a62d-4e2f-84de-0dfc6c63bf6b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "491102e3-e2b0-425b-a459-39f903a8c7df"
        },
        "item": {
          "id": "e1953863-8816-4311-961b-3368b3238cd6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5f4bc08d-4b2a-44bf-a881-aa32f0da3038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f5d410-d679-44cc-8305-50bb635efd9b",
        "cursor": {
          "ref": "f883bbc9-6fcb-4775-be36-5d506034aa30",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2527c64e-b454-469a-a11a-0dc0c67d1b7f"
        },
        "item": {
          "id": "87f5d410-d679-44cc-8305-50bb635efd9b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "31a82120-723f-4dd6-881d-96248db5d4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e4e8fb8-8369-46f5-bcd2-0e2636b5bc78",
        "cursor": {
          "ref": "5c009f26-7df8-4dad-966a-6e5fcbd615c2",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "84cb591d-9b13-45a7-bef4-34a03e44a468"
        },
        "item": {
          "id": "7e4e8fb8-8369-46f5-bcd2-0e2636b5bc78",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e68bed33-68c5-471e-8fb4-31b32302da39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760945bd-4a97-43eb-9e9d-7abdad33678c",
        "cursor": {
          "ref": "d531142f-eb75-4b09-b969-54b672306663",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9a51c184-915c-446c-aa1e-e24df24a9328"
        },
        "item": {
          "id": "760945bd-4a97-43eb-9e9d-7abdad33678c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "13962478-3ce4-44d5-8395-fdf121ffb668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1570ff58-6a2c-4388-a610-1ef283ea5381",
        "cursor": {
          "ref": "8c4b5667-ec49-4048-bd68-291b055e1374",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d3b17b82-1458-49f3-a5af-7e203363d9b2"
        },
        "item": {
          "id": "1570ff58-6a2c-4388-a610-1ef283ea5381",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "28e189c7-e955-45bd-988a-f46baecac5db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07bf16e-f27e-49ef-840f-eea5c3cf0874",
        "cursor": {
          "ref": "8ce4aeaa-0e2c-4df1-b3c7-4d16067bf6e3",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4c7359ed-21b5-4154-9abe-405168654f7d"
        },
        "item": {
          "id": "f07bf16e-f27e-49ef-840f-eea5c3cf0874",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "922cbf61-8680-4f75-ba79-3a6fb25ee4e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74d0417-0b3f-4faf-a882-053c2df2cf54",
        "cursor": {
          "ref": "736f7ea1-74a1-41a5-a22a-edbea272eb21",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "05775991-883f-4471-a27c-5b36a5587c8d"
        },
        "item": {
          "id": "c74d0417-0b3f-4faf-a882-053c2df2cf54",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "81bab4c4-68dd-4fb6-98ac-a7f3b57ed1fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13eab32-9bc7-406c-b6fc-82dbf78a7da2",
        "cursor": {
          "ref": "6e8a2c3a-5992-4044-9627-94dca3beb05e",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9058a20c-d9ff-4c04-8eb0-744d3eaa2fb8"
        },
        "item": {
          "id": "b13eab32-9bc7-406c-b6fc-82dbf78a7da2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6eed8d18-285b-4375-b810-b1c4cbe4a9da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7412b7e8-8f1a-4bf5-a694-e08a11a92a0f",
        "cursor": {
          "ref": "ccd5778a-668c-4fbc-ba1b-654b2e8398c0",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "30a1eed1-e9c3-4eaa-ad7a-69d58b535b67"
        },
        "item": {
          "id": "7412b7e8-8f1a-4bf5-a694-e08a11a92a0f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "35b8b7be-0a52-40be-83fc-d47b5cfd7d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c289a9d7-5d2b-4a6b-a8c2-2aaf16595504",
        "cursor": {
          "ref": "02a19743-1ea6-45f7-89f6-d447505bedb8",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "643a9dcc-e452-45ad-bf53-da07f4292571"
        },
        "item": {
          "id": "c289a9d7-5d2b-4a6b-a8c2-2aaf16595504",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "40f5125d-77fa-4ff1-a223-fdf9f7c7da54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5a816a-1559-4ecb-9e1e-fa1fc1db2dec",
        "cursor": {
          "ref": "dc3cc17c-64c0-4983-bb72-06878299d612",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5d90332b-3d4a-4c4c-b1a6-f4705ce5ecd0"
        },
        "item": {
          "id": "4c5a816a-1559-4ecb-9e1e-fa1fc1db2dec",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ed3bafac-22d2-4755-94fa-107248d05cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579cfdba-c258-4fb3-8fbd-fb6a21702335",
        "cursor": {
          "ref": "07caf700-6add-4271-9657-0b0b12c2dcb0",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "74f63ff8-efce-4424-9318-3c944c7ecafe"
        },
        "item": {
          "id": "579cfdba-c258-4fb3-8fbd-fb6a21702335",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3a553327-ac27-43b6-a844-183ab18ceb43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c1efb5-54c7-4bd3-b854-07870049bdae",
        "cursor": {
          "ref": "02487119-d669-47f3-ab83-9bf83e8bbb80",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fa2eedb9-4169-4a75-872f-eaf5f0d0a3db"
        },
        "item": {
          "id": "45c1efb5-54c7-4bd3-b854-07870049bdae",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6c39fdef-4761-4a9a-9646-d4291dd7495f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "7dc7ce37-63e6-486d-87df-6a60c43beaf9",
        "cursor": {
          "ref": "2850882e-3c11-4afe-8bb1-de1c532a0e1f",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9c5f7eb2-1bd6-4494-9488-658cb19fb2b2"
        },
        "item": {
          "id": "7dc7ce37-63e6-486d-87df-6a60c43beaf9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "332c9cc8-b470-44da-a029-51305a0cadee",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b74671-5598-4dfc-ac19-65444932205a",
        "cursor": {
          "ref": "456fbfbe-cb5e-4a1b-ba47-7143e2d9b829",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "864c39af-c6cc-4309-9175-61da4583c77f"
        },
        "item": {
          "id": "60b74671-5598-4dfc-ac19-65444932205a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ca99227c-5cca-4e3b-bc39-b98fc8d8dc36",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "58db6582-2389-4232-8bfa-0f439e564df9",
        "cursor": {
          "ref": "10892694-131c-447a-8157-0fff54e3207a",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "009ef389-a53a-4e40-b179-d5d00dfed7aa"
        },
        "item": {
          "id": "58db6582-2389-4232-8bfa-0f439e564df9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d4115641-7bd4-41f8-a98a-ccb2cc89ccee",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0c5a01-1216-4081-8922-e6d39d7618eb",
        "cursor": {
          "ref": "37b28bcf-7153-48a7-b469-7a70bdb04168",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "62fc01ba-ef85-41e1-9ebc-ca28a0de5e17"
        },
        "item": {
          "id": "bb0c5a01-1216-4081-8922-e6d39d7618eb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a29edc0b-64cc-4144-8d1e-80df450865a5",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f54ce2b-5e6b-43cb-b103-b585fce49bff",
        "cursor": {
          "ref": "692e7caf-bd3c-4736-9057-5b92de65a9f0",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "84c2c408-da95-4c6b-9a10-37a6559de922"
        },
        "item": {
          "id": "7f54ce2b-5e6b-43cb-b103-b585fce49bff",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "516a7b7e-6d26-444a-af83-65c7e02b8ab8",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-10-21T00:33:11.666Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-10-21T00:33:11.666Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2048dca2-b9fd-4fad-945f-6a64947145a8",
        "cursor": {
          "ref": "c1c9ba6b-5899-4991-b2cb-39627c699b32",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2edb5278-0cfe-400c-b2f6-655ebb811870"
        },
        "item": {
          "id": "2048dca2-b9fd-4fad-945f-6a64947145a8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a240e108-a820-437f-a9e7-32f7863cd410",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d07f6c-d9c4-4efe-a5f0-48902e0399bf",
        "cursor": {
          "ref": "ed30e099-a679-4c6a-bac9-6bf224fbe31e",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "47951495-d712-4ef0-8c47-cf9d818fe28f"
        },
        "item": {
          "id": "f1d07f6c-d9c4-4efe-a5f0-48902e0399bf",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7975b732-2986-4830-83bb-6b3846a3b151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef29f5c6-5da0-4421-b7c6-521633d0bf70",
        "cursor": {
          "ref": "910d8da0-7781-458e-ad2a-8babf6562f84",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2df1b902-31f9-4bf2-81a5-d3855f0878b3"
        },
        "item": {
          "id": "ef29f5c6-5da0-4421-b7c6-521633d0bf70",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c0870852-b8b7-42d1-bb9d-44ffbfdc4289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e6f324-c270-4623-88a8-83e0d6d65c93",
        "cursor": {
          "ref": "7bc49231-dfc8-4b2b-873a-23df943c0a76",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "45a210c4-e5f3-4f04-b868-bdc705d040c5"
        },
        "item": {
          "id": "14e6f324-c270-4623-88a8-83e0d6d65c93",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ce746e93-b5b9-4c49-98fd-87e615e7ef4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f83fe9-049b-4977-8fd0-c14dc6151e23",
        "cursor": {
          "ref": "c586ae02-96cf-41c4-9542-b83a6f52f6fb",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "02f66d8d-0a80-4353-b2fa-fdd5318d8190"
        },
        "item": {
          "id": "c4f83fe9-049b-4977-8fd0-c14dc6151e23",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5031ba0b-a4e3-426b-80d0-baea8e4eda00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea6d079-56cd-4188-bc99-f9ec853a72cb",
        "cursor": {
          "ref": "37a1473b-f037-40d8-82e9-fced5331ab38",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "11b68675-b8ff-4157-9d50-085b175c17ce"
        },
        "item": {
          "id": "2ea6d079-56cd-4188-bc99-f9ec853a72cb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c34b6bf9-34fa-414a-b87c-c713c7caa05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5e3703-c984-4b9b-86d4-01292c7381e5",
        "cursor": {
          "ref": "8408ce73-e6bc-4154-a251-9240be1fa4e6",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "96417b55-4faf-4326-83f8-674d5e3f4540"
        },
        "item": {
          "id": "0f5e3703-c984-4b9b-86d4-01292c7381e5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a8f2eb0f-1c93-4386-9bbe-9e76e98fc82f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d15caa-e4aa-4beb-bdbf-da181d76361a",
        "cursor": {
          "ref": "bf1e1a3d-3865-4ca1-a374-48841539adf2",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2f9fd04c-7b82-442c-af06-c5dc4aa0d5ff"
        },
        "item": {
          "id": "28d15caa-e4aa-4beb-bdbf-da181d76361a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b4aea2af-1380-454c-b9c4-07a8cf6e3876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d902dc-5953-4591-8e29-bf4864e2446d",
        "cursor": {
          "ref": "605bafeb-e86d-4ab6-8bcc-b7362ad0e26f",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bcb501d9-b507-4d71-bef8-176e1c0e35a3"
        },
        "item": {
          "id": "22d902dc-5953-4591-8e29-bf4864e2446d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "83d1d11f-f07c-4fe5-9e46-3afbdde1f5a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b89536-b3c8-478e-81d5-264a71021ca9",
        "cursor": {
          "ref": "767ee9a9-18d4-46b1-9a8b-f3676e3338c9",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e35c87f2-a1bc-4f4f-bfce-018601a2c7b7"
        },
        "item": {
          "id": "b0b89536-b3c8-478e-81d5-264a71021ca9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "529ab3c3-7539-43ab-8c9f-475730875020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfacba4c-52fd-49f5-b657-33da1266fdfa",
        "cursor": {
          "ref": "a4991826-1b20-4d77-b7af-d5cb5f44e0df",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ccffa27a-8605-4198-8539-82facae29c13"
        },
        "item": {
          "id": "dfacba4c-52fd-49f5-b657-33da1266fdfa",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9afb8225-5abd-4bfe-b4f1-a1eba1133775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb3f3bb-ff2d-4ec5-b263-1bba5e4c09f2",
        "cursor": {
          "ref": "11ab9d65-724f-4db3-9223-800147256298",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9271c9b0-5137-459a-9bdb-b39fcb4e8dfc"
        },
        "item": {
          "id": "5fb3f3bb-ff2d-4ec5-b263-1bba5e4c09f2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c2a08f58-3646-4824-a30c-275ca194045f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59cf57d6-790f-4668-bc2c-023816622a11",
        "cursor": {
          "ref": "992dc5e4-bd51-4504-b623-fcb34cf90ce6",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8bdf1cc7-efa1-4d46-b497-0f983face23c"
        },
        "item": {
          "id": "59cf57d6-790f-4668-bc2c-023816622a11",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f3a4a143-ed52-4a7e-b4c9-d634e970b018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc34ab6-be49-440f-b78a-5790be3fcc8e",
        "cursor": {
          "ref": "04e0beb4-b7bf-46f4-929a-a9757cab473b",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a84b5d7a-0687-4519-9fec-3ac90775df90"
        },
        "item": {
          "id": "2fc34ab6-be49-440f-b78a-5790be3fcc8e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c7616077-cc44-4cef-9f71-b286d91ffa93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f46af9-3ffb-423b-b53b-53262ac8ae7d",
        "cursor": {
          "ref": "811d537e-763e-41ad-9580-2f1476d91e9f",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c4753b23-663d-44ac-b49e-3b07e3749e98"
        },
        "item": {
          "id": "32f46af9-3ffb-423b-b53b-53262ac8ae7d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "49f9d0bf-ed4d-43a8-a246-85cfe40d4034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8935c93-5c4e-421c-8c3f-804f42bf30d9",
        "cursor": {
          "ref": "84e77619-0c65-40ce-95f4-1ffe780209eb",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7a97a2ba-ac37-48e7-bc0f-5ed63688d256"
        },
        "item": {
          "id": "c8935c93-5c4e-421c-8c3f-804f42bf30d9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "68423fb8-6568-444e-83e7-bf25af8f5f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e4af31-2cdc-4e66-8c53-a8ed0488bbfb",
        "cursor": {
          "ref": "1d957223-e938-41b6-8cab-9feea59465f4",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "297d5bae-3c3b-49d6-be2a-0f59b17f3f4f"
        },
        "item": {
          "id": "33e4af31-2cdc-4e66-8c53-a8ed0488bbfb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e70a2322-2b02-435a-ba8d-665176ca1fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b6a577-1ead-4d1a-8ff7-3992fcafd63c",
        "cursor": {
          "ref": "b1fb7378-664b-4681-9531-95fe35a95e14",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9eb2deba-e7b2-4b77-870b-3a61bd30b3d3"
        },
        "item": {
          "id": "22b6a577-1ead-4d1a-8ff7-3992fcafd63c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f3af07dc-0092-411c-b405-d40e325cf49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e340cc6e-f877-40ca-bbca-32114ad85841",
        "cursor": {
          "ref": "d0d70ef0-62b7-4a20-8e76-b33281546e4b",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6c642f2d-6501-484b-9a26-a5896180e2d4"
        },
        "item": {
          "id": "e340cc6e-f877-40ca-bbca-32114ad85841",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b2cb5ed2-a473-42ba-a311-4b9efca3a14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ca16d4-b064-48a8-aac2-03507e90808e",
        "cursor": {
          "ref": "3f52a5fc-bf86-4c3f-a213-1684f64a0bb6",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0fac0f4e-3bde-4096-8b05-3f3d8218fc9c"
        },
        "item": {
          "id": "50ca16d4-b064-48a8-aac2-03507e90808e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "591de3c1-c2ff-4be8-bcff-27a222e385c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1189463d-9fd7-4a78-9d61-fb986aba248b",
        "cursor": {
          "ref": "d16ccbe8-d99e-4124-bd7c-55a39b7d0592",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d6b4208a-485f-46cd-94ea-6b16896576fc"
        },
        "item": {
          "id": "1189463d-9fd7-4a78-9d61-fb986aba248b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2961096e-3dbc-41aa-90ff-c71b7c795f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb26b6d-4086-4d40-b5f0-05e0a0c227c9",
        "cursor": {
          "ref": "b70e1e7b-d3b1-4415-839a-11ded0af549a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f263ca01-4446-45b5-ab7e-61ffe03b7744"
        },
        "item": {
          "id": "8cb26b6d-4086-4d40-b5f0-05e0a0c227c9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ca95e669-b025-4a17-823d-fd617b520f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976fe0f7-eb80-44bb-92f5-ed12cb8ebbc0",
        "cursor": {
          "ref": "90e28369-b414-4594-8bb0-ae12bb879561",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6961a38c-a2bf-48fe-8e57-e69ba5ca5e05"
        },
        "item": {
          "id": "976fe0f7-eb80-44bb-92f5-ed12cb8ebbc0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fb2836ce-3970-4035-8a98-546a7c4bf7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd12e75-a93e-4f4e-8d85-6761aee755ab",
        "cursor": {
          "ref": "c7e6c668-cc27-4def-bbd3-fa6b9ac3e811",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e149c8eb-e6ba-40bb-85f1-85118ad2e51b"
        },
        "item": {
          "id": "1fd12e75-a93e-4f4e-8d85-6761aee755ab",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4934e699-fabe-40f0-ae1d-ec973ad68753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c10f577-3a69-4985-ac45-5536f743e5e9",
        "cursor": {
          "ref": "e49ec307-f386-4e00-895f-c557c53b1fd8",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ef0dec6f-6843-4b00-ae32-947812c03912"
        },
        "item": {
          "id": "0c10f577-3a69-4985-ac45-5536f743e5e9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d7d55408-eed5-4018-bc04-9943650df6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb4a8b8-e9c3-448d-ab13-c341c150ba55",
        "cursor": {
          "ref": "46c83f08-249f-4e51-ba6d-b943941dbb67",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2220be3b-b09b-4617-ba7e-2ad610c69b5d"
        },
        "item": {
          "id": "beb4a8b8-e9c3-448d-ab13-c341c150ba55",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d16a5350-2bc9-4c47-952e-d8d9c2716aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5f2d81-c233-49ac-b3f2-ea9c10b968e4",
        "cursor": {
          "ref": "e3fc4905-345b-42f9-bcd5-a576c87b4954",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7bf6fef9-dff0-4dea-802d-d1c4510fccab"
        },
        "item": {
          "id": "fc5f2d81-c233-49ac-b3f2-ea9c10b968e4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e8efcef7-13c7-4008-ba39-143a7c737584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6e13cb-208a-41a7-bf81-b7b169cecf8b",
        "cursor": {
          "ref": "b8379ed8-8c3a-4733-bb8f-36875cbaa770",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c45878f2-773b-4c22-9f33-a8dc1a460590"
        },
        "item": {
          "id": "2b6e13cb-208a-41a7-bf81-b7b169cecf8b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "dd1e2ed0-cb13-47b1-b68b-758165a1aec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0157b84f-68d6-4741-acc7-9de741996350",
        "cursor": {
          "ref": "d1ff232a-dd7f-4003-858d-d564a60e240c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f3cb0ce0-0c77-4bca-b3d8-9af0225f716e"
        },
        "item": {
          "id": "0157b84f-68d6-4741-acc7-9de741996350",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "669b2573-f0e0-49bc-b226-6ae677e71205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be8d014e-2888-4450-b418-1049df527049",
        "cursor": {
          "ref": "cadc919e-ec38-41f4-b2c1-fa6cc85d6b67",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "75de1e4a-15cb-4b4f-948e-c2b98b681f37"
        },
        "item": {
          "id": "be8d014e-2888-4450-b418-1049df527049",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7f0f0ffd-88ce-4d01-be07-8a1bc4f08bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639e6c70-265e-4fd4-853d-45e47d96b466",
        "cursor": {
          "ref": "de7b37a8-0656-434d-9ad9-346a0a1fdc20",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f37e0cf0-9fa1-4c1a-934d-808f2c5b91f7"
        },
        "item": {
          "id": "639e6c70-265e-4fd4-853d-45e47d96b466",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d58b93d1-787d-418a-ba30-d68f83016d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546f844f-dcb8-47d9-8321-2723eecc2eb8",
        "cursor": {
          "ref": "8b4711b2-c370-494a-a7e2-ca0fec863ad0",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b6e9374c-38f2-4909-8b19-6bfa521aad4d"
        },
        "item": {
          "id": "546f844f-dcb8-47d9-8321-2723eecc2eb8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e6776b73-114b-46ae-9023-f545cc78fd66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5eaa3b-b78e-4360-acf2-57584556d439",
        "cursor": {
          "ref": "c19b2605-0df3-4996-90bc-78c5f93553a1",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "38718bda-e426-4b4a-8695-cb02fadec8f1"
        },
        "item": {
          "id": "5a5eaa3b-b78e-4360-acf2-57584556d439",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d0290bf3-86a7-4212-9ae9-ddcdd139d4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6e0162-0979-4689-8e96-f735b71892b4",
        "cursor": {
          "ref": "774b0061-e5eb-4c4b-aa08-0f31b9957ae4",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d7cbb74c-5163-4f3f-973d-16d0025dd86d"
        },
        "item": {
          "id": "0a6e0162-0979-4689-8e96-f735b71892b4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7be069d8-7b09-4695-854d-9ea656ff31fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d209b878-e42d-4040-9e9c-3d21ded24cf1",
        "cursor": {
          "ref": "336b5561-1768-47b7-b94a-4dab36f16565",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "049a04df-4c2f-4a47-894a-a782fb415268"
        },
        "item": {
          "id": "d209b878-e42d-4040-9e9c-3d21ded24cf1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a0721da3-4c73-46c7-b5f8-92a5a1d4b805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ffee5b-e5cf-41e0-a960-c3ae999f32d2",
        "cursor": {
          "ref": "459eac4a-01db-4353-9aea-74cc7b15a3b3",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6ba76504-c6c9-416e-92e5-1f65efee1bb8"
        },
        "item": {
          "id": "46ffee5b-e5cf-41e0-a960-c3ae999f32d2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6d354c10-fff6-4991-adb8-a16ec69191cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d2127d-4f44-43f8-880a-9763a346f2df",
        "cursor": {
          "ref": "2d95654a-42b5-4f3a-9b18-df7b6f92ba43",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9fb70366-cea2-4544-844a-6a2cf2bea98d"
        },
        "item": {
          "id": "58d2127d-4f44-43f8-880a-9763a346f2df",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f49c9f68-d736-40ce-b3d2-13412af4dbb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089ae629-8ae0-4f34-9e0b-91522a492f8a",
        "cursor": {
          "ref": "1da70382-54fb-4d95-a1c1-fd77143b8e16",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ff038e1a-b2e8-40c9-861f-7d58944abd5f"
        },
        "item": {
          "id": "089ae629-8ae0-4f34-9e0b-91522a492f8a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e8c996a5-d5ed-4df4-80a8-967abf34af6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24229d47-b309-4ad1-9085-418c03c40703",
        "cursor": {
          "ref": "70fb3583-7c45-4631-98ac-f66a51a21b57",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b8572478-abb5-416c-9693-8d8db337a434"
        },
        "item": {
          "id": "24229d47-b309-4ad1-9085-418c03c40703",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "09672134-ffd6-4e2f-8244-03db7b7e57b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f253c91-bef5-4332-a0ba-01ec37b98078",
        "cursor": {
          "ref": "e49c8009-2f8d-40e2-9214-f9f8a9b6fd80",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ef836efe-15af-4a5f-ac07-f15c4c56538b"
        },
        "item": {
          "id": "2f253c91-bef5-4332-a0ba-01ec37b98078",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4f270ec8-a8a5-4114-a3a0-2979fcaac1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12962ac7-43d8-4497-9eda-ee2f28e484fb",
        "cursor": {
          "ref": "171aea33-219f-48aa-8372-274d69a1d049",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "aba1b65b-7205-4227-b2b3-75f2c8ca4608"
        },
        "item": {
          "id": "12962ac7-43d8-4497-9eda-ee2f28e484fb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "97c18355-2304-42c9-b462-b715e09262d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c93625e-05e7-4e74-9301-f16d4bed5150",
        "cursor": {
          "ref": "747d93e0-e699-4315-af6a-84c6295b9701",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f56e064b-14a9-482a-86f0-79da544b0d50"
        },
        "item": {
          "id": "4c93625e-05e7-4e74-9301-f16d4bed5150",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "36cf2755-d34a-48b2-8c9e-779e0ee0959e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f86bf8-c334-4046-a076-24443fb51f26",
        "cursor": {
          "ref": "2a0d9af9-d86b-4009-883b-bc452da3fa8c",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e6e23367-9718-4cb1-b434-7505c7cc57d5"
        },
        "item": {
          "id": "52f86bf8-c334-4046-a076-24443fb51f26",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f36c0f36-6ace-447f-8f29-77bba98e239c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6e49dc-7f40-493d-b0c6-289f795b58b1",
        "cursor": {
          "ref": "f1e05c21-f265-4d72-97fd-03e2efb98519",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7e3e3a4d-b80d-4a39-993e-60c4e0908868"
        },
        "item": {
          "id": "af6e49dc-7f40-493d-b0c6-289f795b58b1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b8725f46-2ba6-46fa-b0d3-f17311da6555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd19828c-e59c-4cae-a53c-2390fd0aec21",
        "cursor": {
          "ref": "473c1e7c-f588-47b3-8981-96a696b09d63",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a7c6df2b-6e7f-42b6-83bf-40a048ac654e"
        },
        "item": {
          "id": "fd19828c-e59c-4cae-a53c-2390fd0aec21",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0e145075-d906-4e19-ba5b-5fd5818e32f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ff70f0-6a3f-47ac-9ed7-a7749b36f17a",
        "cursor": {
          "ref": "4a549f13-3de5-40cf-8909-90022d51942f",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2f06f6b5-634a-4e74-8d01-70a8ae7a7a13"
        },
        "item": {
          "id": "c2ff70f0-6a3f-47ac-9ed7-a7749b36f17a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "37636f58-36d1-4631-9218-086c232a1c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce79e272-3d94-4cf5-8a8a-8f35910f3452",
        "cursor": {
          "ref": "5e975034-96fd-429e-b4fd-a2a5e065357a",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2cdcbfa6-afbf-4b4d-a42a-f999d39f195e"
        },
        "item": {
          "id": "ce79e272-3d94-4cf5-8a8a-8f35910f3452",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e3bd1149-0033-4cda-8d5e-cf115bcdbcb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f551681a-4c2f-481e-b285-e81a91ddcf0e",
        "cursor": {
          "ref": "d759a3e5-3ea1-439f-8724-1fdbaf341d26",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c35b2b71-6bbc-4802-9ccb-e03595fe3ab7"
        },
        "item": {
          "id": "f551681a-4c2f-481e-b285-e81a91ddcf0e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9e2d8b5c-4f0e-4e59-87cb-78fcbf5f8e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc40649-d1f0-4c26-999f-bd3eb533ba46",
        "cursor": {
          "ref": "194960ff-73fd-4a34-9e9a-48fbee9323cd",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c734e73c-943a-4b9e-89b9-33f82d0e2f95"
        },
        "item": {
          "id": "bdc40649-d1f0-4c26-999f-bd3eb533ba46",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "45e64b16-2a14-4703-9ba0-64d12dc6fdb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753fa77f-f667-4c7e-b1d6-ec7b01a68564",
        "cursor": {
          "ref": "4cd44cf9-ffe2-47c8-81b0-b3a1f208612c",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7b844a8b-d0ea-4c1a-9133-303a18ebd465"
        },
        "item": {
          "id": "753fa77f-f667-4c7e-b1d6-ec7b01a68564",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4925cb36-4a54-4954-ba73-0684cd79f04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6703246-c1d1-42c9-a434-39ef9b5bc14c",
        "cursor": {
          "ref": "3fad2ea0-d4c0-4117-9b8d-924ab164af3e",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "018e975e-0e34-445a-a7cd-0a429ee63283"
        },
        "item": {
          "id": "e6703246-c1d1-42c9-a434-39ef9b5bc14c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ed81c37a-38e0-4d4f-a389-61e2329193be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f854d77c-f362-47c0-b0ab-364651e58189",
        "cursor": {
          "ref": "8306f06b-21e6-4375-a6c8-ad67a153006a",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "cd3f82f9-0a74-4bcd-acb9-968582e31ed5"
        },
        "item": {
          "id": "f854d77c-f362-47c0-b0ab-364651e58189",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4f41bd4a-c365-499c-9305-e7f35e169ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5410e5-0e66-44f0-aa22-50cabaf36a0b",
        "cursor": {
          "ref": "1940f7f1-6fc8-4ea1-930f-f9f5ded555ba",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b48525ae-5f97-44f9-b281-5f78df14ac14"
        },
        "item": {
          "id": "ca5410e5-0e66-44f0-aa22-50cabaf36a0b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5361b344-7096-4064-8990-4e078a29a7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec4977d-4563-48ea-bcc1-d07c7946c212",
        "cursor": {
          "ref": "66152f78-b388-4300-89a8-a5702c801ddc",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6766903d-1c99-40d3-a71d-0490da82e47c"
        },
        "item": {
          "id": "fec4977d-4563-48ea-bcc1-d07c7946c212",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d04c1674-05fb-4b55-b3a4-a2306c33fad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b045abd-285d-43b5-80b3-f67855318213",
        "cursor": {
          "ref": "376f3b49-82fe-4ce1-b7fa-526f70fc51b8",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "48166e13-7aa2-4f4d-bfa6-c52a12609ded"
        },
        "item": {
          "id": "8b045abd-285d-43b5-80b3-f67855318213",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fe507601-6ef9-4bc1-a40c-731429a19814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee993043-11ad-4457-bd45-1c22a63667b0",
        "cursor": {
          "ref": "3898b942-6e61-4b34-a52f-b416e827e2d6",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a5ba37ff-ed89-4e49-b95d-8f6567052317"
        },
        "item": {
          "id": "ee993043-11ad-4457-bd45-1c22a63667b0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5e5d14fd-bc94-48ab-96c9-c411208f4de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec69d150-9d61-4eef-bf62-d68d7ff154d7",
        "cursor": {
          "ref": "2e6e0320-4f45-42d7-8bc6-ecad6fe96ea4",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c1f1cfdb-2bc8-426a-8ff1-22875dee5842"
        },
        "item": {
          "id": "ec69d150-9d61-4eef-bf62-d68d7ff154d7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d022204d-a872-4b40-a2e9-5d88b895ebc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4534b5-dfd3-44e2-99de-3ee98b33eee1",
        "cursor": {
          "ref": "3ff3aa5c-e3c9-4c73-933c-0048653b9691",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ff4c617d-7c5e-4ff2-a5d3-7d8e3ec68560"
        },
        "item": {
          "id": "9c4534b5-dfd3-44e2-99de-3ee98b33eee1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cdbe6451-c54b-44b5-98b9-a2b4a87ebc86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e9efba8-501e-4299-9196-deccd0f9def5",
        "cursor": {
          "ref": "3f50d344-412c-476c-b92d-36c13ebb3414",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "06ef390d-2451-461a-a274-53000abcad05"
        },
        "item": {
          "id": "3e9efba8-501e-4299-9196-deccd0f9def5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c50a3e89-e076-4b27-bbf4-8171319e2daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57da41e7-6d26-465e-8354-ec98ddd75169",
        "cursor": {
          "ref": "f21a3bf5-3ee5-495c-8163-14375e95e2b6",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1eff52c4-c5b1-435e-a2d0-5e6af4dc88e6"
        },
        "item": {
          "id": "57da41e7-6d26-465e-8354-ec98ddd75169",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2af43567-7e79-4ab9-875a-670fc356bd0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9fb652-dd2f-4901-9eae-9624c34f2425",
        "cursor": {
          "ref": "1ba4d1cf-0cb3-4c6c-9bbb-332057d69d94",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ae3b7540-c1b1-4645-a632-9d37a3c71a16"
        },
        "item": {
          "id": "ef9fb652-dd2f-4901-9eae-9624c34f2425",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "67ce8130-ea87-4854-b0ce-e217d998fbe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9806a221-9cf2-46d5-87c6-9b586bc4ae60",
        "cursor": {
          "ref": "a6387828-0982-4165-b456-146bf2026fc9",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2140a1a8-879e-4d4f-8cf5-b44bd37b3bd0"
        },
        "item": {
          "id": "9806a221-9cf2-46d5-87c6-9b586bc4ae60",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "de469812-666c-4a77-b94d-bb7fe41898a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c792946d-930c-452e-9ddb-d1abe57d43c9",
        "cursor": {
          "ref": "291fb065-4c11-4db3-9408-e99ac7514a12",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "94482128-5e81-49d5-a4e3-17bf7db80b52"
        },
        "item": {
          "id": "c792946d-930c-452e-9ddb-d1abe57d43c9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "514dd985-0513-42bd-ae11-92c5f7caca81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7073f13-ad15-4f98-934a-83330b62c381",
        "cursor": {
          "ref": "1a8825d5-eb8a-49dd-8ce1-e21927d5ef0d",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3ed2203f-89c9-4d8e-865b-01aeb9414de6"
        },
        "item": {
          "id": "c7073f13-ad15-4f98-934a-83330b62c381",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2d890190-0fc5-448a-9fc5-42ef0d001e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e50b62c-28c1-4030-b412-7f561d0a4e3a",
        "cursor": {
          "ref": "f6e83832-20e6-4476-846c-ecec9e0ec0d3",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "582c3870-3180-4632-ad31-3bff4b1a2c3a"
        },
        "item": {
          "id": "1e50b62c-28c1-4030-b412-7f561d0a4e3a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4a20a2a1-f7c5-40cc-9b7a-9e2cbca2a3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f0a9ee1-4699-486f-aa92-abe5c106208a",
        "cursor": {
          "ref": "15382fcf-0540-4b4d-9c47-3b880d9e4c9e",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5593a26d-a168-4768-b083-38b379335a2a"
        },
        "item": {
          "id": "2f0a9ee1-4699-486f-aa92-abe5c106208a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d8977610-bdf9-47b7-94b9-a57a7b3dd10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e2076a-a05a-4ad4-8003-f3d70e8e4ecd",
        "cursor": {
          "ref": "37253b32-87fa-44f8-9ed9-0d5133eccbb7",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "76cc8491-071b-4a03-9734-07b1368d164f"
        },
        "item": {
          "id": "f8e2076a-a05a-4ad4-8003-f3d70e8e4ecd",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9d195d50-9834-4748-a784-ca4ac115cda5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61dce485-c019-4550-95d9-c62e6b816c9a",
        "cursor": {
          "ref": "849f4617-824c-4f59-8186-864c177f88e0",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a95c497b-f57e-4dbf-9409-e13fdbccaff7"
        },
        "item": {
          "id": "61dce485-c019-4550-95d9-c62e6b816c9a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "81693e1c-fd6e-472e-bec8-7705e3c7a718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca5975a-62a9-4483-a38c-a909021eeef6",
        "cursor": {
          "ref": "2d4e459f-532e-4475-b5f9-23b21841ab3d",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "39d4fe26-81b9-43d1-aa3a-6a1304862be9"
        },
        "item": {
          "id": "eca5975a-62a9-4483-a38c-a909021eeef6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "fbff222f-99e0-4f18-99f2-134c5c9cd4cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943fd9aa-ceab-44bb-b812-877fc0fd0c92",
        "cursor": {
          "ref": "199fdbf3-d497-4390-afb7-000adc3bfe77",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "37f76ab9-d5c4-4f2c-a374-975622957c5e"
        },
        "item": {
          "id": "943fd9aa-ceab-44bb-b812-877fc0fd0c92",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "effa51bd-129e-4041-8135-875670821097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13766463-8f09-402f-af8b-63cad7428a5a",
        "cursor": {
          "ref": "969f43b0-b475-4dab-b5cd-c6058edc4302",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "410176b4-eeb4-4676-bf29-2325f55dde43"
        },
        "item": {
          "id": "13766463-8f09-402f-af8b-63cad7428a5a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "cc916f07-2044-4848-9f3e-babde02898f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49003f68-8b5a-4abc-a0ba-3f0763134fea",
        "cursor": {
          "ref": "1cb41bf8-416a-4253-8397-0fcb998fa7d0",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cb2a52e4-ac40-42e5-b476-f7426607dd1e"
        },
        "item": {
          "id": "49003f68-8b5a-4abc-a0ba-3f0763134fea",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3496cdd1-e929-4fc0-ae8c-2e227d459457",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aee2fbb-6154-486b-a5da-4298b25ef5b3",
        "cursor": {
          "ref": "802b5805-75b2-46d2-9cba-e88d1770a374",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cdce7852-6ef0-419b-81b5-82bd2fac6d58"
        },
        "item": {
          "id": "3aee2fbb-6154-486b-a5da-4298b25ef5b3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9ded5c41-18cd-4f96-acf3-bedecdcb8bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5dd6bf-3fcb-4e0b-ac59-78c46b85303d",
        "cursor": {
          "ref": "166f13c8-aaa0-4676-8ed6-4bcef9028b8b",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "57e0ecb5-e920-4857-a390-285678bf07d8"
        },
        "item": {
          "id": "5d5dd6bf-3fcb-4e0b-ac59-78c46b85303d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "feb98073-1ef8-4d07-8480-5e41c9329ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdf8c45-d51c-4f7a-a632-97f446284122",
        "cursor": {
          "ref": "35e8f09e-ca50-40cb-9cb9-a5b2ed2e62e3",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2864cb02-cd94-405c-bbb9-9776d0c53ad6"
        },
        "item": {
          "id": "5fdf8c45-d51c-4f7a-a632-97f446284122",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c56e1367-05a1-4125-9218-86ec7396a38f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faef89ac-ac70-4ab0-8a6b-c5156cfe4b9b",
        "cursor": {
          "ref": "722adc8c-d0b6-4efe-a22d-3f5b1caa18c0",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b0031d8b-0092-4bd5-9d87-90ae2c5ce490"
        },
        "item": {
          "id": "faef89ac-ac70-4ab0-8a6b-c5156cfe4b9b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ecaa8ed9-b019-4104-9e87-d2581acd28a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7fe559-a001-4fe0-930d-7ba8779dd656",
        "cursor": {
          "ref": "5887c32f-e6bf-4b88-af72-762986edae9a",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9dc16eea-e04c-402a-86b2-816c4fe97e69"
        },
        "item": {
          "id": "ef7fe559-a001-4fe0-930d-7ba8779dd656",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "71310a15-ba33-4cb7-8df9-d831ecbe1e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9862aa-ac4d-45d9-9326-565fba9c80cd",
        "cursor": {
          "ref": "08d1ed9a-4f69-49f9-a594-659b9b53e4b0",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8b80f808-43cf-449d-a486-9e41ad7b36e7"
        },
        "item": {
          "id": "1a9862aa-ac4d-45d9-9326-565fba9c80cd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7f2c19a2-28e3-40df-beca-23f5b331ee43",
          "status": "OK",
          "code": 200,
          "responseTime": 187,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "1ba3f110-855d-442d-b46a-9f6c949baa98",
        "cursor": {
          "ref": "951c16e8-955e-49c0-81ac-805707434ef9",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5228ef03-0da1-4cab-ac61-84fec949eb7c"
        },
        "item": {
          "id": "1ba3f110-855d-442d-b46a-9f6c949baa98",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b45ca4c4-50ca-4a87-adb1-e9f57156d12c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d09e9d8-dc05-4dd0-8445-f02a017565ff",
        "cursor": {
          "ref": "b11310ba-79ef-4fd9-9559-4a1124455901",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7cee52da-c480-4f59-a9a2-afbfeacea86b"
        },
        "item": {
          "id": "5d09e9d8-dc05-4dd0-8445-f02a017565ff",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ebc0ee7a-ef34-4919-9cb7-c9dffd4f825a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821169b1-1294-45c8-8ed2-bf14af0fed7d",
        "cursor": {
          "ref": "19e7a6dd-f5d8-4967-a0c0-07bcb4fc5bd6",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ff0c92bd-e4bc-47a7-89c1-9c1b03de4711"
        },
        "item": {
          "id": "821169b1-1294-45c8-8ed2-bf14af0fed7d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "28f04ab1-2fb4-493a-a58f-35ae3c901ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e150d5-ebc9-402a-9c4c-cea3ead6ee75",
        "cursor": {
          "ref": "19b8b6fd-2025-4e3f-9664-bb27ca583a64",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "05f09d60-48a6-4a18-b90d-52af905efc0d"
        },
        "item": {
          "id": "c8e150d5-ebc9-402a-9c4c-cea3ead6ee75",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a825efb1-434c-4ce9-a7f7-2af5c8f91189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb7b7b3-b13e-4a63-a0e8-2d0e222358c8",
        "cursor": {
          "ref": "38df4c77-94bb-4d12-b189-8a15b94f84a6",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "35298558-ac4a-4cc3-9d48-63e816e8c0f2"
        },
        "item": {
          "id": "9bb7b7b3-b13e-4a63-a0e8-2d0e222358c8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e874f271-e33c-4eb8-a430-f8a1df7b086a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d568154-aabb-4fae-b791-1cc24bb481f0",
        "cursor": {
          "ref": "e0df7eef-f10f-4df2-977c-8ff1d6c6e11d",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1e0fee99-4861-4a70-aa52-554dc811440b"
        },
        "item": {
          "id": "4d568154-aabb-4fae-b791-1cc24bb481f0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e5554c3a-9c7d-463a-b893-b3308a0608f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cea577f-1678-4f3e-a3e4-3e6c8df89715",
        "cursor": {
          "ref": "462f2fb6-d698-4dba-9a36-f0ed2b587077",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d73f4f43-ad98-4a94-934c-91c699ebb65a"
        },
        "item": {
          "id": "1cea577f-1678-4f3e-a3e4-3e6c8df89715",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f6ffb4c9-8e96-450e-8b66-2f4c0fd21672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a31b23-3b7c-45b7-9dc3-227c6123cf61",
        "cursor": {
          "ref": "0f6fe3bc-78a5-411b-ac1e-65e6387074a2",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "79c17ecf-e75c-4dc0-8c3a-5d80e11c411b"
        },
        "item": {
          "id": "f1a31b23-3b7c-45b7-9dc3-227c6123cf61",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "4261c6f4-98c9-4584-9767-5afe1f46724e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740927e5-ff73-4c77-9611-131138afd4e0",
        "cursor": {
          "ref": "a3363946-09ce-4c28-945f-3ca596789f97",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4e1cf4cb-3662-4169-b547-cc81a7f53fed"
        },
        "item": {
          "id": "740927e5-ff73-4c77-9611-131138afd4e0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "eeb3f982-87fe-4f27-b0a1-6c8d850ecc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c257a9f-9191-44ce-958f-88e6b926f1b1",
        "cursor": {
          "ref": "b9cfeb01-47a7-46b1-b30c-6a0dd4eea360",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6acd04eb-dd61-4fca-b5d8-d85448da7fcb"
        },
        "item": {
          "id": "0c257a9f-9191-44ce-958f-88e6b926f1b1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5a2cd86a-8cf3-42fd-bbb7-903728d49a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a188db-8ffd-4fe4-8b44-49182e8e707a",
        "cursor": {
          "ref": "f8f8b039-adc9-4880-9f26-6d568e6f32df",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1acf9b36-8e4b-49b5-9889-9c81a2b23a4c"
        },
        "item": {
          "id": "08a188db-8ffd-4fe4-8b44-49182e8e707a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f470810c-6f1b-4a8b-90cb-b8f51d990e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c963ac-02f7-44fd-894f-6eb6cb2f5cdd",
        "cursor": {
          "ref": "df14eba3-026d-400e-8e62-49760a918035",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ee01a32c-48af-41fe-a3cb-5d34ba5d49b0"
        },
        "item": {
          "id": "04c963ac-02f7-44fd-894f-6eb6cb2f5cdd",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "05fc6fe0-360f-4bc4-a70f-892a15c27ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d305c2e7-5714-4c63-ab6b-2c3fae216cf9",
        "cursor": {
          "ref": "e77cae16-8afa-431e-80f4-80ef70c1951a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8e1d0273-b4c7-4e4a-adbd-8b33f506f999"
        },
        "item": {
          "id": "d305c2e7-5714-4c63-ab6b-2c3fae216cf9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "20e8a31e-d622-48a2-b209-b1da1937ead6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a3ca83-b63b-4235-b4ed-60b727001079",
        "cursor": {
          "ref": "e76adcf9-0981-444b-8ce2-787149682e61",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "14698b99-6429-4887-be6f-43f8318d19ff"
        },
        "item": {
          "id": "39a3ca83-b63b-4235-b4ed-60b727001079",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6ea722a5-5048-4413-a24f-629abe4153a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117f62ef-bf97-4700-bdf7-fd87531778e2",
        "cursor": {
          "ref": "9791d22a-b0b8-4b6a-8262-e0be8f9c9387",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2cb04c39-a6b0-46c2-81a0-8d1ac498d439"
        },
        "item": {
          "id": "117f62ef-bf97-4700-bdf7-fd87531778e2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9dcff692-e0b9-44fc-96ea-bbe5ee87fb1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c0d504-a1c5-44fb-8337-5801e464699b",
        "cursor": {
          "ref": "0d378113-39c9-4638-b430-ef20007d8cf8",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f36cb2aa-2f16-48f2-b019-f9d70875495d"
        },
        "item": {
          "id": "d0c0d504-a1c5-44fb-8337-5801e464699b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "357661ad-d28c-495e-add3-45a7bce84b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294ca81e-0486-4fd6-afdc-da9c34e541bd",
        "cursor": {
          "ref": "d587214b-3497-4063-a8ff-147b001e0720",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fb1cfbcd-e0dd-4b15-808a-52596f28dda9"
        },
        "item": {
          "id": "294ca81e-0486-4fd6-afdc-da9c34e541bd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "087345b1-67b7-4cde-9636-920eafa2f1e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a567eb1d-0498-4a19-871e-aee4ddfb8355",
        "cursor": {
          "ref": "f0703c96-7596-4268-81d5-814bc31a2f7c",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "927c4932-cf14-4a63-ab7a-85c6330598b2"
        },
        "item": {
          "id": "a567eb1d-0498-4a19-871e-aee4ddfb8355",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f7d79689-959f-4f8e-908b-c4d843bea3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79342e4-8505-49d8-b6d8-b5ef2e53a860",
        "cursor": {
          "ref": "3c9f35c3-a104-4943-b0bf-829c15eae0f4",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1ab44978-a59d-475c-a53a-f0d62dffb83d"
        },
        "item": {
          "id": "f79342e4-8505-49d8-b6d8-b5ef2e53a860",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "02da193d-164b-4b8f-afa1-95a8bc06f13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ab172c-02be-47c6-869c-75df268e1cb0",
        "cursor": {
          "ref": "4f2726b2-a101-4951-90f6-606368fc0f9a",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fd207c11-c999-4884-8f95-e9512cb44c35"
        },
        "item": {
          "id": "b5ab172c-02be-47c6-869c-75df268e1cb0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "961b7058-fc34-424c-a628-932f5412b48c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e81bf20-025d-4944-9ae3-cf277ed13d03",
        "cursor": {
          "ref": "263b9312-f35f-48ff-9548-825795940399",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f502a49e-80cb-4f2f-afbf-ef8279a780aa"
        },
        "item": {
          "id": "2e81bf20-025d-4944-9ae3-cf277ed13d03",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bb6711db-ac60-432b-a095-771a5527dafa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69d3494-3f05-4551-af06-9a8ee131b8fd",
        "cursor": {
          "ref": "f2bf0f23-e298-4312-af9b-cb4f08629b14",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a3b507bd-49f1-42b7-b743-03d7b945b801"
        },
        "item": {
          "id": "f69d3494-3f05-4551-af06-9a8ee131b8fd",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "81922882-9584-4248-9eb2-0179efc16178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dadc74e7-3b99-45a6-974c-3f70793c7f78",
        "cursor": {
          "ref": "47f6e733-c4bd-4410-aad7-2f1348f1c070",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2bc592a5-9bb6-42e0-84ed-5087641be06e"
        },
        "item": {
          "id": "dadc74e7-3b99-45a6-974c-3f70793c7f78",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5aadb0d5-b120-4633-af0e-dcea2cbc9a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77951e2-193f-40e7-ab57-80d45e5e8698",
        "cursor": {
          "ref": "89cc7f58-968e-463b-a8cb-b64bfd00c5b1",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9c69fffb-50d3-4bbf-8a52-cae8c6b47160"
        },
        "item": {
          "id": "e77951e2-193f-40e7-ab57-80d45e5e8698",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1a59560f-b033-4de5-9cb2-4a27970a276c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2353b1be-59a5-48a6-9146-8dde995f462b",
        "cursor": {
          "ref": "f1ce67fb-ce66-4ebf-b505-843105b9dc57",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e9b95148-e244-4bb4-b2e0-6b97ef94206e"
        },
        "item": {
          "id": "2353b1be-59a5-48a6-9146-8dde995f462b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0172f4fd-17f0-40ae-832c-930f5f7c24ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff64fbf7-dd26-473f-ae09-921ff7e9b33d",
        "cursor": {
          "ref": "49b4bb2d-4613-4a3e-97ef-9de63002da1b",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "caf37790-9094-4f6e-80ad-f057b31cb13c"
        },
        "item": {
          "id": "ff64fbf7-dd26-473f-ae09-921ff7e9b33d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3bf76f0b-681e-4a4e-8fa0-2b69497c3d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07d0dc0-b234-4e92-8759-b178de2c1683",
        "cursor": {
          "ref": "7d971f05-84ef-4a3a-8c24-e9811af8343b",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5cf3cd68-0be7-4780-bff2-642c8f5ac885"
        },
        "item": {
          "id": "b07d0dc0-b234-4e92-8759-b178de2c1683",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "505ebaed-1ce1-4e38-b9b9-d35717ca9b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85191df2-27dc-4c73-a607-d8327e3c0c5f",
        "cursor": {
          "ref": "d763bf13-0b94-43ae-9da4-9c824f9444cb",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6f9b5194-d05a-4e8d-9398-a75f45805e64"
        },
        "item": {
          "id": "85191df2-27dc-4c73-a607-d8327e3c0c5f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "004209d5-cde8-4ec7-b817-664b432e618d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587ec76d-6a31-46fa-8d1e-619634f2c98d",
        "cursor": {
          "ref": "f5c00360-3d2d-44a9-8445-f24a3a3eb2e4",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3c61249e-3fe5-4114-b1d4-b2cc5300ff27"
        },
        "item": {
          "id": "587ec76d-6a31-46fa-8d1e-619634f2c98d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "3537c7fd-e6c9-4c3c-ac33-f690b7df6bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f606e0db-2998-4a2a-afb1-56c5bad5d9de",
        "cursor": {
          "ref": "54fe4a55-3adf-4288-a4b7-e9d21d8bea33",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "241d9ae7-563c-4b8d-959b-5302c0c439c2"
        },
        "item": {
          "id": "f606e0db-2998-4a2a-afb1-56c5bad5d9de",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "32d72e95-ce9b-41c4-802e-1cb1fa2d75e6",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "6068d578-efd4-4140-bc6a-770e301afac2",
        "cursor": {
          "ref": "3ec1dfa1-6956-4011-a7d5-394a33c9db28",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1510a5a6-2873-443e-8d6e-55e397284380"
        },
        "item": {
          "id": "6068d578-efd4-4140-bc6a-770e301afac2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "514d6bb7-6655-40c0-8ead-f9bb1c69014e",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "9d618f12-c7fe-4ec4-a4eb-81e7f152ad6e",
        "cursor": {
          "ref": "7f9abbd4-5c7c-468f-9220-d6f5a01895cb",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fa59115b-ad6b-4661-865e-f147c9455e4c"
        },
        "item": {
          "id": "9d618f12-c7fe-4ec4-a4eb-81e7f152ad6e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f5b2557d-185b-48f3-a769-f16d0fed6b55",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "64d8e286-b208-42cb-8da7-1ce3dce0588e",
        "cursor": {
          "ref": "56befe7b-0173-4efc-80ba-a4ef722b45b9",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "836df7a1-983b-48b1-adcc-26d69252d717"
        },
        "item": {
          "id": "64d8e286-b208-42cb-8da7-1ce3dce0588e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4c72bf76-7fc5-405e-9b8a-f4440e707028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e85b762-62c6-4448-be65-de113509e798",
        "cursor": {
          "ref": "95b1673d-71b0-42b3-8c9a-109b74230846",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9f5aa828-3b80-4609-b754-808d78d7fdcd"
        },
        "item": {
          "id": "5e85b762-62c6-4448-be65-de113509e798",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6f5e826e-dcaa-402c-91e8-7c1e5c524f6c",
          "status": "OK",
          "code": 200,
          "responseTime": 176,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c32d3a33-a14d-4009-8296-749a5c488af4",
        "cursor": {
          "ref": "ac52548c-a5e4-4313-88cf-835c8a0132ba",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8ea39dd4-142d-4be5-9361-c2805f0c8aa2"
        },
        "item": {
          "id": "c32d3a33-a14d-4009-8296-749a5c488af4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "401e31e1-1048-4a2f-8e0b-4726895ab284",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4242fa4d-8a0f-44f0-a31e-e5ec678571ef",
        "cursor": {
          "ref": "b52c2099-6f88-4742-8fb9-a820637f88cf",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "89712aaa-18a7-4c08-8cd8-83bb65af84e7"
        },
        "item": {
          "id": "4242fa4d-8a0f-44f0-a31e-e5ec678571ef",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4e5b6de9-4498-46f7-8d0d-041761c17703",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "79dcfd8a-6048-497f-a0e6-81da0e823795",
        "cursor": {
          "ref": "9a1c1b16-76f4-4444-b929-671dc722fbcf",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "95b8dba5-312b-4271-999d-44437ad205e3"
        },
        "item": {
          "id": "79dcfd8a-6048-497f-a0e6-81da0e823795",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "899f59c3-fb79-406f-b50d-988d2fc2c3a2",
          "status": "OK",
          "code": 200,
          "responseTime": 296,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "bd524ea7-ae47-48ca-b76f-61eeb30e2dc3",
        "cursor": {
          "ref": "ffffceae-2f6e-40d8-b355-4071e9915df3",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "312d24b9-b742-4efb-8449-e009a8829960"
        },
        "item": {
          "id": "bd524ea7-ae47-48ca-b76f-61eeb30e2dc3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fcb69fd0-8c54-49c9-99d5-26460a24d913",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "8d1f0357-2cdb-4493-9790-347795bf0299",
        "cursor": {
          "ref": "b8ca946e-13bb-4fd0-be09-c609e1de231d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "572fdd3b-6e82-4148-8fe0-a506fd7a9eb6"
        },
        "item": {
          "id": "8d1f0357-2cdb-4493-9790-347795bf0299",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3e6f5ed8-e578-40c5-b849-22aae5e63b21",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "10a79c78-7437-4a8c-8a6a-88a748bf531d",
        "cursor": {
          "ref": "5a7fdc2f-4453-4f4c-ad1f-886d9c87691c",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d9532ae1-a08f-4e66-a418-95049e3978b2"
        },
        "item": {
          "id": "10a79c78-7437-4a8c-8a6a-88a748bf531d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "50f9c061-a2d4-445a-849a-d17a15792c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405bc6c8-4797-4945-9c17-3366d15163c9",
        "cursor": {
          "ref": "2383fff4-8d27-4e58-967e-40d0ac67b388",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ffa01b73-82f0-4211-b17f-1a87a22ee85b"
        },
        "item": {
          "id": "405bc6c8-4797-4945-9c17-3366d15163c9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0e4dc58c-59e4-4842-9f5c-600537b7c132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634ab9fc-f6ce-4be0-bac6-a35184df6987",
        "cursor": {
          "ref": "a0049acc-6265-4497-8605-1b13305ffb53",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cdbff00d-8275-4395-836c-067539296640"
        },
        "item": {
          "id": "634ab9fc-f6ce-4be0-bac6-a35184df6987",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "30206e95-cb60-4940-95c1-e227d8bdff75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd9fd98-bb1c-4fd3-b942-f7d05c44309c",
        "cursor": {
          "ref": "82f70828-d767-473a-9ab6-4f348ac7735b",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4c18fb65-1922-42cb-b56e-03a40417b610"
        },
        "item": {
          "id": "ecd9fd98-bb1c-4fd3-b942-f7d05c44309c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f1e0b949-644d-4690-984d-5c4327baab43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f501cff-f7b9-4b17-9a56-7b53b47552cc",
        "cursor": {
          "ref": "ae1a80ca-a2da-4397-995b-ad361ee92c5a",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "45231c79-edda-4f6f-bcc7-efef627ef74d"
        },
        "item": {
          "id": "7f501cff-f7b9-4b17-9a56-7b53b47552cc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ac9245a3-5c17-466a-b02b-5869e451d2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19adfc37-fa0e-46c6-9ccb-3e1c291551c1",
        "cursor": {
          "ref": "3e03f801-c103-4897-a632-258de6472ef3",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b85c9d98-fc52-4b36-93d4-41101181bf13"
        },
        "item": {
          "id": "19adfc37-fa0e-46c6-9ccb-3e1c291551c1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "931b1c31-1546-4642-a54c-456987981cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae0babe-7d0d-470c-a7ef-03f7c47c33db",
        "cursor": {
          "ref": "1fa93571-118d-435a-846e-8ea624aa2f3f",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c8bc1fab-f105-484a-ae5d-2731e2370960"
        },
        "item": {
          "id": "9ae0babe-7d0d-470c-a7ef-03f7c47c33db",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9edce829-da5d-44c8-8048-d004c1954f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285e788d-0427-461c-b89e-192e1d0fd65a",
        "cursor": {
          "ref": "1a4fa895-8ed6-4fe7-8cfc-b46651452b31",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f1060b39-aeef-4275-a5c8-5b53c9119014"
        },
        "item": {
          "id": "285e788d-0427-461c-b89e-192e1d0fd65a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a04c5fd4-afde-48e2-8791-1c035dfd6c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e8d46c-6f88-43ef-abe2-7b9970c9b752",
        "cursor": {
          "ref": "55d7649e-4432-4453-9236-a38bbfde4d36",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "62f1c2b5-027a-4cac-a398-aff3a15ca039"
        },
        "item": {
          "id": "73e8d46c-6f88-43ef-abe2-7b9970c9b752",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6373e70d-42f1-4ebf-addc-f48f43dddad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01601118-ea70-4301-a764-5c48ed0d483d",
        "cursor": {
          "ref": "5e2267c1-86f0-4266-b62d-55543f0222c5",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1f356011-e6f2-43ca-a145-e9de82f2e616"
        },
        "item": {
          "id": "01601118-ea70-4301-a764-5c48ed0d483d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e2d6cd11-6ae4-4199-8569-8d55401ea8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1ad195-53fa-46d3-851a-9698234197ec",
        "cursor": {
          "ref": "d4f28ec7-4c38-45b3-98af-d285362dcb0d",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c9ab264f-373c-4057-b3fe-f5b10f8ac7f2"
        },
        "item": {
          "id": "3c1ad195-53fa-46d3-851a-9698234197ec",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "39e7b152-6192-42f9-a85a-622a915b30b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57b185d-1a61-4253-8d38-cea2149a1a10",
        "cursor": {
          "ref": "47fc9817-ac36-415b-a90e-f9970bf2fe68",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "02a87993-2097-404b-8f52-a9fe7f0fc727"
        },
        "item": {
          "id": "c57b185d-1a61-4253-8d38-cea2149a1a10",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1f9e773e-8cbe-4eb7-b618-d7dcb3104b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3adc13f-57b0-4c42-83d3-07f1f9d572e5",
        "cursor": {
          "ref": "4e5560b9-6d89-49c9-a420-8686b823ef95",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b9ed1c69-0932-438d-9427-e39bff9fd184"
        },
        "item": {
          "id": "b3adc13f-57b0-4c42-83d3-07f1f9d572e5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "337e6978-d2fa-4713-9722-c7c538321123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3960a9c0-c58f-4206-b06e-1b87fc3fa4fd",
        "cursor": {
          "ref": "08a8b24a-2b3a-4d4e-ad4d-bb0da2e20618",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b0ef392e-e4d4-47ec-8189-d817d4e3c176"
        },
        "item": {
          "id": "3960a9c0-c58f-4206-b06e-1b87fc3fa4fd",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "55a54365-5b49-4b67-ada3-f90582926121",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7a45416c-212c-41b5-98d3-8219ef2ed6a0",
        "cursor": {
          "ref": "eb5ddee9-0821-4f84-bb2e-68490d19afd1",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a11da759-1c0f-4e5c-b443-ac80db3a8bd3"
        },
        "item": {
          "id": "7a45416c-212c-41b5-98d3-8219ef2ed6a0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8e564f3a-4c77-4391-a132-76c781d547c0",
          "status": "OK",
          "code": 200,
          "responseTime": 245,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "5a9a58dc-b2a5-46d1-932f-24e622c0aba7",
        "cursor": {
          "ref": "dbaa3dc5-c18c-4f51-8e91-df6eda77b508",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8ca5947f-9320-414c-93a1-8cc2809a8fc7"
        },
        "item": {
          "id": "5a9a58dc-b2a5-46d1-932f-24e622c0aba7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3c1a266e-fea8-4526-bb98-611c5f7090a1",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c108696a-ea0d-4c16-80f3-254be1bf70ee",
        "cursor": {
          "ref": "589df985-5376-4433-83e4-2d60146ccc71",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "49af295b-06c6-4fd4-b234-a19b3955f6f4"
        },
        "item": {
          "id": "c108696a-ea0d-4c16-80f3-254be1bf70ee",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "85b526ab-c7f7-4aac-8636-3254cb4b2046",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ebd74756-46ee-4273-9059-bc2c2e499072",
        "cursor": {
          "ref": "ce9425c7-7f44-49fb-945b-5b0b8b36f25b",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8143565c-3601-4758-90df-9817cc4e60e1"
        },
        "item": {
          "id": "ebd74756-46ee-4273-9059-bc2c2e499072",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3cf41b12-fcb7-498d-a2ad-53fda71b8327",
          "status": "OK",
          "code": 200,
          "responseTime": 467,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "dea18fa4-9dc6-441f-92a8-aa8a2a8438f1",
        "cursor": {
          "ref": "8ce68598-47e7-4ce4-8139-2c9c59b34ea9",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "98931203-ada4-40dc-9e08-c6ba205a1094"
        },
        "item": {
          "id": "dea18fa4-9dc6-441f-92a8-aa8a2a8438f1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b84495c1-469a-483f-9596-d148039b3795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eacec2a-9178-4e7c-b56a-a77b9da34a63",
        "cursor": {
          "ref": "7e259b68-c684-44e0-a9e2-b1d58b10a27e",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b89ce2c4-e797-4c01-886d-95350c851ba8"
        },
        "item": {
          "id": "8eacec2a-9178-4e7c-b56a-a77b9da34a63",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b7cba98e-4ce6-4e80-b4b9-273dfb9618b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4fa24c-0cc9-4687-89e7-8323e117eea8",
        "cursor": {
          "ref": "53612412-d9b6-4fa4-b835-e9eee70d0e96",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f32487cc-489c-4715-ae99-b0cbf2c3b202"
        },
        "item": {
          "id": "2c4fa24c-0cc9-4687-89e7-8323e117eea8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5c3f95ed-ff4c-4a07-9c51-841c9272549c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614a77b6-4a23-4c2b-956e-91b0e54227a1",
        "cursor": {
          "ref": "a25ed386-c8e5-4b18-a211-c2569d53af1e",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cdaa8739-17ee-4c5e-812b-5b328a73ea72"
        },
        "item": {
          "id": "614a77b6-4a23-4c2b-956e-91b0e54227a1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e4c43800-b7bf-4011-82ec-f5dbb60de812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333282cb-5134-40b0-a4bc-cf9b68ea0776",
        "cursor": {
          "ref": "77c9da0b-2696-4c06-8843-b5b1690bd7ad",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "505c247d-44db-412a-83cb-865aa44c80cd"
        },
        "item": {
          "id": "333282cb-5134-40b0-a4bc-cf9b68ea0776",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4419054a-49e7-463c-b5ae-a5e3fe8ae6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b636abd-d1b5-4433-b89b-c407d974ef90",
        "cursor": {
          "ref": "95bf2c3b-cee5-4490-bcee-01133a70f5aa",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ebbd2a5b-4f8d-4ef4-8b8d-49515c429074"
        },
        "item": {
          "id": "3b636abd-d1b5-4433-b89b-c407d974ef90",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "46b84a1f-0b81-4e07-84a9-1effac7a11f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3a85d9-6263-494a-9294-febe067147b6",
        "cursor": {
          "ref": "a8f63a11-0440-4c41-9e55-769d0b141432",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "481dad35-030b-4652-977f-413e695d1aed"
        },
        "item": {
          "id": "5e3a85d9-6263-494a-9294-febe067147b6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "04881b25-f5a7-43fb-b27b-043a7ec565c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ac0436-cf14-4567-99d1-bf5f20f6e4d7",
        "cursor": {
          "ref": "d1173d7b-ea4a-4316-88f9-831054a39773",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e5a35e78-1c52-45dc-ad29-d5228f8ddbc1"
        },
        "item": {
          "id": "a8ac0436-cf14-4567-99d1-bf5f20f6e4d7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d42e27df-40dd-4a8e-af7e-957608548cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b67786-117a-4286-8d23-bb000771cd1a",
        "cursor": {
          "ref": "eb669ad9-ee27-4bc3-9149-1ae866fc13ec",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "fbf4f50a-d1b8-46bc-a98a-fab28c1d3694"
        },
        "item": {
          "id": "96b67786-117a-4286-8d23-bb000771cd1a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a0c0d99e-e60b-4730-9b44-ba6e9d874d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbd1a07-15b0-4e7e-b3e3-114b45f41756",
        "cursor": {
          "ref": "1a17ba02-4c70-4e7b-b408-ce8d5f7bfaa6",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "437f90b5-2caa-4035-a007-9f894fee0466"
        },
        "item": {
          "id": "3fbd1a07-15b0-4e7e-b3e3-114b45f41756",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "084e906b-596d-4f79-858b-115687cd5794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ba12ae-2136-40a1-b916-9cc1745c9e71",
        "cursor": {
          "ref": "605c8791-e93e-45f9-b61d-35ae975e97a9",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "470c8ba9-017b-474a-87f0-4def2432dcd5"
        },
        "item": {
          "id": "28ba12ae-2136-40a1-b916-9cc1745c9e71",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2ea74781-baba-4b96-9a06-2c514f7a99d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebb0e7e-e3e8-4c6a-86a2-c528d78f86ff",
        "cursor": {
          "ref": "fb888809-2701-4176-89e7-757a5e9028c9",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "6ce09e1c-250b-4e48-816e-c9181f44e4e5"
        },
        "item": {
          "id": "cebb0e7e-e3e8-4c6a-86a2-c528d78f86ff",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9fd7d5c2-57cd-4617-b3b6-a7be3d794c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bcda85b-9679-4ee0-879e-148c8cc3c2b6",
        "cursor": {
          "ref": "85e465d1-a290-4870-bd89-300d25a57cc3",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "dee3be4d-43a3-4024-b613-45eb8d977f34"
        },
        "item": {
          "id": "2bcda85b-9679-4ee0-879e-148c8cc3c2b6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d8714a82-5b43-4128-af1c-18ba54b5dc1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f836a24-4527-4b19-b6ad-46566ea77ea8",
        "cursor": {
          "ref": "60e631f5-3396-4011-9caf-7b1505cfdf65",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "fdc9ae74-c51b-4b51-a0dc-93a3afb0fbc8"
        },
        "item": {
          "id": "6f836a24-4527-4b19-b6ad-46566ea77ea8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b0f1a299-6b6d-4b6e-8dbc-f7532fdd958d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946a3235-43de-4cc4-aa8a-c66443b132f1",
        "cursor": {
          "ref": "77b85be4-3aa6-4017-a930-59d0cead7a64",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "abf45e4a-673c-4686-a702-1708f9d7457d"
        },
        "item": {
          "id": "946a3235-43de-4cc4-aa8a-c66443b132f1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0069921c-cf91-45b6-a986-2651c7a56931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf630349-db39-47a0-86dc-d6396aae4613",
        "cursor": {
          "ref": "88f8d829-3be4-412f-931b-dc2813e238ec",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "319d1250-d530-46df-a1fd-7ac073034d86"
        },
        "item": {
          "id": "bf630349-db39-47a0-86dc-d6396aae4613",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5e0f2715-5183-4376-ada3-9a6000f8da5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd5892e-b2f4-47f0-91dc-fc2667486fe7",
        "cursor": {
          "ref": "3ef4c8c5-7b62-46ce-b33f-157c912b7319",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "e9cd673d-4ca3-432b-839a-83f30629836d"
        },
        "item": {
          "id": "ecd5892e-b2f4-47f0-91dc-fc2667486fe7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "eb0297c1-3fea-4574-9e19-ca538a844e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa0f600-86bc-40f3-acb6-6aa0629a9844",
        "cursor": {
          "ref": "3a98db77-ca1f-4e56-867e-50f6bbb8a29d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "09f8cdd9-deb1-408f-a75f-fa24e5437dd5"
        },
        "item": {
          "id": "2aa0f600-86bc-40f3-acb6-6aa0629a9844",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9239ac64-5112-4b83-8e74-47785b25501a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8864f0-6891-4650-ba5a-28c8f6a49520",
        "cursor": {
          "ref": "1a815dce-d802-4bc1-a7d0-2e63f2477a12",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ca787755-095b-43e5-90cd-4beeec6bd037"
        },
        "item": {
          "id": "ed8864f0-6891-4650-ba5a-28c8f6a49520",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "00b9e173-6d6f-4b9a-94a6-a5936d7825bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d571f406-ec08-42c4-9b39-10893a119aef",
        "cursor": {
          "ref": "c4c7a4d7-f030-46ac-91d9-b89550c52d03",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "64748d32-cab4-477e-9788-a935531468af"
        },
        "item": {
          "id": "d571f406-ec08-42c4-9b39-10893a119aef",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4695413b-dc84-4830-baca-6c0a5bd1b5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286484c3-43b1-420e-a2d7-f39ffb80df88",
        "cursor": {
          "ref": "35248fc3-d070-4ed9-ad50-b659c78bae80",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "81087a52-bdb0-4984-a01a-7cac9abcb044"
        },
        "item": {
          "id": "286484c3-43b1-420e-a2d7-f39ffb80df88",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6d18fbd4-d186-48f5-9501-6b5e18ad9af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a41795-7ef4-4dc6-9a40-ed039abe47ef",
        "cursor": {
          "ref": "c488336b-364d-436d-aa44-2781c08ed565",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "af659a77-86d3-4e8a-b543-7359ee62a7d4"
        },
        "item": {
          "id": "a1a41795-7ef4-4dc6-9a40-ed039abe47ef",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e8d55ea5-a8dd-4450-8661-3e29fb6b9bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240d1603-90da-457a-a41b-73c935218240",
        "cursor": {
          "ref": "12c58a92-e047-4931-b586-639efc4785b0",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ceed9820-9646-49a0-a9c4-4da706059355"
        },
        "item": {
          "id": "240d1603-90da-457a-a41b-73c935218240",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1399046a-e6d5-4ee4-aea2-f81d883fc06e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a0be05-9c1d-4552-9c93-10e61ba8fcf8",
        "cursor": {
          "ref": "acd5f90e-4f6b-4a6c-b197-0b9d6cfc340c",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "86952cca-6885-4602-945c-09ab3c69504b"
        },
        "item": {
          "id": "f0a0be05-9c1d-4552-9c93-10e61ba8fcf8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4dc2edd3-5104-4530-9bc3-43d0fe2b6b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd11a9d-b747-425b-b3cc-103574d86990",
        "cursor": {
          "ref": "f4024db1-ce9d-4b96-b17a-371d7c8fff05",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f4badfa6-a442-4b0b-92b3-a0f7a26fbf6e"
        },
        "item": {
          "id": "bbd11a9d-b747-425b-b3cc-103574d86990",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d22b4551-8b6f-4252-8029-d565692a17ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc93ddcb-7c69-4e77-933e-331392930345",
        "cursor": {
          "ref": "2db22df5-f274-4732-abcc-3307057a9f7c",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3aaaacf5-5993-4278-82b8-423ac6339d44"
        },
        "item": {
          "id": "bc93ddcb-7c69-4e77-933e-331392930345",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "06e83d37-8410-4db7-87c1-678603a3ccf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58064f6-b1d5-4dfc-90cf-e612acebb25a",
        "cursor": {
          "ref": "12a4131b-7290-44c3-afca-123d7c77918c",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c68d35a0-c18e-404e-a772-76deab3124c6"
        },
        "item": {
          "id": "e58064f6-b1d5-4dfc-90cf-e612acebb25a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "426056fa-3136-45a3-958a-66f4d4225724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b556534-4561-4d0d-b716-cfa71e600cc8",
        "cursor": {
          "ref": "18a011de-3665-475d-a421-80e66cfa90ba",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "1a41423c-df98-4f0e-941f-3fe75e9b6d31"
        },
        "item": {
          "id": "5b556534-4561-4d0d-b716-cfa71e600cc8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c686a5a5-75b2-48bf-9f99-59897db30b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99fa69f-8ce7-4bd0-ba15-0407aa86832d",
        "cursor": {
          "ref": "a9324eaa-9030-4a84-b5dc-1c83e6a23fd9",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "0afb0d14-767b-407a-9fee-53f98084f644"
        },
        "item": {
          "id": "c99fa69f-8ce7-4bd0-ba15-0407aa86832d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c51a9930-5995-4e19-b16c-6104b620b467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09b5e81-08dc-496a-8fbe-d0a25666c164",
        "cursor": {
          "ref": "4c7e0fa6-13c6-43a4-94d7-1c038eab5bdd",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "aeeea496-e47c-4495-9a5b-52703a9ee211"
        },
        "item": {
          "id": "a09b5e81-08dc-496a-8fbe-d0a25666c164",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "19ad043e-4c7d-43db-b5ae-545ef51dee7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba52d82-ff34-4e0f-8a09-5c07dec4e477",
        "cursor": {
          "ref": "4971afd3-724a-4a1f-a7de-8b67f30fbf8b",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "4cf10325-01f2-42b6-9d40-f6623bbd4c5e"
        },
        "item": {
          "id": "0ba52d82-ff34-4e0f-8a09-5c07dec4e477",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7c2155fb-24c8-41b4-9b2f-2f88aca06852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "825431a1-fb41-4b2f-8400-cfc7e9a88acd",
        "cursor": {
          "ref": "21887c14-ba26-461d-9f8f-2fb1bb3ea5ac",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "11e2eb1b-9d98-419d-b143-027cb40b419f"
        },
        "item": {
          "id": "825431a1-fb41-4b2f-8400-cfc7e9a88acd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0b452df9-6fec-4cc6-b76e-a3c4bd8686d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c749476d-004c-4d0e-84ad-b861dfae1ea4",
        "cursor": {
          "ref": "089905f8-0733-4de4-a99f-6df572040006",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f19d10df-1543-4b31-9be9-dfd85ff27a08"
        },
        "item": {
          "id": "c749476d-004c-4d0e-84ad-b861dfae1ea4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4c057482-1328-44d8-bb52-bf576cbeb422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff31659-007e-4960-989e-c72991b41df1",
        "cursor": {
          "ref": "4611107d-ba4b-4bd2-9f7c-544ab8391742",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "4b19d2e1-a757-4bd1-a9b2-3d8595f13a3f"
        },
        "item": {
          "id": "eff31659-007e-4960-989e-c72991b41df1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8f1eb6a8-8eb1-4183-a797-2987c4fe50ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e21e96-e61b-4c12-86b0-8d040b6af96b",
        "cursor": {
          "ref": "b780f536-83d9-4e99-aeb9-3a7e207304af",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "1bf7aeb2-bbf2-414d-a3cc-5d5cfc77c07f"
        },
        "item": {
          "id": "95e21e96-e61b-4c12-86b0-8d040b6af96b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "135879a1-9251-4f27-b0a2-c68e8d98f516",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3577c5c5-9d55-4a26-806b-47f01696279a",
        "cursor": {
          "ref": "c5e91cbb-0850-45de-9417-be43afe14c08",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "a2856030-2350-44fa-bae7-43209231648f"
        },
        "item": {
          "id": "3577c5c5-9d55-4a26-806b-47f01696279a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1c3ebe8b-e5be-4678-8ea8-d44179c42317",
          "status": "OK",
          "code": 200,
          "responseTime": 181,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "9466fe05-5f77-402b-9183-1c225c8d2ffe",
        "cursor": {
          "ref": "6c4e23d2-90fa-44a6-a4ec-a95b58c5e3a0",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d523da81-9cbb-44da-b6c8-c01df6b5b624"
        },
        "item": {
          "id": "9466fe05-5f77-402b-9183-1c225c8d2ffe",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9340e40e-4a52-423a-b272-7bc4aae83981",
          "status": "OK",
          "code": 200,
          "responseTime": 176,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "52941789-2b5e-4e6c-a4f1-62bd9dae87fa",
        "cursor": {
          "ref": "e75a2fcd-02da-4078-992e-891a090b426a",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "44540ddf-a325-45d9-a7e0-c0bd79fa0d6a"
        },
        "item": {
          "id": "52941789-2b5e-4e6c-a4f1-62bd9dae87fa",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6f58d133-d4f2-4b02-b670-e34eca2a5ba4",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d7c23c-b414-4e71-8fcf-3f929be54b23",
        "cursor": {
          "ref": "5dd2d359-768a-433b-9972-5521bf15faaa",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "38f0eb41-9d92-4adb-a023-dcaedcae8545"
        },
        "item": {
          "id": "77d7c23c-b414-4e71-8fcf-3f929be54b23",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bfad49f4-a328-4796-bc28-1b9449b8f56d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d7c23c-b414-4e71-8fcf-3f929be54b23",
        "cursor": {
          "ref": "5dd2d359-768a-433b-9972-5521bf15faaa",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "38f0eb41-9d92-4adb-a023-dcaedcae8545"
        },
        "item": {
          "id": "77d7c23c-b414-4e71-8fcf-3f929be54b23",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bfad49f4-a328-4796-bc28-1b9449b8f56d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c678e3b8-b90e-4737-bb5e-dd28b5a91571",
        "cursor": {
          "ref": "03cfd61e-f9ad-4945-8aa7-184bf8aa2a10",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b4a3b3b3-3e3a-42d5-9f6c-17dfadaf7d2b"
        },
        "item": {
          "id": "c678e3b8-b90e-4737-bb5e-dd28b5a91571",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e1c58410-c7ec-4ff7-ae7b-415db3f445fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2271cb-9047-47e9-b57f-ad68fb482aa1",
        "cursor": {
          "ref": "f924eb12-18e2-4b94-b858-1adbf0eb50d9",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "24513f80-7fd6-4f60-96be-86e4c4394978"
        },
        "item": {
          "id": "ee2271cb-9047-47e9-b57f-ad68fb482aa1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "001bc547-f512-4980-b16d-c7ed184c7e08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}