{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1c716fcb-a1fb-4921-a818-481770b2920d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "15b2d449-e8da-4be8-ab9b-047c39f1f2e0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d07ca133-3628-4578-a441-01ac55fe6264",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "895dd249-dc78-4a76-b2a1-530e3056cc86"
                }
              }
            ]
          },
          {
            "id": "4ade538d-e92f-4eef-bf76-37be583940f0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "90e127f0-d9fd-4e92-8ef2-f0a480e3d1b1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9c8248d3-a5fd-48b0-8302-049214c7689d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fc1eec38-c2e6-41ba-819c-0477e34f2341",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1a14a5d8-02aa-485d-b96c-213c597643e3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b616fa05-de0b-48fc-88ee-7c62623f4444",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfc1759b-36e2-49d4-a92b-2acadf949830",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b1e41798-459d-445a-bb6c-d95e9dbf1d17"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "149221ba-03a5-4d12-8674-1a7c7bd84519",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41b43c4c-2f68-478d-afbd-6bd0700cfcfa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5b3c5a43-b738-4dff-8174-721d46472384",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dde6f252-af1b-441a-8d5d-6e2a985b602d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bdee11a4-4720-4d54-9d21-04e35ddd2008",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "90381b11-3c16-487b-aa46-5b719cf6eb0d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9709d368-30f4-4f73-8f1a-d357b780dba6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "865cc200-9d81-4c73-8ed3-2d65376bce83"
            }
          }
        ]
      },
      {
        "id": "1e1a20b0-06e5-4581-bde5-fee994f6aa75",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "419fb183-8cc6-4412-85fe-bf8d1a7e9e18",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48c7d74d-5ca0-4a6c-9711-22f29a7bc300",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a7f867e8-bbea-4f4e-93fb-327c45a451e3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50881427-2e4e-4b4a-991e-788abdc75c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1077b930-f8ef-4887-af16-6c9f681b7f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d490ec9-5929-46dc-bc84-331fa6ea30c8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f261a951-e2a7-475f-b638-79c3b904b88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "455387ad-0e9e-4ee5-a9ba-4b013ecdf030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8be707-8cd3-4083-9c78-2cbd48921bd7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c24448c-2af1-48dd-866a-743afd022af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6950577-176a-4e92-ac2e-81fe9eea39c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "93ae1c75-96d8-46f2-b5ea-3d30d9d9ec6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c0de505-b25a-4000-854a-63cec3c018d3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df2f674-cd9c-44d3-a643-48216656efbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ccc7850a-8921-44fb-a927-ca0e9b6a5c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c75cb9d-3e74-407e-87e6-d394508053d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89615a5-ba75-4625-9a8a-e14cfaeb0ac0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "01443f03-5985-4228-9925-a998f71b113c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0d36018e-58de-4413-b387-5a5da10e2487",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "087837af-e7fa-42a4-900b-d9aab6cbf709",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fb8e622a-5fb4-4175-ac99-1d2cc1c7babc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d575e9f-766b-4698-99a8-8c5bcd303be7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d19234cf-aabb-4f91-8051-1a2794953675"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1258ce06-69f8-4adc-b942-c21918be6cb0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3a10dfb-09c1-4eb6-a35f-6bfa3ae04317"
            }
          }
        ]
      },
      {
        "id": "b63995a2-42ef-494e-9233-c45dae82732d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "16cddea4-0ce4-4030-9001-463a60c2520f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3e54cec9-b843-4eda-9928-de576901a6ab",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4f02ce9d-5a2b-4dc4-9b57-79c07843f66e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ed537a-090f-453d-8ae9-6f229de31816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38fcc812-e43b-4791-9cef-fbbd659404bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ee4da2-9abf-41b7-8e79-712be9adb5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cdbeb68-0951-44b2-8fd0-adff86ee381b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f3ab24-43c0-41d7-9337-a29a10e4d9a9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937060b0-e8ec-4507-b8a6-1e200b4b1633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df54bebb-bd5e-4f3a-ab25-b1adc62e9c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5021ad-441c-4f62-b820-29946b941efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b7eb113-7865-4eb0-b53d-06d261e47979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f37093-b3bf-410f-a03b-ca0f16a0f51b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1afaef-4d85-4763-8cca-29700f124947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7d9709-d7b6-4ee0-ae99-59cd62ebe786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60c405a-fe75-4ae7-8cf9-f9ebe6ffb467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16d7a838-24ae-4bd5-b8ef-0546fc0c6ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cad748-0bd8-4cd0-9f25-fe9e5295b2cd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9040fd-c1e3-4c74-9cf0-617db3d2c442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b6dca3-e459-4d73-89a3-d08617f47be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77087033-3e81-4590-b94b-606a8715778f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abd857fb-8c42-40ca-b167-9434329f6416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9024d3-b3c1-4f92-af6c-fe15a4c413f9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f368e3-fb77-4283-ad7f-0af36013fcc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda2d49e-1ccf-4614-acb1-6c5ddb67b862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3a25d0-ee79-478f-bade-4bfff6edb8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13840f64-1fa1-4c43-84df-d002a50b0fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e064e3-17f8-45a4-a066-ebeafd24274f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32d34a5-b71a-4086-a470-cc749e8c3912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc2c511-28b8-4a2c-b77d-f9816a58e2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2bf1648-4b5c-45ac-94d5-ed56d8fcfca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86de75c6-03c3-43c7-9568-374ea57f2753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c7cfda-8452-4403-88b0-99b8f18dfd1d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909a3296-c610-4ec7-b313-b1e735db0265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de08724b-df8e-4246-b6ab-e91206403f75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262d7b4a-8720-4b4f-beb8-19209a89ed20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53088f58-4803-4eb0-9320-0b007e1c7009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331da1c4-6bd1-4b05-a9b6-e894b71212b6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e6bbbb-d3f2-4f68-9c76-af60457ca637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c9c14c-b801-4e6a-ad8f-c1f56021b5fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab21a85-b3d1-43a2-b782-ad609ee83fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f847bfd5-cbea-4cbf-82eb-35ab0f59d36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ec1c0f0-09d1-4555-bd86-f635fd9123b0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03470c7b-6b69-4533-a39e-e0a0ba1cc0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2773af-b320-4fc0-a170-436e96adc23c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f086aa42-e8c0-4ac3-86a8-fa59bdb77111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76b9f7ac-8e35-4365-ba8f-733ef9cf37ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c1f2ef-b475-47fe-9430-c1bd960431e2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd41cb89-b147-446c-b33c-f10dfc49498a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d50f1f8-3620-4bba-ad09-0de82454ab97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80629552-8be6-4429-9704-fbae987810b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48e264b8-5b89-4320-b8fa-eaef9680724c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9baac9b-08a3-4547-9d32-151af02bbced",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3d8ca3-a9d8-457c-a810-1837958578f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e4e7058-f43d-4651-918e-a10ff1cca8d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75409eaf-5d87-4ff6-be6b-bc7419471506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f869f8ec-2c7a-4904-bab2-fca9cde0e2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922c137c-928d-475c-997f-5dc24b4082b6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475191bd-10ca-400a-8fca-989ae415dedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84802b40-cc20-4e4c-ba6a-1a64efe07f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594f6279-bfd1-4ca2-8b18-bdef5d20cb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9da19ea-ae0c-4ccc-bc66-4ed88c003476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7754f56-fe2b-4a36-b5bd-211cff88951c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7ec28d-4967-4b84-88a6-91a07864847c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3e7c96-fb70-4c4b-b9a2-a9b0c0f99901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364c459d-72f0-4d0e-b42b-18dba37fa1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1756b5e2-833f-4a33-9f02-f5ed867537a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c202c1f-ba15-470e-9548-2f4585dad223",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be737c6e-dd1f-4ff4-b884-1746e3d40d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a073d4-f3f2-4e40-b4df-67d2e9134f5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eae1f42-f695-479e-8cc1-76d46299ccf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73b805ae-d16c-4726-bc1b-c6d04533ae17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7c8c0e-cf5b-45f8-8c68-8a8cf3b2e0c7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f34bfe-7073-4a9d-84f9-438aeec928e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a222cb-4a9f-41c1-bc6f-eb08f0598e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d45928-b5e8-4724-b73f-4bd8b65f12cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c93f57ba-862c-4417-a00a-2ff3c8a8e450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5061e7ea-165f-4c48-adfe-006c76b4c2f9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642c94af-5a7d-46a6-ab8a-d8ad524f11f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "086cc715-1ec0-4e99-877a-67c44fa5ce90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858d7b62-3606-45f2-9f3a-721764d72d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c70aa06-226d-47b5-9546-7b9169a4172a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9f6aef-a94a-4494-ab4b-208f9ba62b20",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b9b359-844c-4222-9a27-4a3e826e8d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23899fde-29e6-43d1-a55c-277f8842fa21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e538fc51-47dd-49d6-9a88-e4a0ff1cff37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c9630d1-a520-47c8-ab95-3a50930b6f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3368e5f1-9c80-4e9b-8f84-d8b62ef7b93c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3640ee06-ec52-435b-9052-c6e7bd2ad228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e611ee-93cf-4de1-af52-341bc0c70124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ab2a83-1071-4859-ba06-37fd87a41190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "de57c08a-b9ff-4133-b560-30934d2ce6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0453250-6662-4fcb-9840-87f37bed9aa2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff06cca-7b6d-4e15-b4fc-d6afc6b7bbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85bb1a23-7fc5-4202-84ab-7c4826869719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74de42a-56c5-4880-bcef-255353343b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27f1565c-5d16-4aa7-934d-c3399a743795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d116fd08-703c-4f43-8b5c-3932a356c200",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7c807a-db64-4033-a7f2-e1cb72ece65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4ba7f0-390c-4b05-8523-0537c7fb05c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7127be5-72b8-479d-9fff-2a70d35ff920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73677167-cb28-4923-b83c-233591bf86d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41d60fe-30f0-411f-aa9c-892d7e7a5767",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51377dd-2d80-4787-ada0-3b30c02c6cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3838b8e0-d36c-427a-bdf0-92a67e268360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c18d673-d9f8-4a71-b4ff-c19a3e59f9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f796dd4-b057-4750-927f-2a1a184b9e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6092cab7-0813-422b-ab0e-9e19515d59a4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27131549-d047-4531-9583-77a68f2f74b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fab994e-ba03-469c-b585-68708c2ef60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1b4c6a-40fb-4372-9202-c9aab4dbbe58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d17319f-24ba-436a-a669-a6530e998baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9476320f-6a12-42c1-82ba-1653bd7bebaa",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76be78f3-baf2-4382-ba45-b3353d77bf45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aecd4da-25a7-4f4d-8737-062db8b1efab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96600786-bdeb-482d-91e5-70a6a6c035d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d0df1fdc-8197-4891-a741-a56693696280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5c6836-9ee9-456a-8e1c-dc81924b53d2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca0629f-de35-497b-9dc5-9832068ebf89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2013e732-f84e-4701-a253-0c3591816908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36909794-4884-4e22-bd55-f2077462fc60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d89a25b-71c5-4203-aad9-85781b950818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ffe68d-e665-4ee6-a088-794ef29b800b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080eb1a9-accd-48cb-87be-58d82d785800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b130a4a-a0c7-414d-9f97-ef0190c26483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f72c170-acf2-48a9-a203-c8518d6a35ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cdcda28-85c6-4aaf-b3bb-1bf299dc24f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9baddcea-c192-4d69-95ec-3eb9aaa23dc7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3a60b2-b4ac-441b-9731-6c47787043e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb1005db-c6ba-4ead-96fd-a0eb4fe0981a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffae867a-e70b-483a-822c-d3e6173e382d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c92ddcb3-8b9f-4ae4-9df5-73709e149e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e466ad-b87e-4c7b-a446-61a44b0bd90c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae826736-051a-450e-9138-692564a82979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c8f328-1aea-480d-8faa-f34e30d96037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffec069a-7694-4f62-ad03-ded7e7d3fddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "192b174b-a4dd-4049-9edc-e03bc3ac276d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d25cd31-c2a5-4fd3-b068-e2e21546f5fc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd155511-86d6-4801-a00c-0af5b801665f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2533dae5-36cc-4b2d-b520-9964ea39993e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c3f632-bcf1-44dd-bfe5-691939e00672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "585a535f-5c19-4542-b8e5-25fd5bfc160e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31592184-5de8-4fa4-a035-c9474282eee4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d71c125-35b8-4764-aee4-25c17dcc7f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd86abd-5488-43ec-8033-642f7bcf7d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8395921-50d0-43ca-bc7a-3a79dce6757a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eff39f97-0876-4a79-98ff-4a4ce3a5f715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6713ac4e-436f-4c1e-b0a5-6ab4315aacff",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f1ab1f-7795-4181-b291-2e8e375f69d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cb4cfa2-1a09-4b08-8be3-be2243de3644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b36852-75b4-4e0e-97e9-33d80e69577a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c4fe3e2-945c-4176-957f-ed0f43c57b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d28b68c-d71d-4a3b-8d6f-1542230d58fa",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0403da2-00d7-4ede-baaa-8b8babd9459e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57b42bd-041d-4089-8e4e-2abfc6cda262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311073b4-cd60-4958-a7e7-27889b4ed76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c060c9c4-16b4-436f-b435-50280fb8f275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9f6a5a-99d7-4068-b25f-c770c22d7f58",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00b5e3a-b410-473a-86e7-6074308991f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f630cb6e-53c9-4aab-9d83-179afb3dad0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9850594a-d063-47f4-bf42-6d5aa8d3f12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2621e5b7-1cff-4afb-82de-07c9b373b007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed27e8ec-e1fb-4f3f-ab04-ed5d2d116686",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6e60a7-e7a4-42a7-ab09-f3da4dccc268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52ade4b-27be-41a3-8f58-f1538c7e1100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f51276b-3d2e-424c-94af-32c827581c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c16488f-d728-48a0-bc6b-209d1315fd65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55eeaa9b-d653-4762-8d04-547e75a06c77",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf5df7a-3098-49b9-969b-52ccd0bdc493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeaf1217-d4e8-453b-a420-dd07538d8d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d771f94f-351f-4ad2-a431-5b042dbb23fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "411f96ef-1ac5-49b9-ab51-63ed484c5ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d77793-0e3e-45dd-b1d3-585957c17a77",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c0bdcb-b84f-4fc8-8b35-bf5d3dd80e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4bc9197-b148-4014-ac99-62942f07b535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dded621-1afa-4db5-8078-e96fab91e5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5c998e00-e817-4210-9914-c01bba03d607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7734da-2d47-4c82-8262-83e8ca1bec74",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5137777f-15dd-4928-8303-3c96911871b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e9a1bc7-1778-4c53-8c26-93c8ab58af9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d245ec-6e3e-4cb8-9cbd-ecbac1599c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b195f499-137c-4525-918e-8b1eccd0a758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4737164-c97a-42e1-a11e-0d3c4ec331a2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ed544b-d79c-408d-ab69-1abd6718096f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d255c649-226b-4faf-b574-912eeb7e2444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25fbd9a0-ba8d-451a-8983-28a79dbcf2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee55797-5b0e-4960-b0e3-3273451e12cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a7af0b-e44d-4739-8302-f07d536379f9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19541b2-28eb-4e47-bbfc-04fed8e961f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839b3c0b-ac75-43be-822f-33ad8b419bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9946d5-55c7-4f1d-af1a-65218319e84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "45ae21eb-36d7-4872-b3a0-ac32db795c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41dd80a-c37f-46a3-abce-d7a3d37d8268",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2134455a-6c28-4932-9e4f-1b4ed0d45184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b03423-d0e1-44b7-983d-3d0e4139e416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa31527-4748-4e53-b5b9-7a5e8554f855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "de9d858d-0ec7-4ce8-81b9-d97b1d0e0781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0485d3e3-ff10-4279-b8fb-12e01afcaef9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c10502-a596-4568-a762-eabec9e47ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1bcdcbd-0b9b-4733-a9c5-9f45592100d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61985f5b-dfaf-4a55-aeee-10aa491dec40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "789b9aa1-e089-4189-be59-fe5c19bc6928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a8b47a-cd2d-4aa4-8a5c-07a790558417",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43777892-6567-49e9-a0ec-0eb630e1a560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9741b7b5-5a2c-4772-8c57-29597c81509c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2343c0ee-9afb-4a69-9cdd-942ca602174e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f0d0d6e-2b7e-445e-8416-978a4b10cdd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e880dd4-47ea-4a6d-8fc2-35bd8c1b8a2c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0165e96f-0028-4cca-b67b-c6ffae7bb264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f1a80a-f369-459b-8085-999d2883f2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b594251-41cf-4f41-ab97-70ef3c392318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b89c6dbb-f204-41d1-b9cf-6465f2f777f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bef69be-9d6f-431a-b18d-8b95dc7528b1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bebffa-8d4f-4a17-9d9f-ff4f0e41269a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c183c74-fa2f-43ce-b890-d513aa3e034e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d59bfdf-d54a-4b96-9e0e-e7f270bd19c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb47c75-ccd4-409e-8d1b-f551a0f02933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e698173c-3e73-457b-9aa9-1f3cc5116489",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0dabbbb-dd5d-4e9e-a881-a9630f41ca06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684de707-10d6-4b05-9850-15440d557170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a086e5-0099-4729-9d4d-fe965ad4a965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0ab7c0-3589-4bcd-a80f-8b46bdabcfc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb1d4e5-252a-44ab-9cee-beea7a9638b4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89edb1f0-7dbd-4e67-a5d7-9f13632c2788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3304c5fa-665c-4183-886e-1403d9a1c9f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe739e9-989f-4e3f-aeeb-fa02630e8ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d2181ad-f923-4829-a2f2-0a86c686aee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3132301c-667f-4aac-9fa4-ec3066a126de",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0852e1-fe1f-4d57-8aab-552d266fa99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6e3cce9-20ae-4f00-b03e-30dc81d62001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b0a89d-89e5-49a2-9856-4cec9d14861b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72e8f786-0df9-4a18-9d92-6ad3f386620e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef36b68-dfa5-48a7-a8bd-3494c3bb9678",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b798ba6-f387-4c93-ab9f-8eaa7c059d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fffa3592-0962-46b1-b836-b82b9ec15e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f8c7df-d620-4049-91c9-69fad9ebb373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24b1fd2e-eeaa-462a-b4bf-63f24fc87c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b74a6a8-f226-4c79-b839-46a28d7880bc",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a19a2f-8161-493c-b0b7-7eeebcfcc549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae6a719-cb4a-48d1-881e-1dabb9338997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf34b9e-4c0c-4a56-9636-dec3b96bd681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f5fd25-13cc-47e3-bec0-7e7d056631ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa4a3f3-0d20-4f02-a0ed-6c654e9693c7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5526dbaa-d2f0-4150-9d2f-7151702f39eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61a961f-8ce5-4060-9aca-0a35cbedb88a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebd3ba3-36cb-4010-ac93-8f7af3e35129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "648cddc3-3f79-4974-895c-765085908945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0bf881-d7eb-4cdb-be7a-d5fbeb1a323b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e75428-19fb-4cb8-ba88-ea74cb2c607b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73cc3196-8e68-41f3-ae66-35f0558f03f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cffb3b71-20f2-4eb1-83ff-ed59e892574b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "839f6e88-8aae-41db-a719-9a9e5479b7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c9d13d-8d4b-47f6-a68b-42da7876ca14",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea2c85a7-2a32-4811-a3fd-2b33d77b8ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0903fccf-3b01-4347-8e15-15d230a32f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a85b5e0-5317-4459-afa2-3967f5742eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1565b8cc-c6c7-4996-9559-3d4b904cf8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528f890d-e45c-466c-b085-b8b958a5d265",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0674bf68-dbe1-41db-b83e-db2a03183584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3faa61e-4dcd-465a-a3ed-f76bc1b1b0c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad3de10-3c71-424b-a160-6f2c5cef7023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa4d6229-c0d7-4ea8-bf16-e097aec55a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a9a0a8-3850-4107-9d16-8dc634b3a2fd",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c30090-8efc-4f9a-b1bc-ff54fb1d2865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1874eff-fe21-46c4-b46c-46c280371e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a79316-59b6-4cfa-8bd3-909ce9aec712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "242a4c75-caa5-4b16-91dc-3238c662bdfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90ef1f1-a2ec-4b85-b2fd-ecc86e8f7816",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e36a37-55fc-40d4-b8e7-e5bd37f90f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2dc06f-ece9-4e92-9eab-55ca805f20b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9394ab-fcf6-4226-a1bf-e303669f7ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5df8fdf-5358-433a-a163-3184b2d833a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d990e6a4-93b1-4863-92b6-51f537231f58",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a869c204-208b-42bf-95d8-506904ce27fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3403ed68-d42c-4983-aef1-3f0c06f6a22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4f915a-85be-4318-b420-3802a54eb2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4889f449-0967-4355-8abf-6dfba4c26500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e356caf8-6bb8-42e4-9806-acff69ab40f3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76da2c61-6e79-4e97-ab8d-fe3323fc6e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8047fc5f-cd6d-47b7-a2a2-79129d237446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0359c3-8f0c-4a73-88c4-f005665fb2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3a0ad9e3-5efa-4733-b6f2-cf60d150665c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7585452a-68fa-4848-8a8c-8c981a7b0b44",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d8ddd2-806e-47d6-a2c9-ef45f97e5ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cfe1d44-ff11-4656-abb8-ba1b194d0c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79344a8d-244a-4338-a0db-581237bbb3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8422932d-4388-4143-b4a1-a6702ec13364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12186ba-81f0-4f43-aae1-aa7468b96982",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d9380c-9a5c-47db-b0a0-5c70841d128d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c34d2394-8641-4f0b-8797-a5a3a42b8d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56318da-86c7-4c01-b15a-71a72af81b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "114481a0-65a3-4e7c-b0f8-51937afdea84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c13a13a-1269-46bc-8d42-8b39292b9999",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c9bb7e-a5ad-4117-a0d9-1054ab0589e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2290edf-e2a6-453b-9a01-2331bfcdbab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50371e5-4cf9-409c-b461-9d55ea744212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb21583-a3a5-407e-819a-d06269091a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a359cbbb-4594-451a-bfa1-2f59aedcd43e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8128de6-e150-42d0-9ca9-28886877ef2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2b7562-b8ed-41af-97ec-3e3bd8ab8c97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c19adf-4945-4356-ada1-0a12d183111a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c299a230-d732-4010-aff5-500c963ce665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76327fc-a310-4fc1-9e36-8304d1543c3e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5819cb81-f371-468f-8760-754d878978ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e42b354-3dfa-4721-abc5-bc2dc16f3f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d233b78a-3175-4da6-ac8e-ec130263df0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c3d7472-2467-4e77-97e9-b715057e97de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eef37da-d5aa-435c-8610-465d795ee941",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6496b1-598a-4599-89cf-1aaedc5a307b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e97eb5-629b-4937-a637-fce94baedca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b53a78-0365-418f-b0a5-c7cb1f24a6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "20d6da50-d1e8-467d-a8b6-ba4746a72144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ecf791-99c2-4be6-9760-80d4eded09f8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02fcc1f-9659-4332-a5a5-79fc1f4228d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c706d1-89f1-4e56-b517-3a573b6e4c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa8bf64-c200-463b-b696-bf728613565f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2454adc1-e3d6-4656-98bc-e13b24f1beab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367ac1bb-82d6-44e5-868f-af6b37480f2e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "875fe684-276c-4ba7-9d13-52840819b6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91d62ba7-f76a-4e5e-b7dc-c3a1f63f2a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9cf3c2b-b000-477d-831a-99e1887e8016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52cd07cc-36fe-4b4d-9f65-052926415c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f68861a-c615-491f-9f1a-77c61f3de736",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e694dad-30be-4de6-84e5-5b60792810a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2996464-4488-494c-943a-7410f38c0d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1632eb35-d6e2-45d8-bfc6-fc813574cecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3591495-9aea-4388-9966-ae46796e6b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf86836-e1ce-4fa4-9fd0-51d68840d997",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282492af-d1ec-4b8e-9382-ab1727e5b999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9710ce1-8d79-4ac1-95b4-9305ed65cfae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a8f543-0b67-4143-851b-65d6c876cb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d82c2d39-c927-4d92-ba00-23fef2adc757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e5bcfa-84b8-483c-bc88-f62079f95fb4",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fa3164-6c54-4f07-ad65-2fd41f36e793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3477d2a1-b57b-4ef3-8be5-d0126b0d9c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f31692-6d32-497f-add7-7fb458ad5600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "964adf2f-0e68-499f-87b4-c545f92b9577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76a30ca-327c-4a64-a115-810d03246982",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ab513c-3ef2-4c88-8ba0-2202b4f9b340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b71a5663-9fc0-49b3-b0d3-15d79a486924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5cb644-b49c-41bb-bb90-358a31336c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c77d0c26-d1e2-4e4b-b4b7-826f4b0942b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff02ec3-c532-4aed-bb08-39250e7eb370",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892e73cb-073a-472d-b257-979adf38e14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78a7ee9d-0c61-488a-8051-d2ccbbb5c5bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02621da-71ad-4ed6-88f8-797aabe454d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1798320d-705c-4b56-b74f-604a2f2e71f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa47057f-c3c9-4960-9138-5a5877c8b45f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc3b1a4-1acd-400e-b479-3b8df09fda62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f3fd1e-53a3-4aa5-8bf8-c5f4db543623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c31b658-0320-4bde-b28b-a6f2527ab83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d871de68-a1ce-41cc-bc75-1be5e368e761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9636bd-79b7-4325-9de3-2339ab19f05e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c74d0a6-26d2-4a89-bf70-ce8921996dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854f6a1e-4d79-412e-978b-53260bc59c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41038be-f0ef-4a76-9fe8-359dc298e0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ea2b55-efcc-4661-8180-85762e83d3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d0a9a5-c053-405b-9b95-74068a59283a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c835156a-58fd-43c0-8cd8-26f07c433449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dcb6d88-e57e-4d45-b2e6-74155d2f39d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3073c8-be3d-4402-9af0-75f8bf859bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6ca5bf-8d09-4c52-8784-1c7275979d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d8bc49-76b8-4be9-8302-017b09bc9e52",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9eb8b4-275b-49b1-8310-4827a13323bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1a9175-b2ae-4f6d-afd4-e4e3dd2bf254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7115e3e-722a-46c1-bed1-37e0783504a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "18b9f0e2-1de4-4660-ad4a-8905ed4dea40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9643bb8-e50c-4bbf-baf1-465ffa4c52b6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec36ab15-67b5-42e5-928f-68ce00b1c08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359739d2-c348-4814-97df-387483c70795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a50557-e45b-4298-82e1-899c270299ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e932138-6c10-4382-b0bf-e60e265e5026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e955da7-0870-4fbe-abe2-ea3b3b1614a0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab4b5dd-2efe-45e2-a3f7-fa377f5217ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72356e5a-e639-4812-9010-192c7e06f8a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fdd736-ae97-490a-a7e7-279ba40e4504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46efc404-1179-4a2b-a60c-361b030d1073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ddc8c2a-d7a1-45ed-bf56-8b469a078f2f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bb133f-c559-40c2-8701-680ee4e8ce46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1418f314-84d6-402a-8c81-8eaf53afa2d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9245c7f-7670-4d82-bfa7-248dcdd712b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bedbd36-4b54-4571-9bd3-b6af3299bb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159f2811-43d1-46d7-b93f-f8615a7f1670",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f783b23-ba05-4982-9e94-7056bf06a3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fcde6f0-7ae8-480c-ac32-e4dc0b54c0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27819355-66b8-4d02-a758-069a1df9032f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2babb511-30b2-45e9-a26d-491b3d848e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c86592-2df3-4b38-959e-58c4e19baa3e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe85ef0-367c-4573-9e7d-8340f530f9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d993f9-cc28-4a9b-b050-7ecd7aba4c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5999b4b-6d92-4d8d-9208-814ccf8d6793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dbf7e8c-7ffd-47bb-ace9-c507549cdd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b37efa-d4a7-4af9-860f-7400cde82e37",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55c0acd-4af7-4c65-98df-ab46fe387c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c90c076c-c944-485e-9fde-ad6e5d4b3d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da42b18e-9867-469b-8dbd-f6a52917e36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bace8893-e1e5-4d63-8234-66056dd6cf53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7df2c19-a3f3-4889-8ed3-68da8095a47f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa52198d-7cab-4f97-85f7-4e4fae939509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd437d3e-cc61-424d-b58d-b54b14c443be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b90956-64b7-4582-975f-35df60afd142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eeaaf812-d576-4759-ae0d-87e0d0ecc416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ad0108-703e-4b56-be07-a948cc61202c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6a19bc-0d8f-43f0-b275-f12704593490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02490c7a-2977-4ca0-b4e6-29fc59d294fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dc200e-4471-4aaa-95ef-694a63bb59c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "47d80ea3-ef87-4de5-814e-766ff25c1f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484ff4d5-b4df-4a89-97be-ebb8ef5acdeb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79770ea-ff83-4742-ab50-bf10aa9cbb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4582db33-3fc6-4026-91ed-155c3122bd4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2a6952-655c-47c1-b617-ea004552d9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "89ca947f-8d77-43ed-b597-8e3107ed160f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5191ad3-4f43-4879-ac98-f21f61e2b662",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e368435-9497-48e8-abe6-2fbd3f35e3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a34f83c-bb19-418a-b991-0f4b87effbd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a4a45a-d501-4e45-ae97-4064f87eaa76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49f9ea83-86ff-4654-ba71-663779a65570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61746521-e095-4b92-82d6-3824d7ae6066",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce0bfa7-e760-4a6d-bc77-57656c576aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997b00ec-9da1-4905-8798-0c393ba1674b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6ef84a-1672-4585-96b3-a41dd98c45b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "055aa2d7-6ee7-4b5e-8f7e-896f66a7da70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b7c7cf-6868-42ad-96e5-6662788afbc2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8985957-2a4a-4f91-9652-530be4186578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f06517-ba08-4509-87a2-8ef48cb79e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d48247-11a3-489d-938f-1ac7b08ca464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "907797b9-3130-40e1-a892-24957a0b3cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e1f9ca-6e3b-4ad2-a11b-bb17a8436713",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074a4b32-c934-4dae-9e1c-d5687a3abd7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1801094f-db06-4720-84ba-4b625918dd96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41036ee1-d01b-4884-9842-5749eb323989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af8624a4-d759-4069-a657-4a54b0d49195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa30ee7-a29d-4d24-bce3-927fa401a44d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5398d27a-2066-42f7-9341-8f5d7b417fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b970576-6dad-43b6-b6d2-c6231fb3dcd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6a860b-3a57-45b2-b3cd-d39644919319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e594e5c-437c-41da-8fd2-8ac9bd8cf01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f0872c6-0aed-416a-a197-7275dbf690f3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc85c13e-70b7-42cd-b5ae-af08fb2e0c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89e2244-a8fc-41b0-99e0-91e91d1b1c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b887056c-a1c5-4aa4-91a9-d73bc01f6964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "32250d9d-e0a5-485d-831c-e82a61930aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd699f74-6baf-4a26-a339-96b27ecf747a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70578b9b-402c-45c6-8036-6c59a9ee7082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f5030d-cd70-4f76-9d17-ca1e05b2ff15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03df516d-1fec-4e15-855b-317880f330d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a82ea88-40e6-4816-a7b9-a18129277354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53fabe99-c2e0-43a4-92e3-b6a6070604d9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921fd7ce-4989-4c73-a4f2-2cbce4e3199e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8253d1-828f-428f-bc9d-3c1df3c50ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ce22c5-977e-4554-b24f-1ffab055c1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "300ed2d4-8db6-4ae2-8110-b54875a2df88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35abc980-a03e-440b-83e2-0893cbb2671b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6bc392-6af5-4088-a352-2e9aad6e3b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c7146a-9b07-4a55-8e92-59d523b26819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59c4a67-dc41-4e91-b8ed-e7ad630e8424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9692ad14-dff0-4706-a932-0ab936f3f48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445729d0-f6a4-4e69-945e-29bc5a138f17",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26d64f2-3496-46a7-9095-68b058be5148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "48327169-2858-4cdb-8f06-2edbc9ba6cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed026a78-1fda-4e5a-9cf0-11897c126953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8502927c-0d0c-4876-b4a9-3c20113be9ad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "59bb9fd4-a228-4021-9c95-5a6307799c15",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b7733122-3d63-42fa-99ec-be0290ed50ee",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55baf668-b464-4351-a4e1-6bfb55479002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea0b8c81-7b9b-4083-b225-6817fdaa21f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9813ad60-3e29-4e1a-8423-f29cd7e80751",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e505399-bda5-4571-9022-fd0ecd247ae6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50f7214d-25d1-4904-be42-b293034b6513",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07fee08d-6d2b-4851-865f-addf85373da8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb70ab6f-a4ef-4c60-9314-088962b0f58a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9f61ca9-cff5-4a21-a457-dc5797430db9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6a425fef-4b01-41cc-a22f-e11d300c0d0a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9980543a-c607-4e9b-b0f6-fe3eb3ac222e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fd6179c8-9042-4bd7-b825-124d97ffb78d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a8b4f759-a4b3-4799-ad3a-b756512fb512"
                }
              }
            ]
          },
          {
            "id": "30a69cd0-a6eb-4b4c-b701-08da40f79968",
            "name": "Positive Testing",
            "item": [
              {
                "id": "171f2f12-f310-42df-8775-b334e033a510",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "07234eec-312c-4c9d-9d6e-ca9f71a90d26",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27218770-c718-4a02-8509-b6a6518f36d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c17bc75c-4f08-4f18-a043-3ca5337e3a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aac9da4-ece4-47d5-b809-16256a86f5c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2db87d7b-978a-4a79-8bb1-237758972e7e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0a08c1ac-bdf8-43ed-b975-a973551c0711",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1b08f3e-9091-44e4-9d4a-7e3ad7a8596d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "042d9153-a6e4-4c0e-88f0-2761850ece28"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55347d2e-d9ee-435e-bbc7-ddf14f3c660b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e69be65f-9f7d-4e61-8f7e-d30c1f2984b9"
                    }
                  }
                ]
              },
              {
                "id": "e27a7422-a8bc-43e4-80a5-c41ccdc5b041",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4121421b-f382-467d-9d93-872498888bc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce721bec-1178-4b76-8a85-41177e077912"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c492d5b1-da50-4868-b584-0f6fd3438382",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "20fbeeb8-d5d4-4f49-9dd2-34e98d863f69"
                    }
                  }
                ]
              },
              {
                "id": "73d4da95-9cfc-44f4-8738-1c84d8a419ed",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c171b88a-1f59-45e6-9c67-8e7fafabfcd2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f3505a3-8453-46e9-8353-91c8cac84f4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06195000-7701-4049-b6e1-307667936dad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "573c3808-8b69-41d4-bea4-c334c18744a1"
                    }
                  }
                ]
              },
              {
                "id": "9a4f718a-7b5d-4959-b984-0493a9ad09cc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e9fbc1b-7ad2-4ea6-a06b-ec050d320d9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df6e3bac-34a6-4122-b783-5934189be7dc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c005d993-9229-4d3f-8086-5527866df099",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1a21db3c-e356-4df8-a99b-9dfb41667c20"
                    }
                  }
                ]
              },
              {
                "id": "dce55b98-4a72-4508-97da-ba2f95e6bd40",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35f7c59a-f5cd-4432-b66f-0ab2bda2c7ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7b0601f7-d704-4b64-a0a7-4aa744d2a630"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef0d024e-5a12-44d6-882d-951500893600",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "93ede700-f2bb-4d40-ae77-2bb33e22bf26"
                    }
                  }
                ]
              },
              {
                "id": "2fd261e3-30c4-46dd-a22c-2641b4fb9724",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cdf6a63-b434-4b75-84c8-2056511f450c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8cdfc0db-4c17-4d18-aedf-38baed8bbd47"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdc8bf44-0a43-450d-91fe-f0bea26d565c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1ee0970d-9697-43a3-a27d-48b590ab62ff"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "59f2fcaa-aa1e-481f-af80-4686c7648044",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "06ab9edd-5b5b-4677-94f3-a33cde291cb6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e91be5fb-3bc2-4f8b-b00d-e4a56db55e1e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56b52a3a-ad9a-4048-bd92-0802c99e22f8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d773e82-9960-42ca-97b7-7bb6dfaa74af",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fefe2114-993b-4808-bd18-f837b46e37ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3c1eddd-1fbb-4be1-b3ec-0c9ff8a642ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d887482d-70cb-4f3a-b3b9-020f3610404d"
            }
          }
        ]
      },
      {
        "id": "91b8d7d5-1047-454b-a770-70a98de90429",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "80b835e8-5d81-45fc-a159-1db143b8d965",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8271b709-eff5-429e-8e4a-32f71a1bde73",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f6830f2-9c75-4179-b2f0-6a831d0b83a7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438a1c48-9bef-4f93-ada4-25d058706201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9947c733-9122-4c52-9d6f-2879986508d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3630646a-a99a-465d-a943-7eb4e345edaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "25663f5a-ed7f-4c16-853a-37502afff2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fe6a52-4afa-4755-b121-fa9ad8737f93",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75865330-8131-4bfc-a398-0fdece454879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6984886f-712a-478b-af27-c5d900437e1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6ebd3f-fad1-4059-9e91-1f083b9d05c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "15b3dce9-32cc-4f20-b37e-9ca78873d7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470b377e-eb8d-44f6-9fa1-7f779b4cdd3f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f6b73f-d739-4eb7-b352-f42508806632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72f12c7-d91e-421d-b00c-1d4708d7f777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d0f461-51a2-4ed8-ade4-2be19df8386e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "450a50bb-6a68-4f70-814b-ee8012eac5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3febbd22-fb31-4ac7-811b-4cf0e1b20985",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4baa57c-4811-49cb-aa2e-229bbd25cc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ba1c2f-a3a2-43f9-a107-2915c28e2cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a5e4d3-7fdb-46fe-97b0-85712f583439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b9fe5e0-b099-4bcb-923f-49111ebc6740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe79400-5125-47ff-8ddb-4c772b42a198",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c7c25c-4108-491c-b118-812b812a3ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb27437-701c-4003-95b6-b9351678aaa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b25cd2-0179-457b-b67e-0f7ba9204291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d79c18bb-a1e2-44e3-86f2-5e74ea643344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fa3f6b-dd71-4234-b29e-3bff812b0262",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a7ad17-94e8-469b-bdf0-d4427e9520d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40957bc-1a00-4ee0-a45f-83ccf028926e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add8f82a-4997-4f5e-b41f-db25d438e50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c601bd8e-31de-4f34-841d-54f52f780b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b5ad34-cdba-407c-96bc-046b711fa865",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcebed2-c81f-419b-b30c-9c5bd55b54dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f73a25-00ba-4b95-b598-b8967915db06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd3830e-9bf4-4d34-9308-98436bfcf9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5da11b8-10d5-489d-bb3a-9f86a99e961a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bc1a6d-10b5-4517-ab59-7eb0d42724bf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d595f284-77e2-4814-87cf-aedc8d81d4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18448d77-e43d-428e-b72f-ee7f747de43d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c695a5b-a61e-4808-bd19-7bb6630835c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe5b5a0-a90e-4ddb-abe0-0c6a63e36189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe34bea-8755-43cf-a2bd-3e9658cdb03c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c511174-3cd8-4bec-9850-eabb34304d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3662c9c2-2e7e-4040-8f5d-a622ba2be113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3931295-1ea8-46a1-969b-0bae2136c359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a8047f-b9d9-49bc-a71b-d41f8117fb75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f6fc85-3646-44cb-bcfb-0e6ec4d15491",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "487b27ca-168a-4413-b4dd-63a1c71528e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8374174e-571e-4401-81be-2fee1b0db7cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c05e3e9-66be-474e-a525-990f50ef29da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbd9634-114c-42a8-9773-8861e2079df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4689a98-1454-4b77-92ab-7a35aeff6705",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5feea056-adca-4a1d-86e0-5fd043e4b684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a702a887-581c-4aff-bff9-c9999cbfceb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd97112-0e31-4e74-bdd0-f3a0f5a268cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5dc6c185-8ade-4327-a15d-10a96f2a8bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cb198d-63e9-4598-b685-a855027fc777",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94684f9a-18da-4bf9-87a7-36b4d90623a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee8b30e5-e2f3-497b-98cf-b2529005b0e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d451ccc4-0240-481f-8aed-7a28ad23fbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb10580-156a-4de0-baf4-cd085a105a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a922abd-3a07-4d0b-9334-a9cfbe6b24c0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e4173c-53c9-4205-bb19-bf6ddf5b81c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c54ee96-bd23-494a-b867-f45bf5e8c3b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59aac2ac-5afc-42ac-ba05-081a454678a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13207fe0-d01c-4dde-b69c-cf2d00d6f272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe816a5-9edf-4fb5-91b2-d37b662bdc65",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a57dad-ca1f-476c-a2ab-5186c0cea6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03698b06-e3b5-4bde-b5fb-dbad9d268567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdfe601e-b903-4c97-bb2f-095cb7bf7f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8019e545-5f96-4699-b6f3-7acb174a03e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f8d9f0-609d-4784-9fe1-3d57d21bebe3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e119bd-1960-45a6-b998-555db0a65317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "247c9901-8632-4514-8a5c-f0a6cdbd5ab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3db630b-8364-4cc5-9cb1-8be3b89effb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb35a691-2c86-4499-9612-2629ac42f8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa0072b-1536-4b54-84e9-64d024e846f2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0f65d1-590c-4219-8a72-8462e2208fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88597058-56aa-47e2-bfa1-a8f7477408f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c209584e-8363-4eb6-9fce-149653066895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "89f65676-ca8a-4be1-92e2-be8c7c227858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f051ecc2-e9c6-4934-a9c0-6b09be0d3a59",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a6ad11-d053-4b53-98c8-dc2601a330d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1823ae4-c48b-4048-8f3a-23d0afe148cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1b0d36-6ed2-4191-8b11-d8092e54e9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9e59b36-16dc-46d7-999a-cce6230dcb62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1ae746-9e0a-4337-9278-e0be352d621e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd74a43-740f-4aa9-973f-1feacb2b0cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0403430-63a6-41d2-9c8d-da00f7d28c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944f26fd-3791-4122-a2df-5be5f3e3c5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c31abe1-3255-4604-b073-e034b8ee9ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e4dcbc-fa76-49db-93d9-4ab1d631e836",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e728ec66-42f7-4904-9df1-58eaf65b20e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "348b6fb3-8663-4528-9fdf-f6551490e4c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7a7811-9919-419a-9636-94c47401b963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57001815-153a-4d4f-a0ce-655bc7810567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8177e75-89ab-4fff-82bc-f7cf126820a6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5880f7a4-da9f-423b-b850-fe064a996bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff152b5-d416-4399-a237-52496ce25903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87cdafd-39c0-42a2-a550-7fc6f209d89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "225bb01e-346f-41b5-8a8f-3f6c08dabb3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493010a5-714e-4481-a706-d1b108e8b81a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a4efc7-8259-4ea3-b8ac-1ac632df2418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f6e7fe-3e49-4ddb-9ffc-d9b16047ab2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42aadc19-1b55-42da-9321-5fe4bd92dbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40e79521-cbcb-4eb2-915f-c06880063375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabab0c0-2a3e-4660-9695-b1e91b04afa8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aceaf63-0ab9-4f24-bc54-68f1a6b34472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd9857c-51a5-426f-842f-c17c168f0f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884d1b78-a1d6-4b15-ad62-31d04a5bd1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bf6b2af-04c0-4220-b25b-c32937b450a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a41a91e-3e68-4b9c-8021-130eedaa74ec",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554bc171-6ba3-4dfe-873a-4801b16bf686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec00c3e-a932-4716-b5b5-4b593b409fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e0d77f-dd62-48b7-9835-942c4a35dc86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6314b9e5-670d-4410-80da-c74577d635fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475fda2e-b2ba-481e-a30b-ab8f949a6607",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b606bd-87e1-408c-804a-49ee6d2d6aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8edfcd-4637-494d-8053-e1ef96dc066f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2764bb68-3f42-4543-95d4-5784cc4646eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3d7113-f49b-4ed1-b052-deaeb5cc533a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a49277-e6c1-4120-bad5-ef8d7f7ee916",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c15d4f3-9a1e-4879-b6d5-b27c4230969a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b453cbeb-b8d1-497c-b5d3-a7c7ab6b5413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5801816-e588-4d52-8432-4f2ecd647f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c20dc8ae-a40f-4dbe-b29a-263be3a858f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c202ca2-ce19-421a-93c4-43a8f6326484",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71690a36-d69b-4e0c-bd00-16243613f10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77613b08-a137-4c67-b143-482e25038007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b079b59f-bd62-4238-9adf-94d6cef248e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96a9d9d9-86e7-457b-9dee-aa7ee91f9805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a982a39c-9f50-4837-8330-a90d3a4f8a60",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58eae1a7-d041-4fc8-a8cc-04865e047de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0acd7024-63fe-41ba-abd7-bea213665216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f756ea9-2302-469b-844f-23851d31da6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86a7dc91-182c-4133-b728-382434e88c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a147bf-f118-459d-b57d-8cf6a2d55cb7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8899df-9ce8-4492-8461-804e5fe9efed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59bfbb77-66a2-4a91-9359-277b72372da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b86e37b-7ad1-446f-8a7f-4f83466427c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31f1d01c-86fd-432a-8d1f-3d236c663f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633fdd55-e8dd-429f-b938-81a53c0f119d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca82f30-ceef-4634-95ba-4517f3a066b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23ef70f-89e5-4b8c-88a6-9ca9a3da1e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e126ac7-5f69-4eb0-837b-02bc349b0e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd81d0aa-8367-4425-b119-52141d875916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965dd3a4-835f-462a-8f72-797f53f518a7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffc32ed-351d-48ec-abb6-b6f0acf1f6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119efaf6-6137-412e-89ad-8800152341e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457fd481-f13d-42be-b86d-8eeb4c8835c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d855a707-601a-4a1d-877f-c6282b2e78d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8e8a24-c788-4b0e-ba09-3e9868c12454",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f14b0e-f336-4f05-b4dc-9dff3cedd5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b61d946d-6c97-4d36-b311-d4c088dfe5d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d23075-2a9d-4dee-9a03-5338388e9227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2976f7ab-1466-45da-9653-a43630120a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60bc10f-3e33-4758-a6b6-5237463047a3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c7dbb4-d9f6-4af0-a672-2a850988704a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10523154-98c5-46ae-aa9e-e419a260a6e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1b8c98-5296-4078-8133-c25c61d3eedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9273e98-2cb4-4f5c-ae3e-c1f2fced50f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5cc9bdb8-be05-4ee2-8846-4e4b9cf25ed4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8645270d-86af-41c6-aade-22dab592e048",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ed8b7b-8e98-4442-80c8-41127dfa603c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6383a531-fdb2-40e1-85f2-f6c5de4890e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2880fc1-2a16-4480-b7c4-4a6c125891d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21ded251-8fc8-40f2-9dfd-cdb9e0b667bd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8df00440-d1fe-46fb-a5ef-2c2af03c1af2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e5f2b69-a9a5-41f8-b247-bae547c5c189"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccf790df-62ea-4757-b61b-977328d9f1ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84555122-1b32-4faf-91d7-d6613f20bf9f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15ccbb25-26a2-4549-9e15-eab896bd0a39",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "437f9172-054d-416d-a55f-a8b1527ecd22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45e3710d-55b5-4d18-8ce7-c2a6532e9dee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc06a88c-2d9d-407e-9dd7-42f545d1d5a3"
            }
          }
        ]
      },
      {
        "id": "bf6bddae-c3aa-4681-947f-9f4dcf546fdc",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1f5c95ec-69a1-4964-9f22-af460b311e11",
            "name": "Negative Testing",
            "item": [
              {
                "id": "845544bb-4ca7-4edd-a505-32ff716d935e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "94d20e20-f95c-490b-ba8f-c88652346f3e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da3d005-152a-4cf2-b16d-413cd52370d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3588f56a-0f32-439c-a92a-b5f41fb88dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbcd60e-114b-451d-a812-c4c67b88725f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c90f4dd3-5103-4e27-be4d-c89535851dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d13781-503b-4de1-8b11-efe2e3ae0504",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18b1833-9f3a-495e-b762-c554e5570986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bcce4b9-0a79-4449-9556-bd1ef1196334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a96687-e1c9-4bc4-b310-d7de9ed75bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36622848-f971-42f6-b21d-e180bad3de02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d6a2a5-7b5d-4518-b8e8-6e093aa8a7ca",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc74be9-c8d7-429a-9c4b-486530ef3456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "323513ac-0c3d-4e9e-a94e-f6e3178fac22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b1073a-eb4f-4eab-b825-91d187c18d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11e0147a-9274-4c93-8efc-822ae5a25997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95be5224-80e8-4e7e-9ece-960df872de69",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39388c6b-3d38-4d70-8391-f804009732fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da581b71-2635-46e6-ac5d-9893fde3c351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc4fe08-bea4-4e16-a466-85598fc5ffe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "91f97bfe-573b-4a28-8dd7-fb6a42b0b5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f55836-6078-4cfb-a259-2c1f46786639",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3f25a2-781e-4d79-9d92-0801ad601656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1839bc8d-8bea-45c7-952d-1545551a64cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce417e89-bba7-43bc-91b9-832e776fe255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "200f4e8f-4cb1-4412-a6b4-3b66cd2f65f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22777087-c7ad-4ac3-b4f4-702c21911ef0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88369446-551e-4d38-b36c-4bb744208c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37358853-2c14-423e-94f4-1842a56bc8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad622c0-f816-40c8-962e-12a5fb2e4fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fc48e5e-9779-4900-9e24-a83d32cb3dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f80ce9e-cfd2-45f0-9e34-27b1180aabb6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "681453ae-b824-45cd-8085-c59463c08b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8f2c9a-e075-4db4-b41a-1cb80e827b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c6fb15-e615-41eb-b78b-d8404d367019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "63030539-2f5d-45ac-888c-914bfbb0c0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2556a07-bd76-485c-89a2-4ab4d86386fa",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657dbacb-1e9d-49eb-9966-de8a4f19a9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a5eeb0-9a81-4b8e-9747-fe05816d2b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057c21de-6e14-4081-90aa-dc2991b95775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ec6af18-4072-4818-aca4-ab810c408c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b188ea5b-a706-438a-a53f-813929d4aa5a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ca23f7-d29c-4b66-ab3f-2aa43ba4e780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b05183a-b8e1-48ef-8638-74290f873771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907ba515-4f60-4ea2-adbc-a3e77902ce93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8fe4f61-265a-444f-aab2-873b5289e7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c35b8e-993b-49d8-9d66-cdadeb5ee2e3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2345a23c-9adc-4446-bbd6-0826797573d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9097c67e-8ea8-4332-b7be-a72962acd651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec56f2f-43e3-491f-bc2a-32ee8de7e6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1c37187-7b48-49a7-9b64-4efd8081392c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561c7826-0402-4d83-a662-ef16bfe3ee98",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b956b036-b0d0-4f43-822b-4e4cc9831273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8191d21f-2cb2-4fb2-b84b-e17cf64e1366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caee33be-99c3-4707-a340-abc3b24cd9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b35e7e8c-ece9-466c-a09e-dc87670143eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2088fc43-6899-4dd2-9cc6-b9531a7069a7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd46e506-1431-4691-bedd-21742c7ab1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07c20e37-9938-4b24-8110-0e7cab75fc9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb64eb4e-5901-479c-af8c-4b92a189e238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b316924-6be7-4100-abe2-9367871bf37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc8d12a-ed0e-478d-8bff-8c482198ee0f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce8a19f-b151-432f-b65a-852a831187cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9c4d61-8120-4645-9c4f-424fe59cc2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2a2416-f84c-4034-b750-e010d65b2c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba262caf-812b-4e34-8f52-deaf58ce310a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1d51ab-3337-48c6-8e9e-bb667f9a1b55",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866212ec-6542-4609-b6a2-fa165f3a78a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a44798f-360d-44bf-b33f-5fcc0cc03c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13488916-a039-4864-9958-9f9116222889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8471bb19-3b4c-447b-8954-12dc6960b83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb52ab8-1e3e-4b41-8657-236e4552d61e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bed1f6-2996-44a3-8002-52ce334c2d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8090384-163a-4f1a-b0c9-32a9a5ea239a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb7a7a8-ac33-42fe-b0bf-2967f459518e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c638b1b-170d-4b01-bd5a-37474c4292f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0d4cdc-4ff2-4b8a-a937-eec596ccf76c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b5a327-b5b0-4e83-a79f-22dd8d2b84d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45652a41-6f0e-4de3-8b6e-3d47ad919d32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59999ca-ef00-4b1a-b564-a5425364d9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba42a1e-4322-4a75-b5e0-5467cd706a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e23687-10fb-4db1-83cd-651b8502284e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2fcc4f2-dbd4-415a-a133-f42a90eb3d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90fbf1f-67e7-428b-8dfd-af7b301238de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e866dbb8-2a95-4b14-9624-92070f22c682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "092b2149-ccc6-4e82-9030-8b5f2a9f8fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4008afe2-6280-4c9a-afc9-deeb19e59d97",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88513451-d5d7-4a16-95c7-60a7d1525e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "909af690-5305-42de-a388-69dd4690feb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12d40b0-32f7-45c5-8b0a-4048cbf7ea65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fed81b2f-2003-4a84-8974-b238a98b939a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0b0333-6227-4e37-9ed1-d16b25eab8ed",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0224e468-494a-45ac-aa0e-6a3a12612daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3544b3c6-7569-4aff-99c2-48635e2292f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61931dc5-e033-4c0a-a598-461fb45ade95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1c84d39-b8b5-4e52-9f6e-e7111b5a3816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05aee0b1-914c-49a8-ac43-ccd749d3c748",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad4e364-72da-4a49-8aa4-0b29d83104be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7bb9f18-d9b0-4020-8612-d4b566d1278c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0503c751-8cbd-4211-b6ea-9dcba08dabcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8973b6ce-14f5-46cd-89e5-15ed6fdd8f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b906f25-ae31-40f3-aa6a-2960d1acae28",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0def10b7-610e-44b7-b436-3d8600698a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e776d3-7ceb-4326-b8e9-44ad1aed7cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae700eb-9033-4a0b-87d4-89af1feca1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "533d9802-d60d-40d9-8521-584bb6d9f8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62e0882-6436-42e8-838f-80387c45fbe0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52edff9-89a5-4cf7-b147-fd545a406f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f503e4f-5dcb-4bcf-b863-0c1b75231617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66922621-6956-4e1c-aead-b82a5003590b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c68ef07-a664-411c-be55-a357a3841575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c0a14e-ab27-49a9-bd5e-6a0de4e3cf71",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2b3512-57bc-4070-930b-3d539b73c44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f032bcf3-579b-41e1-a001-1160e70eb302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f028caf-74c7-4733-ba3e-9cbab4f2a083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad32b39-2151-4290-8db0-f2bcbae51ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172ac555-cb3a-4027-bb42-be7510ecc3ce",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e0d120-ad3a-4c02-9b5f-07c007c0b0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76d61e38-28d1-4314-bf3c-6f0a13a57edb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07878606-1a8e-432b-9553-bb7d7a331b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edff5616-9af9-4881-80f7-8ae9b541f864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8943ccc-1381-4cd7-a3fa-b4b89e87d1a9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469691f8-2462-4312-a2e4-189fb2e39ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d14fd9d-7bbb-4c47-a59f-76f2415045dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e503afe8-4dae-4e38-839f-ac5818ba3a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54c69cdc-567c-406a-bf95-cdb118659a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4710bba-3e9d-4a75-b6ef-87d3821c0847",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad550a07-58cd-416b-8209-ed30bb10a368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de66535e-30cd-478b-a9ac-128849525229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9af1b4-ab9c-4d3e-9a1d-6d4ffa70edee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce70ca1-87fa-43cc-8656-86500ee7f24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b1db8b-dea1-4a84-8504-ecedbc932940",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cde1f19-9e01-426a-a5c0-56176ec500d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a45703c-6be9-4f01-849b-d093b2939c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c698d9-be71-46a3-92cc-d467271f7504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70791ceb-9a78-41f7-a4b8-a59ae18dbc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f365287c-fca7-4659-83c3-90d6886c0712",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b80abcc-5f33-48ee-b8fe-8f267f19c8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ad5bf3d-5795-46e5-a627-593f007f1764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc0f98d-47c9-43de-b809-dd7198668ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "339b2845-d64e-4b69-84a4-46c5658371cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559d4a5c-e0f2-4df4-9f41-a4b29eef5d07",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39241c63-7016-4032-a328-4c08bd3b2e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c7bd6b-2f4d-4a76-9117-4bf1089d64f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63f0e54-8f92-4bc0-81b5-fa24859cf3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53bb42c1-e1e0-40f0-bace-d15e940b522d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02dd15a3-8f0a-4c71-99ac-926576c15e0d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "465d91c2-eee0-4309-9997-a7a08491f837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7057ca9-da87-4736-beb0-ae2d01602447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92b2f64-ce2e-48b6-8437-b60fdc3addd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4765806e-0c73-4d33-93a2-17ba3b55355c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95f9483-0979-40ca-8447-6da96c68e4a3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d979ca-903e-403a-9461-bba46c503152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4ca16a-0bbb-4d0f-bb34-43aca18f889d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f49b84-4d51-46be-a692-aa04ac09bdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bd9dd60-cac2-4729-bca1-301bcb27fd04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee7aaee-f70e-4cdf-85e3-6cbd1ae58bb5",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc83722e-644d-4b0e-a7cd-54936c2498bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2360f9c9-528e-40b7-8ed3-800ef27f1138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b56200-83bd-41da-a78a-8156bca1a730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "645b8bf3-4f2d-4b7f-a682-58409acc5fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9739f9-c65a-4410-8fe9-51a760ad9556",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d434c9a8-1fe4-4113-aa0e-a7e6e094c43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f09095-b582-410f-9de7-bf48b89638d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c356993-2193-493c-9fac-5e7183440d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a9112ed-f03e-4736-8c1b-5525677c5cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e3cb57-f7fb-4a59-89a9-cb5f047f55f8",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69a2a69-e001-48fb-bbff-cfcb790a4d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615fb038-70eb-4bdb-b051-306c7ef7bc94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd69ce29-5a45-45e3-8844-335e9a2606d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36f56d90-34e4-4d99-8978-c78f344f4166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5649e9b-aeaf-45dd-a09e-33dd39adf4d8",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b29bcc-878c-4fb3-8bb1-737d7632f6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1d58d1-629e-4f82-ab17-e031579d068e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ff2019-6b2f-41fa-a278-9e9a1874eb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17cd2eb0-3397-4d20-ba10-32f30898cf9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e8cb50-acfc-4f5b-b07f-68844b53f7d4",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2020b449-61b9-4654-8e27-0dab4a0ae155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3553b5-33a9-49fd-b211-f9da8b8b219d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cde34cc-0550-46ac-94b5-f473eb872f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc464370-7482-49e4-ad6b-e7cdd0e33688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e6354b-6f69-4e19-a330-52d13e0a28fa",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "698dca1c-2132-4e53-b984-d519e99149a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "493df0f4-d115-4a14-9097-c9b02c96ba3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acaf5963-fd27-4e40-90e0-d926ed626cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4dfea9b-39a5-482a-8d10-21fdb2818420"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3f58755f-279f-4811-a4d3-2ccd10da958b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32555c1d-4a79-4751-a282-ca7d0de7e0ee",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe664b1-1c0b-4b7c-ab93-896df2bd8c15",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e23bc07f-1654-466d-8ee1-a7cdc8f48efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47925b03-c341-4f04-b8ba-f8d7370da0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43099c3b-120e-4b3a-a119-78de4603be02"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "973b7c48-81b8-405c-b043-bdd66df052f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a32d2b3b-e0d3-4a37-a2ac-a7defc2a9391"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "49d4b731-af3c-4725-a44c-ee184f705c15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a12d9b40-0e2c-48d0-8714-abb1396cb348"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "002756ae-d18e-4f60-ae08-95fa37b92cb9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d13575a6-f8c6-4515-aed0-f2a0e8db427a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "09c31ef4-b6d4-46ba-93d7-2edbaec4d47b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da75b0ff-8ad6-4741-b29c-207e399c134c"
            }
          }
        ]
      },
      {
        "id": "e6576f50-d247-419b-9dc5-9026703c3a52",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "81e708ba-81cb-4dd1-bc4d-513d9fc3e621",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db66feb1-78d0-4022-8f41-3a6d4f544309",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "46f70c36-daa8-48e0-b1fb-8fc4e3e64860",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8452d1b3-f910-4b40-b921-fa84d09b718d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c6ed92-77ff-4887-a6a1-fc7702b6b549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb4ca68-f83b-4e44-a235-d82b6584ce41",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b90aa0-6fac-47a1-84f8-2a53aa9483e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a926c1-d2d5-49ee-ab44-84c529868b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accd0e26-71eb-43a1-8987-91f15655fc58",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa325410-9008-4793-990a-f919ca4e90d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d521a777-4e4c-4ccc-98b7-d16525a79fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b656229d-52ac-4ecc-aab1-a1a63e240b29",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa668d4-cf87-493f-99c0-858f206de3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55efb968-9b20-452b-a5b4-20726df7ab2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664ee0ea-2cb2-40e5-8eee-bf5248467a90",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c896a17-ac1d-49db-b63e-8290aaf7ff90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c975216e-1544-4b24-a53c-a37bcb1c5576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d116675e-3c05-4d6e-b21c-e87421259c90",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac0f073-7638-4051-beea-e4719c269fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09ee3c01-2a48-4e57-84f0-8444046e88f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f280abe-76a2-4aa3-94ef-c20ae29bb2bf",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a6e006-2776-480b-871f-fb3b3b535136",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2757ddc1-f78b-47dd-8cde-f57fa5ee68aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11380fff-9954-4bfa-9e2f-35c3dba07804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf76368-8042-4303-9a3d-9d74c6115b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fef917-30ec-4df6-bf43-1783db8e8208",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839cfb43-5f91-435c-bb78-2dabed134761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b006331-fb44-4500-9c5b-6e567404305d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4633f8-73b9-4aec-8413-f99ec18f186e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f86b3b9f-d996-4027-b388-0ca32f25000a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53410a31-2862-4368-b278-993f0eedcf4e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94378c11-1ba2-4d5d-8d7f-e05be5ff36a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba38bada-265c-415f-be4a-938078086fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "553ab862-5ccb-4177-9f2c-6abbe41c0cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a579694a-a281-4c10-a59b-ef4c3ab26bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3235527f-68ac-4fa2-b042-50d46c4d8b9e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae448fb-be88-4a19-800d-4b773d049ef8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a808a37c-6e59-4334-ac71-7d3940401177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c01ebc-e961-46e8-a6fa-5934607e60a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26416c5a-2af7-472f-ac8d-d61e816c5554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "150aa26b-e0cf-442d-a6e5-79e7e644f268",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e85b2d-59b2-4ed0-a82c-4571284dc65b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68c5bdd-7cb9-42c8-bd8b-4bf3c3cc1322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23daf5db-2d98-443b-8041-2bc8d7d80f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6ad1ab-2e0a-4a85-b4f0-0e64a0f7526b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5410f69f-d809-4d9a-9a77-e02829b974d6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e6e785-c400-4c4e-81a7-ffd226334c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe85227-6c97-420e-9abc-254451a97c97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eecf8da4-185e-4652-ba31-11f824500dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe9cdc2-c08d-4a23-ab98-2af0389e2ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c76a612-6e08-44c4-9a98-b3805fec10e4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d50c3c-97f8-43ea-9a24-b5d73fae47f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6292108-591d-4a7e-a401-aced99483107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1111cfb-07d7-4fca-b9c1-9ff8b74289e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cbe85e7-53a5-46be-b39f-1575fd9b627b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb4ab09-3ed5-4064-8e77-8e0fb59d4312",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280cd5a1-cacf-4351-8cbd-be8586f73c2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0bb57e5-b474-4c02-a153-56116b795f50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bef00d5-153a-4cf1-8420-fc956f504571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfaa9cba-e87c-4f68-bd5e-a3bf33e4624e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11e63b8-9835-454e-92c2-8fa8ed3e2c62",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9651375f-d20b-425a-bfe7-456581ece7b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "966c44e2-1bcf-43f6-aa01-c03f04191034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "767648b4-48c1-4f31-9f07-79d0dc5f2e7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8964fc-3c36-4605-b340-281fdcc240d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae04939-a4cc-4025-ab6d-83a706010ec9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a1a3b5-7a09-4e43-85ae-557edd0f7196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9feca4b7-246c-4e8d-86a6-bdaabf581f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a6e0b2-94cf-4b93-989a-2ceb59e4a050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "013334f0-cb6b-456e-934f-ba08f44ead4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266f6bec-aec3-4e9f-b425-502c12fc2184",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188d8e60-8417-4366-8b69-26bb91ee8acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1016e03-2a5f-4bda-bb36-cbb14fd79a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf3de38-ec8e-43d6-9fe9-addd13ca9034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "886f8dff-03ae-4f44-a8c2-594cedc8ec56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10f8a5b-9b64-4ced-b776-d26b98466ca3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981cd67d-ea54-4c2e-98a3-7b5a50084ff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4486b8-3158-45c4-a2ee-23d8d50fff33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7bd214-c24d-4d35-b33d-486355090989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d89e63-45f3-4dcc-9339-2e11a8487365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ca61ac-d8a8-4a80-b977-f619ea3ae4ef",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453a163d-d298-491c-9813-2d7e5625b806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "770fd177-a068-4be3-b1d0-d6756c8b8439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f41354-192a-49a4-8d89-4631baf9c8b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "629ba0ce-f647-4c50-9d41-08bd9bac22d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3dcad7-c621-420e-8ed2-a4a06378ecdb",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5427338-1033-4f4c-ab4d-5713d0761071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606a105c-a751-45a2-82ef-6cceedcda1dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7009d7-cc41-47b3-b276-31171dd7a7e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d801b8a5-da9b-45a7-b233-1a09528c99f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5127795-8fcf-4e67-b315-8b1976567d26",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff6fb36-07fb-4c09-8988-a9cb3eb2e647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07967131-df6d-46af-b042-b2f45045fff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17aef2ca-a822-49c8-a4ab-792f75a06ac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3a3628d-98bc-423f-a2ee-012f57583651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3deaa90d-8f8e-4d34-9940-acd0ef7d8d82",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8fa920d-80ba-40b8-a0b4-6c09166efc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa95a3f-9916-4760-a5cf-85f2e2cb4760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9f3da0-6d6a-480b-be34-1816248693b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c79b80-afc8-4534-bfa3-832110f3af64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0cc1a4-2058-4fd3-be13-1724afafcae4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d945d3-3464-4944-a93f-a6ad361d93e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e639f9e-fb52-4758-90a0-46e930448e3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45685c5-516f-4d08-9821-f86d3585bbf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "918b8db0-46b8-456f-b555-8c897f9518c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6e2963-c736-4461-959c-d92ac64b916a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2b179d-3c64-4d45-b0b4-46d94d293277",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd844285-41d2-4d63-8627-aa304d35fe29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9b2059-c944-4d55-a374-0ed26807cf63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb849a6-fb0a-4422-b8e4-7dcc13b86748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce49ba1-a7e9-4fff-85f5-ab972eeafe73",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9bb7fd-4064-472e-9f35-2ec3e9fb7efe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fb72af7-b002-4ae0-a181-83253bb4572b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4c336e-2f79-4a4c-8615-bd3043678cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c24106bc-8aea-4d8b-b6d1-d73d4de576b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ff098e-9bc2-43bb-b90c-b5e7b1980948",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96092196-4b0d-4f70-be6a-8101d42c9a0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02e64597-2c72-4608-b098-c3f135a137da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2eb746b-2045-4f5c-82db-1bdad9ea7ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b20bb30-cfd4-4652-af3e-d4fc46bd47b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a52a757-52ae-42ce-ab03-8d15574beffc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08dffb31-16a2-44fa-a813-1c751fb58f62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a89edce-4177-4509-b026-490cd7936a57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449eff95-d8c3-488c-ab0e-ee126b95a77c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ac0472-bcda-41ee-9124-b101a74295bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c772c9b-5757-4ed9-9d4d-3d984c75e6be",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ea0a55-224a-40f7-bd5d-4386df9fbf10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b642282e-125c-420b-b71f-6f4ad6687092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb9ce0c-67be-4dac-8c3c-7e7e64e19f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e7f1d2c-3b36-4307-8928-faa186ce9d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18ee455-4436-4893-8de2-fd0a48397e07",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e895b13f-c3b8-4d70-ac8b-24b237b76430",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "387182e1-214e-456a-9569-8a61dd6f41bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "543113d6-eab5-4e7f-a69b-5840abb2069a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d196f4a6-c168-41e3-9a05-50467cf23f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae96e05-2b1d-4aeb-836a-97a82355de4f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb3bf57-126e-4791-8ce7-57930b3933d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1a0d633-0a9b-4e9d-a1b4-d2063674c891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b18f00-46e6-4c00-8a29-54b6f879f4d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c6b109b-5ba1-4b77-87e8-a65844dc4186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708e2c78-f845-4fb8-9cf3-d9d61906ca5a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2346473e-3662-4de4-8921-4b8b68d73c0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc282890-a341-4dcb-85a1-6f3a7d4cc684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbbea860-7f75-4946-a4a5-63c7ea4630d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d6127a-7781-487c-acf9-0f1380466563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d42ae9-9837-4fb2-a817-299c349da1ca",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82251481-2535-4bed-aa1b-5d6045304147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70d0b10d-2052-4416-92b5-03f3beba0182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce648c27-2152-487a-9a20-d9f6e6070626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9579c28-66d9-43ca-b8fb-a83051a93c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f24ca2b-aa1e-4ad3-bd4f-6e85593ba449",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b637b23-abc8-4177-9e38-65f4d4661dbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9f8a06e-2c81-4946-a507-5b9e4eb134a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f6a31a-943a-412d-8775-65fd160877e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c750b8-417b-44fb-9dd9-fbdde9d39247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5cd03a9-93c3-4b3e-9e46-69d4a31a7d77",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1740be0a-744d-4cf1-a0e5-2623072386a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "906f6e11-d080-447f-817c-aef9269427ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faa6469-3c8b-4079-958c-ad433c8d9f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56e6adaa-5648-4930-8957-cdb6823e39a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c289466-84ee-4ee7-8baf-1fa849a1144f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d963424-5907-4446-acc9-af76a1f456e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32dcd0a1-a9f5-48b8-b7c7-3d36e95dad8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ea855d-e664-4e43-b594-4bb5801c413a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94ace6d-76ed-4e14-a802-6a37abce4a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a53131-9e4a-4440-9d3d-f9ae81bc6ca6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0d7f23-1a4e-4b37-b22c-7e8f79ea846a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bea3a2b-134b-4d1a-bd08-c9b2e455fb45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbb9031-aa90-43be-af65-86cf3bb4c5dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "438f3da0-3169-4676-99b9-8e8d82f7d9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e64b23-8eba-4833-93b7-3551817ab9db",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03289177-90a2-4ff7-ab30-fa69e80b737d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f513eac-01fc-4403-b32c-29d492fecdd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181e3206-28b6-4699-88f0-a027208e7d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9652f20d-22c6-4edd-8558-9c36ce52a1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3741b4-7953-46f7-ab91-0359c0855f48",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd12e7df-3166-4a53-a423-e888de9720c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c23e1dc2-cb6b-4909-ae60-151ca1c6f05b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbc708e-d2cc-48e8-99e9-623562673842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933076f5-4e6c-439e-a9a0-3214199f6b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67372326-31f5-47dd-b512-2a6fd692b97e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e62601b-176c-454a-8fd5-b6dd112f4577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5e86c22-d292-4300-be50-f45821c7ed7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e24df68-f577-48ae-af66-30a2588d6929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe8890b-4823-4de7-a3b9-eb0742532a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0184c0a-1d09-4cb2-8681-f8d1bd70f403",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a11613-8779-4724-a8a6-4a14661993cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e19cda-cb84-4bb0-a643-cbeb7d4d8d51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ce20bf-b5d7-480e-abad-553afe60c3d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba5edabb-a48d-459c-8eb2-2851f32abcac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddd1cb6-b666-4074-9792-e39540b19ffe",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d637933b-5404-441b-85fd-e7cd1e921463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "903b446e-e7aa-4d2c-b278-5be7738026dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "235c323d-d2df-4865-81e3-651c3cbd2450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25636ee7-ca08-4d23-b5f1-2bc43c740907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70f4956-2001-41dd-aace-ce6598733c6f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180fe214-0383-4c7b-8747-5c60f1671fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a1ab74-4f00-43eb-b0f6-f7acb294b421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4f9259-6fe1-41c1-819e-c9574ff0f1b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f16de71-7cac-4356-ab5c-4d4c4e2b06f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68d3eff-28eb-4b62-986a-8279b18b6114",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8e6a9c-35d9-488e-acb8-9a5b0fd02566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c82bb4-2732-4ce2-bf73-60ac99d74663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d75968-8e1a-499c-843f-b6d97e319b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0a4484-803c-4e70-bc41-d82e9ce74aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d6d50c-4327-43d0-93b3-fe30ec4af4fa",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da93041b-586f-4ccc-a548-0e99be4ebeba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83373dba-4e12-4c7e-bb52-ae5f95b37126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c09ed5-1a34-4202-a436-4d2566b0ebf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d63e18-8c96-46bf-bfd8-26ab1bae7939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e1ec6c-7b81-4bef-b5ab-6abc20414c53",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f2a9dd-4e94-4280-a209-306d30b1dd46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4807d02c-0e2b-493d-abcd-6b7103cb675f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24eb4c7-7939-479c-9af9-8d445689eee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cce6dc4-e104-4007-8ac6-762b24b9590f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2e5990-8710-4763-a659-d0002acb2162",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659b61f1-109d-4fdb-93bc-e69e7ba7268a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad9ff21-77ff-4daa-92e7-21a0dc8e23bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf5d803-580b-44fa-88ae-099871837a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26795093-35e4-48c8-a716-d5b1bf2ec735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26532df-d3c1-4e51-aa70-cd0b984b5005",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce12d189-8f78-4576-9980-08033c32c9dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9fbde52-0cf7-458b-89f1-0247553039ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0204553f-3e55-4908-b486-9aad86c4f3a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8f16579-a99c-40d3-9671-fa5414c818aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d43f47-24d3-4b22-adc1-f9cd937de5bf",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70fa740-183c-4171-8571-17605c794bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df6bf7cd-9f22-401b-9882-5433829562e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3c2102-7a85-46f7-858e-16fc2e4fbb71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79caf415-8c7d-4df0-a14b-62a024a0d4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9d7b15-d918-4146-bb0e-77dff8033818",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4e04bd-c716-4689-8aa3-3b8520f71872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c42519b-5198-4af7-8120-304403d4db20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "127ead27-1024-45b4-808f-ba31a81231d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "718af723-11f3-46a6-a706-7dcf5a285424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0bc09a-5044-4ebd-9685-68f0b662e611",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3517d564-3257-4648-a23d-89b60d78ea35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c489f41-cee8-455c-8623-8c7e77d8ca88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bfe28d-6d73-4a90-a958-b012f46c1363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a30ef1-da6f-43f3-b1c9-3fae0b52bc18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db29f0e-f7db-4cbc-825b-bf839118a746",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba205c5e-eb2c-42df-bb61-ec2a514e17e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb5a63ef-a6c8-4ab9-bb11-70317cc1e041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe592b78-a965-4bc8-872a-33ba7b9f8428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da0d33c5-7743-4593-bdec-afc30c1dc4e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43986c29-836e-407a-98da-4c7cd48a2c76",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7d052b-8ce7-451c-b78b-e0e10e329954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b56664-5d7f-450c-ab15-38e5ce485492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e37e8d7-a7df-44e7-a971-5dd0b8c6fec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cfa4883-6a10-4f06-82a0-4f4352937234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa80647-6406-4a10-bdde-e15095b0e54e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92547f2-daf1-4d83-915b-5db710f239a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90304e16-81b4-4551-96b4-0d4dde1d8752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a66c7d-5a86-4211-916c-7b617177b3be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ce72da-110a-4d91-9d9d-7d0d400051e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d609d0-8684-42e3-a4e6-cd6e7602d26a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e517e7d6-a436-4c3c-bd7b-bd4a976b755b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7c51da3-8974-4706-985a-b4f27902ceca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92817b39-aa98-4f27-97db-73d4648b9f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a8cccad-7f7c-41f0-ac2f-bd61123df50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7028dbd5-b62b-4a4a-8d60-6f0409ae2b6f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52c1e01-002d-42f6-ba6b-206fd1f00e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ac096a4-af23-49c2-a179-f3e09ef05c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f007b852-8063-4b55-9a34-b06f62cfca89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba66a55-37f0-4888-b9c0-5423775e683a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeabae9f-0ed2-4d4a-b6b9-def71deb717e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db17891-5b74-49e8-a65b-5b1c3e54a4f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75d2345-de32-49e5-b246-bf139ba979d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "985e8ecc-d082-4eea-addb-80988414cf30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cca9598-ea74-4304-863d-4711c59b18b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359045f3-4c54-4f72-9a8a-e859e4d932b2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ef15af-eaa3-443d-bce1-275132d8cf77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "135e94e9-75b9-4e51-b370-fd03b1ebcc09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e61dafb-09e2-45a9-8d70-fe93c8c470f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78c3bcc7-1c84-4e03-9df7-60dac0651a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1635d3-2d5d-4971-ba52-4e9aea653b3a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4035de05-13cd-4696-87fe-30dbe7c8e3b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48e1e4cf-266d-42b0-b366-70b869294fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65cc3086-022a-40ca-a1cc-12978ea9895d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a00452-5134-46d1-b5f7-16eb9ed2e3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5aef572-2470-48a6-93b4-b39936edc2ca",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a293b6-c79e-4935-98ad-a3359d9b271b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a0b538-a2d4-4924-a54c-1099009a6ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa4b89a-e831-40bd-85f2-04d2b9536dca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "529d7092-4d09-440c-b231-0d7004ae9c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95be8858-2b73-4e92-8bea-2353e61e9b92",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bb7ab2-d1ac-4eed-a668-29013744896d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "261b3566-1697-474a-b2bf-741eeffc853e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5c1ae3-f4df-40b9-9a78-0ffbce2ea24a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea90b0c7-00c2-4c4d-9c0a-44d5b521e058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5942872-36e2-422c-b5a4-58eed146371d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb81c6b-e536-45e2-a52a-0fa9a300096c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51780ad3-8c54-4317-a532-3836c3130666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "840a4787-111e-4f5e-a4ea-9b096ab5170f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3293a0e3-c146-48a0-8bba-0df0f67577bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932b5270-f5c3-4aaf-9421-93717d1b1037",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c9d89e-0d3a-4654-aa48-dea411e959d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8fa17da-cf19-4b2e-ba2a-ae8012dd94c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "163a9d1c-48c1-4ea3-b51e-5be7bac2239b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68399f78-437b-4a28-b7b9-98ed6bea583a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ff61f2-1685-408f-ac15-cce5786df596",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921fc89f-94a3-4e13-9ec5-40b1bde7e840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10934601-1b4e-4baa-9519-d29657c27a2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eda12d1-ef4c-4ba5-bf2b-8d660d029aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d31784b2-9d7d-47f3-9469-60c50dbd54ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9651ac-ae83-4a68-984c-240978051913",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277c36fb-489c-4fdd-bf4e-ab2fb699ff34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eea2426c-d797-42a3-9190-c8158ea8d0c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c235bea-ebce-463e-9839-bbf49e910c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e734c3-c7a6-4ccf-b479-e911117ed188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf25682-47a2-4d5c-a665-27e2c3a1d102",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3529e07-1800-4b00-8210-2795185c6065",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36a2e5bc-9edc-4256-b8e3-51e512345d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ed4636-499a-438b-b759-80000f15e40f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdb05147-9c1f-4589-9e41-ab67390de8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f30853-c083-4e78-a5ae-d5630a2bae6b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a02e25-52bf-4f60-851e-4950504e880c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0174cb02-f3c7-423b-9107-bc7d001d4f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7af6bed-7555-4456-b37a-fdf3781bc850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66885387-aa55-4ad0-89cd-cb6398e7941a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f72c6f-8afa-4719-b7f2-c8ac2f87f7ab",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f41869-a927-4e82-86fe-9c491a52ca65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "037e57a6-e4eb-4a4b-8eed-df5149f28053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "687c54bf-6ecd-4f4f-b7ac-23d5b853789d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3040dd1d-880b-4b9d-9977-1bffe50d3675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf51a21-15e4-4314-b582-0183e1f91311",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c2ecf4-c0c1-40c3-ae31-39d9e7e91927",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "797c0623-3949-4c2d-9ce6-0a25264af9da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0aa64ef-759e-453a-afb0-a5ff37ebabdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c89b318-c325-4b24-94ce-1cab66781d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60967233-08a3-4dcf-afee-6880ad9aacaa",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e24ace-ec55-4314-b872-fd4eda1d6d1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c73cbea-1f88-452f-8533-04a41beaf5a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c679b47-2013-4e1e-b549-4235fff9e82b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a41136c-70a4-462d-9e02-014df3bc7930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24bc20e-9d22-4a25-a886-c09c9bd10941",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51378f4-0c7e-47b5-9d7c-005d35dd86e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "807fbf7d-ae88-4079-a585-4bfd8a74c8f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfe83a1-de88-4a41-bb6e-d2ae5fa4754e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ca4ff0-6b8c-4573-9d10-28f701a4ed91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e07dd1-08d3-4c81-9113-45a43e75b5f4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb2b2eb-6c89-4f52-be49-71de3d81adb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0a51509-459b-4477-a9bd-5ca5f82ec175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb82dad-c55b-41a7-a4c6-03de2250bdba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be9f01f4-21cf-4bf8-8737-4a06be766eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edec7ab5-44b8-441f-a198-36ac82425e42",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63379c63-a4a8-48ba-9b9d-882ce7fc886c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "194871c9-d239-41a9-a872-b093f9a94edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5836735d-dcd6-405c-beb6-19f391011141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a6a3d2-4fde-4ab0-a323-9a308c8f80cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b063528b-1db9-49be-b958-ddb4ed66814b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e2ec1d-cf9c-4c1c-b1cd-285b122477d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9afbdd96-aeb7-4655-9177-5699460c57a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ad3a7a-b425-4dfe-8ab4-646470c6b3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9fd6909-7def-4a81-aeee-c48763a9e725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b1c8c5-7c50-4868-8758-8d742a85af5a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed85a68-d9f7-4cea-abf9-3b845bbe711c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49fce64f-e207-4948-9e2e-99a7a35d516b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84cc49d-7a90-4837-a17b-c08b160ab42a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a740d9-ce56-40ca-8d1c-b32eff21e7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd89dbf4-bac8-43d1-a506-3d9f055aa279",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efdc4c8-004a-4f76-b490-e4baf6f91436",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54445403-1a64-458f-8da6-79a14f633db2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4299585-7433-49c9-8a4c-eb8b93486774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b36e85c-074f-44e0-b177-7b1beafd0c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f31c31b-86f5-434a-8e3c-27754c686b60",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf459c7-6894-471a-a113-3c10ead2214c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8444a16c-1e91-460d-a68b-be76802978da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ccd6b9-d1c4-4ee1-b040-bcf48cca6f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c39f462-96af-4286-91ef-969e38d0d980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b7cbb6-902e-4b42-a01a-250b0cda4ddb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ec583b-caf0-4aac-9c5e-09d42232c5b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21f23332-53dd-4ee7-af10-579876fadeb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcd1f22-96e8-449f-a3a5-760324bb2faf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e4ef2c-cda1-463a-bee9-212264d63084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee690f7f-1b7c-4109-8ad8-968f63c581ea",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ba138c-cfd9-41c2-9198-34bc95ddec04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3da37e91-0b82-42a6-baaf-02c8101568f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf5d4ec-abb3-4409-a560-7325328d01f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5754b0a-8c71-4657-b191-d366905a9460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ab4eb4-c82d-460c-a7e3-96b569333a75",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa9ed4e-9c93-41ac-b3f8-2e996fb65ba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "993d3f59-8c1f-4ad2-8168-70e33dcce069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4490ad8b-bcb1-4bb6-8fcd-e188084a4c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52bfca04-12b6-4c29-bc7e-646672f514b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c386e32a-b289-41c7-a54e-328e589f6446",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e446537b-c12f-4df5-983c-e83761da63de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd57e23c-8583-4af2-b9df-40e70076d877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff02b025-8b5e-4e59-83e0-e06ed084cc16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f6a2e4f-ed9e-4958-9ede-0d245be70f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e396a6-0c6f-4abf-8034-7d277b2abafd",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e809eb-d1a3-445c-9a41-cf814dca812f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dea13272-88db-48a2-81c3-39d2e0e69913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13727c8-63ae-4970-b4c1-49de60af0735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c70d8012-04be-46cb-a757-8bcea684e7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01466405-e428-45d0-8f87-4b36eccc23d9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad84aee-080a-40df-a5f8-870c7be87343",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a9eec7e-afa1-466a-acc9-b58c8a8b37e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23c6e3a-3798-468a-b486-eaae9c872e04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be400ea-9e92-4f8d-9cf9-ae2cdadea077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e9c3d3-c78c-477d-af79-e9d6a3c3b122",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6482505b-a1d5-4017-aa41-dcdeb49d869e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "321d3890-c5bc-4e72-ade9-d8419380b44d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2915d0c8-a684-4ff7-b7a6-fee2dbcf112e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daee2bb8-6bf2-4648-a8df-8b4ea6db10bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdcd673-1f1e-4822-ba70-04bfe642b495",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1766e4b-988d-4442-b309-85f858d9348a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "866ecdfb-9610-49a3-93fa-ae251ca015a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "895416b6-f8d7-48bb-85b2-6661e92b0b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb4a0964-b757-426f-96a3-6a43b8a0c908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f0f5e8-5a03-4fb5-85d9-c9843d6d0d7e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b59ef918-2df7-49d0-ba32-f429013f59fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdca1e8b-643b-4be4-bd09-5585c408213e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af02c45-7b93-4a74-bdfd-496170a4f565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c0ce0c-5728-4401-be47-2715b7dbd2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781b9df0-c3c3-4a4a-a137-d8059e613a4b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387a4e41-d46a-48f8-b60f-68e7063a0b31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a307945-db25-449b-95a7-f2f8fafd8b36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f53616a-b9d8-48cc-bbd9-9ec2e475ae9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce53b4b9-a8bb-4c87-9675-e9fe085ef59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943a1587-a0f2-457a-829b-897db43668c5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fcbebc-5e2e-42f2-ad16-dfe0e4663220",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9510be7a-9371-4d46-8eae-a7300ce2f0ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1923b2b9-ed72-493b-82ad-5dbeb2525ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78f58982-c246-4d85-bf0c-8683717010ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab4683ce-21a4-4ad5-977b-c6dadd833f96",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a205c3b4-77c8-4b9c-bb71-7108f3584321",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a6da7fd-229a-4fae-ab15-0aa6fd234ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "561b7ca0-1b68-4d96-a553-95dc4bd5ec07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254486ae-76af-4961-ab5b-6ffceffb030e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584a8c91-d5d4-4b59-93b2-c946cbdf90a6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b48edd1-7a71-447b-80db-2477997ce36a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a213cf79-332a-4224-8a83-174673c0c5e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c4f331-8d1f-4712-a6f1-1a00e95f52c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765d6142-f96c-4312-80fe-4ccd3c82e8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d81e87-794f-464a-883e-6ce84897c660",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aec67e7-20a0-411f-8829-254544446c52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7526dbaa-82a5-435e-9603-9ad4038d0a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfc00c2-b406-461f-b282-f9c92d2e2098",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e8c1f9-f5bc-41ce-9129-ff92a52abc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25617f70-f387-45ae-a003-da62038535a6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178de2e9-d501-4c6e-b1c5-61081859b6ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd86d637-1aa4-40b3-a277-f01b53795884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3893c43c-65ab-41df-87a3-0d38fd3c7639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ee01d0-a910-4fab-aa42-d8255afd9096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9451e6c-3854-466a-a789-c2dbcf9a1c98",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d46c93-63fe-4fac-ad5e-8ab4d0e3d36b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ad1217d-582d-486e-82a4-b5ad8c7a9bd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61f89da-4fad-4747-8969-5075aea1b82b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51f2127-1996-4afb-a023-7b9aabc0d9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2543a497-b719-4b0c-8754-60eed989ea9e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b129520f-c2b4-471b-9b57-971f5d77d961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cf84ccc-4f60-4eb3-a5e9-f6d69daf2537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5502da83-ed84-4735-9cbf-98199d6b2575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c88fe7-9aeb-48c4-9854-1717a9399513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071ad2fb-9005-4988-b50e-ad101cdc4a44",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ac4628-f347-4328-ac95-bd50bafa94c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fb0601a-f4d6-4bca-9dd3-1cf13f7b7a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "548278cd-a10f-4ec5-9d77-2238c7ac208b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4544ebec-7277-45ab-a870-83d973787477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8abb047-3511-4b14-b5ec-4b64ca2e75b0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86112c30-8616-4b84-974b-b3b98eac2fe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89cf6eeb-3946-4f2c-bc81-938c0cf7c5a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb99fbbb-6024-49d0-a8eb-0d959a9205f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e146f4-2ae1-44e6-964c-0515d6d5a52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b58888-6d1a-48fb-a681-0eac8c23b0a1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c79dff4-b5cd-438b-a334-a65780fbf876",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5a306ba-4f5e-45ad-a44f-2f974239ab50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b36915-e754-4fad-bcba-9fc8270507e1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a9a32dd-b33b-480a-a195-c8a138dd4d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654aac2c-fb6c-43f9-bd16-cc63ecd9db87",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd954878-f1f5-405c-99ee-97abffab7827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b66af29-f9d1-482b-ab8b-09bee7f6bd11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "951788ff-e858-4446-93d9-10e16df36e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ac3aac-0b7e-46f7-9bb9-b1e2da44caf7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad85908f-da94-49d8-b193-2ec75a32e2f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d86ed4d4-2469-4ec2-ab15-fe8d802288a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "584033bb-7736-4415-b021-774515eb3523",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bfa04ffe-a8f8-433c-a849-5a1c2520093c"
                    }
                  }
                ]
              },
              {
                "id": "b74d4610-2ba7-4595-953d-870295b54182",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba3521ef-8ec8-4c8a-908a-3df6f848cc96",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7b7f1c-9e57-4d70-aa6d-8e1e6665fe5b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a0cec77a-02f2-4a3e-a9c0-5afe7e258885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7793927b-8bf8-41e3-8eec-bb90fc77ed29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6301b005-6663-4ada-bf02-513b08f57c5d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecbacdaa-9699-4577-9376-7304f70820af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bf2f45d-2848-4b2a-b235-c14ed6bcd0ae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ca7568e-0d2e-4d25-96d3-6bf1c024f6ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fffd03d2-94c8-4f6e-8b33-23660c56929f"
                    }
                  }
                ]
              },
              {
                "id": "4e23b4bb-6b67-40d1-a3f3-1ce721aad578",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8658feb3-c231-4a99-a464-6ec22fdbdf58",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68db779c-c749-4456-8554-6379c57ee9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f0fec3b6-2d75-4086-81fa-e16c94da31fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bacd4c2-1996-4184-aec5-268b804e5b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10700ef6-5d4a-44a1-96fa-222bad22f644"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b25be351-2b5c-4a28-93dc-768b4a1a11af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "08d96c64-5fd7-451b-84f5-de7766aef6f3",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b278409-49a9-4868-a012-706c91ab753c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9f162fd2-a4dd-4989-a60f-3a6fd76bb8d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "475c4efe-00c4-4716-94be-648cd576efc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "312f5b3e-74f9-4683-8a09-7b852527e99e"
                    }
                  }
                ]
              },
              {
                "id": "8794fa7a-2445-44ac-ae9d-43429a130596",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "341bce3b-32c1-4ce4-b683-dd2f856efbc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3ba8abfb-fac0-485e-b93d-17d8a2426d62"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "208805db-af8a-44a5-b9eb-615b18d570b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87f8ed28-17ad-44dc-aa4c-071160bcccaf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9986e8f8-307a-4f7e-b5fd-7da72748e9b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9982213f-2443-4f2e-8d2b-138af8c050ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f3697c5-f8f8-4e37-88f4-ed63fa3eb436",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b3f197cc-b778-4027-a9ef-41013e6cb4be"
            }
          }
        ]
      },
      {
        "id": "321c02c8-6cab-4a9f-b339-5f488fd4ac4e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c622a4bc-1c95-484d-9596-17fb5441abda",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6a75d52e-81a1-4a60-a361-73a13f6e79ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db099fe4-8086-417e-a0f3-38b85d6a5c30",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7de1f0-8e27-47fe-be80-62895e3cbdfc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "13d8129e-fc34-4a93-9235-2429ea783fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "763d17ce-08ee-48ee-8cee-d02fac277284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51e56688-a39f-4040-96bc-c7cdbd049ce8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bb624fd-73fc-4ed7-97e5-28656ba17c37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fd94712-13ac-4e58-9f0e-080c256e7b54"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "de070614-d17a-4f0e-ab65-8bbb8c260858",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3488ef99-e681-4fa9-9cc1-247bc6fdc467"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7fee8db6-21e3-4071-ad07-592a0ec24a13",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7dd229cf-1ce7-470b-b18f-10fe0618da8e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3071743-baeb-4a41-90d1-07d065880179",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a9ae82f-7cc1-4e83-98cf-9d1235c8bd80"
            }
          }
        ]
      },
      {
        "id": "a9d03da1-35d1-4429-b4ee-2594759635bb",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0f26f757-0d53-4e84-8404-803c58f0e7f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3b15fe67-8292-45a1-901d-c1ff0ab5e726",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1734bcf0-69fe-4309-a1d8-10b1f0fe7aa1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee20024f-8edf-4434-b8b4-69d7ea65688c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95b9bb04-6e25-456c-a58b-657a9f8065ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6678b0a4-ec42-4fa7-9a16-7cd584b023d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2df6e03b-17e9-45f5-ad09-82914f4dd226"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8d0feba-5fa5-4caa-b581-d4e454fd1a1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87b920a1-9bcc-421a-b9d7-67ddb9309e2a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e63ada8f-5d27-408d-b93b-3298e6b1871f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7955f663-bdbf-42cf-afdd-f2fddf2e84ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02a6f7b1-938d-4476-8065-bbbc24e86566",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8da5a2ae-3c61-4d93-b6d6-69df9829fcbc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18b2cd26-68d5-432b-b1b0-222fd103b29c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d2ae81cb-ea61-4bcf-ac3e-9eaab676adcd"
            }
          }
        ]
      },
      {
        "id": "7774e5e9-c112-4af9-9f0f-81f3d6ce28bb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3d94377a-1767-4c2c-a17f-f24bb12ee5a1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b8afcd6-d6b8-41fc-8a70-4b7a9f6e5787",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c4fd41e5-4913-4456-89ce-753313c91c1e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115185f0-3c40-4928-b780-bec8b75d1ac6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69a4c775-182f-4690-a5a5-cdd81b319329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc1b089-e814-41f0-b668-c80b0137f748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f4e89d0-c44c-4e2e-ad71-c5da3e24eecc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce744704-5993-4756-8f3e-4ed434d2b3bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f93c69a-16bd-40a6-9725-727ca14ad95e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab9d674c-8b6b-4331-ab5a-2d6b3a8f30c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1570ba9a-f5b3-4bcb-83a1-1e6f53c483a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cf5268e-974c-43fa-b323-c63a865b4c04",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "472675fd-954f-4e39-b541-d2857a5d61e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8cb1c47-e4f2-43f6-8a91-687dde8eae65",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fea090bb-1fef-4bc1-b1c6-52766ce08f44"
            }
          }
        ]
      },
      {
        "id": "c5cba87c-2610-4d38-9e81-54fbda3f3603",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44d3e656-3e29-4a5a-8a49-903de791d9be",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f85229c4-66cb-4eb4-8558-f867de2e886c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7c9efee6-c963-44ad-8273-0c08ac5bf051",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f015dd16-8142-424f-920c-8f510e8c6c10",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8335c4f3-debd-4d77-9c61-4d25b7eaee62",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 88.85638297872349,
      "responseMin": 6,
      "responseMax": 551,
      "responseSd": 26.52529125719181,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706661269228,
      "completed": 1706661329172
    },
    "executions": [
      {
        "id": "15b2d449-e8da-4be8-ab9b-047c39f1f2e0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "350d7ce8-8168-4b69-b3f4-39077433622c",
          "httpRequestId": "fb92ef17-508d-4d60-963e-342956959e46"
        },
        "item": {
          "id": "15b2d449-e8da-4be8-ab9b-047c39f1f2e0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "89d8f844-6011-4f61-9cc5-20ceb05fcaa6",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "4ade538d-e92f-4eef-bf76-37be583940f0",
        "cursor": {
          "ref": "5691f66d-a52d-4bd7-91ac-54c02456d705",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fd78bf5a-c89d-41b4-9cbb-7f07acbb0b23"
        },
        "item": {
          "id": "4ade538d-e92f-4eef-bf76-37be583940f0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4a3686bb-920b-46ed-82b7-ea5f5764ffc0",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "b616fa05-de0b-48fc-88ee-7c62623f4444",
        "cursor": {
          "ref": "5900ee1e-74e4-47de-bb90-b874a07e1939",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8ae9f5b1-cb0c-4602-bc00-2932b93940e3"
        },
        "item": {
          "id": "b616fa05-de0b-48fc-88ee-7c62623f4444",
          "name": "did_json"
        },
        "response": {
          "id": "149a2584-66b8-4580-bacb-21c80f59d494",
          "status": "OK",
          "code": 200,
          "responseTime": 551,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f867e8-bbea-4f4e-93fb-327c45a451e3",
        "cursor": {
          "ref": "aedc6ec9-bee0-47fb-962e-e9ffb5d58183",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "07299c34-4228-44fb-8e91-b71d2184e433"
        },
        "item": {
          "id": "a7f867e8-bbea-4f4e-93fb-327c45a451e3",
          "name": "did:invalid"
        },
        "response": {
          "id": "5d130c69-45d0-4249-8399-78ca872033f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f867e8-bbea-4f4e-93fb-327c45a451e3",
        "cursor": {
          "ref": "aedc6ec9-bee0-47fb-962e-e9ffb5d58183",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "07299c34-4228-44fb-8e91-b71d2184e433"
        },
        "item": {
          "id": "a7f867e8-bbea-4f4e-93fb-327c45a451e3",
          "name": "did:invalid"
        },
        "response": {
          "id": "5d130c69-45d0-4249-8399-78ca872033f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d490ec9-5929-46dc-bc84-331fa6ea30c8",
        "cursor": {
          "ref": "9e1a8246-d034-4c40-92a0-cfac44ba60b1",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4111d3fa-978c-4ea4-b93c-ae0439588f29"
        },
        "item": {
          "id": "7d490ec9-5929-46dc-bc84-331fa6ea30c8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f55e5794-4629-464f-975e-6ae12ae7f738",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d490ec9-5929-46dc-bc84-331fa6ea30c8",
        "cursor": {
          "ref": "9e1a8246-d034-4c40-92a0-cfac44ba60b1",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4111d3fa-978c-4ea4-b93c-ae0439588f29"
        },
        "item": {
          "id": "7d490ec9-5929-46dc-bc84-331fa6ea30c8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f55e5794-4629-464f-975e-6ae12ae7f738",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8be707-8cd3-4083-9c78-2cbd48921bd7",
        "cursor": {
          "ref": "4598e50c-765d-4ef5-b6c4-fa0eb0fd9e83",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2d8e4a7e-4759-4ccd-9c97-2fb4d6033c9c"
        },
        "item": {
          "id": "0a8be707-8cd3-4083-9c78-2cbd48921bd7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ed13b256-bb26-4fa1-9384-5e029f46d84d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8be707-8cd3-4083-9c78-2cbd48921bd7",
        "cursor": {
          "ref": "4598e50c-765d-4ef5-b6c4-fa0eb0fd9e83",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2d8e4a7e-4759-4ccd-9c97-2fb4d6033c9c"
        },
        "item": {
          "id": "0a8be707-8cd3-4083-9c78-2cbd48921bd7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ed13b256-bb26-4fa1-9384-5e029f46d84d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0de505-b25a-4000-854a-63cec3c018d3",
        "cursor": {
          "ref": "a66bfb7b-e670-4849-a1ab-113af9971826",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a2803d50-9145-4ca6-a44c-2003abd294e0"
        },
        "item": {
          "id": "6c0de505-b25a-4000-854a-63cec3c018d3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8ce97a40-6317-44d6-af14-fbc77b1ea9a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0de505-b25a-4000-854a-63cec3c018d3",
        "cursor": {
          "ref": "a66bfb7b-e670-4849-a1ab-113af9971826",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a2803d50-9145-4ca6-a44c-2003abd294e0"
        },
        "item": {
          "id": "6c0de505-b25a-4000-854a-63cec3c018d3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8ce97a40-6317-44d6-af14-fbc77b1ea9a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d36018e-58de-4413-b387-5a5da10e2487",
        "cursor": {
          "ref": "50e93136-300f-49a7-9f96-fb411fab4aca",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "218a6bba-0314-45b4-bdf6-d9bfeb71405a"
        },
        "item": {
          "id": "0d36018e-58de-4413-b387-5a5da10e2487",
          "name": "identifiers"
        },
        "response": {
          "id": "229c2c75-a3fe-4f27-8c21-3debeeb86e76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0d36018e-58de-4413-b387-5a5da10e2487",
        "cursor": {
          "ref": "50e93136-300f-49a7-9f96-fb411fab4aca",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "218a6bba-0314-45b4-bdf6-d9bfeb71405a"
        },
        "item": {
          "id": "0d36018e-58de-4413-b387-5a5da10e2487",
          "name": "identifiers"
        },
        "response": {
          "id": "229c2c75-a3fe-4f27-8c21-3debeeb86e76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4f02ce9d-5a2b-4dc4-9b57-79c07843f66e",
        "cursor": {
          "ref": "d32cfe79-dce5-46d5-859d-12ad09524daa",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5d4ce0f3-9413-4910-8bfd-fb176d59d531"
        },
        "item": {
          "id": "4f02ce9d-5a2b-4dc4-9b57-79c07843f66e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b3241a23-b558-4d26-931d-0a674a5e062b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f02ce9d-5a2b-4dc4-9b57-79c07843f66e",
        "cursor": {
          "ref": "d32cfe79-dce5-46d5-859d-12ad09524daa",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5d4ce0f3-9413-4910-8bfd-fb176d59d531"
        },
        "item": {
          "id": "4f02ce9d-5a2b-4dc4-9b57-79c07843f66e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b3241a23-b558-4d26-931d-0a674a5e062b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f3ab24-43c0-41d7-9337-a29a10e4d9a9",
        "cursor": {
          "ref": "f715846e-3241-44fa-8e34-1942b1c6efef",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "11c0a626-c796-4ec7-9232-2a0cda9cfb94"
        },
        "item": {
          "id": "a1f3ab24-43c0-41d7-9337-a29a10e4d9a9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "96f29b7e-b511-4088-bcce-c2a6072f07e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f3ab24-43c0-41d7-9337-a29a10e4d9a9",
        "cursor": {
          "ref": "f715846e-3241-44fa-8e34-1942b1c6efef",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "11c0a626-c796-4ec7-9232-2a0cda9cfb94"
        },
        "item": {
          "id": "a1f3ab24-43c0-41d7-9337-a29a10e4d9a9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "96f29b7e-b511-4088-bcce-c2a6072f07e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f37093-b3bf-410f-a03b-ca0f16a0f51b",
        "cursor": {
          "ref": "ce198753-30a0-4109-88cb-80e8c2736bbe",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d65dcc58-bb75-4c35-8e51-2d9c3e26f852"
        },
        "item": {
          "id": "51f37093-b3bf-410f-a03b-ca0f16a0f51b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "abebbd22-6188-4654-9d4b-5469fec7dc0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f37093-b3bf-410f-a03b-ca0f16a0f51b",
        "cursor": {
          "ref": "ce198753-30a0-4109-88cb-80e8c2736bbe",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d65dcc58-bb75-4c35-8e51-2d9c3e26f852"
        },
        "item": {
          "id": "51f37093-b3bf-410f-a03b-ca0f16a0f51b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "abebbd22-6188-4654-9d4b-5469fec7dc0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cad748-0bd8-4cd0-9f25-fe9e5295b2cd",
        "cursor": {
          "ref": "ba90f621-e3ce-4809-83fe-2c760cdca92a",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5dd63ad0-5134-453d-8880-b7c9de023a8d"
        },
        "item": {
          "id": "05cad748-0bd8-4cd0-9f25-fe9e5295b2cd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e76b39e1-4e0e-4da6-8146-309acc0616df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cad748-0bd8-4cd0-9f25-fe9e5295b2cd",
        "cursor": {
          "ref": "ba90f621-e3ce-4809-83fe-2c760cdca92a",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5dd63ad0-5134-453d-8880-b7c9de023a8d"
        },
        "item": {
          "id": "05cad748-0bd8-4cd0-9f25-fe9e5295b2cd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e76b39e1-4e0e-4da6-8146-309acc0616df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9024d3-b3c1-4f92-af6c-fe15a4c413f9",
        "cursor": {
          "ref": "bb91cc86-743e-401d-906a-b71a2fa68f30",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e96096fc-20a4-4fb3-9d0f-e3b0cd6be41f"
        },
        "item": {
          "id": "9e9024d3-b3c1-4f92-af6c-fe15a4c413f9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "09649b5e-6dab-4af4-88f4-97dd50db4580",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9024d3-b3c1-4f92-af6c-fe15a4c413f9",
        "cursor": {
          "ref": "bb91cc86-743e-401d-906a-b71a2fa68f30",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e96096fc-20a4-4fb3-9d0f-e3b0cd6be41f"
        },
        "item": {
          "id": "9e9024d3-b3c1-4f92-af6c-fe15a4c413f9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "09649b5e-6dab-4af4-88f4-97dd50db4580",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e064e3-17f8-45a4-a066-ebeafd24274f",
        "cursor": {
          "ref": "e55551f7-0612-4d47-a4cc-ae8efc1e5628",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b11f0906-a756-4c6b-9b35-3e1c4e7b2460"
        },
        "item": {
          "id": "b2e064e3-17f8-45a4-a066-ebeafd24274f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5a520e28-c15a-4a0f-bae4-1e4b83d134a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e064e3-17f8-45a4-a066-ebeafd24274f",
        "cursor": {
          "ref": "e55551f7-0612-4d47-a4cc-ae8efc1e5628",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b11f0906-a756-4c6b-9b35-3e1c4e7b2460"
        },
        "item": {
          "id": "b2e064e3-17f8-45a4-a066-ebeafd24274f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5a520e28-c15a-4a0f-bae4-1e4b83d134a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c7cfda-8452-4403-88b0-99b8f18dfd1d",
        "cursor": {
          "ref": "dd2a47b5-3660-4f22-baf8-4c3370984d95",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cd2ae380-31d4-4c36-aeb2-08a87ca959c2"
        },
        "item": {
          "id": "f9c7cfda-8452-4403-88b0-99b8f18dfd1d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "77a1bbe8-b99b-4152-b01d-33ad015b21c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c7cfda-8452-4403-88b0-99b8f18dfd1d",
        "cursor": {
          "ref": "dd2a47b5-3660-4f22-baf8-4c3370984d95",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cd2ae380-31d4-4c36-aeb2-08a87ca959c2"
        },
        "item": {
          "id": "f9c7cfda-8452-4403-88b0-99b8f18dfd1d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "77a1bbe8-b99b-4152-b01d-33ad015b21c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331da1c4-6bd1-4b05-a9b6-e894b71212b6",
        "cursor": {
          "ref": "284e1c5d-0e0a-4bb5-b3fd-4147585c817c",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8a28d05e-8eee-472f-a16d-63122499036a"
        },
        "item": {
          "id": "331da1c4-6bd1-4b05-a9b6-e894b71212b6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f47dd026-4c6d-468b-aadd-dc874db03105",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331da1c4-6bd1-4b05-a9b6-e894b71212b6",
        "cursor": {
          "ref": "284e1c5d-0e0a-4bb5-b3fd-4147585c817c",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8a28d05e-8eee-472f-a16d-63122499036a"
        },
        "item": {
          "id": "331da1c4-6bd1-4b05-a9b6-e894b71212b6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f47dd026-4c6d-468b-aadd-dc874db03105",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec1c0f0-09d1-4555-bd86-f635fd9123b0",
        "cursor": {
          "ref": "09a9e635-4101-4589-b5ca-8184769f5ee5",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "662fc976-68b1-4c27-926c-208e529c72ba"
        },
        "item": {
          "id": "3ec1c0f0-09d1-4555-bd86-f635fd9123b0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e091ad60-a30d-413d-952f-e57435f6501b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec1c0f0-09d1-4555-bd86-f635fd9123b0",
        "cursor": {
          "ref": "09a9e635-4101-4589-b5ca-8184769f5ee5",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "662fc976-68b1-4c27-926c-208e529c72ba"
        },
        "item": {
          "id": "3ec1c0f0-09d1-4555-bd86-f635fd9123b0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e091ad60-a30d-413d-952f-e57435f6501b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c1f2ef-b475-47fe-9430-c1bd960431e2",
        "cursor": {
          "ref": "c2428b22-2193-49af-b16c-d973c391551a",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cacff67b-0f97-45da-939a-484d1fbe992f"
        },
        "item": {
          "id": "07c1f2ef-b475-47fe-9430-c1bd960431e2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d92b6c35-1253-4bd9-bc80-2ad461008e92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c1f2ef-b475-47fe-9430-c1bd960431e2",
        "cursor": {
          "ref": "c2428b22-2193-49af-b16c-d973c391551a",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cacff67b-0f97-45da-939a-484d1fbe992f"
        },
        "item": {
          "id": "07c1f2ef-b475-47fe-9430-c1bd960431e2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d92b6c35-1253-4bd9-bc80-2ad461008e92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9baac9b-08a3-4547-9d32-151af02bbced",
        "cursor": {
          "ref": "134564d3-6b7e-4baa-80dc-0cfc7fdbb088",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "dbf7f829-a564-4d4a-bfac-4f609531a1f1"
        },
        "item": {
          "id": "f9baac9b-08a3-4547-9d32-151af02bbced",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a4c1dae9-74bb-4e1a-95ce-a5e301272711",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9baac9b-08a3-4547-9d32-151af02bbced",
        "cursor": {
          "ref": "134564d3-6b7e-4baa-80dc-0cfc7fdbb088",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "dbf7f829-a564-4d4a-bfac-4f609531a1f1"
        },
        "item": {
          "id": "f9baac9b-08a3-4547-9d32-151af02bbced",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a4c1dae9-74bb-4e1a-95ce-a5e301272711",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922c137c-928d-475c-997f-5dc24b4082b6",
        "cursor": {
          "ref": "305842d4-708f-48e9-a7fa-c37d4335da80",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0d79ff21-b63c-4ef2-8571-a35aeae6735a"
        },
        "item": {
          "id": "922c137c-928d-475c-997f-5dc24b4082b6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9965eb62-b0f8-4d89-b5f5-2691a0cf39de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922c137c-928d-475c-997f-5dc24b4082b6",
        "cursor": {
          "ref": "305842d4-708f-48e9-a7fa-c37d4335da80",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0d79ff21-b63c-4ef2-8571-a35aeae6735a"
        },
        "item": {
          "id": "922c137c-928d-475c-997f-5dc24b4082b6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9965eb62-b0f8-4d89-b5f5-2691a0cf39de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7754f56-fe2b-4a36-b5bd-211cff88951c",
        "cursor": {
          "ref": "78e0d69a-bfc1-46df-b825-40d22c132519",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "82425159-4105-4a21-8bf6-a44d41e5f173"
        },
        "item": {
          "id": "b7754f56-fe2b-4a36-b5bd-211cff88951c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6ec554ea-f468-489f-aea9-cdce3b09a73c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7754f56-fe2b-4a36-b5bd-211cff88951c",
        "cursor": {
          "ref": "78e0d69a-bfc1-46df-b825-40d22c132519",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "82425159-4105-4a21-8bf6-a44d41e5f173"
        },
        "item": {
          "id": "b7754f56-fe2b-4a36-b5bd-211cff88951c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6ec554ea-f468-489f-aea9-cdce3b09a73c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c202c1f-ba15-470e-9548-2f4585dad223",
        "cursor": {
          "ref": "027f3d3a-289a-4499-972b-fbe089d81cd2",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a5ae071d-b6c5-48fa-8f33-08df33c8022a"
        },
        "item": {
          "id": "5c202c1f-ba15-470e-9548-2f4585dad223",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "caf6d33b-a8c6-415b-a52c-3f9e18e5a2ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c202c1f-ba15-470e-9548-2f4585dad223",
        "cursor": {
          "ref": "027f3d3a-289a-4499-972b-fbe089d81cd2",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a5ae071d-b6c5-48fa-8f33-08df33c8022a"
        },
        "item": {
          "id": "5c202c1f-ba15-470e-9548-2f4585dad223",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "caf6d33b-a8c6-415b-a52c-3f9e18e5a2ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e7c8c0e-cf5b-45f8-8c68-8a8cf3b2e0c7",
        "cursor": {
          "ref": "43efd021-3b99-4c64-a236-e47ef87c51e4",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9af9ab20-91c7-43a7-9ee6-3c8cdf40bd7e"
        },
        "item": {
          "id": "2e7c8c0e-cf5b-45f8-8c68-8a8cf3b2e0c7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "82ad83b9-c9a3-4204-9312-79ff60542e8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e7c8c0e-cf5b-45f8-8c68-8a8cf3b2e0c7",
        "cursor": {
          "ref": "43efd021-3b99-4c64-a236-e47ef87c51e4",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9af9ab20-91c7-43a7-9ee6-3c8cdf40bd7e"
        },
        "item": {
          "id": "2e7c8c0e-cf5b-45f8-8c68-8a8cf3b2e0c7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "82ad83b9-c9a3-4204-9312-79ff60542e8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5061e7ea-165f-4c48-adfe-006c76b4c2f9",
        "cursor": {
          "ref": "df58cfb1-863e-4ddf-97ca-e5b2af7afca6",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d5e61dc4-97fc-4fa0-b28f-343e6459b121"
        },
        "item": {
          "id": "5061e7ea-165f-4c48-adfe-006c76b4c2f9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3824a460-3eac-4d02-93f0-68322fd6ede7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5061e7ea-165f-4c48-adfe-006c76b4c2f9",
        "cursor": {
          "ref": "df58cfb1-863e-4ddf-97ca-e5b2af7afca6",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d5e61dc4-97fc-4fa0-b28f-343e6459b121"
        },
        "item": {
          "id": "5061e7ea-165f-4c48-adfe-006c76b4c2f9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3824a460-3eac-4d02-93f0-68322fd6ede7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9f6aef-a94a-4494-ab4b-208f9ba62b20",
        "cursor": {
          "ref": "cdb7d8ce-42b4-4384-9b23-d70425b21628",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9230b5ff-a2c8-4b71-bc19-9cf582b0875a"
        },
        "item": {
          "id": "ab9f6aef-a94a-4494-ab4b-208f9ba62b20",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2595a62b-94b3-457a-8780-c8c288912bc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9f6aef-a94a-4494-ab4b-208f9ba62b20",
        "cursor": {
          "ref": "cdb7d8ce-42b4-4384-9b23-d70425b21628",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9230b5ff-a2c8-4b71-bc19-9cf582b0875a"
        },
        "item": {
          "id": "ab9f6aef-a94a-4494-ab4b-208f9ba62b20",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2595a62b-94b3-457a-8780-c8c288912bc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3368e5f1-9c80-4e9b-8f84-d8b62ef7b93c",
        "cursor": {
          "ref": "f74737ed-d7c4-4dc1-8edf-7281e83800d3",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b55e0640-e1f2-4187-9d2c-3d649341befe"
        },
        "item": {
          "id": "3368e5f1-9c80-4e9b-8f84-d8b62ef7b93c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b6821a3d-e1b0-4587-bb6f-4538d7b98611",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3368e5f1-9c80-4e9b-8f84-d8b62ef7b93c",
        "cursor": {
          "ref": "f74737ed-d7c4-4dc1-8edf-7281e83800d3",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b55e0640-e1f2-4187-9d2c-3d649341befe"
        },
        "item": {
          "id": "3368e5f1-9c80-4e9b-8f84-d8b62ef7b93c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b6821a3d-e1b0-4587-bb6f-4538d7b98611",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0453250-6662-4fcb-9840-87f37bed9aa2",
        "cursor": {
          "ref": "2e53f927-d1ab-46c7-aa27-dc3e44af20c3",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "aafe2b17-4bce-45c7-8478-3c6c3a963686"
        },
        "item": {
          "id": "e0453250-6662-4fcb-9840-87f37bed9aa2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2d88bb93-de7e-4d30-af59-20b6e6f00618",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0453250-6662-4fcb-9840-87f37bed9aa2",
        "cursor": {
          "ref": "2e53f927-d1ab-46c7-aa27-dc3e44af20c3",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "aafe2b17-4bce-45c7-8478-3c6c3a963686"
        },
        "item": {
          "id": "e0453250-6662-4fcb-9840-87f37bed9aa2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2d88bb93-de7e-4d30-af59-20b6e6f00618",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d116fd08-703c-4f43-8b5c-3932a356c200",
        "cursor": {
          "ref": "cb8fd476-fd1c-4332-8177-44f226ccb365",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e4c31348-5a75-4170-9353-7902ea18a576"
        },
        "item": {
          "id": "d116fd08-703c-4f43-8b5c-3932a356c200",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "74071c37-f114-45ee-9e1e-a86b07f1d9b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d116fd08-703c-4f43-8b5c-3932a356c200",
        "cursor": {
          "ref": "cb8fd476-fd1c-4332-8177-44f226ccb365",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e4c31348-5a75-4170-9353-7902ea18a576"
        },
        "item": {
          "id": "d116fd08-703c-4f43-8b5c-3932a356c200",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "74071c37-f114-45ee-9e1e-a86b07f1d9b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41d60fe-30f0-411f-aa9c-892d7e7a5767",
        "cursor": {
          "ref": "9946df79-1940-4d59-90f1-6d1efc97a940",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5fd970bc-4f8e-4333-8ac3-0fba92717f4c"
        },
        "item": {
          "id": "f41d60fe-30f0-411f-aa9c-892d7e7a5767",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5a212968-7fb1-40f4-b9c0-2a2ff4bcca45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41d60fe-30f0-411f-aa9c-892d7e7a5767",
        "cursor": {
          "ref": "9946df79-1940-4d59-90f1-6d1efc97a940",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5fd970bc-4f8e-4333-8ac3-0fba92717f4c"
        },
        "item": {
          "id": "f41d60fe-30f0-411f-aa9c-892d7e7a5767",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5a212968-7fb1-40f4-b9c0-2a2ff4bcca45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6092cab7-0813-422b-ab0e-9e19515d59a4",
        "cursor": {
          "ref": "6006117f-3957-413f-af26-353b1f8f06d3",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "774eb634-7933-4634-9704-3949d9905885"
        },
        "item": {
          "id": "6092cab7-0813-422b-ab0e-9e19515d59a4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3ba4c023-d72c-4844-b9d6-c762e57778ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6092cab7-0813-422b-ab0e-9e19515d59a4",
        "cursor": {
          "ref": "6006117f-3957-413f-af26-353b1f8f06d3",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "774eb634-7933-4634-9704-3949d9905885"
        },
        "item": {
          "id": "6092cab7-0813-422b-ab0e-9e19515d59a4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3ba4c023-d72c-4844-b9d6-c762e57778ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9476320f-6a12-42c1-82ba-1653bd7bebaa",
        "cursor": {
          "ref": "6617ce2a-4acb-491f-8308-df197f7d706c",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "da93a40c-89ca-41fd-bc41-cf4228d41dc9"
        },
        "item": {
          "id": "9476320f-6a12-42c1-82ba-1653bd7bebaa",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "01e28057-7826-40f6-9607-44b4a34f710e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9476320f-6a12-42c1-82ba-1653bd7bebaa",
        "cursor": {
          "ref": "6617ce2a-4acb-491f-8308-df197f7d706c",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "da93a40c-89ca-41fd-bc41-cf4228d41dc9"
        },
        "item": {
          "id": "9476320f-6a12-42c1-82ba-1653bd7bebaa",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "01e28057-7826-40f6-9607-44b4a34f710e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5c6836-9ee9-456a-8e1c-dc81924b53d2",
        "cursor": {
          "ref": "b8da5efc-61fd-41d4-8082-74bfac314197",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "71accf4b-4835-49b9-bc34-1937abfc9168"
        },
        "item": {
          "id": "1c5c6836-9ee9-456a-8e1c-dc81924b53d2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2130f399-4312-4255-a299-ff27638f2d85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5c6836-9ee9-456a-8e1c-dc81924b53d2",
        "cursor": {
          "ref": "b8da5efc-61fd-41d4-8082-74bfac314197",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "71accf4b-4835-49b9-bc34-1937abfc9168"
        },
        "item": {
          "id": "1c5c6836-9ee9-456a-8e1c-dc81924b53d2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2130f399-4312-4255-a299-ff27638f2d85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ffe68d-e665-4ee6-a088-794ef29b800b",
        "cursor": {
          "ref": "ede5ea7d-2d83-4452-8812-7be400da32be",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "73989be1-4b43-4984-ad68-e856323c886d"
        },
        "item": {
          "id": "24ffe68d-e665-4ee6-a088-794ef29b800b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "396040f7-d90a-454e-9dae-ad459f780e51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ffe68d-e665-4ee6-a088-794ef29b800b",
        "cursor": {
          "ref": "ede5ea7d-2d83-4452-8812-7be400da32be",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "73989be1-4b43-4984-ad68-e856323c886d"
        },
        "item": {
          "id": "24ffe68d-e665-4ee6-a088-794ef29b800b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "396040f7-d90a-454e-9dae-ad459f780e51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9baddcea-c192-4d69-95ec-3eb9aaa23dc7",
        "cursor": {
          "ref": "96fc2fe0-722c-4e5f-8448-7d2699658e15",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6902d681-a080-4cde-980c-55b078181bf9"
        },
        "item": {
          "id": "9baddcea-c192-4d69-95ec-3eb9aaa23dc7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6138c37d-26d1-478e-aef3-cec8d885b314",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9baddcea-c192-4d69-95ec-3eb9aaa23dc7",
        "cursor": {
          "ref": "96fc2fe0-722c-4e5f-8448-7d2699658e15",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6902d681-a080-4cde-980c-55b078181bf9"
        },
        "item": {
          "id": "9baddcea-c192-4d69-95ec-3eb9aaa23dc7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6138c37d-26d1-478e-aef3-cec8d885b314",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e466ad-b87e-4c7b-a446-61a44b0bd90c",
        "cursor": {
          "ref": "b675ba4e-a8a0-4238-b980-fc0b0932ef95",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "31bd27b4-a288-43f7-b950-d60ea759ba9a"
        },
        "item": {
          "id": "94e466ad-b87e-4c7b-a446-61a44b0bd90c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ff70401b-b028-4ef6-8f0d-99dde720aa5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e466ad-b87e-4c7b-a446-61a44b0bd90c",
        "cursor": {
          "ref": "b675ba4e-a8a0-4238-b980-fc0b0932ef95",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "31bd27b4-a288-43f7-b950-d60ea759ba9a"
        },
        "item": {
          "id": "94e466ad-b87e-4c7b-a446-61a44b0bd90c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ff70401b-b028-4ef6-8f0d-99dde720aa5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d25cd31-c2a5-4fd3-b068-e2e21546f5fc",
        "cursor": {
          "ref": "8c684e61-c5b3-4996-a70b-82152552ed27",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "40a55a02-b0f3-4c94-8d42-cda2018df615"
        },
        "item": {
          "id": "3d25cd31-c2a5-4fd3-b068-e2e21546f5fc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c8d36fea-1295-47a4-8786-f2ccf5027192",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d25cd31-c2a5-4fd3-b068-e2e21546f5fc",
        "cursor": {
          "ref": "8c684e61-c5b3-4996-a70b-82152552ed27",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "40a55a02-b0f3-4c94-8d42-cda2018df615"
        },
        "item": {
          "id": "3d25cd31-c2a5-4fd3-b068-e2e21546f5fc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c8d36fea-1295-47a4-8786-f2ccf5027192",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31592184-5de8-4fa4-a035-c9474282eee4",
        "cursor": {
          "ref": "16702295-1d2f-495c-8ab2-fd174a424b0c",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4d97a969-5b92-48c3-ac1c-8b32b5d02408"
        },
        "item": {
          "id": "31592184-5de8-4fa4-a035-c9474282eee4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b3d50975-ef75-443d-974a-2386be41d1ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31592184-5de8-4fa4-a035-c9474282eee4",
        "cursor": {
          "ref": "16702295-1d2f-495c-8ab2-fd174a424b0c",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4d97a969-5b92-48c3-ac1c-8b32b5d02408"
        },
        "item": {
          "id": "31592184-5de8-4fa4-a035-c9474282eee4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b3d50975-ef75-443d-974a-2386be41d1ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6713ac4e-436f-4c1e-b0a5-6ab4315aacff",
        "cursor": {
          "ref": "35da8de7-f84e-4e38-9e0b-1905e67e9ee5",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e12022b1-312b-4fe4-bb11-08fed437b7f9"
        },
        "item": {
          "id": "6713ac4e-436f-4c1e-b0a5-6ab4315aacff",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3a06f094-5236-4380-b4f4-c6eb08cc7125",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6713ac4e-436f-4c1e-b0a5-6ab4315aacff",
        "cursor": {
          "ref": "35da8de7-f84e-4e38-9e0b-1905e67e9ee5",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e12022b1-312b-4fe4-bb11-08fed437b7f9"
        },
        "item": {
          "id": "6713ac4e-436f-4c1e-b0a5-6ab4315aacff",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3a06f094-5236-4380-b4f4-c6eb08cc7125",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d28b68c-d71d-4a3b-8d6f-1542230d58fa",
        "cursor": {
          "ref": "500c708e-afef-4ea4-817d-385f70b0f7be",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0da26a6a-3e7e-4469-b9e3-46f5038a1d17"
        },
        "item": {
          "id": "8d28b68c-d71d-4a3b-8d6f-1542230d58fa",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1cdb6a31-3295-425b-86ed-ef580711db41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d28b68c-d71d-4a3b-8d6f-1542230d58fa",
        "cursor": {
          "ref": "500c708e-afef-4ea4-817d-385f70b0f7be",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0da26a6a-3e7e-4469-b9e3-46f5038a1d17"
        },
        "item": {
          "id": "8d28b68c-d71d-4a3b-8d6f-1542230d58fa",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1cdb6a31-3295-425b-86ed-ef580711db41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b9f6a5a-99d7-4068-b25f-c770c22d7f58",
        "cursor": {
          "ref": "4a88b22b-58ac-4cbd-ada7-9d7e11d7269b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "63e0a635-1474-4e4b-b604-30ac56269327"
        },
        "item": {
          "id": "7b9f6a5a-99d7-4068-b25f-c770c22d7f58",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "656e4202-8efc-434c-88e7-b944d40fba84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b9f6a5a-99d7-4068-b25f-c770c22d7f58",
        "cursor": {
          "ref": "4a88b22b-58ac-4cbd-ada7-9d7e11d7269b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "63e0a635-1474-4e4b-b604-30ac56269327"
        },
        "item": {
          "id": "7b9f6a5a-99d7-4068-b25f-c770c22d7f58",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "656e4202-8efc-434c-88e7-b944d40fba84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed27e8ec-e1fb-4f3f-ab04-ed5d2d116686",
        "cursor": {
          "ref": "7cff2d82-81f2-413d-840f-106322f15be8",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "547bc351-9390-46bf-bb76-70f06e6fd615"
        },
        "item": {
          "id": "ed27e8ec-e1fb-4f3f-ab04-ed5d2d116686",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "89894b44-1481-4ca5-a942-d8d5f600cfb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed27e8ec-e1fb-4f3f-ab04-ed5d2d116686",
        "cursor": {
          "ref": "7cff2d82-81f2-413d-840f-106322f15be8",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "547bc351-9390-46bf-bb76-70f06e6fd615"
        },
        "item": {
          "id": "ed27e8ec-e1fb-4f3f-ab04-ed5d2d116686",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "89894b44-1481-4ca5-a942-d8d5f600cfb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55eeaa9b-d653-4762-8d04-547e75a06c77",
        "cursor": {
          "ref": "840c8294-0689-4f89-9637-33f63800e4e0",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1c1a34cf-e15b-4b34-aa76-c9634927fce1"
        },
        "item": {
          "id": "55eeaa9b-d653-4762-8d04-547e75a06c77",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a8a33c60-759c-4b77-87db-89e79bfb0ca6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55eeaa9b-d653-4762-8d04-547e75a06c77",
        "cursor": {
          "ref": "840c8294-0689-4f89-9637-33f63800e4e0",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1c1a34cf-e15b-4b34-aa76-c9634927fce1"
        },
        "item": {
          "id": "55eeaa9b-d653-4762-8d04-547e75a06c77",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a8a33c60-759c-4b77-87db-89e79bfb0ca6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d77793-0e3e-45dd-b1d3-585957c17a77",
        "cursor": {
          "ref": "1e868ec5-a81d-42c3-8922-923f313fb3df",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "408fd108-6142-4811-bccc-0b5b392c6e1b"
        },
        "item": {
          "id": "b8d77793-0e3e-45dd-b1d3-585957c17a77",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6920a533-a604-43d0-863f-b7c663a44db2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d77793-0e3e-45dd-b1d3-585957c17a77",
        "cursor": {
          "ref": "1e868ec5-a81d-42c3-8922-923f313fb3df",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "408fd108-6142-4811-bccc-0b5b392c6e1b"
        },
        "item": {
          "id": "b8d77793-0e3e-45dd-b1d3-585957c17a77",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6920a533-a604-43d0-863f-b7c663a44db2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7734da-2d47-4c82-8262-83e8ca1bec74",
        "cursor": {
          "ref": "cf4f9ee4-4a98-46e4-bbfc-78bc88677fb6",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e21df553-d211-433f-9d75-6db6697f8725"
        },
        "item": {
          "id": "5d7734da-2d47-4c82-8262-83e8ca1bec74",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "23db829c-f144-4922-90c0-1b74f729607b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7734da-2d47-4c82-8262-83e8ca1bec74",
        "cursor": {
          "ref": "cf4f9ee4-4a98-46e4-bbfc-78bc88677fb6",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e21df553-d211-433f-9d75-6db6697f8725"
        },
        "item": {
          "id": "5d7734da-2d47-4c82-8262-83e8ca1bec74",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "23db829c-f144-4922-90c0-1b74f729607b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4737164-c97a-42e1-a11e-0d3c4ec331a2",
        "cursor": {
          "ref": "71c4b318-511c-4c85-a505-8e9c43db8ea3",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e938f21e-6aee-4385-a420-b4e509ab247d"
        },
        "item": {
          "id": "f4737164-c97a-42e1-a11e-0d3c4ec331a2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fa5957f9-5e8f-4eec-b183-08368a3ebf3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4737164-c97a-42e1-a11e-0d3c4ec331a2",
        "cursor": {
          "ref": "71c4b318-511c-4c85-a505-8e9c43db8ea3",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e938f21e-6aee-4385-a420-b4e509ab247d"
        },
        "item": {
          "id": "f4737164-c97a-42e1-a11e-0d3c4ec331a2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fa5957f9-5e8f-4eec-b183-08368a3ebf3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a7af0b-e44d-4739-8302-f07d536379f9",
        "cursor": {
          "ref": "a2fa3576-16a5-481e-8942-25012606244c",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5df15da6-b8ed-448f-97d0-827d71b4551a"
        },
        "item": {
          "id": "56a7af0b-e44d-4739-8302-f07d536379f9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "11959098-2fd8-484a-a135-588956ea4593",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a7af0b-e44d-4739-8302-f07d536379f9",
        "cursor": {
          "ref": "a2fa3576-16a5-481e-8942-25012606244c",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5df15da6-b8ed-448f-97d0-827d71b4551a"
        },
        "item": {
          "id": "56a7af0b-e44d-4739-8302-f07d536379f9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "11959098-2fd8-484a-a135-588956ea4593",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41dd80a-c37f-46a3-abce-d7a3d37d8268",
        "cursor": {
          "ref": "75ae18b9-2a93-4d2b-b0cd-e93e16f8e567",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "13a60639-b3ab-43e9-adf8-fc00d3ef3536"
        },
        "item": {
          "id": "a41dd80a-c37f-46a3-abce-d7a3d37d8268",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "db4994a5-31c3-4d8b-9e5d-4437c99e3277",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41dd80a-c37f-46a3-abce-d7a3d37d8268",
        "cursor": {
          "ref": "75ae18b9-2a93-4d2b-b0cd-e93e16f8e567",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "13a60639-b3ab-43e9-adf8-fc00d3ef3536"
        },
        "item": {
          "id": "a41dd80a-c37f-46a3-abce-d7a3d37d8268",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "db4994a5-31c3-4d8b-9e5d-4437c99e3277",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0485d3e3-ff10-4279-b8fb-12e01afcaef9",
        "cursor": {
          "ref": "de112f9c-1dc5-4d74-9b44-fc7b0eabcf96",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c3f6985e-a65b-4fc4-be5f-b62e0ffd4ec6"
        },
        "item": {
          "id": "0485d3e3-ff10-4279-b8fb-12e01afcaef9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d271311d-4f66-4205-952f-c93402a98bba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0485d3e3-ff10-4279-b8fb-12e01afcaef9",
        "cursor": {
          "ref": "de112f9c-1dc5-4d74-9b44-fc7b0eabcf96",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c3f6985e-a65b-4fc4-be5f-b62e0ffd4ec6"
        },
        "item": {
          "id": "0485d3e3-ff10-4279-b8fb-12e01afcaef9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d271311d-4f66-4205-952f-c93402a98bba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a8b47a-cd2d-4aa4-8a5c-07a790558417",
        "cursor": {
          "ref": "fd0c8957-d07d-49ed-80ce-30a6e625e260",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "14188c7f-a9f4-4ae0-bd02-a8eb9028ebd3"
        },
        "item": {
          "id": "e5a8b47a-cd2d-4aa4-8a5c-07a790558417",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "cf10d707-58a1-44e6-a267-8ca1d24e4e88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a8b47a-cd2d-4aa4-8a5c-07a790558417",
        "cursor": {
          "ref": "fd0c8957-d07d-49ed-80ce-30a6e625e260",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "14188c7f-a9f4-4ae0-bd02-a8eb9028ebd3"
        },
        "item": {
          "id": "e5a8b47a-cd2d-4aa4-8a5c-07a790558417",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "cf10d707-58a1-44e6-a267-8ca1d24e4e88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e880dd4-47ea-4a6d-8fc2-35bd8c1b8a2c",
        "cursor": {
          "ref": "fb5c5698-ec36-430b-b27b-d6b8a1be792c",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ed489e31-d38b-48cc-8a34-0a13952333a7"
        },
        "item": {
          "id": "7e880dd4-47ea-4a6d-8fc2-35bd8c1b8a2c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0c224b77-816b-4f54-b86b-1d7f0c04bc9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e880dd4-47ea-4a6d-8fc2-35bd8c1b8a2c",
        "cursor": {
          "ref": "fb5c5698-ec36-430b-b27b-d6b8a1be792c",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ed489e31-d38b-48cc-8a34-0a13952333a7"
        },
        "item": {
          "id": "7e880dd4-47ea-4a6d-8fc2-35bd8c1b8a2c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0c224b77-816b-4f54-b86b-1d7f0c04bc9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bef69be-9d6f-431a-b18d-8b95dc7528b1",
        "cursor": {
          "ref": "8c3340fe-4870-4879-a26b-ac02e3b83ffc",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8189104c-9376-4ef3-b8eb-a967db8c37f7"
        },
        "item": {
          "id": "2bef69be-9d6f-431a-b18d-8b95dc7528b1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4c80a323-1438-4856-a552-5dc93f20738e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bef69be-9d6f-431a-b18d-8b95dc7528b1",
        "cursor": {
          "ref": "8c3340fe-4870-4879-a26b-ac02e3b83ffc",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8189104c-9376-4ef3-b8eb-a967db8c37f7"
        },
        "item": {
          "id": "2bef69be-9d6f-431a-b18d-8b95dc7528b1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4c80a323-1438-4856-a552-5dc93f20738e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e698173c-3e73-457b-9aa9-1f3cc5116489",
        "cursor": {
          "ref": "498d668c-185f-45a2-9bc3-7b85eeb32d58",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5c11e291-f0ea-495d-8e7b-e42ca8ed66a0"
        },
        "item": {
          "id": "e698173c-3e73-457b-9aa9-1f3cc5116489",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f06d4d0d-23f5-4a6b-bf1f-95154f150a63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e698173c-3e73-457b-9aa9-1f3cc5116489",
        "cursor": {
          "ref": "498d668c-185f-45a2-9bc3-7b85eeb32d58",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5c11e291-f0ea-495d-8e7b-e42ca8ed66a0"
        },
        "item": {
          "id": "e698173c-3e73-457b-9aa9-1f3cc5116489",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f06d4d0d-23f5-4a6b-bf1f-95154f150a63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb1d4e5-252a-44ab-9cee-beea7a9638b4",
        "cursor": {
          "ref": "a991d20c-331e-495c-8571-b960531e8da6",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0ca5898d-c8d5-444b-805f-63ea0654ff39"
        },
        "item": {
          "id": "eeb1d4e5-252a-44ab-9cee-beea7a9638b4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a891bde1-a935-484f-9b8f-83a952b474ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb1d4e5-252a-44ab-9cee-beea7a9638b4",
        "cursor": {
          "ref": "a991d20c-331e-495c-8571-b960531e8da6",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0ca5898d-c8d5-444b-805f-63ea0654ff39"
        },
        "item": {
          "id": "eeb1d4e5-252a-44ab-9cee-beea7a9638b4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a891bde1-a935-484f-9b8f-83a952b474ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3132301c-667f-4aac-9fa4-ec3066a126de",
        "cursor": {
          "ref": "0064a0be-a6c1-4918-9226-37ed734d6fc4",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2384fc8f-11b8-44dd-9cbe-833a0036aee7"
        },
        "item": {
          "id": "3132301c-667f-4aac-9fa4-ec3066a126de",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4428f29b-5126-462e-849a-74dcaf9e604e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3132301c-667f-4aac-9fa4-ec3066a126de",
        "cursor": {
          "ref": "0064a0be-a6c1-4918-9226-37ed734d6fc4",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2384fc8f-11b8-44dd-9cbe-833a0036aee7"
        },
        "item": {
          "id": "3132301c-667f-4aac-9fa4-ec3066a126de",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4428f29b-5126-462e-849a-74dcaf9e604e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef36b68-dfa5-48a7-a8bd-3494c3bb9678",
        "cursor": {
          "ref": "b13774af-306c-4752-8e2c-1951ed00d70b",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "88afaaa9-4ca7-4601-a3d3-db83fe7d1554"
        },
        "item": {
          "id": "eef36b68-dfa5-48a7-a8bd-3494c3bb9678",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "30e36f16-e8bb-4d6b-8cbb-b49272ce064f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef36b68-dfa5-48a7-a8bd-3494c3bb9678",
        "cursor": {
          "ref": "b13774af-306c-4752-8e2c-1951ed00d70b",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "88afaaa9-4ca7-4601-a3d3-db83fe7d1554"
        },
        "item": {
          "id": "eef36b68-dfa5-48a7-a8bd-3494c3bb9678",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "30e36f16-e8bb-4d6b-8cbb-b49272ce064f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b74a6a8-f226-4c79-b839-46a28d7880bc",
        "cursor": {
          "ref": "0eb98d19-d10c-4a73-b1c1-b15079d8609b",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2c590392-3d35-4826-a023-336570896d6e"
        },
        "item": {
          "id": "9b74a6a8-f226-4c79-b839-46a28d7880bc",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4f14656c-3237-4acb-a37c-c9b7c8c1c1dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b74a6a8-f226-4c79-b839-46a28d7880bc",
        "cursor": {
          "ref": "0eb98d19-d10c-4a73-b1c1-b15079d8609b",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2c590392-3d35-4826-a023-336570896d6e"
        },
        "item": {
          "id": "9b74a6a8-f226-4c79-b839-46a28d7880bc",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4f14656c-3237-4acb-a37c-c9b7c8c1c1dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa4a3f3-0d20-4f02-a0ed-6c654e9693c7",
        "cursor": {
          "ref": "37d21622-bba5-4702-b2fe-43707b4f3c73",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3f4bd37e-2863-4266-a474-84a1b6268919"
        },
        "item": {
          "id": "eaa4a3f3-0d20-4f02-a0ed-6c654e9693c7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a8a36462-4f85-4f7e-b163-2bb82fb1ab31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa4a3f3-0d20-4f02-a0ed-6c654e9693c7",
        "cursor": {
          "ref": "37d21622-bba5-4702-b2fe-43707b4f3c73",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3f4bd37e-2863-4266-a474-84a1b6268919"
        },
        "item": {
          "id": "eaa4a3f3-0d20-4f02-a0ed-6c654e9693c7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a8a36462-4f85-4f7e-b163-2bb82fb1ab31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0bf881-d7eb-4cdb-be7a-d5fbeb1a323b",
        "cursor": {
          "ref": "603dc1e5-ef08-46eb-af24-88e25ace9c26",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c819336e-fea7-4655-b81c-5fc3ac041daa"
        },
        "item": {
          "id": "0c0bf881-d7eb-4cdb-be7a-d5fbeb1a323b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a80a9c5d-b080-47e8-b111-cc77012bdddf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0bf881-d7eb-4cdb-be7a-d5fbeb1a323b",
        "cursor": {
          "ref": "603dc1e5-ef08-46eb-af24-88e25ace9c26",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c819336e-fea7-4655-b81c-5fc3ac041daa"
        },
        "item": {
          "id": "0c0bf881-d7eb-4cdb-be7a-d5fbeb1a323b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a80a9c5d-b080-47e8-b111-cc77012bdddf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c9d13d-8d4b-47f6-a68b-42da7876ca14",
        "cursor": {
          "ref": "6d7cde06-c5b8-44f3-95a1-7c692e51f8fc",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "74051fc4-b0d5-416d-97aa-dc97bb35ac7b"
        },
        "item": {
          "id": "20c9d13d-8d4b-47f6-a68b-42da7876ca14",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f67649b7-a548-44f0-989c-abb29f3b7659",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c9d13d-8d4b-47f6-a68b-42da7876ca14",
        "cursor": {
          "ref": "6d7cde06-c5b8-44f3-95a1-7c692e51f8fc",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "74051fc4-b0d5-416d-97aa-dc97bb35ac7b"
        },
        "item": {
          "id": "20c9d13d-8d4b-47f6-a68b-42da7876ca14",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f67649b7-a548-44f0-989c-abb29f3b7659",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528f890d-e45c-466c-b085-b8b958a5d265",
        "cursor": {
          "ref": "02b2d420-29cc-45ac-ab4d-0f80f86ff0f3",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b2398e21-ce57-49c2-aeae-7e80186bcb5e"
        },
        "item": {
          "id": "528f890d-e45c-466c-b085-b8b958a5d265",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ac16c987-f1e3-4396-a9ac-7bd423767be1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528f890d-e45c-466c-b085-b8b958a5d265",
        "cursor": {
          "ref": "02b2d420-29cc-45ac-ab4d-0f80f86ff0f3",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b2398e21-ce57-49c2-aeae-7e80186bcb5e"
        },
        "item": {
          "id": "528f890d-e45c-466c-b085-b8b958a5d265",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ac16c987-f1e3-4396-a9ac-7bd423767be1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a9a0a8-3850-4107-9d16-8dc634b3a2fd",
        "cursor": {
          "ref": "5a0672d6-6d81-4e53-b785-6d95a3e7c57f",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "21e6218d-15b1-4364-8f83-8ea9048ff21f"
        },
        "item": {
          "id": "28a9a0a8-3850-4107-9d16-8dc634b3a2fd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2a5b5438-2314-4cbb-9c99-343f68b03f55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a9a0a8-3850-4107-9d16-8dc634b3a2fd",
        "cursor": {
          "ref": "5a0672d6-6d81-4e53-b785-6d95a3e7c57f",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "21e6218d-15b1-4364-8f83-8ea9048ff21f"
        },
        "item": {
          "id": "28a9a0a8-3850-4107-9d16-8dc634b3a2fd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2a5b5438-2314-4cbb-9c99-343f68b03f55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90ef1f1-a2ec-4b85-b2fd-ecc86e8f7816",
        "cursor": {
          "ref": "6a7ca0eb-f46b-436e-9283-059fb40bc451",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "22bb149e-8d48-43d4-8a00-09f315ff876e"
        },
        "item": {
          "id": "f90ef1f1-a2ec-4b85-b2fd-ecc86e8f7816",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0e16bb10-64f3-4be6-acc1-c29806808a01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90ef1f1-a2ec-4b85-b2fd-ecc86e8f7816",
        "cursor": {
          "ref": "6a7ca0eb-f46b-436e-9283-059fb40bc451",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "22bb149e-8d48-43d4-8a00-09f315ff876e"
        },
        "item": {
          "id": "f90ef1f1-a2ec-4b85-b2fd-ecc86e8f7816",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0e16bb10-64f3-4be6-acc1-c29806808a01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d990e6a4-93b1-4863-92b6-51f537231f58",
        "cursor": {
          "ref": "ec85e9a9-3caa-4803-ac2a-6d26fcdae74b",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "111d2ac2-59b5-4c94-a0c5-4a2758cd7a38"
        },
        "item": {
          "id": "d990e6a4-93b1-4863-92b6-51f537231f58",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "df633644-777f-4324-9e78-690e05490120",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d990e6a4-93b1-4863-92b6-51f537231f58",
        "cursor": {
          "ref": "ec85e9a9-3caa-4803-ac2a-6d26fcdae74b",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "111d2ac2-59b5-4c94-a0c5-4a2758cd7a38"
        },
        "item": {
          "id": "d990e6a4-93b1-4863-92b6-51f537231f58",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "df633644-777f-4324-9e78-690e05490120",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e356caf8-6bb8-42e4-9806-acff69ab40f3",
        "cursor": {
          "ref": "076d58c7-fb74-43b8-9c08-af954ecb322c",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9e207c45-45a8-40a2-be0b-9e0a414928a3"
        },
        "item": {
          "id": "e356caf8-6bb8-42e4-9806-acff69ab40f3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "36a59f0d-a69c-4007-9a6b-c6707dc94995",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e356caf8-6bb8-42e4-9806-acff69ab40f3",
        "cursor": {
          "ref": "076d58c7-fb74-43b8-9c08-af954ecb322c",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9e207c45-45a8-40a2-be0b-9e0a414928a3"
        },
        "item": {
          "id": "e356caf8-6bb8-42e4-9806-acff69ab40f3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "36a59f0d-a69c-4007-9a6b-c6707dc94995",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7585452a-68fa-4848-8a8c-8c981a7b0b44",
        "cursor": {
          "ref": "c951db1c-ba2a-4317-a8d4-714f1e818bc8",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1b16c78b-869d-40f3-bfb5-c51b0eee0bbe"
        },
        "item": {
          "id": "7585452a-68fa-4848-8a8c-8c981a7b0b44",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "098aa385-4c9b-424c-aa87-c501642c90e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7585452a-68fa-4848-8a8c-8c981a7b0b44",
        "cursor": {
          "ref": "c951db1c-ba2a-4317-a8d4-714f1e818bc8",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1b16c78b-869d-40f3-bfb5-c51b0eee0bbe"
        },
        "item": {
          "id": "7585452a-68fa-4848-8a8c-8c981a7b0b44",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "098aa385-4c9b-424c-aa87-c501642c90e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12186ba-81f0-4f43-aae1-aa7468b96982",
        "cursor": {
          "ref": "35dcc2e2-9b95-4e78-bae0-71c75e2b1391",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d6121bc6-c7b5-4dcc-a6ee-a33d5db6e60b"
        },
        "item": {
          "id": "c12186ba-81f0-4f43-aae1-aa7468b96982",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7e22be65-c76a-40f6-85dd-f3c6e91e2a5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12186ba-81f0-4f43-aae1-aa7468b96982",
        "cursor": {
          "ref": "35dcc2e2-9b95-4e78-bae0-71c75e2b1391",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d6121bc6-c7b5-4dcc-a6ee-a33d5db6e60b"
        },
        "item": {
          "id": "c12186ba-81f0-4f43-aae1-aa7468b96982",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7e22be65-c76a-40f6-85dd-f3c6e91e2a5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c13a13a-1269-46bc-8d42-8b39292b9999",
        "cursor": {
          "ref": "d26649f6-575e-4be9-92a2-9880c6c5db15",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "016bd216-7ea5-42bc-b54d-cbf14af1e240"
        },
        "item": {
          "id": "8c13a13a-1269-46bc-8d42-8b39292b9999",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "94f1557b-5d91-40f4-a74e-a254b2686d29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c13a13a-1269-46bc-8d42-8b39292b9999",
        "cursor": {
          "ref": "d26649f6-575e-4be9-92a2-9880c6c5db15",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "016bd216-7ea5-42bc-b54d-cbf14af1e240"
        },
        "item": {
          "id": "8c13a13a-1269-46bc-8d42-8b39292b9999",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "94f1557b-5d91-40f4-a74e-a254b2686d29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a359cbbb-4594-451a-bfa1-2f59aedcd43e",
        "cursor": {
          "ref": "7ad0e774-9e68-4717-99ed-a49e45106377",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2b0638b9-3fd2-447a-9aa0-8a0ea820be65"
        },
        "item": {
          "id": "a359cbbb-4594-451a-bfa1-2f59aedcd43e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "135ab7d0-444f-48c4-88a0-f0e0b2b52ba4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a359cbbb-4594-451a-bfa1-2f59aedcd43e",
        "cursor": {
          "ref": "7ad0e774-9e68-4717-99ed-a49e45106377",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2b0638b9-3fd2-447a-9aa0-8a0ea820be65"
        },
        "item": {
          "id": "a359cbbb-4594-451a-bfa1-2f59aedcd43e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "135ab7d0-444f-48c4-88a0-f0e0b2b52ba4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76327fc-a310-4fc1-9e36-8304d1543c3e",
        "cursor": {
          "ref": "7a339e4c-d575-477c-833c-33e39927b817",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c22b5c96-4bee-46aa-8909-07bb41fd94c2"
        },
        "item": {
          "id": "c76327fc-a310-4fc1-9e36-8304d1543c3e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "bd89aca8-7415-46f5-94bc-8ef301d7437b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76327fc-a310-4fc1-9e36-8304d1543c3e",
        "cursor": {
          "ref": "7a339e4c-d575-477c-833c-33e39927b817",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c22b5c96-4bee-46aa-8909-07bb41fd94c2"
        },
        "item": {
          "id": "c76327fc-a310-4fc1-9e36-8304d1543c3e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "bd89aca8-7415-46f5-94bc-8ef301d7437b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eef37da-d5aa-435c-8610-465d795ee941",
        "cursor": {
          "ref": "05e0aa19-f190-4f13-9a3d-40eeaf1a673f",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e5dd619a-c2dd-4cb6-9581-31fbb071c742"
        },
        "item": {
          "id": "3eef37da-d5aa-435c-8610-465d795ee941",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "63472e61-6e67-42d6-bb44-38eeed7f3cb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 96,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eef37da-d5aa-435c-8610-465d795ee941",
        "cursor": {
          "ref": "05e0aa19-f190-4f13-9a3d-40eeaf1a673f",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e5dd619a-c2dd-4cb6-9581-31fbb071c742"
        },
        "item": {
          "id": "3eef37da-d5aa-435c-8610-465d795ee941",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "63472e61-6e67-42d6-bb44-38eeed7f3cb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 96,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ecf791-99c2-4be6-9760-80d4eded09f8",
        "cursor": {
          "ref": "271ab851-194b-4859-be61-144536b88f8d",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0c1e7884-b2f3-4c16-af97-fe0c4bae69b3"
        },
        "item": {
          "id": "d3ecf791-99c2-4be6-9760-80d4eded09f8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "825821ba-c002-4a59-a2a3-a34cb50e518f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ecf791-99c2-4be6-9760-80d4eded09f8",
        "cursor": {
          "ref": "271ab851-194b-4859-be61-144536b88f8d",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0c1e7884-b2f3-4c16-af97-fe0c4bae69b3"
        },
        "item": {
          "id": "d3ecf791-99c2-4be6-9760-80d4eded09f8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "825821ba-c002-4a59-a2a3-a34cb50e518f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367ac1bb-82d6-44e5-868f-af6b37480f2e",
        "cursor": {
          "ref": "6dafe742-0c85-460f-929f-08819ce265ed",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "970577fe-a7e6-446e-b7b4-301c648b8a64"
        },
        "item": {
          "id": "367ac1bb-82d6-44e5-868f-af6b37480f2e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "aa59bc1b-8245-4da0-9507-8570ca90f3ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367ac1bb-82d6-44e5-868f-af6b37480f2e",
        "cursor": {
          "ref": "6dafe742-0c85-460f-929f-08819ce265ed",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "970577fe-a7e6-446e-b7b4-301c648b8a64"
        },
        "item": {
          "id": "367ac1bb-82d6-44e5-868f-af6b37480f2e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "aa59bc1b-8245-4da0-9507-8570ca90f3ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f68861a-c615-491f-9f1a-77c61f3de736",
        "cursor": {
          "ref": "8416593b-939d-44a6-b4a8-b25112d0e8de",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f15cd9a1-5f49-495d-84f4-a5fb1ac3e4e1"
        },
        "item": {
          "id": "6f68861a-c615-491f-9f1a-77c61f3de736",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b8526bb3-813f-4f6d-b4d9-eaaf03b825e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f68861a-c615-491f-9f1a-77c61f3de736",
        "cursor": {
          "ref": "8416593b-939d-44a6-b4a8-b25112d0e8de",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f15cd9a1-5f49-495d-84f4-a5fb1ac3e4e1"
        },
        "item": {
          "id": "6f68861a-c615-491f-9f1a-77c61f3de736",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b8526bb3-813f-4f6d-b4d9-eaaf03b825e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf86836-e1ce-4fa4-9fd0-51d68840d997",
        "cursor": {
          "ref": "a38674e5-24bd-4c06-9b66-3fced91f4598",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "06d7539e-f4c1-4a5f-9fd4-23e9eb11297e"
        },
        "item": {
          "id": "caf86836-e1ce-4fa4-9fd0-51d68840d997",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c709c421-090e-45aa-ab04-ece1de21db2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf86836-e1ce-4fa4-9fd0-51d68840d997",
        "cursor": {
          "ref": "a38674e5-24bd-4c06-9b66-3fced91f4598",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "06d7539e-f4c1-4a5f-9fd4-23e9eb11297e"
        },
        "item": {
          "id": "caf86836-e1ce-4fa4-9fd0-51d68840d997",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c709c421-090e-45aa-ab04-ece1de21db2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e5bcfa-84b8-483c-bc88-f62079f95fb4",
        "cursor": {
          "ref": "4931adaf-2ee3-4cec-a369-f80f2c4f0201",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "eaab1f38-4261-413e-8c64-66e521c271ae"
        },
        "item": {
          "id": "12e5bcfa-84b8-483c-bc88-f62079f95fb4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3b0fb697-080a-41af-b167-92ff3ccd63a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e5bcfa-84b8-483c-bc88-f62079f95fb4",
        "cursor": {
          "ref": "4931adaf-2ee3-4cec-a369-f80f2c4f0201",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "eaab1f38-4261-413e-8c64-66e521c271ae"
        },
        "item": {
          "id": "12e5bcfa-84b8-483c-bc88-f62079f95fb4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3b0fb697-080a-41af-b167-92ff3ccd63a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76a30ca-327c-4a64-a115-810d03246982",
        "cursor": {
          "ref": "3eddffa9-89b7-4fde-863f-bee97da3db35",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "eca0549e-9f3b-46eb-9561-3cf92a8779f1"
        },
        "item": {
          "id": "c76a30ca-327c-4a64-a115-810d03246982",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e7e63362-035a-4ab7-b066-4cea71520185",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76a30ca-327c-4a64-a115-810d03246982",
        "cursor": {
          "ref": "3eddffa9-89b7-4fde-863f-bee97da3db35",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "eca0549e-9f3b-46eb-9561-3cf92a8779f1"
        },
        "item": {
          "id": "c76a30ca-327c-4a64-a115-810d03246982",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e7e63362-035a-4ab7-b066-4cea71520185",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff02ec3-c532-4aed-bb08-39250e7eb370",
        "cursor": {
          "ref": "4ee298e2-c413-4ed4-9c30-c95944bfb45e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "56d02831-6e41-499c-a09f-6455ec725bee"
        },
        "item": {
          "id": "bff02ec3-c532-4aed-bb08-39250e7eb370",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e62086ba-955f-4945-8701-6e47f5aa3b06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff02ec3-c532-4aed-bb08-39250e7eb370",
        "cursor": {
          "ref": "4ee298e2-c413-4ed4-9c30-c95944bfb45e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "56d02831-6e41-499c-a09f-6455ec725bee"
        },
        "item": {
          "id": "bff02ec3-c532-4aed-bb08-39250e7eb370",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e62086ba-955f-4945-8701-6e47f5aa3b06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa47057f-c3c9-4960-9138-5a5877c8b45f",
        "cursor": {
          "ref": "06db39e4-bcc0-4365-894b-c7ec875e0757",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "aef66878-1e86-4d0e-bf76-991dde3f4540"
        },
        "item": {
          "id": "fa47057f-c3c9-4960-9138-5a5877c8b45f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b61e0367-65f3-44de-9a63-84cc157f07a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa47057f-c3c9-4960-9138-5a5877c8b45f",
        "cursor": {
          "ref": "06db39e4-bcc0-4365-894b-c7ec875e0757",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "aef66878-1e86-4d0e-bf76-991dde3f4540"
        },
        "item": {
          "id": "fa47057f-c3c9-4960-9138-5a5877c8b45f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b61e0367-65f3-44de-9a63-84cc157f07a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9636bd-79b7-4325-9de3-2339ab19f05e",
        "cursor": {
          "ref": "1bad8e1a-2e8a-4265-8dca-978430ef6dea",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ac728689-84d3-4987-a8b9-dbb9dc98aa07"
        },
        "item": {
          "id": "9b9636bd-79b7-4325-9de3-2339ab19f05e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9927f49f-313e-4952-ad5e-6ed4553773f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9636bd-79b7-4325-9de3-2339ab19f05e",
        "cursor": {
          "ref": "1bad8e1a-2e8a-4265-8dca-978430ef6dea",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ac728689-84d3-4987-a8b9-dbb9dc98aa07"
        },
        "item": {
          "id": "9b9636bd-79b7-4325-9de3-2339ab19f05e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9927f49f-313e-4952-ad5e-6ed4553773f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d0a9a5-c053-405b-9b95-74068a59283a",
        "cursor": {
          "ref": "a94a07ab-bc0b-4fa4-824b-99921f6497e1",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "96b01994-ee80-43ad-a83f-7f7f2645f16f"
        },
        "item": {
          "id": "f1d0a9a5-c053-405b-9b95-74068a59283a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e35d9013-7bf1-4f0f-a932-60c61dbb49d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d0a9a5-c053-405b-9b95-74068a59283a",
        "cursor": {
          "ref": "a94a07ab-bc0b-4fa4-824b-99921f6497e1",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "96b01994-ee80-43ad-a83f-7f7f2645f16f"
        },
        "item": {
          "id": "f1d0a9a5-c053-405b-9b95-74068a59283a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e35d9013-7bf1-4f0f-a932-60c61dbb49d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d8bc49-76b8-4be9-8302-017b09bc9e52",
        "cursor": {
          "ref": "db08b8e1-58c9-4fe8-bae6-45ec45c1a434",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "036303ba-4ca9-400b-bafc-2afcf7f10817"
        },
        "item": {
          "id": "e3d8bc49-76b8-4be9-8302-017b09bc9e52",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b61e665d-9710-426e-8fab-76ac04e99c81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d8bc49-76b8-4be9-8302-017b09bc9e52",
        "cursor": {
          "ref": "db08b8e1-58c9-4fe8-bae6-45ec45c1a434",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "036303ba-4ca9-400b-bafc-2afcf7f10817"
        },
        "item": {
          "id": "e3d8bc49-76b8-4be9-8302-017b09bc9e52",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b61e665d-9710-426e-8fab-76ac04e99c81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9643bb8-e50c-4bbf-baf1-465ffa4c52b6",
        "cursor": {
          "ref": "0811be84-5056-4fa6-8367-77113e8a76f7",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e957a7f2-f26e-46c1-8ace-69a5fbc56625"
        },
        "item": {
          "id": "f9643bb8-e50c-4bbf-baf1-465ffa4c52b6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "408aba75-b184-4232-b2c1-2dad380af97a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9643bb8-e50c-4bbf-baf1-465ffa4c52b6",
        "cursor": {
          "ref": "0811be84-5056-4fa6-8367-77113e8a76f7",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e957a7f2-f26e-46c1-8ace-69a5fbc56625"
        },
        "item": {
          "id": "f9643bb8-e50c-4bbf-baf1-465ffa4c52b6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "408aba75-b184-4232-b2c1-2dad380af97a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e955da7-0870-4fbe-abe2-ea3b3b1614a0",
        "cursor": {
          "ref": "43c9f4d2-ac4d-41b1-94c7-5304084aced9",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "04d2669e-eeca-416d-992e-861ed6766846"
        },
        "item": {
          "id": "3e955da7-0870-4fbe-abe2-ea3b3b1614a0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0bbca88f-322a-4dc9-ada8-91f9dbebb270",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e955da7-0870-4fbe-abe2-ea3b3b1614a0",
        "cursor": {
          "ref": "43c9f4d2-ac4d-41b1-94c7-5304084aced9",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "04d2669e-eeca-416d-992e-861ed6766846"
        },
        "item": {
          "id": "3e955da7-0870-4fbe-abe2-ea3b3b1614a0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0bbca88f-322a-4dc9-ada8-91f9dbebb270",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ddc8c2a-d7a1-45ed-bf56-8b469a078f2f",
        "cursor": {
          "ref": "53d9ad8e-0290-4883-a01e-b93ac2b3afd6",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "801ddeda-b3b9-4945-833d-4146e02c9a66"
        },
        "item": {
          "id": "0ddc8c2a-d7a1-45ed-bf56-8b469a078f2f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2e5136e4-2e9b-42f8-9fcb-c9592089a358",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ddc8c2a-d7a1-45ed-bf56-8b469a078f2f",
        "cursor": {
          "ref": "53d9ad8e-0290-4883-a01e-b93ac2b3afd6",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "801ddeda-b3b9-4945-833d-4146e02c9a66"
        },
        "item": {
          "id": "0ddc8c2a-d7a1-45ed-bf56-8b469a078f2f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2e5136e4-2e9b-42f8-9fcb-c9592089a358",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159f2811-43d1-46d7-b93f-f8615a7f1670",
        "cursor": {
          "ref": "d186b6e3-4b0d-461d-a5c9-e91eb9c2921a",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "10586ad3-3be5-4832-959f-ccd7476e2ca5"
        },
        "item": {
          "id": "159f2811-43d1-46d7-b93f-f8615a7f1670",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6e0d6869-d297-4905-88c8-ae2a39f02aa6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159f2811-43d1-46d7-b93f-f8615a7f1670",
        "cursor": {
          "ref": "d186b6e3-4b0d-461d-a5c9-e91eb9c2921a",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "10586ad3-3be5-4832-959f-ccd7476e2ca5"
        },
        "item": {
          "id": "159f2811-43d1-46d7-b93f-f8615a7f1670",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6e0d6869-d297-4905-88c8-ae2a39f02aa6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c86592-2df3-4b38-959e-58c4e19baa3e",
        "cursor": {
          "ref": "ba4bca52-6aae-481e-a4a6-4dbcdbae9edf",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b984f900-39ef-4de4-9d06-f6f4686704b8"
        },
        "item": {
          "id": "85c86592-2df3-4b38-959e-58c4e19baa3e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f2e0d8a5-708c-4c3b-9937-078ea2c69339",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c86592-2df3-4b38-959e-58c4e19baa3e",
        "cursor": {
          "ref": "ba4bca52-6aae-481e-a4a6-4dbcdbae9edf",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b984f900-39ef-4de4-9d06-f6f4686704b8"
        },
        "item": {
          "id": "85c86592-2df3-4b38-959e-58c4e19baa3e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f2e0d8a5-708c-4c3b-9937-078ea2c69339",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b37efa-d4a7-4af9-860f-7400cde82e37",
        "cursor": {
          "ref": "2d8015e7-f8f7-477d-a06a-3082060cc9b1",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "76a974e1-fb9e-4867-9c29-1229539b9f94"
        },
        "item": {
          "id": "08b37efa-d4a7-4af9-860f-7400cde82e37",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7f7bf9a7-d0aa-4c33-a531-0f952dd4e3fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b37efa-d4a7-4af9-860f-7400cde82e37",
        "cursor": {
          "ref": "2d8015e7-f8f7-477d-a06a-3082060cc9b1",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "76a974e1-fb9e-4867-9c29-1229539b9f94"
        },
        "item": {
          "id": "08b37efa-d4a7-4af9-860f-7400cde82e37",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7f7bf9a7-d0aa-4c33-a531-0f952dd4e3fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7df2c19-a3f3-4889-8ed3-68da8095a47f",
        "cursor": {
          "ref": "6615cb4b-e5e0-4474-8af5-3324b47e3e37",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0938f8bc-e175-44dd-87d9-7f945ae54322"
        },
        "item": {
          "id": "d7df2c19-a3f3-4889-8ed3-68da8095a47f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "26552e8e-4c5e-46d1-852a-b72d3d305970",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7df2c19-a3f3-4889-8ed3-68da8095a47f",
        "cursor": {
          "ref": "6615cb4b-e5e0-4474-8af5-3324b47e3e37",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0938f8bc-e175-44dd-87d9-7f945ae54322"
        },
        "item": {
          "id": "d7df2c19-a3f3-4889-8ed3-68da8095a47f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "26552e8e-4c5e-46d1-852a-b72d3d305970",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ad0108-703e-4b56-be07-a948cc61202c",
        "cursor": {
          "ref": "4c0cb80e-468c-4b2c-abb6-aeb6c24423e3",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "466bf0ed-5635-46b0-8c79-142730338d08"
        },
        "item": {
          "id": "26ad0108-703e-4b56-be07-a948cc61202c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ad3954bc-555f-421b-99a1-8a031ff3beef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ad0108-703e-4b56-be07-a948cc61202c",
        "cursor": {
          "ref": "4c0cb80e-468c-4b2c-abb6-aeb6c24423e3",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "466bf0ed-5635-46b0-8c79-142730338d08"
        },
        "item": {
          "id": "26ad0108-703e-4b56-be07-a948cc61202c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ad3954bc-555f-421b-99a1-8a031ff3beef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484ff4d5-b4df-4a89-97be-ebb8ef5acdeb",
        "cursor": {
          "ref": "d49a52dd-3039-403e-8cca-ea3eb6c2e3c5",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "360f928d-6ac0-456a-8f79-077688607b74"
        },
        "item": {
          "id": "484ff4d5-b4df-4a89-97be-ebb8ef5acdeb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6e387f26-5670-4f0e-8022-2efd6d5eb489",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484ff4d5-b4df-4a89-97be-ebb8ef5acdeb",
        "cursor": {
          "ref": "d49a52dd-3039-403e-8cca-ea3eb6c2e3c5",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "360f928d-6ac0-456a-8f79-077688607b74"
        },
        "item": {
          "id": "484ff4d5-b4df-4a89-97be-ebb8ef5acdeb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6e387f26-5670-4f0e-8022-2efd6d5eb489",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5191ad3-4f43-4879-ac98-f21f61e2b662",
        "cursor": {
          "ref": "58766c2f-aaef-4810-bfbf-91dace465280",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a7c4edcc-e1fd-4c1c-9d5e-00ecdaae98b2"
        },
        "item": {
          "id": "a5191ad3-4f43-4879-ac98-f21f61e2b662",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d13ce212-dfc1-4d91-b510-351da70c09c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5191ad3-4f43-4879-ac98-f21f61e2b662",
        "cursor": {
          "ref": "58766c2f-aaef-4810-bfbf-91dace465280",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a7c4edcc-e1fd-4c1c-9d5e-00ecdaae98b2"
        },
        "item": {
          "id": "a5191ad3-4f43-4879-ac98-f21f61e2b662",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d13ce212-dfc1-4d91-b510-351da70c09c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61746521-e095-4b92-82d6-3824d7ae6066",
        "cursor": {
          "ref": "2fcca6bb-84db-4504-9306-d802ba171fe1",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a4cc68cd-fc6f-4c7e-88e0-ecf0f5ca3704"
        },
        "item": {
          "id": "61746521-e095-4b92-82d6-3824d7ae6066",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "932a440b-f5cd-493b-813f-a58a4d04c4b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61746521-e095-4b92-82d6-3824d7ae6066",
        "cursor": {
          "ref": "2fcca6bb-84db-4504-9306-d802ba171fe1",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a4cc68cd-fc6f-4c7e-88e0-ecf0f5ca3704"
        },
        "item": {
          "id": "61746521-e095-4b92-82d6-3824d7ae6066",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "932a440b-f5cd-493b-813f-a58a4d04c4b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b7c7cf-6868-42ad-96e5-6662788afbc2",
        "cursor": {
          "ref": "b47951ac-a19f-443a-8c26-922d015d32b8",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "bf9a53b9-e1ab-4c96-b32c-3d9c3528f113"
        },
        "item": {
          "id": "21b7c7cf-6868-42ad-96e5-6662788afbc2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3464eddb-f623-4676-b411-40d5d32022c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b7c7cf-6868-42ad-96e5-6662788afbc2",
        "cursor": {
          "ref": "b47951ac-a19f-443a-8c26-922d015d32b8",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "bf9a53b9-e1ab-4c96-b32c-3d9c3528f113"
        },
        "item": {
          "id": "21b7c7cf-6868-42ad-96e5-6662788afbc2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3464eddb-f623-4676-b411-40d5d32022c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e1f9ca-6e3b-4ad2-a11b-bb17a8436713",
        "cursor": {
          "ref": "ec80a71c-cd26-4c1f-92d9-63551309cb68",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e1c20542-478f-48fa-8101-53f0c32b9b18"
        },
        "item": {
          "id": "08e1f9ca-6e3b-4ad2-a11b-bb17a8436713",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d56df676-bd06-4d2e-8805-023a2288dac0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e1f9ca-6e3b-4ad2-a11b-bb17a8436713",
        "cursor": {
          "ref": "ec80a71c-cd26-4c1f-92d9-63551309cb68",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e1c20542-478f-48fa-8101-53f0c32b9b18"
        },
        "item": {
          "id": "08e1f9ca-6e3b-4ad2-a11b-bb17a8436713",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d56df676-bd06-4d2e-8805-023a2288dac0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa30ee7-a29d-4d24-bce3-927fa401a44d",
        "cursor": {
          "ref": "b5b445c6-3160-44fb-8d0c-461c65440f98",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "34faca5d-1d97-4aa2-a5bd-fd905833fb3e"
        },
        "item": {
          "id": "afa30ee7-a29d-4d24-bce3-927fa401a44d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e5b20f1e-7884-4bc3-99d5-dd95fa9fade6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa30ee7-a29d-4d24-bce3-927fa401a44d",
        "cursor": {
          "ref": "b5b445c6-3160-44fb-8d0c-461c65440f98",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "34faca5d-1d97-4aa2-a5bd-fd905833fb3e"
        },
        "item": {
          "id": "afa30ee7-a29d-4d24-bce3-927fa401a44d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e5b20f1e-7884-4bc3-99d5-dd95fa9fade6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f0872c6-0aed-416a-a197-7275dbf690f3",
        "cursor": {
          "ref": "46bb383d-58cd-4853-92f1-42cb437e6c06",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e47d851a-3d92-4c09-841d-71e7c8fae92b"
        },
        "item": {
          "id": "6f0872c6-0aed-416a-a197-7275dbf690f3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "05ad46fd-efab-426f-ac7b-6b0438089626",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f0872c6-0aed-416a-a197-7275dbf690f3",
        "cursor": {
          "ref": "46bb383d-58cd-4853-92f1-42cb437e6c06",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e47d851a-3d92-4c09-841d-71e7c8fae92b"
        },
        "item": {
          "id": "6f0872c6-0aed-416a-a197-7275dbf690f3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "05ad46fd-efab-426f-ac7b-6b0438089626",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd699f74-6baf-4a26-a339-96b27ecf747a",
        "cursor": {
          "ref": "b0c2af2c-3432-4f3d-bfa0-9bbb775bff06",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c8e581ef-2283-4f15-8934-50b5309a1b22"
        },
        "item": {
          "id": "cd699f74-6baf-4a26-a339-96b27ecf747a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "aee6ab72-9284-4514-bbd3-a6a54c79b827",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd699f74-6baf-4a26-a339-96b27ecf747a",
        "cursor": {
          "ref": "b0c2af2c-3432-4f3d-bfa0-9bbb775bff06",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c8e581ef-2283-4f15-8934-50b5309a1b22"
        },
        "item": {
          "id": "cd699f74-6baf-4a26-a339-96b27ecf747a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "aee6ab72-9284-4514-bbd3-a6a54c79b827",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53fabe99-c2e0-43a4-92e3-b6a6070604d9",
        "cursor": {
          "ref": "4ad31cf4-b56f-43cf-b986-ad3bb3132382",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "79cc5775-5203-44a4-8ded-cda076b362dc"
        },
        "item": {
          "id": "53fabe99-c2e0-43a4-92e3-b6a6070604d9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "822d2fa1-1fcd-4ac6-a891-8bc614e40a90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53fabe99-c2e0-43a4-92e3-b6a6070604d9",
        "cursor": {
          "ref": "4ad31cf4-b56f-43cf-b986-ad3bb3132382",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "79cc5775-5203-44a4-8ded-cda076b362dc"
        },
        "item": {
          "id": "53fabe99-c2e0-43a4-92e3-b6a6070604d9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "822d2fa1-1fcd-4ac6-a891-8bc614e40a90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35abc980-a03e-440b-83e2-0893cbb2671b",
        "cursor": {
          "ref": "73f431ee-2caa-4981-ae2d-b0063d24466d",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "beaae1a1-f047-49d1-b6fe-5cf2d5010958"
        },
        "item": {
          "id": "35abc980-a03e-440b-83e2-0893cbb2671b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "48632196-7d03-4513-bfd3-2dc4600d5070",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35abc980-a03e-440b-83e2-0893cbb2671b",
        "cursor": {
          "ref": "73f431ee-2caa-4981-ae2d-b0063d24466d",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "beaae1a1-f047-49d1-b6fe-5cf2d5010958"
        },
        "item": {
          "id": "35abc980-a03e-440b-83e2-0893cbb2671b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "48632196-7d03-4513-bfd3-2dc4600d5070",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445729d0-f6a4-4e69-945e-29bc5a138f17",
        "cursor": {
          "ref": "c721173f-2da4-474c-b13c-bc5e944c3bf4",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "503bc88e-a792-4609-b1ca-6c554eae82e1"
        },
        "item": {
          "id": "445729d0-f6a4-4e69-945e-29bc5a138f17",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9d398913-e432-43b4-96f1-c9f26cc87ad2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445729d0-f6a4-4e69-945e-29bc5a138f17",
        "cursor": {
          "ref": "c721173f-2da4-474c-b13c-bc5e944c3bf4",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "503bc88e-a792-4609-b1ca-6c554eae82e1"
        },
        "item": {
          "id": "445729d0-f6a4-4e69-945e-29bc5a138f17",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9d398913-e432-43b4-96f1-c9f26cc87ad2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7733122-3d63-42fa-99ec-be0290ed50ee",
        "cursor": {
          "ref": "ea7071fd-cbd0-46b2-91c3-c06b70da7316",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7cc2c780-7d0d-4604-9677-5ca9fbbe5ffd"
        },
        "item": {
          "id": "b7733122-3d63-42fa-99ec-be0290ed50ee",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "41418437-35c5-4b57-a989-6ed77825c5e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7733122-3d63-42fa-99ec-be0290ed50ee",
        "cursor": {
          "ref": "ea7071fd-cbd0-46b2-91c3-c06b70da7316",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7cc2c780-7d0d-4604-9677-5ca9fbbe5ffd"
        },
        "item": {
          "id": "b7733122-3d63-42fa-99ec-be0290ed50ee",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "41418437-35c5-4b57-a989-6ed77825c5e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07234eec-312c-4c9d-9d6e-ca9f71a90d26",
        "cursor": {
          "ref": "6e1b4049-1e73-4c72-8dbf-b530d6b1a7a1",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3bb38951-7f60-4af0-a93c-4f5c71b33f9b"
        },
        "item": {
          "id": "07234eec-312c-4c9d-9d6e-ca9f71a90d26",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ba09be1e-31b8-4046-ba79-04b1d0ca5efa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "07234eec-312c-4c9d-9d6e-ca9f71a90d26",
        "cursor": {
          "ref": "6e1b4049-1e73-4c72-8dbf-b530d6b1a7a1",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3bb38951-7f60-4af0-a93c-4f5c71b33f9b"
        },
        "item": {
          "id": "07234eec-312c-4c9d-9d6e-ca9f71a90d26",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ba09be1e-31b8-4046-ba79-04b1d0ca5efa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0a08c1ac-bdf8-43ed-b975-a973551c0711",
        "cursor": {
          "ref": "96695853-ce09-4110-b188-ea6498771496",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2aa82f9f-7cc5-4de2-b69f-d01dcb6433cb"
        },
        "item": {
          "id": "0a08c1ac-bdf8-43ed-b975-a973551c0711",
          "name": "credentials_issue"
        },
        "response": {
          "id": "12e4cd36-4bab-4fe8-a355-16f5b5d79c14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "0a08c1ac-bdf8-43ed-b975-a973551c0711",
        "cursor": {
          "ref": "96695853-ce09-4110-b188-ea6498771496",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2aa82f9f-7cc5-4de2-b69f-d01dcb6433cb"
        },
        "item": {
          "id": "0a08c1ac-bdf8-43ed-b975-a973551c0711",
          "name": "credentials_issue"
        },
        "response": {
          "id": "12e4cd36-4bab-4fe8-a355-16f5b5d79c14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "e27a7422-a8bc-43e4-80a5-c41ccdc5b041",
        "cursor": {
          "ref": "5a8df9a1-e786-4d90-9b02-18f293577302",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8061ba7f-dff3-4f2b-b592-612c035810b9"
        },
        "item": {
          "id": "e27a7422-a8bc-43e4-80a5-c41ccdc5b041",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d095d8c1-6cac-4d42-9d03-f87e206b48a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "e27a7422-a8bc-43e4-80a5-c41ccdc5b041",
        "cursor": {
          "ref": "5a8df9a1-e786-4d90-9b02-18f293577302",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8061ba7f-dff3-4f2b-b592-612c035810b9"
        },
        "item": {
          "id": "e27a7422-a8bc-43e4-80a5-c41ccdc5b041",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d095d8c1-6cac-4d42-9d03-f87e206b48a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "73d4da95-9cfc-44f4-8738-1c84d8a419ed",
        "cursor": {
          "ref": "65db34b7-8ad9-48f2-9d25-30a873fa4b16",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "49563fa8-cb95-474f-954d-b92d031b4d6f"
        },
        "item": {
          "id": "73d4da95-9cfc-44f4-8738-1c84d8a419ed",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "57857176-9436-4bc4-a8a7-be39077f9306",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "73d4da95-9cfc-44f4-8738-1c84d8a419ed",
        "cursor": {
          "ref": "65db34b7-8ad9-48f2-9d25-30a873fa4b16",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "49563fa8-cb95-474f-954d-b92d031b4d6f"
        },
        "item": {
          "id": "73d4da95-9cfc-44f4-8738-1c84d8a419ed",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "57857176-9436-4bc4-a8a7-be39077f9306",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "9a4f718a-7b5d-4959-b984-0493a9ad09cc",
        "cursor": {
          "ref": "2c4b2dc4-9155-4904-9d06-802d8df083f8",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3ceadad4-3692-483b-9629-063b653b48eb"
        },
        "item": {
          "id": "9a4f718a-7b5d-4959-b984-0493a9ad09cc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2f0fd46e-b05c-43c2-8c79-ab0d34d75b9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "9a4f718a-7b5d-4959-b984-0493a9ad09cc",
        "cursor": {
          "ref": "2c4b2dc4-9155-4904-9d06-802d8df083f8",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3ceadad4-3692-483b-9629-063b653b48eb"
        },
        "item": {
          "id": "9a4f718a-7b5d-4959-b984-0493a9ad09cc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2f0fd46e-b05c-43c2-8c79-ab0d34d75b9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "dce55b98-4a72-4508-97da-ba2f95e6bd40",
        "cursor": {
          "ref": "3b18ddd8-8848-4eb2-acd3-f520eee8ef75",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1fa20803-0d09-4e80-a729-21fbdd245ae1"
        },
        "item": {
          "id": "dce55b98-4a72-4508-97da-ba2f95e6bd40",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bb186723-836f-4957-91fb-822aab864fda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "dce55b98-4a72-4508-97da-ba2f95e6bd40",
        "cursor": {
          "ref": "3b18ddd8-8848-4eb2-acd3-f520eee8ef75",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1fa20803-0d09-4e80-a729-21fbdd245ae1"
        },
        "item": {
          "id": "dce55b98-4a72-4508-97da-ba2f95e6bd40",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bb186723-836f-4957-91fb-822aab864fda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2fd261e3-30c4-46dd-a22c-2641b4fb9724",
        "cursor": {
          "ref": "04bc0738-03cd-4587-bc85-efc7d67a07e0",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e2cee547-f26f-498c-8769-8d12efc42acf"
        },
        "item": {
          "id": "2fd261e3-30c4-46dd-a22c-2641b4fb9724",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "96c858c6-3504-4858-b576-3b84569751f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "2fd261e3-30c4-46dd-a22c-2641b4fb9724",
        "cursor": {
          "ref": "04bc0738-03cd-4587-bc85-efc7d67a07e0",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e2cee547-f26f-498c-8769-8d12efc42acf"
        },
        "item": {
          "id": "2fd261e3-30c4-46dd-a22c-2641b4fb9724",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "96c858c6-3504-4858-b576-3b84569751f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "6f6830f2-9c75-4179-b2f0-6a831d0b83a7",
        "cursor": {
          "ref": "60654a1b-b65a-4ee5-a3c8-5a993e24cc3d",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fa87947a-53cf-459f-af40-b597a080c81f"
        },
        "item": {
          "id": "6f6830f2-9c75-4179-b2f0-6a831d0b83a7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "272a3d8f-3a61-4752-bc56-563b9f6c978e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6830f2-9c75-4179-b2f0-6a831d0b83a7",
        "cursor": {
          "ref": "60654a1b-b65a-4ee5-a3c8-5a993e24cc3d",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fa87947a-53cf-459f-af40-b597a080c81f"
        },
        "item": {
          "id": "6f6830f2-9c75-4179-b2f0-6a831d0b83a7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "272a3d8f-3a61-4752-bc56-563b9f6c978e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fe6a52-4afa-4755-b121-fa9ad8737f93",
        "cursor": {
          "ref": "e01e7f6f-d6b9-4201-8a5b-f7780db53e3d",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bd3f99f9-760c-4e68-ad53-3c44905d164a"
        },
        "item": {
          "id": "77fe6a52-4afa-4755-b121-fa9ad8737f93",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e7d93d4d-4804-402f-a8c8-9c66410d4c40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fe6a52-4afa-4755-b121-fa9ad8737f93",
        "cursor": {
          "ref": "e01e7f6f-d6b9-4201-8a5b-f7780db53e3d",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bd3f99f9-760c-4e68-ad53-3c44905d164a"
        },
        "item": {
          "id": "77fe6a52-4afa-4755-b121-fa9ad8737f93",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e7d93d4d-4804-402f-a8c8-9c66410d4c40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470b377e-eb8d-44f6-9fa1-7f779b4cdd3f",
        "cursor": {
          "ref": "840936ee-c79e-4ade-a9d1-da726a3c602c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f55936f0-5a42-4398-9d84-64fcb2bc9bc7"
        },
        "item": {
          "id": "470b377e-eb8d-44f6-9fa1-7f779b4cdd3f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "12bd411f-fa24-4ef0-abda-ffa636bf186c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470b377e-eb8d-44f6-9fa1-7f779b4cdd3f",
        "cursor": {
          "ref": "840936ee-c79e-4ade-a9d1-da726a3c602c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f55936f0-5a42-4398-9d84-64fcb2bc9bc7"
        },
        "item": {
          "id": "470b377e-eb8d-44f6-9fa1-7f779b4cdd3f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "12bd411f-fa24-4ef0-abda-ffa636bf186c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3febbd22-fb31-4ac7-811b-4cf0e1b20985",
        "cursor": {
          "ref": "1c64fce0-1e1d-4c57-a580-d86ef8bf17b5",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a8ed2c5d-812e-4882-87fe-f89a0ccd2168"
        },
        "item": {
          "id": "3febbd22-fb31-4ac7-811b-4cf0e1b20985",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "92b049d5-ab64-4adb-9a45-8867d4c0e62f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3febbd22-fb31-4ac7-811b-4cf0e1b20985",
        "cursor": {
          "ref": "1c64fce0-1e1d-4c57-a580-d86ef8bf17b5",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a8ed2c5d-812e-4882-87fe-f89a0ccd2168"
        },
        "item": {
          "id": "3febbd22-fb31-4ac7-811b-4cf0e1b20985",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "92b049d5-ab64-4adb-9a45-8867d4c0e62f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe79400-5125-47ff-8ddb-4c772b42a198",
        "cursor": {
          "ref": "1581fc22-3e98-413d-a228-5beeaa1e7dbc",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a87c7d2f-5f93-4320-a5ee-74c4a8010255"
        },
        "item": {
          "id": "abe79400-5125-47ff-8ddb-4c772b42a198",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "95acc6f6-f046-4053-9471-e3e05a1e63e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe79400-5125-47ff-8ddb-4c772b42a198",
        "cursor": {
          "ref": "1581fc22-3e98-413d-a228-5beeaa1e7dbc",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a87c7d2f-5f93-4320-a5ee-74c4a8010255"
        },
        "item": {
          "id": "abe79400-5125-47ff-8ddb-4c772b42a198",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "95acc6f6-f046-4053-9471-e3e05a1e63e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fa3f6b-dd71-4234-b29e-3bff812b0262",
        "cursor": {
          "ref": "984f6fe2-b25d-416c-8173-955072c5295d",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "41407bbf-f7da-4f73-b77a-68f4d11fa820"
        },
        "item": {
          "id": "94fa3f6b-dd71-4234-b29e-3bff812b0262",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c85f6007-07cb-4668-b788-9b5899b41f98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fa3f6b-dd71-4234-b29e-3bff812b0262",
        "cursor": {
          "ref": "984f6fe2-b25d-416c-8173-955072c5295d",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "41407bbf-f7da-4f73-b77a-68f4d11fa820"
        },
        "item": {
          "id": "94fa3f6b-dd71-4234-b29e-3bff812b0262",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c85f6007-07cb-4668-b788-9b5899b41f98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b5ad34-cdba-407c-96bc-046b711fa865",
        "cursor": {
          "ref": "dddae283-50c8-4de6-ac64-a37c13e34c15",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b29b39ef-4b90-4c2d-b24a-e9ddc6ca70ac"
        },
        "item": {
          "id": "74b5ad34-cdba-407c-96bc-046b711fa865",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d31080b1-215f-49c4-856e-a1ba7bf6835e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b5ad34-cdba-407c-96bc-046b711fa865",
        "cursor": {
          "ref": "dddae283-50c8-4de6-ac64-a37c13e34c15",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b29b39ef-4b90-4c2d-b24a-e9ddc6ca70ac"
        },
        "item": {
          "id": "74b5ad34-cdba-407c-96bc-046b711fa865",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d31080b1-215f-49c4-856e-a1ba7bf6835e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bc1a6d-10b5-4517-ab59-7eb0d42724bf",
        "cursor": {
          "ref": "08e3b3ce-79a2-4d14-a7e1-bd289cdb2409",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1f488975-34c8-436d-87de-7b02bea40b81"
        },
        "item": {
          "id": "59bc1a6d-10b5-4517-ab59-7eb0d42724bf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "83bdd19c-a9a6-4b15-9cb5-ed60da1b233b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bc1a6d-10b5-4517-ab59-7eb0d42724bf",
        "cursor": {
          "ref": "08e3b3ce-79a2-4d14-a7e1-bd289cdb2409",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1f488975-34c8-436d-87de-7b02bea40b81"
        },
        "item": {
          "id": "59bc1a6d-10b5-4517-ab59-7eb0d42724bf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "83bdd19c-a9a6-4b15-9cb5-ed60da1b233b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe34bea-8755-43cf-a2bd-3e9658cdb03c",
        "cursor": {
          "ref": "f6997ee1-e63a-4005-be70-dbd62253385e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b05c531d-5c7d-422e-b160-b12fbabd2e3f"
        },
        "item": {
          "id": "6fe34bea-8755-43cf-a2bd-3e9658cdb03c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4b01c239-0ee0-4117-8838-bc76f22a0c40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe34bea-8755-43cf-a2bd-3e9658cdb03c",
        "cursor": {
          "ref": "f6997ee1-e63a-4005-be70-dbd62253385e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b05c531d-5c7d-422e-b160-b12fbabd2e3f"
        },
        "item": {
          "id": "6fe34bea-8755-43cf-a2bd-3e9658cdb03c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4b01c239-0ee0-4117-8838-bc76f22a0c40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f6fc85-3646-44cb-bcfb-0e6ec4d15491",
        "cursor": {
          "ref": "6e1b4e66-6f4d-4d33-858f-4fee83deed31",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "db9a98f2-692f-44c5-83b4-0e3c9c1e9263"
        },
        "item": {
          "id": "b9f6fc85-3646-44cb-bcfb-0e6ec4d15491",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6afde21d-64eb-43d0-8bbe-3bf7d7ca650e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f6fc85-3646-44cb-bcfb-0e6ec4d15491",
        "cursor": {
          "ref": "6e1b4e66-6f4d-4d33-858f-4fee83deed31",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "db9a98f2-692f-44c5-83b4-0e3c9c1e9263"
        },
        "item": {
          "id": "b9f6fc85-3646-44cb-bcfb-0e6ec4d15491",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6afde21d-64eb-43d0-8bbe-3bf7d7ca650e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4689a98-1454-4b77-92ab-7a35aeff6705",
        "cursor": {
          "ref": "97735090-c3dc-41a9-ac78-edb8ac7262cb",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "15c2a974-b95c-4210-9c95-c478d3807373"
        },
        "item": {
          "id": "f4689a98-1454-4b77-92ab-7a35aeff6705",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "66d1889e-3c90-445d-b28a-dc57f10bd90e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4689a98-1454-4b77-92ab-7a35aeff6705",
        "cursor": {
          "ref": "97735090-c3dc-41a9-ac78-edb8ac7262cb",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "15c2a974-b95c-4210-9c95-c478d3807373"
        },
        "item": {
          "id": "f4689a98-1454-4b77-92ab-7a35aeff6705",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "66d1889e-3c90-445d-b28a-dc57f10bd90e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cb198d-63e9-4598-b685-a855027fc777",
        "cursor": {
          "ref": "9b183f2a-6c8e-4a4a-a954-eaf05745a7af",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d387ba6e-ecdc-4669-82a5-0da9dca48fee"
        },
        "item": {
          "id": "e2cb198d-63e9-4598-b685-a855027fc777",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1c56c6d2-3e84-46e9-8f45-847096e61c70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cb198d-63e9-4598-b685-a855027fc777",
        "cursor": {
          "ref": "9b183f2a-6c8e-4a4a-a954-eaf05745a7af",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d387ba6e-ecdc-4669-82a5-0da9dca48fee"
        },
        "item": {
          "id": "e2cb198d-63e9-4598-b685-a855027fc777",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1c56c6d2-3e84-46e9-8f45-847096e61c70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a922abd-3a07-4d0b-9334-a9cfbe6b24c0",
        "cursor": {
          "ref": "cfdbb401-dc78-473a-90ca-ad48b9592a71",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "03189d36-5fe7-423c-989d-e2eff1f70b6c"
        },
        "item": {
          "id": "7a922abd-3a07-4d0b-9334-a9cfbe6b24c0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "28cb19e0-d202-4f63-8339-cbef22ac7863",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a922abd-3a07-4d0b-9334-a9cfbe6b24c0",
        "cursor": {
          "ref": "cfdbb401-dc78-473a-90ca-ad48b9592a71",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "03189d36-5fe7-423c-989d-e2eff1f70b6c"
        },
        "item": {
          "id": "7a922abd-3a07-4d0b-9334-a9cfbe6b24c0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "28cb19e0-d202-4f63-8339-cbef22ac7863",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe816a5-9edf-4fb5-91b2-d37b662bdc65",
        "cursor": {
          "ref": "347d08bc-628e-43c8-95f2-25e2e10bd293",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6c4e0be4-eed6-4cee-a227-6b1e53c142d6"
        },
        "item": {
          "id": "1fe816a5-9edf-4fb5-91b2-d37b662bdc65",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "63451a6f-1387-499a-a8ae-d2058b26085a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe816a5-9edf-4fb5-91b2-d37b662bdc65",
        "cursor": {
          "ref": "347d08bc-628e-43c8-95f2-25e2e10bd293",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6c4e0be4-eed6-4cee-a227-6b1e53c142d6"
        },
        "item": {
          "id": "1fe816a5-9edf-4fb5-91b2-d37b662bdc65",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "63451a6f-1387-499a-a8ae-d2058b26085a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f8d9f0-609d-4784-9fe1-3d57d21bebe3",
        "cursor": {
          "ref": "1f455a2b-c732-4b38-a84d-54044e6a3b81",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4c64d450-67df-40aa-873f-d51ae756ae88"
        },
        "item": {
          "id": "72f8d9f0-609d-4784-9fe1-3d57d21bebe3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7eb30214-646a-4476-bd88-be938de24a90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f8d9f0-609d-4784-9fe1-3d57d21bebe3",
        "cursor": {
          "ref": "1f455a2b-c732-4b38-a84d-54044e6a3b81",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4c64d450-67df-40aa-873f-d51ae756ae88"
        },
        "item": {
          "id": "72f8d9f0-609d-4784-9fe1-3d57d21bebe3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7eb30214-646a-4476-bd88-be938de24a90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa0072b-1536-4b54-84e9-64d024e846f2",
        "cursor": {
          "ref": "624703af-30f5-42f3-bc39-ab2f95fbbcc0",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d193704c-5cc1-4db5-ab45-370fa9d565bd"
        },
        "item": {
          "id": "0aa0072b-1536-4b54-84e9-64d024e846f2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "419290ce-97c1-4314-9320-6f9589c37fea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa0072b-1536-4b54-84e9-64d024e846f2",
        "cursor": {
          "ref": "624703af-30f5-42f3-bc39-ab2f95fbbcc0",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d193704c-5cc1-4db5-ab45-370fa9d565bd"
        },
        "item": {
          "id": "0aa0072b-1536-4b54-84e9-64d024e846f2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "419290ce-97c1-4314-9320-6f9589c37fea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f051ecc2-e9c6-4934-a9c0-6b09be0d3a59",
        "cursor": {
          "ref": "8994b251-1360-4b92-8fc3-530b78c979f8",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "016de8eb-3b41-40ab-9b86-62e2af3c9bfa"
        },
        "item": {
          "id": "f051ecc2-e9c6-4934-a9c0-6b09be0d3a59",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "77edf1a6-63c9-4f74-b0f9-ad45f3f3e6fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f051ecc2-e9c6-4934-a9c0-6b09be0d3a59",
        "cursor": {
          "ref": "8994b251-1360-4b92-8fc3-530b78c979f8",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "016de8eb-3b41-40ab-9b86-62e2af3c9bfa"
        },
        "item": {
          "id": "f051ecc2-e9c6-4934-a9c0-6b09be0d3a59",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "77edf1a6-63c9-4f74-b0f9-ad45f3f3e6fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1ae746-9e0a-4337-9278-e0be352d621e",
        "cursor": {
          "ref": "6a0071a4-ff2d-4eec-8a61-17f27fdd53ee",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "12fab286-05da-47dc-bde4-294b6d891442"
        },
        "item": {
          "id": "5b1ae746-9e0a-4337-9278-e0be352d621e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "526a4f11-b9a5-4393-92dc-674129bf32c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1ae746-9e0a-4337-9278-e0be352d621e",
        "cursor": {
          "ref": "6a0071a4-ff2d-4eec-8a61-17f27fdd53ee",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "12fab286-05da-47dc-bde4-294b6d891442"
        },
        "item": {
          "id": "5b1ae746-9e0a-4337-9278-e0be352d621e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "526a4f11-b9a5-4393-92dc-674129bf32c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e4dcbc-fa76-49db-93d9-4ab1d631e836",
        "cursor": {
          "ref": "e809e02c-6221-47f6-9cd6-08e15ee72367",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0c483c55-a743-4181-a064-e9bcb506a78d"
        },
        "item": {
          "id": "28e4dcbc-fa76-49db-93d9-4ab1d631e836",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3a5eee8d-bdf6-449a-8325-56e36aa54ee8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e4dcbc-fa76-49db-93d9-4ab1d631e836",
        "cursor": {
          "ref": "e809e02c-6221-47f6-9cd6-08e15ee72367",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0c483c55-a743-4181-a064-e9bcb506a78d"
        },
        "item": {
          "id": "28e4dcbc-fa76-49db-93d9-4ab1d631e836",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3a5eee8d-bdf6-449a-8325-56e36aa54ee8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8177e75-89ab-4fff-82bc-f7cf126820a6",
        "cursor": {
          "ref": "ab30f696-9cea-461f-8b0a-e548b9f85655",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "bf5feda8-72ad-4387-bf79-5c4583628932"
        },
        "item": {
          "id": "d8177e75-89ab-4fff-82bc-f7cf126820a6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bf8be9f1-fc55-4bdc-9517-a5beb7550829",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8177e75-89ab-4fff-82bc-f7cf126820a6",
        "cursor": {
          "ref": "ab30f696-9cea-461f-8b0a-e548b9f85655",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "bf5feda8-72ad-4387-bf79-5c4583628932"
        },
        "item": {
          "id": "d8177e75-89ab-4fff-82bc-f7cf126820a6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bf8be9f1-fc55-4bdc-9517-a5beb7550829",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493010a5-714e-4481-a706-d1b108e8b81a",
        "cursor": {
          "ref": "ddb612d4-c8fe-4015-b1f4-280f06e6548d",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "715583fd-80fd-4bf5-9607-74a41841d112"
        },
        "item": {
          "id": "493010a5-714e-4481-a706-d1b108e8b81a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ed2df3fa-0af6-4d4a-8eff-47e780041ee0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493010a5-714e-4481-a706-d1b108e8b81a",
        "cursor": {
          "ref": "ddb612d4-c8fe-4015-b1f4-280f06e6548d",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "715583fd-80fd-4bf5-9607-74a41841d112"
        },
        "item": {
          "id": "493010a5-714e-4481-a706-d1b108e8b81a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ed2df3fa-0af6-4d4a-8eff-47e780041ee0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabab0c0-2a3e-4660-9695-b1e91b04afa8",
        "cursor": {
          "ref": "89c31efd-d25f-4904-ba37-31f4ea0af3e2",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5f5a331d-ac98-4eb5-8b40-ee958648da8e"
        },
        "item": {
          "id": "aabab0c0-2a3e-4660-9695-b1e91b04afa8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8bf23fb4-366c-41dc-ab3c-6b17d8918002",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabab0c0-2a3e-4660-9695-b1e91b04afa8",
        "cursor": {
          "ref": "89c31efd-d25f-4904-ba37-31f4ea0af3e2",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5f5a331d-ac98-4eb5-8b40-ee958648da8e"
        },
        "item": {
          "id": "aabab0c0-2a3e-4660-9695-b1e91b04afa8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8bf23fb4-366c-41dc-ab3c-6b17d8918002",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a41a91e-3e68-4b9c-8021-130eedaa74ec",
        "cursor": {
          "ref": "06147cd9-3ce1-431b-a03c-38a6384f1be0",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e390ba49-e8f5-482f-9928-3d3952a42e78"
        },
        "item": {
          "id": "2a41a91e-3e68-4b9c-8021-130eedaa74ec",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "09d9b9ac-c148-49c3-9f9d-9e7fd60639ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a41a91e-3e68-4b9c-8021-130eedaa74ec",
        "cursor": {
          "ref": "06147cd9-3ce1-431b-a03c-38a6384f1be0",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e390ba49-e8f5-482f-9928-3d3952a42e78"
        },
        "item": {
          "id": "2a41a91e-3e68-4b9c-8021-130eedaa74ec",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "09d9b9ac-c148-49c3-9f9d-9e7fd60639ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475fda2e-b2ba-481e-a30b-ab8f949a6607",
        "cursor": {
          "ref": "835e4ae0-77aa-4696-8b26-aec5b91382c8",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "52b4769d-84c2-441f-bd88-2ddbe7c59235"
        },
        "item": {
          "id": "475fda2e-b2ba-481e-a30b-ab8f949a6607",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "24ded3b5-1728-4202-9a3a-fe016e69b4d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475fda2e-b2ba-481e-a30b-ab8f949a6607",
        "cursor": {
          "ref": "835e4ae0-77aa-4696-8b26-aec5b91382c8",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "52b4769d-84c2-441f-bd88-2ddbe7c59235"
        },
        "item": {
          "id": "475fda2e-b2ba-481e-a30b-ab8f949a6607",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "24ded3b5-1728-4202-9a3a-fe016e69b4d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a49277-e6c1-4120-bad5-ef8d7f7ee916",
        "cursor": {
          "ref": "cc724d60-dc62-4243-ad8d-2708e45d68a6",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "878dae0b-e33c-400f-8908-22fbbeacc9e7"
        },
        "item": {
          "id": "e5a49277-e6c1-4120-bad5-ef8d7f7ee916",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3138d51e-8851-4c5d-8926-4127215b6d7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a49277-e6c1-4120-bad5-ef8d7f7ee916",
        "cursor": {
          "ref": "cc724d60-dc62-4243-ad8d-2708e45d68a6",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "878dae0b-e33c-400f-8908-22fbbeacc9e7"
        },
        "item": {
          "id": "e5a49277-e6c1-4120-bad5-ef8d7f7ee916",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3138d51e-8851-4c5d-8926-4127215b6d7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c202ca2-ce19-421a-93c4-43a8f6326484",
        "cursor": {
          "ref": "738a0c7d-64c1-44aa-9b81-b7cd636ff7c3",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9e5ff51c-7d94-4b36-9487-b64842242d54"
        },
        "item": {
          "id": "6c202ca2-ce19-421a-93c4-43a8f6326484",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bb050228-5d0d-4dd9-a724-657c79a5af70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c202ca2-ce19-421a-93c4-43a8f6326484",
        "cursor": {
          "ref": "738a0c7d-64c1-44aa-9b81-b7cd636ff7c3",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9e5ff51c-7d94-4b36-9487-b64842242d54"
        },
        "item": {
          "id": "6c202ca2-ce19-421a-93c4-43a8f6326484",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bb050228-5d0d-4dd9-a724-657c79a5af70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a982a39c-9f50-4837-8330-a90d3a4f8a60",
        "cursor": {
          "ref": "5eb2c09b-2e52-47fe-b0bd-60fee7ecf7b8",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b85078f3-7a02-4555-afda-e26921ab557d"
        },
        "item": {
          "id": "a982a39c-9f50-4837-8330-a90d3a4f8a60",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d8357ed7-729f-4cd3-9329-f12ce9b4f6a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a982a39c-9f50-4837-8330-a90d3a4f8a60",
        "cursor": {
          "ref": "5eb2c09b-2e52-47fe-b0bd-60fee7ecf7b8",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b85078f3-7a02-4555-afda-e26921ab557d"
        },
        "item": {
          "id": "a982a39c-9f50-4837-8330-a90d3a4f8a60",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d8357ed7-729f-4cd3-9329-f12ce9b4f6a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a147bf-f118-459d-b57d-8cf6a2d55cb7",
        "cursor": {
          "ref": "a87ba484-6cae-4b0d-99eb-66becdda9404",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "735ca3ec-4de2-4869-9d1a-ea30178a155d"
        },
        "item": {
          "id": "b9a147bf-f118-459d-b57d-8cf6a2d55cb7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6fb492ed-520c-4e84-ac40-00279945b201",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a147bf-f118-459d-b57d-8cf6a2d55cb7",
        "cursor": {
          "ref": "a87ba484-6cae-4b0d-99eb-66becdda9404",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "735ca3ec-4de2-4869-9d1a-ea30178a155d"
        },
        "item": {
          "id": "b9a147bf-f118-459d-b57d-8cf6a2d55cb7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6fb492ed-520c-4e84-ac40-00279945b201",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633fdd55-e8dd-429f-b938-81a53c0f119d",
        "cursor": {
          "ref": "5d45a129-69be-4916-97a9-e57a3cd03882",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "76b6a383-8395-4534-a464-5a084c827fae"
        },
        "item": {
          "id": "633fdd55-e8dd-429f-b938-81a53c0f119d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b35a3bb0-e794-4b23-ac6f-54a36740d74c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633fdd55-e8dd-429f-b938-81a53c0f119d",
        "cursor": {
          "ref": "5d45a129-69be-4916-97a9-e57a3cd03882",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "76b6a383-8395-4534-a464-5a084c827fae"
        },
        "item": {
          "id": "633fdd55-e8dd-429f-b938-81a53c0f119d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b35a3bb0-e794-4b23-ac6f-54a36740d74c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965dd3a4-835f-462a-8f72-797f53f518a7",
        "cursor": {
          "ref": "8952de9d-eb15-451c-bc99-8c4c24deb293",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "89c077ba-a1c4-45da-b0e5-045867b4eeeb"
        },
        "item": {
          "id": "965dd3a4-835f-462a-8f72-797f53f518a7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "78798ac3-357b-4c43-a28b-9bc797004baf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965dd3a4-835f-462a-8f72-797f53f518a7",
        "cursor": {
          "ref": "8952de9d-eb15-451c-bc99-8c4c24deb293",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "89c077ba-a1c4-45da-b0e5-045867b4eeeb"
        },
        "item": {
          "id": "965dd3a4-835f-462a-8f72-797f53f518a7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "78798ac3-357b-4c43-a28b-9bc797004baf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8e8a24-c788-4b0e-ba09-3e9868c12454",
        "cursor": {
          "ref": "dc3d2b84-3955-4be7-9797-247d328b37c4",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f39e7811-9348-44cf-bcaf-b6963377b6fd"
        },
        "item": {
          "id": "1a8e8a24-c788-4b0e-ba09-3e9868c12454",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "18aa6130-af1b-45b4-95eb-9c91ffc5847a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8e8a24-c788-4b0e-ba09-3e9868c12454",
        "cursor": {
          "ref": "dc3d2b84-3955-4be7-9797-247d328b37c4",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f39e7811-9348-44cf-bcaf-b6963377b6fd"
        },
        "item": {
          "id": "1a8e8a24-c788-4b0e-ba09-3e9868c12454",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "18aa6130-af1b-45b4-95eb-9c91ffc5847a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60bc10f-3e33-4758-a6b6-5237463047a3",
        "cursor": {
          "ref": "bf0a9012-9cbe-4fdd-a818-0cbfbe42bef4",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fbb90069-1f23-43ce-a685-bd0d48c07ad4"
        },
        "item": {
          "id": "a60bc10f-3e33-4758-a6b6-5237463047a3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b033a5e6-3d93-44b9-8580-fe138f2ecd34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60bc10f-3e33-4758-a6b6-5237463047a3",
        "cursor": {
          "ref": "bf0a9012-9cbe-4fdd-a818-0cbfbe42bef4",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fbb90069-1f23-43ce-a685-bd0d48c07ad4"
        },
        "item": {
          "id": "a60bc10f-3e33-4758-a6b6-5237463047a3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b033a5e6-3d93-44b9-8580-fe138f2ecd34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8645270d-86af-41c6-aade-22dab592e048",
        "cursor": {
          "ref": "afb055ed-10f2-4e66-b52e-ba82c642c945",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b0c9dfc8-ca69-4a18-b238-db16a4d2d360"
        },
        "item": {
          "id": "8645270d-86af-41c6-aade-22dab592e048",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ea2c67cd-6c4c-43a4-8735-8d5e364deb2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8645270d-86af-41c6-aade-22dab592e048",
        "cursor": {
          "ref": "afb055ed-10f2-4e66-b52e-ba82c642c945",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b0c9dfc8-ca69-4a18-b238-db16a4d2d360"
        },
        "item": {
          "id": "8645270d-86af-41c6-aade-22dab592e048",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ea2c67cd-6c4c-43a4-8735-8d5e364deb2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d20e20-f95c-490b-ba8f-c88652346f3e",
        "cursor": {
          "ref": "c37cf1b4-107c-4b0e-97b8-fc761a64d65f",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "05fc7a7d-0dc5-4632-8a6b-26a598070c60"
        },
        "item": {
          "id": "94d20e20-f95c-490b-ba8f-c88652346f3e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a9957014-8d54-4325-bf62-ae7b49f8eb5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d20e20-f95c-490b-ba8f-c88652346f3e",
        "cursor": {
          "ref": "c37cf1b4-107c-4b0e-97b8-fc761a64d65f",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "05fc7a7d-0dc5-4632-8a6b-26a598070c60"
        },
        "item": {
          "id": "94d20e20-f95c-490b-ba8f-c88652346f3e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a9957014-8d54-4325-bf62-ae7b49f8eb5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d13781-503b-4de1-8b11-efe2e3ae0504",
        "cursor": {
          "ref": "c2c8d9dd-fa57-49cb-bd87-084fab633970",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a7cd2485-9f1b-482c-a79e-236a6fcd05cb"
        },
        "item": {
          "id": "a9d13781-503b-4de1-8b11-efe2e3ae0504",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7c5f1d99-86bb-48b4-aeac-11deb520cb4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d13781-503b-4de1-8b11-efe2e3ae0504",
        "cursor": {
          "ref": "c2c8d9dd-fa57-49cb-bd87-084fab633970",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a7cd2485-9f1b-482c-a79e-236a6fcd05cb"
        },
        "item": {
          "id": "a9d13781-503b-4de1-8b11-efe2e3ae0504",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7c5f1d99-86bb-48b4-aeac-11deb520cb4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d6a2a5-7b5d-4518-b8e8-6e093aa8a7ca",
        "cursor": {
          "ref": "76558b9b-2569-486a-af00-4b1df01b1d16",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6ebc3d7e-a591-41f7-aef2-c691cff3ac84"
        },
        "item": {
          "id": "d5d6a2a5-7b5d-4518-b8e8-6e093aa8a7ca",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d1789701-cf58-40a6-a221-bdbcbb785eb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d6a2a5-7b5d-4518-b8e8-6e093aa8a7ca",
        "cursor": {
          "ref": "76558b9b-2569-486a-af00-4b1df01b1d16",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6ebc3d7e-a591-41f7-aef2-c691cff3ac84"
        },
        "item": {
          "id": "d5d6a2a5-7b5d-4518-b8e8-6e093aa8a7ca",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d1789701-cf58-40a6-a221-bdbcbb785eb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95be5224-80e8-4e7e-9ece-960df872de69",
        "cursor": {
          "ref": "de17cf5c-b767-4176-a52f-19f3b44bbadc",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9a86f37e-5c66-4a95-8641-c9ca9f405385"
        },
        "item": {
          "id": "95be5224-80e8-4e7e-9ece-960df872de69",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "872d8d7a-3acc-496e-a90b-7acde70455fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95be5224-80e8-4e7e-9ece-960df872de69",
        "cursor": {
          "ref": "de17cf5c-b767-4176-a52f-19f3b44bbadc",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9a86f37e-5c66-4a95-8641-c9ca9f405385"
        },
        "item": {
          "id": "95be5224-80e8-4e7e-9ece-960df872de69",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "872d8d7a-3acc-496e-a90b-7acde70455fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f55836-6078-4cfb-a259-2c1f46786639",
        "cursor": {
          "ref": "4bae3689-be99-47a1-b307-d5825834caab",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6cbec379-6c7c-4ee5-b8a9-61b306450011"
        },
        "item": {
          "id": "35f55836-6078-4cfb-a259-2c1f46786639",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "421bd09f-c6ca-4dfb-861f-000c4d517272",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f55836-6078-4cfb-a259-2c1f46786639",
        "cursor": {
          "ref": "4bae3689-be99-47a1-b307-d5825834caab",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6cbec379-6c7c-4ee5-b8a9-61b306450011"
        },
        "item": {
          "id": "35f55836-6078-4cfb-a259-2c1f46786639",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "421bd09f-c6ca-4dfb-861f-000c4d517272",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22777087-c7ad-4ac3-b4f4-702c21911ef0",
        "cursor": {
          "ref": "ebb97c27-ab88-418d-b780-d56f05eccd44",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5df18cbb-c25f-47b1-b330-315340776925"
        },
        "item": {
          "id": "22777087-c7ad-4ac3-b4f4-702c21911ef0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c86c8ed4-93f6-4b91-8c1d-b1ed229bff43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22777087-c7ad-4ac3-b4f4-702c21911ef0",
        "cursor": {
          "ref": "ebb97c27-ab88-418d-b780-d56f05eccd44",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5df18cbb-c25f-47b1-b330-315340776925"
        },
        "item": {
          "id": "22777087-c7ad-4ac3-b4f4-702c21911ef0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c86c8ed4-93f6-4b91-8c1d-b1ed229bff43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f80ce9e-cfd2-45f0-9e34-27b1180aabb6",
        "cursor": {
          "ref": "c686e6f9-fe1a-44d8-a0a4-079405a669f6",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5734a34c-637e-44bb-9798-df8a0ed0f937"
        },
        "item": {
          "id": "3f80ce9e-cfd2-45f0-9e34-27b1180aabb6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "eb7498f6-e945-4e72-b5b1-29cb6e48eab2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 104,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f80ce9e-cfd2-45f0-9e34-27b1180aabb6",
        "cursor": {
          "ref": "c686e6f9-fe1a-44d8-a0a4-079405a669f6",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5734a34c-637e-44bb-9798-df8a0ed0f937"
        },
        "item": {
          "id": "3f80ce9e-cfd2-45f0-9e34-27b1180aabb6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "eb7498f6-e945-4e72-b5b1-29cb6e48eab2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 104,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2556a07-bd76-485c-89a2-4ab4d86386fa",
        "cursor": {
          "ref": "a0e64e91-c621-4080-a440-5a9e189e3c1d",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a9aaf40d-37dc-4978-986b-908f1799cc22"
        },
        "item": {
          "id": "c2556a07-bd76-485c-89a2-4ab4d86386fa",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0bc76d7d-2911-428a-8298-3b0f839b4776",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2556a07-bd76-485c-89a2-4ab4d86386fa",
        "cursor": {
          "ref": "a0e64e91-c621-4080-a440-5a9e189e3c1d",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a9aaf40d-37dc-4978-986b-908f1799cc22"
        },
        "item": {
          "id": "c2556a07-bd76-485c-89a2-4ab4d86386fa",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0bc76d7d-2911-428a-8298-3b0f839b4776",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b188ea5b-a706-438a-a53f-813929d4aa5a",
        "cursor": {
          "ref": "bc26fa20-6390-483b-b30d-328ed4ec8678",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "489d40cc-758d-404e-8f71-95b3d2b06a08"
        },
        "item": {
          "id": "b188ea5b-a706-438a-a53f-813929d4aa5a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6742ad82-9e34-48f9-83a8-fe64b0f5a5a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b188ea5b-a706-438a-a53f-813929d4aa5a",
        "cursor": {
          "ref": "bc26fa20-6390-483b-b30d-328ed4ec8678",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "489d40cc-758d-404e-8f71-95b3d2b06a08"
        },
        "item": {
          "id": "b188ea5b-a706-438a-a53f-813929d4aa5a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6742ad82-9e34-48f9-83a8-fe64b0f5a5a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c35b8e-993b-49d8-9d66-cdadeb5ee2e3",
        "cursor": {
          "ref": "6ef7aa37-2414-4813-86d5-668920e89cbe",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d778facb-4357-4a30-a4a6-e464956c2b7f"
        },
        "item": {
          "id": "01c35b8e-993b-49d8-9d66-cdadeb5ee2e3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "39e70680-bc21-48d8-b637-db01cd3566d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c35b8e-993b-49d8-9d66-cdadeb5ee2e3",
        "cursor": {
          "ref": "6ef7aa37-2414-4813-86d5-668920e89cbe",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d778facb-4357-4a30-a4a6-e464956c2b7f"
        },
        "item": {
          "id": "01c35b8e-993b-49d8-9d66-cdadeb5ee2e3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "39e70680-bc21-48d8-b637-db01cd3566d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561c7826-0402-4d83-a662-ef16bfe3ee98",
        "cursor": {
          "ref": "1a759bfa-7aec-4206-aad0-981e7baf4fff",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8e8008c3-49ca-42a2-9561-8a96d5b8c64f"
        },
        "item": {
          "id": "561c7826-0402-4d83-a662-ef16bfe3ee98",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fe676de5-78de-45e6-9386-8ee5fe2689fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561c7826-0402-4d83-a662-ef16bfe3ee98",
        "cursor": {
          "ref": "1a759bfa-7aec-4206-aad0-981e7baf4fff",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8e8008c3-49ca-42a2-9561-8a96d5b8c64f"
        },
        "item": {
          "id": "561c7826-0402-4d83-a662-ef16bfe3ee98",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fe676de5-78de-45e6-9386-8ee5fe2689fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2088fc43-6899-4dd2-9cc6-b9531a7069a7",
        "cursor": {
          "ref": "a8a06094-607f-4cd4-9b04-ca7dcc65602f",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9bf7eec2-78ec-49b4-8026-7840eac38ff6"
        },
        "item": {
          "id": "2088fc43-6899-4dd2-9cc6-b9531a7069a7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "80fd3133-4da3-4308-9525-0eb244ab770b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2088fc43-6899-4dd2-9cc6-b9531a7069a7",
        "cursor": {
          "ref": "a8a06094-607f-4cd4-9b04-ca7dcc65602f",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9bf7eec2-78ec-49b4-8026-7840eac38ff6"
        },
        "item": {
          "id": "2088fc43-6899-4dd2-9cc6-b9531a7069a7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "80fd3133-4da3-4308-9525-0eb244ab770b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc8d12a-ed0e-478d-8bff-8c482198ee0f",
        "cursor": {
          "ref": "28fa1279-66dd-48f7-8813-ca70787ae00c",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a99a6d2d-3a40-470a-b78a-4aff241b84d1"
        },
        "item": {
          "id": "9fc8d12a-ed0e-478d-8bff-8c482198ee0f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0e0e47aa-abbf-45e9-9d31-041b11101887",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc8d12a-ed0e-478d-8bff-8c482198ee0f",
        "cursor": {
          "ref": "28fa1279-66dd-48f7-8813-ca70787ae00c",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a99a6d2d-3a40-470a-b78a-4aff241b84d1"
        },
        "item": {
          "id": "9fc8d12a-ed0e-478d-8bff-8c482198ee0f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0e0e47aa-abbf-45e9-9d31-041b11101887",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1d51ab-3337-48c6-8e9e-bb667f9a1b55",
        "cursor": {
          "ref": "be4a6879-3ccf-42c9-95c6-36248e1c4e34",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a0c6c34f-1305-4b95-ae2b-4198af7bf8f3"
        },
        "item": {
          "id": "5f1d51ab-3337-48c6-8e9e-bb667f9a1b55",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ce3ebfe4-0933-489c-be4e-8e86f113d6f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1d51ab-3337-48c6-8e9e-bb667f9a1b55",
        "cursor": {
          "ref": "be4a6879-3ccf-42c9-95c6-36248e1c4e34",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a0c6c34f-1305-4b95-ae2b-4198af7bf8f3"
        },
        "item": {
          "id": "5f1d51ab-3337-48c6-8e9e-bb667f9a1b55",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ce3ebfe4-0933-489c-be4e-8e86f113d6f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb52ab8-1e3e-4b41-8657-236e4552d61e",
        "cursor": {
          "ref": "804e094b-34da-4816-89cf-d39967bbc736",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f2b96857-6e48-4bda-97ad-d2abd304bb7f"
        },
        "item": {
          "id": "ffb52ab8-1e3e-4b41-8657-236e4552d61e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "079fedc7-e839-4ff1-9b89-e7f5ed5c2495",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb52ab8-1e3e-4b41-8657-236e4552d61e",
        "cursor": {
          "ref": "804e094b-34da-4816-89cf-d39967bbc736",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f2b96857-6e48-4bda-97ad-d2abd304bb7f"
        },
        "item": {
          "id": "ffb52ab8-1e3e-4b41-8657-236e4552d61e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "079fedc7-e839-4ff1-9b89-e7f5ed5c2495",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0d4cdc-4ff2-4b8a-a937-eec596ccf76c",
        "cursor": {
          "ref": "c0e7f1b1-e1be-4ab1-ba05-ef2abba45f67",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "77d66377-b392-47c6-8da5-0f6204b163e2"
        },
        "item": {
          "id": "1c0d4cdc-4ff2-4b8a-a937-eec596ccf76c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e946ea62-3e2b-4fa3-85bd-664cf02c5c77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0d4cdc-4ff2-4b8a-a937-eec596ccf76c",
        "cursor": {
          "ref": "c0e7f1b1-e1be-4ab1-ba05-ef2abba45f67",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "77d66377-b392-47c6-8da5-0f6204b163e2"
        },
        "item": {
          "id": "1c0d4cdc-4ff2-4b8a-a937-eec596ccf76c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e946ea62-3e2b-4fa3-85bd-664cf02c5c77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e23687-10fb-4db1-83cd-651b8502284e",
        "cursor": {
          "ref": "8a4adf25-840d-4240-9551-abfd06e32ed9",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c1ad31be-6d1d-4ff1-993f-56d4559ff81c"
        },
        "item": {
          "id": "b7e23687-10fb-4db1-83cd-651b8502284e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7876c998-f249-43f5-a08f-3eb135a6eeae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e23687-10fb-4db1-83cd-651b8502284e",
        "cursor": {
          "ref": "8a4adf25-840d-4240-9551-abfd06e32ed9",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c1ad31be-6d1d-4ff1-993f-56d4559ff81c"
        },
        "item": {
          "id": "b7e23687-10fb-4db1-83cd-651b8502284e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7876c998-f249-43f5-a08f-3eb135a6eeae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4008afe2-6280-4c9a-afc9-deeb19e59d97",
        "cursor": {
          "ref": "e6d0e1ed-3d42-4a31-a1a6-312ec060b8eb",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4199b1a5-e24f-4ada-89a8-be660557e248"
        },
        "item": {
          "id": "4008afe2-6280-4c9a-afc9-deeb19e59d97",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "88716b0a-b7f9-4f20-aff9-d6fa0a14c48e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4008afe2-6280-4c9a-afc9-deeb19e59d97",
        "cursor": {
          "ref": "e6d0e1ed-3d42-4a31-a1a6-312ec060b8eb",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4199b1a5-e24f-4ada-89a8-be660557e248"
        },
        "item": {
          "id": "4008afe2-6280-4c9a-afc9-deeb19e59d97",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "88716b0a-b7f9-4f20-aff9-d6fa0a14c48e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0b0333-6227-4e37-9ed1-d16b25eab8ed",
        "cursor": {
          "ref": "d9bb84c9-63c7-4995-8baf-665624c89f8f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5913b932-87e8-4d47-ba1c-b5b99116c90b"
        },
        "item": {
          "id": "9c0b0333-6227-4e37-9ed1-d16b25eab8ed",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "06b29dd7-842c-4a96-8b50-c3cc4ff6fca7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0b0333-6227-4e37-9ed1-d16b25eab8ed",
        "cursor": {
          "ref": "d9bb84c9-63c7-4995-8baf-665624c89f8f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5913b932-87e8-4d47-ba1c-b5b99116c90b"
        },
        "item": {
          "id": "9c0b0333-6227-4e37-9ed1-d16b25eab8ed",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "06b29dd7-842c-4a96-8b50-c3cc4ff6fca7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05aee0b1-914c-49a8-ac43-ccd749d3c748",
        "cursor": {
          "ref": "379d5f3e-820a-405e-a095-e53ab7c618e7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "23bc1631-ed18-4268-8ed4-101d3cfd659c"
        },
        "item": {
          "id": "05aee0b1-914c-49a8-ac43-ccd749d3c748",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "618019a8-4882-4ac6-9c36-93c5842ae823",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05aee0b1-914c-49a8-ac43-ccd749d3c748",
        "cursor": {
          "ref": "379d5f3e-820a-405e-a095-e53ab7c618e7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "23bc1631-ed18-4268-8ed4-101d3cfd659c"
        },
        "item": {
          "id": "05aee0b1-914c-49a8-ac43-ccd749d3c748",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "618019a8-4882-4ac6-9c36-93c5842ae823",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b906f25-ae31-40f3-aa6a-2960d1acae28",
        "cursor": {
          "ref": "a490a5af-d43e-4ad0-8363-a6c8e0b946ba",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "dd81857c-78ea-4ea9-946d-98615534f1e3"
        },
        "item": {
          "id": "7b906f25-ae31-40f3-aa6a-2960d1acae28",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4bc36d05-aca9-4f60-ae75-d1c6c27bd934",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b906f25-ae31-40f3-aa6a-2960d1acae28",
        "cursor": {
          "ref": "a490a5af-d43e-4ad0-8363-a6c8e0b946ba",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "dd81857c-78ea-4ea9-946d-98615534f1e3"
        },
        "item": {
          "id": "7b906f25-ae31-40f3-aa6a-2960d1acae28",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4bc36d05-aca9-4f60-ae75-d1c6c27bd934",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62e0882-6436-42e8-838f-80387c45fbe0",
        "cursor": {
          "ref": "a149c94a-117c-4703-9fb0-2800759778d0",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5bb64d17-9c6e-4ecb-9fb0-50fff14ba256"
        },
        "item": {
          "id": "a62e0882-6436-42e8-838f-80387c45fbe0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "81b848c9-30c0-4851-8613-0ef3d28984c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62e0882-6436-42e8-838f-80387c45fbe0",
        "cursor": {
          "ref": "a149c94a-117c-4703-9fb0-2800759778d0",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5bb64d17-9c6e-4ecb-9fb0-50fff14ba256"
        },
        "item": {
          "id": "a62e0882-6436-42e8-838f-80387c45fbe0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "81b848c9-30c0-4851-8613-0ef3d28984c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c0a14e-ab27-49a9-bd5e-6a0de4e3cf71",
        "cursor": {
          "ref": "290c2c4e-bb60-4ade-ad73-0db9485fee35",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d8940053-84a1-4bb7-a874-962cbf733543"
        },
        "item": {
          "id": "05c0a14e-ab27-49a9-bd5e-6a0de4e3cf71",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cf3070f4-ffae-4715-9663-861834f7b6c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c0a14e-ab27-49a9-bd5e-6a0de4e3cf71",
        "cursor": {
          "ref": "290c2c4e-bb60-4ade-ad73-0db9485fee35",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d8940053-84a1-4bb7-a874-962cbf733543"
        },
        "item": {
          "id": "05c0a14e-ab27-49a9-bd5e-6a0de4e3cf71",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cf3070f4-ffae-4715-9663-861834f7b6c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172ac555-cb3a-4027-bb42-be7510ecc3ce",
        "cursor": {
          "ref": "dfbf7597-7c98-476b-b0e9-d027838a3088",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "11e5e115-5a14-446b-a66a-0014c9559f3d"
        },
        "item": {
          "id": "172ac555-cb3a-4027-bb42-be7510ecc3ce",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fe7337cb-484d-4149-8da0-2114d0329877",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172ac555-cb3a-4027-bb42-be7510ecc3ce",
        "cursor": {
          "ref": "dfbf7597-7c98-476b-b0e9-d027838a3088",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "11e5e115-5a14-446b-a66a-0014c9559f3d"
        },
        "item": {
          "id": "172ac555-cb3a-4027-bb42-be7510ecc3ce",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fe7337cb-484d-4149-8da0-2114d0329877",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8943ccc-1381-4cd7-a3fa-b4b89e87d1a9",
        "cursor": {
          "ref": "00cf6679-5936-4009-a0d9-82115d913590",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2cb91d7c-6d56-43a1-90be-49fb666ded22"
        },
        "item": {
          "id": "c8943ccc-1381-4cd7-a3fa-b4b89e87d1a9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eab9d586-2d09-4ae4-9784-ba42bdfa83d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8943ccc-1381-4cd7-a3fa-b4b89e87d1a9",
        "cursor": {
          "ref": "00cf6679-5936-4009-a0d9-82115d913590",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2cb91d7c-6d56-43a1-90be-49fb666ded22"
        },
        "item": {
          "id": "c8943ccc-1381-4cd7-a3fa-b4b89e87d1a9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eab9d586-2d09-4ae4-9784-ba42bdfa83d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4710bba-3e9d-4a75-b6ef-87d3821c0847",
        "cursor": {
          "ref": "c4d84334-99cc-4e4e-a7e0-a56c89696c42",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "151a337c-cd4f-4eb3-9f92-2596157e41d0"
        },
        "item": {
          "id": "f4710bba-3e9d-4a75-b6ef-87d3821c0847",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "543d1fd8-96b2-4825-a44f-2139f46f3b6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4710bba-3e9d-4a75-b6ef-87d3821c0847",
        "cursor": {
          "ref": "c4d84334-99cc-4e4e-a7e0-a56c89696c42",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "151a337c-cd4f-4eb3-9f92-2596157e41d0"
        },
        "item": {
          "id": "f4710bba-3e9d-4a75-b6ef-87d3821c0847",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "543d1fd8-96b2-4825-a44f-2139f46f3b6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b1db8b-dea1-4a84-8504-ecedbc932940",
        "cursor": {
          "ref": "f4458bc0-f216-48d6-81c1-80d36cf94d09",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5a47123c-4b9b-4a58-a7d0-ab72adbabcf5"
        },
        "item": {
          "id": "13b1db8b-dea1-4a84-8504-ecedbc932940",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a5c7d71a-1fb4-4a63-93c3-973387242e6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b1db8b-dea1-4a84-8504-ecedbc932940",
        "cursor": {
          "ref": "f4458bc0-f216-48d6-81c1-80d36cf94d09",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5a47123c-4b9b-4a58-a7d0-ab72adbabcf5"
        },
        "item": {
          "id": "13b1db8b-dea1-4a84-8504-ecedbc932940",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a5c7d71a-1fb4-4a63-93c3-973387242e6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f365287c-fca7-4659-83c3-90d6886c0712",
        "cursor": {
          "ref": "205cffe5-5ec1-4f29-99bd-a4fbcbe0f793",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "28e978a2-db2f-4374-a76b-e0bf986ba4a9"
        },
        "item": {
          "id": "f365287c-fca7-4659-83c3-90d6886c0712",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fea8551b-5a87-455b-bf21-983bc2ab1239",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f365287c-fca7-4659-83c3-90d6886c0712",
        "cursor": {
          "ref": "205cffe5-5ec1-4f29-99bd-a4fbcbe0f793",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "28e978a2-db2f-4374-a76b-e0bf986ba4a9"
        },
        "item": {
          "id": "f365287c-fca7-4659-83c3-90d6886c0712",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fea8551b-5a87-455b-bf21-983bc2ab1239",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559d4a5c-e0f2-4df4-9f41-a4b29eef5d07",
        "cursor": {
          "ref": "d61a38cb-db93-4450-9ea2-459350cf839c",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0f2f684d-d527-4abc-96ae-848c39c17ad2"
        },
        "item": {
          "id": "559d4a5c-e0f2-4df4-9f41-a4b29eef5d07",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "16a461b5-93b8-460d-96dc-51fcf77a670c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559d4a5c-e0f2-4df4-9f41-a4b29eef5d07",
        "cursor": {
          "ref": "d61a38cb-db93-4450-9ea2-459350cf839c",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0f2f684d-d527-4abc-96ae-848c39c17ad2"
        },
        "item": {
          "id": "559d4a5c-e0f2-4df4-9f41-a4b29eef5d07",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "16a461b5-93b8-460d-96dc-51fcf77a670c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02dd15a3-8f0a-4c71-99ac-926576c15e0d",
        "cursor": {
          "ref": "ec9adb71-bffa-4361-a0ae-6e07219b1de7",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e6627c64-38f6-4638-ab59-5f52c250febe"
        },
        "item": {
          "id": "02dd15a3-8f0a-4c71-99ac-926576c15e0d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5559f4e9-ec04-4ccb-aa18-efa522e3beca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02dd15a3-8f0a-4c71-99ac-926576c15e0d",
        "cursor": {
          "ref": "ec9adb71-bffa-4361-a0ae-6e07219b1de7",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e6627c64-38f6-4638-ab59-5f52c250febe"
        },
        "item": {
          "id": "02dd15a3-8f0a-4c71-99ac-926576c15e0d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5559f4e9-ec04-4ccb-aa18-efa522e3beca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95f9483-0979-40ca-8447-6da96c68e4a3",
        "cursor": {
          "ref": "5569ba83-f623-4987-ac2d-7794730a980c",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7228b8ec-4b3f-4bcb-9f59-08a4dff71344"
        },
        "item": {
          "id": "b95f9483-0979-40ca-8447-6da96c68e4a3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "77ce6883-2d87-4313-8206-a8392c885a52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95f9483-0979-40ca-8447-6da96c68e4a3",
        "cursor": {
          "ref": "5569ba83-f623-4987-ac2d-7794730a980c",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7228b8ec-4b3f-4bcb-9f59-08a4dff71344"
        },
        "item": {
          "id": "b95f9483-0979-40ca-8447-6da96c68e4a3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "77ce6883-2d87-4313-8206-a8392c885a52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee7aaee-f70e-4cdf-85e3-6cbd1ae58bb5",
        "cursor": {
          "ref": "d6d35019-5b11-43ce-ab85-cacc46aeead4",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "fc06fe53-c005-481f-8d78-8bf1b81de820"
        },
        "item": {
          "id": "eee7aaee-f70e-4cdf-85e3-6cbd1ae58bb5",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f3175e56-3e8a-4b46-b39d-09fe71575f8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee7aaee-f70e-4cdf-85e3-6cbd1ae58bb5",
        "cursor": {
          "ref": "d6d35019-5b11-43ce-ab85-cacc46aeead4",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "fc06fe53-c005-481f-8d78-8bf1b81de820"
        },
        "item": {
          "id": "eee7aaee-f70e-4cdf-85e3-6cbd1ae58bb5",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f3175e56-3e8a-4b46-b39d-09fe71575f8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9739f9-c65a-4410-8fe9-51a760ad9556",
        "cursor": {
          "ref": "8fc98571-b4fc-467d-b381-1f3875077577",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a010432e-2800-492e-8647-d0bf62d8b428"
        },
        "item": {
          "id": "6d9739f9-c65a-4410-8fe9-51a760ad9556",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "bd30a2eb-e1b7-468d-b76b-22e71cc158f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9739f9-c65a-4410-8fe9-51a760ad9556",
        "cursor": {
          "ref": "8fc98571-b4fc-467d-b381-1f3875077577",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a010432e-2800-492e-8647-d0bf62d8b428"
        },
        "item": {
          "id": "6d9739f9-c65a-4410-8fe9-51a760ad9556",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "bd30a2eb-e1b7-468d-b76b-22e71cc158f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e3cb57-f7fb-4a59-89a9-cb5f047f55f8",
        "cursor": {
          "ref": "22c38638-131c-4dbe-8375-bf796c055470",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8a0fb537-c8ea-465c-93df-9f737af1f4e3"
        },
        "item": {
          "id": "73e3cb57-f7fb-4a59-89a9-cb5f047f55f8",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d7bcbc28-222b-4ac0-b9d2-864fe7794405",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e3cb57-f7fb-4a59-89a9-cb5f047f55f8",
        "cursor": {
          "ref": "22c38638-131c-4dbe-8375-bf796c055470",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8a0fb537-c8ea-465c-93df-9f737af1f4e3"
        },
        "item": {
          "id": "73e3cb57-f7fb-4a59-89a9-cb5f047f55f8",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d7bcbc28-222b-4ac0-b9d2-864fe7794405",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5649e9b-aeaf-45dd-a09e-33dd39adf4d8",
        "cursor": {
          "ref": "b703ddc7-e7aa-4a3a-9d5e-7b3ec0580822",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "05bc4d47-1769-4112-91fc-c8a88763cf57"
        },
        "item": {
          "id": "d5649e9b-aeaf-45dd-a09e-33dd39adf4d8",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8046be33-0437-41a8-bc1b-af593cf026a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5649e9b-aeaf-45dd-a09e-33dd39adf4d8",
        "cursor": {
          "ref": "b703ddc7-e7aa-4a3a-9d5e-7b3ec0580822",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "05bc4d47-1769-4112-91fc-c8a88763cf57"
        },
        "item": {
          "id": "d5649e9b-aeaf-45dd-a09e-33dd39adf4d8",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8046be33-0437-41a8-bc1b-af593cf026a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e8cb50-acfc-4f5b-b07f-68844b53f7d4",
        "cursor": {
          "ref": "e3e5bd8b-b61b-49e0-b6a5-3be6af57b1c8",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1ad636d3-3d0e-4d5c-8674-2d2bbd73f319"
        },
        "item": {
          "id": "f8e8cb50-acfc-4f5b-b07f-68844b53f7d4",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "919ecf5d-5d97-48ac-8a1f-e114043f3d9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e8cb50-acfc-4f5b-b07f-68844b53f7d4",
        "cursor": {
          "ref": "e3e5bd8b-b61b-49e0-b6a5-3be6af57b1c8",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1ad636d3-3d0e-4d5c-8674-2d2bbd73f319"
        },
        "item": {
          "id": "f8e8cb50-acfc-4f5b-b07f-68844b53f7d4",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "919ecf5d-5d97-48ac-8a1f-e114043f3d9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e6354b-6f69-4e19-a330-52d13e0a28fa",
        "cursor": {
          "ref": "da3d2250-df4c-4379-9d42-0a86ec8923e8",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "966737b6-95ec-4bb1-9eec-04a3ac5176e5"
        },
        "item": {
          "id": "35e6354b-6f69-4e19-a330-52d13e0a28fa",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "31ff662d-be10-4061-80c2-7cc789e486c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e6354b-6f69-4e19-a330-52d13e0a28fa",
        "cursor": {
          "ref": "da3d2250-df4c-4379-9d42-0a86ec8923e8",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "966737b6-95ec-4bb1-9eec-04a3ac5176e5"
        },
        "item": {
          "id": "35e6354b-6f69-4e19-a330-52d13e0a28fa",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "31ff662d-be10-4061-80c2-7cc789e486c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32555c1d-4a79-4751-a282-ca7d0de7e0ee",
        "cursor": {
          "ref": "fa1c7b3e-42fd-4a8e-9e9d-e8cef7c723eb",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "322fe144-00af-4f5c-b9ff-12f4a9aa72ae"
        },
        "item": {
          "id": "32555c1d-4a79-4751-a282-ca7d0de7e0ee",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "789a5625-1760-4a0c-a97f-279b58f9ce5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32555c1d-4a79-4751-a282-ca7d0de7e0ee",
        "cursor": {
          "ref": "fa1c7b3e-42fd-4a8e-9e9d-e8cef7c723eb",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "322fe144-00af-4f5c-b9ff-12f4a9aa72ae"
        },
        "item": {
          "id": "32555c1d-4a79-4751-a282-ca7d0de7e0ee",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "789a5625-1760-4a0c-a97f-279b58f9ce5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f70c36-daa8-48e0-b1fb-8fc4e3e64860",
        "cursor": {
          "ref": "6b9b728b-b7b2-463a-b100-7ac0116b029e",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "92a5721d-4e8f-40e7-abbc-ca7a70f327f1"
        },
        "item": {
          "id": "46f70c36-daa8-48e0-b1fb-8fc4e3e64860",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b638982c-e3a4-4512-81d5-8ca81ae52166",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f70c36-daa8-48e0-b1fb-8fc4e3e64860",
        "cursor": {
          "ref": "6b9b728b-b7b2-463a-b100-7ac0116b029e",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "92a5721d-4e8f-40e7-abbc-ca7a70f327f1"
        },
        "item": {
          "id": "46f70c36-daa8-48e0-b1fb-8fc4e3e64860",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b638982c-e3a4-4512-81d5-8ca81ae52166",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb4ca68-f83b-4e44-a235-d82b6584ce41",
        "cursor": {
          "ref": "48bec60a-9576-414b-ba74-8dbad6aa5274",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b9cff69a-5129-475c-88d4-ab41b4311838"
        },
        "item": {
          "id": "4bb4ca68-f83b-4e44-a235-d82b6584ce41",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bd099c94-55ac-40b7-88cd-079d2dc33b80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb4ca68-f83b-4e44-a235-d82b6584ce41",
        "cursor": {
          "ref": "48bec60a-9576-414b-ba74-8dbad6aa5274",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b9cff69a-5129-475c-88d4-ab41b4311838"
        },
        "item": {
          "id": "4bb4ca68-f83b-4e44-a235-d82b6584ce41",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bd099c94-55ac-40b7-88cd-079d2dc33b80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "accd0e26-71eb-43a1-8987-91f15655fc58",
        "cursor": {
          "ref": "cc30d15c-9979-498a-9a1e-11a50f4e73d7",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "98531e26-b4bc-4e2e-a30b-7af93fb89c4e"
        },
        "item": {
          "id": "accd0e26-71eb-43a1-8987-91f15655fc58",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8d57f5f2-1a87-4417-9306-7b096df06e05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "accd0e26-71eb-43a1-8987-91f15655fc58",
        "cursor": {
          "ref": "cc30d15c-9979-498a-9a1e-11a50f4e73d7",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "98531e26-b4bc-4e2e-a30b-7af93fb89c4e"
        },
        "item": {
          "id": "accd0e26-71eb-43a1-8987-91f15655fc58",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8d57f5f2-1a87-4417-9306-7b096df06e05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b656229d-52ac-4ecc-aab1-a1a63e240b29",
        "cursor": {
          "ref": "5c3fb4f8-0699-46a0-9177-dc5a4eb4935e",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "839f22b7-5977-4619-bdb3-f1192195a445"
        },
        "item": {
          "id": "b656229d-52ac-4ecc-aab1-a1a63e240b29",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "69386b5b-a9f5-40bf-816c-9c33229c9ba3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b656229d-52ac-4ecc-aab1-a1a63e240b29",
        "cursor": {
          "ref": "5c3fb4f8-0699-46a0-9177-dc5a4eb4935e",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "839f22b7-5977-4619-bdb3-f1192195a445"
        },
        "item": {
          "id": "b656229d-52ac-4ecc-aab1-a1a63e240b29",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "69386b5b-a9f5-40bf-816c-9c33229c9ba3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664ee0ea-2cb2-40e5-8eee-bf5248467a90",
        "cursor": {
          "ref": "8ebcd45a-d555-4b69-b5e3-3e08ba70bf45",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "522c42f0-7d9c-4524-be40-51b60c20a542"
        },
        "item": {
          "id": "664ee0ea-2cb2-40e5-8eee-bf5248467a90",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "462bdb08-f88f-4f5f-844a-a65ac3d29a2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664ee0ea-2cb2-40e5-8eee-bf5248467a90",
        "cursor": {
          "ref": "8ebcd45a-d555-4b69-b5e3-3e08ba70bf45",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "522c42f0-7d9c-4524-be40-51b60c20a542"
        },
        "item": {
          "id": "664ee0ea-2cb2-40e5-8eee-bf5248467a90",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "462bdb08-f88f-4f5f-844a-a65ac3d29a2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d116675e-3c05-4d6e-b21c-e87421259c90",
        "cursor": {
          "ref": "1f391932-e075-47de-87f5-ee71b64b48e6",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d88173f2-9c2f-4bce-9502-0e11fd9fc580"
        },
        "item": {
          "id": "d116675e-3c05-4d6e-b21c-e87421259c90",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f830cf6e-fb7a-4772-9eca-404d0fbec81e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d116675e-3c05-4d6e-b21c-e87421259c90",
        "cursor": {
          "ref": "1f391932-e075-47de-87f5-ee71b64b48e6",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d88173f2-9c2f-4bce-9502-0e11fd9fc580"
        },
        "item": {
          "id": "d116675e-3c05-4d6e-b21c-e87421259c90",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f830cf6e-fb7a-4772-9eca-404d0fbec81e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f280abe-76a2-4aa3-94ef-c20ae29bb2bf",
        "cursor": {
          "ref": "690f8612-bef4-426c-9900-095f30890e3e",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a19d6fac-6f91-4825-af7f-7fdf42bdb280"
        },
        "item": {
          "id": "4f280abe-76a2-4aa3-94ef-c20ae29bb2bf",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3cf37100-7631-4ca0-a19b-79917b62832d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f280abe-76a2-4aa3-94ef-c20ae29bb2bf",
        "cursor": {
          "ref": "690f8612-bef4-426c-9900-095f30890e3e",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a19d6fac-6f91-4825-af7f-7fdf42bdb280"
        },
        "item": {
          "id": "4f280abe-76a2-4aa3-94ef-c20ae29bb2bf",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3cf37100-7631-4ca0-a19b-79917b62832d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fef917-30ec-4df6-bf43-1783db8e8208",
        "cursor": {
          "ref": "6770c3c9-2cc2-40eb-bbfe-9d289785603e",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "384561b2-6465-4b3c-9364-88045fcdbeaf"
        },
        "item": {
          "id": "d0fef917-30ec-4df6-bf43-1783db8e8208",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ef711cc6-0d51-4644-b5ea-8d2f96483673",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fef917-30ec-4df6-bf43-1783db8e8208",
        "cursor": {
          "ref": "6770c3c9-2cc2-40eb-bbfe-9d289785603e",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "384561b2-6465-4b3c-9364-88045fcdbeaf"
        },
        "item": {
          "id": "d0fef917-30ec-4df6-bf43-1783db8e8208",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ef711cc6-0d51-4644-b5ea-8d2f96483673",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53410a31-2862-4368-b278-993f0eedcf4e",
        "cursor": {
          "ref": "3817279a-eab8-46b4-89c4-ed60ba65ffd9",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2ae7fda6-8b7f-4510-a4ee-e1d18b3bd37e"
        },
        "item": {
          "id": "53410a31-2862-4368-b278-993f0eedcf4e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b76001a4-6169-4255-a4f1-91973ed2364d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53410a31-2862-4368-b278-993f0eedcf4e",
        "cursor": {
          "ref": "3817279a-eab8-46b4-89c4-ed60ba65ffd9",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2ae7fda6-8b7f-4510-a4ee-e1d18b3bd37e"
        },
        "item": {
          "id": "53410a31-2862-4368-b278-993f0eedcf4e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b76001a4-6169-4255-a4f1-91973ed2364d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3235527f-68ac-4fa2-b042-50d46c4d8b9e",
        "cursor": {
          "ref": "044ed0de-d42a-4e49-a987-4d9b88bae0ba",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ce6d2dfc-c986-4ea4-a505-5d8fd073cbc9"
        },
        "item": {
          "id": "3235527f-68ac-4fa2-b042-50d46c4d8b9e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "414f8fa3-347d-4d6d-965a-37449b7aca1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3235527f-68ac-4fa2-b042-50d46c4d8b9e",
        "cursor": {
          "ref": "044ed0de-d42a-4e49-a987-4d9b88bae0ba",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ce6d2dfc-c986-4ea4-a505-5d8fd073cbc9"
        },
        "item": {
          "id": "3235527f-68ac-4fa2-b042-50d46c4d8b9e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "414f8fa3-347d-4d6d-965a-37449b7aca1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150aa26b-e0cf-442d-a6e5-79e7e644f268",
        "cursor": {
          "ref": "7dcd696a-73e1-436b-81ad-32bac71faf6b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4e22d80b-aabc-43f9-83cc-73f5f4a82d49"
        },
        "item": {
          "id": "150aa26b-e0cf-442d-a6e5-79e7e644f268",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "206240b8-40ef-4b1b-9070-70863b27ec9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150aa26b-e0cf-442d-a6e5-79e7e644f268",
        "cursor": {
          "ref": "7dcd696a-73e1-436b-81ad-32bac71faf6b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4e22d80b-aabc-43f9-83cc-73f5f4a82d49"
        },
        "item": {
          "id": "150aa26b-e0cf-442d-a6e5-79e7e644f268",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "206240b8-40ef-4b1b-9070-70863b27ec9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5410f69f-d809-4d9a-9a77-e02829b974d6",
        "cursor": {
          "ref": "55e86573-b05c-4fab-b6d2-74ee79ea0904",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "fd975a13-4a34-4f12-9176-547e52a9e132"
        },
        "item": {
          "id": "5410f69f-d809-4d9a-9a77-e02829b974d6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "870e5732-2198-438c-8799-ea306eb248d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5410f69f-d809-4d9a-9a77-e02829b974d6",
        "cursor": {
          "ref": "55e86573-b05c-4fab-b6d2-74ee79ea0904",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "fd975a13-4a34-4f12-9176-547e52a9e132"
        },
        "item": {
          "id": "5410f69f-d809-4d9a-9a77-e02829b974d6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "870e5732-2198-438c-8799-ea306eb248d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c76a612-6e08-44c4-9a98-b3805fec10e4",
        "cursor": {
          "ref": "b7e0543f-dea1-4486-b24d-c016c7c0904e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f8170166-b15b-4a4c-bd6e-77adf01d3840"
        },
        "item": {
          "id": "6c76a612-6e08-44c4-9a98-b3805fec10e4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e125c35a-3330-4d1e-814d-715380da0e51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c76a612-6e08-44c4-9a98-b3805fec10e4",
        "cursor": {
          "ref": "b7e0543f-dea1-4486-b24d-c016c7c0904e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f8170166-b15b-4a4c-bd6e-77adf01d3840"
        },
        "item": {
          "id": "6c76a612-6e08-44c4-9a98-b3805fec10e4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e125c35a-3330-4d1e-814d-715380da0e51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb4ab09-3ed5-4064-8e77-8e0fb59d4312",
        "cursor": {
          "ref": "51e9de36-39ca-4372-bfb6-fa5b4113643d",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2d6a73d1-1297-4c2a-bd3a-e1a58d8852e6"
        },
        "item": {
          "id": "efb4ab09-3ed5-4064-8e77-8e0fb59d4312",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "339e4527-a39a-43ba-8b7e-654167a22592",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb4ab09-3ed5-4064-8e77-8e0fb59d4312",
        "cursor": {
          "ref": "51e9de36-39ca-4372-bfb6-fa5b4113643d",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2d6a73d1-1297-4c2a-bd3a-e1a58d8852e6"
        },
        "item": {
          "id": "efb4ab09-3ed5-4064-8e77-8e0fb59d4312",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "339e4527-a39a-43ba-8b7e-654167a22592",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11e63b8-9835-454e-92c2-8fa8ed3e2c62",
        "cursor": {
          "ref": "5504e3e8-9ff9-47d4-95b6-e67d22376403",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d621f253-bea7-402a-862f-281ad8d72250"
        },
        "item": {
          "id": "f11e63b8-9835-454e-92c2-8fa8ed3e2c62",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7d677a9a-ba7a-4b86-a84a-078ed2b3b254",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11e63b8-9835-454e-92c2-8fa8ed3e2c62",
        "cursor": {
          "ref": "5504e3e8-9ff9-47d4-95b6-e67d22376403",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d621f253-bea7-402a-862f-281ad8d72250"
        },
        "item": {
          "id": "f11e63b8-9835-454e-92c2-8fa8ed3e2c62",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7d677a9a-ba7a-4b86-a84a-078ed2b3b254",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae04939-a4cc-4025-ab6d-83a706010ec9",
        "cursor": {
          "ref": "e76ace5a-5e7e-4de7-9a12-55f3446317fb",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4dea16ae-3897-4877-8e30-293d4f3766d7"
        },
        "item": {
          "id": "9ae04939-a4cc-4025-ab6d-83a706010ec9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8ec7d761-a528-4d88-bc93-e4ddaaf0d320",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae04939-a4cc-4025-ab6d-83a706010ec9",
        "cursor": {
          "ref": "e76ace5a-5e7e-4de7-9a12-55f3446317fb",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4dea16ae-3897-4877-8e30-293d4f3766d7"
        },
        "item": {
          "id": "9ae04939-a4cc-4025-ab6d-83a706010ec9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8ec7d761-a528-4d88-bc93-e4ddaaf0d320",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266f6bec-aec3-4e9f-b425-502c12fc2184",
        "cursor": {
          "ref": "12f1d3b0-7c4e-4174-be2b-bb1848c175cb",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9a3df5a5-bace-4997-9fdb-abaf36d179d7"
        },
        "item": {
          "id": "266f6bec-aec3-4e9f-b425-502c12fc2184",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8457a39d-5a62-4621-b186-1d881029ddb2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266f6bec-aec3-4e9f-b425-502c12fc2184",
        "cursor": {
          "ref": "12f1d3b0-7c4e-4174-be2b-bb1848c175cb",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9a3df5a5-bace-4997-9fdb-abaf36d179d7"
        },
        "item": {
          "id": "266f6bec-aec3-4e9f-b425-502c12fc2184",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8457a39d-5a62-4621-b186-1d881029ddb2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10f8a5b-9b64-4ced-b776-d26b98466ca3",
        "cursor": {
          "ref": "d56be9f2-87ad-4875-9a78-f4fe0a2576fc",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "eee40434-3180-4498-8b2d-7de6c3fa696a"
        },
        "item": {
          "id": "f10f8a5b-9b64-4ced-b776-d26b98466ca3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "004f4f29-0608-465f-be72-4e6e61963c4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10f8a5b-9b64-4ced-b776-d26b98466ca3",
        "cursor": {
          "ref": "d56be9f2-87ad-4875-9a78-f4fe0a2576fc",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "eee40434-3180-4498-8b2d-7de6c3fa696a"
        },
        "item": {
          "id": "f10f8a5b-9b64-4ced-b776-d26b98466ca3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "004f4f29-0608-465f-be72-4e6e61963c4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ca61ac-d8a8-4a80-b977-f619ea3ae4ef",
        "cursor": {
          "ref": "465d6e15-6da5-44f9-bdea-02e7b3276242",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ed118f60-0839-428f-95d4-1e81c3736782"
        },
        "item": {
          "id": "03ca61ac-d8a8-4a80-b977-f619ea3ae4ef",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c0cdc505-5979-4b97-a5ff-e4f856ce26e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ca61ac-d8a8-4a80-b977-f619ea3ae4ef",
        "cursor": {
          "ref": "465d6e15-6da5-44f9-bdea-02e7b3276242",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ed118f60-0839-428f-95d4-1e81c3736782"
        },
        "item": {
          "id": "03ca61ac-d8a8-4a80-b977-f619ea3ae4ef",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c0cdc505-5979-4b97-a5ff-e4f856ce26e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3dcad7-c621-420e-8ed2-a4a06378ecdb",
        "cursor": {
          "ref": "abbe9003-15c0-4eb6-9a2b-f9ac2746ed8a",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "81ef54f4-6c7e-48b1-a8ef-1d286d3461ee"
        },
        "item": {
          "id": "ca3dcad7-c621-420e-8ed2-a4a06378ecdb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "014dab6a-35d7-4ff8-bf88-f8af5f9b69e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3dcad7-c621-420e-8ed2-a4a06378ecdb",
        "cursor": {
          "ref": "abbe9003-15c0-4eb6-9a2b-f9ac2746ed8a",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "81ef54f4-6c7e-48b1-a8ef-1d286d3461ee"
        },
        "item": {
          "id": "ca3dcad7-c621-420e-8ed2-a4a06378ecdb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "014dab6a-35d7-4ff8-bf88-f8af5f9b69e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5127795-8fcf-4e67-b315-8b1976567d26",
        "cursor": {
          "ref": "fd614535-e3bd-4f89-9c94-9bb703de2809",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3ad2a461-80a7-4b0d-84fb-243e3bdff9cc"
        },
        "item": {
          "id": "c5127795-8fcf-4e67-b315-8b1976567d26",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "54f1dc7e-92e7-4beb-8ddf-0402cbb414f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5127795-8fcf-4e67-b315-8b1976567d26",
        "cursor": {
          "ref": "fd614535-e3bd-4f89-9c94-9bb703de2809",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3ad2a461-80a7-4b0d-84fb-243e3bdff9cc"
        },
        "item": {
          "id": "c5127795-8fcf-4e67-b315-8b1976567d26",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "54f1dc7e-92e7-4beb-8ddf-0402cbb414f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3deaa90d-8f8e-4d34-9940-acd0ef7d8d82",
        "cursor": {
          "ref": "9c0a2f83-105a-427a-9a6e-999435f955a3",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c9c5d7a0-c9bb-473a-8f2c-60227bea4901"
        },
        "item": {
          "id": "3deaa90d-8f8e-4d34-9940-acd0ef7d8d82",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ed994c3f-1c83-430f-9951-54cb266ee3bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3deaa90d-8f8e-4d34-9940-acd0ef7d8d82",
        "cursor": {
          "ref": "9c0a2f83-105a-427a-9a6e-999435f955a3",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c9c5d7a0-c9bb-473a-8f2c-60227bea4901"
        },
        "item": {
          "id": "3deaa90d-8f8e-4d34-9940-acd0ef7d8d82",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ed994c3f-1c83-430f-9951-54cb266ee3bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0cc1a4-2058-4fd3-be13-1724afafcae4",
        "cursor": {
          "ref": "913aa4ff-cf05-4a88-8295-9b560deee1b1",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d0141c28-e0ab-4eff-abdb-76abe566fc28"
        },
        "item": {
          "id": "3b0cc1a4-2058-4fd3-be13-1724afafcae4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "75b3ba48-90f0-422c-9446-44b9b019f768",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0cc1a4-2058-4fd3-be13-1724afafcae4",
        "cursor": {
          "ref": "913aa4ff-cf05-4a88-8295-9b560deee1b1",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d0141c28-e0ab-4eff-abdb-76abe566fc28"
        },
        "item": {
          "id": "3b0cc1a4-2058-4fd3-be13-1724afafcae4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "75b3ba48-90f0-422c-9446-44b9b019f768",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6e2963-c736-4461-959c-d92ac64b916a",
        "cursor": {
          "ref": "08a93d6b-e892-41f8-bf24-6fd5e28c33cb",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e0c0e605-69c9-428c-8b77-1ce2e5bbf9e2"
        },
        "item": {
          "id": "ba6e2963-c736-4461-959c-d92ac64b916a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e94ef6e7-9c27-4c60-831e-f84ae69385bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6e2963-c736-4461-959c-d92ac64b916a",
        "cursor": {
          "ref": "08a93d6b-e892-41f8-bf24-6fd5e28c33cb",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e0c0e605-69c9-428c-8b77-1ce2e5bbf9e2"
        },
        "item": {
          "id": "ba6e2963-c736-4461-959c-d92ac64b916a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e94ef6e7-9c27-4c60-831e-f84ae69385bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce49ba1-a7e9-4fff-85f5-ab972eeafe73",
        "cursor": {
          "ref": "2e93c6d0-8236-4db3-a774-d0aa838b1252",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "254a8bfb-81b7-4779-b598-e08eed71b661"
        },
        "item": {
          "id": "0ce49ba1-a7e9-4fff-85f5-ab972eeafe73",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f1873940-a023-4613-936e-6675e803e9dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce49ba1-a7e9-4fff-85f5-ab972eeafe73",
        "cursor": {
          "ref": "2e93c6d0-8236-4db3-a774-d0aa838b1252",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "254a8bfb-81b7-4779-b598-e08eed71b661"
        },
        "item": {
          "id": "0ce49ba1-a7e9-4fff-85f5-ab972eeafe73",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f1873940-a023-4613-936e-6675e803e9dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ff098e-9bc2-43bb-b90c-b5e7b1980948",
        "cursor": {
          "ref": "3871804e-7d43-4bbc-b26b-e730aad57b24",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "53d0d663-0867-4805-9f1e-b3bc93145f19"
        },
        "item": {
          "id": "23ff098e-9bc2-43bb-b90c-b5e7b1980948",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "dcdeb10e-6c36-4aa2-ad9f-094036b8632b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ff098e-9bc2-43bb-b90c-b5e7b1980948",
        "cursor": {
          "ref": "3871804e-7d43-4bbc-b26b-e730aad57b24",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "53d0d663-0867-4805-9f1e-b3bc93145f19"
        },
        "item": {
          "id": "23ff098e-9bc2-43bb-b90c-b5e7b1980948",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "dcdeb10e-6c36-4aa2-ad9f-094036b8632b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a52a757-52ae-42ce-ab03-8d15574beffc",
        "cursor": {
          "ref": "3414050b-d4b7-4746-82c0-d5d0720c7b61",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "847b1b13-90dc-4323-83be-b19bf370d736"
        },
        "item": {
          "id": "6a52a757-52ae-42ce-ab03-8d15574beffc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d1b70917-84c3-46ef-8015-5e3a0eb7ef0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a52a757-52ae-42ce-ab03-8d15574beffc",
        "cursor": {
          "ref": "3414050b-d4b7-4746-82c0-d5d0720c7b61",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "847b1b13-90dc-4323-83be-b19bf370d736"
        },
        "item": {
          "id": "6a52a757-52ae-42ce-ab03-8d15574beffc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d1b70917-84c3-46ef-8015-5e3a0eb7ef0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c772c9b-5757-4ed9-9d4d-3d984c75e6be",
        "cursor": {
          "ref": "212b4e86-8992-4ec8-9484-69b3c23264d9",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6731391f-76c9-47fb-b7f9-8c39cbe72718"
        },
        "item": {
          "id": "3c772c9b-5757-4ed9-9d4d-3d984c75e6be",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "517f2f40-1629-4d66-b450-248eb3589d57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c772c9b-5757-4ed9-9d4d-3d984c75e6be",
        "cursor": {
          "ref": "212b4e86-8992-4ec8-9484-69b3c23264d9",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6731391f-76c9-47fb-b7f9-8c39cbe72718"
        },
        "item": {
          "id": "3c772c9b-5757-4ed9-9d4d-3d984c75e6be",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "517f2f40-1629-4d66-b450-248eb3589d57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18ee455-4436-4893-8de2-fd0a48397e07",
        "cursor": {
          "ref": "48d955d9-4c2f-4fb5-ad88-c272385cd90e",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8675dc5a-6568-4a8b-879c-4b701daa77e0"
        },
        "item": {
          "id": "d18ee455-4436-4893-8de2-fd0a48397e07",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7e068366-a55d-4c01-9c47-1409d15eb003",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18ee455-4436-4893-8de2-fd0a48397e07",
        "cursor": {
          "ref": "48d955d9-4c2f-4fb5-ad88-c272385cd90e",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8675dc5a-6568-4a8b-879c-4b701daa77e0"
        },
        "item": {
          "id": "d18ee455-4436-4893-8de2-fd0a48397e07",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7e068366-a55d-4c01-9c47-1409d15eb003",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae96e05-2b1d-4aeb-836a-97a82355de4f",
        "cursor": {
          "ref": "933d16ba-8554-4a6a-acca-ae57e87f17ed",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6a06db5a-be47-4e9c-8fd2-75cfe5ec78b5"
        },
        "item": {
          "id": "0ae96e05-2b1d-4aeb-836a-97a82355de4f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7156914d-0b21-47b1-bc11-fae654d7ffdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae96e05-2b1d-4aeb-836a-97a82355de4f",
        "cursor": {
          "ref": "933d16ba-8554-4a6a-acca-ae57e87f17ed",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6a06db5a-be47-4e9c-8fd2-75cfe5ec78b5"
        },
        "item": {
          "id": "0ae96e05-2b1d-4aeb-836a-97a82355de4f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7156914d-0b21-47b1-bc11-fae654d7ffdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708e2c78-f845-4fb8-9cf3-d9d61906ca5a",
        "cursor": {
          "ref": "efc8b8d5-6eb8-425a-9570-05976a21b938",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "75913a33-2b69-42c1-ae38-3274969f4b15"
        },
        "item": {
          "id": "708e2c78-f845-4fb8-9cf3-d9d61906ca5a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b937a8f6-3725-46f1-93c8-67fb1b26b0fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708e2c78-f845-4fb8-9cf3-d9d61906ca5a",
        "cursor": {
          "ref": "efc8b8d5-6eb8-425a-9570-05976a21b938",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "75913a33-2b69-42c1-ae38-3274969f4b15"
        },
        "item": {
          "id": "708e2c78-f845-4fb8-9cf3-d9d61906ca5a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b937a8f6-3725-46f1-93c8-67fb1b26b0fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d42ae9-9837-4fb2-a817-299c349da1ca",
        "cursor": {
          "ref": "39d4d1fe-2039-4778-9e84-2652770510a5",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bd562e49-d103-4eed-86a5-74726a0f30bc"
        },
        "item": {
          "id": "60d42ae9-9837-4fb2-a817-299c349da1ca",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ebf5c8d0-a1d4-4bfe-acef-285b5ee84e05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d42ae9-9837-4fb2-a817-299c349da1ca",
        "cursor": {
          "ref": "39d4d1fe-2039-4778-9e84-2652770510a5",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bd562e49-d103-4eed-86a5-74726a0f30bc"
        },
        "item": {
          "id": "60d42ae9-9837-4fb2-a817-299c349da1ca",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ebf5c8d0-a1d4-4bfe-acef-285b5ee84e05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f24ca2b-aa1e-4ad3-bd4f-6e85593ba449",
        "cursor": {
          "ref": "3c205fcb-3140-4823-b3ad-5424d88baf58",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1ca8bcb0-0bc0-4ddf-b665-6def6652adfb"
        },
        "item": {
          "id": "5f24ca2b-aa1e-4ad3-bd4f-6e85593ba449",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "93803cb8-ed71-4697-8716-cd4619b1f0dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f24ca2b-aa1e-4ad3-bd4f-6e85593ba449",
        "cursor": {
          "ref": "3c205fcb-3140-4823-b3ad-5424d88baf58",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1ca8bcb0-0bc0-4ddf-b665-6def6652adfb"
        },
        "item": {
          "id": "5f24ca2b-aa1e-4ad3-bd4f-6e85593ba449",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "93803cb8-ed71-4697-8716-cd4619b1f0dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5cd03a9-93c3-4b3e-9e46-69d4a31a7d77",
        "cursor": {
          "ref": "82720c31-e5b8-4ae8-a3b0-555fb5b58b0d",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cdd2edde-315a-4375-b125-196d65293d3c"
        },
        "item": {
          "id": "e5cd03a9-93c3-4b3e-9e46-69d4a31a7d77",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "83ba73d7-0b86-41ff-8ff3-d222240e8200",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5cd03a9-93c3-4b3e-9e46-69d4a31a7d77",
        "cursor": {
          "ref": "82720c31-e5b8-4ae8-a3b0-555fb5b58b0d",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cdd2edde-315a-4375-b125-196d65293d3c"
        },
        "item": {
          "id": "e5cd03a9-93c3-4b3e-9e46-69d4a31a7d77",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "83ba73d7-0b86-41ff-8ff3-d222240e8200",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c289466-84ee-4ee7-8baf-1fa849a1144f",
        "cursor": {
          "ref": "3564885a-5935-422f-8c24-c9fbaf86a4f5",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ce5a5d79-a110-49b2-ad77-83f979994300"
        },
        "item": {
          "id": "6c289466-84ee-4ee7-8baf-1fa849a1144f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b2c5bc8c-59bd-4531-908f-a834401435e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c289466-84ee-4ee7-8baf-1fa849a1144f",
        "cursor": {
          "ref": "3564885a-5935-422f-8c24-c9fbaf86a4f5",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ce5a5d79-a110-49b2-ad77-83f979994300"
        },
        "item": {
          "id": "6c289466-84ee-4ee7-8baf-1fa849a1144f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b2c5bc8c-59bd-4531-908f-a834401435e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a53131-9e4a-4440-9d3d-f9ae81bc6ca6",
        "cursor": {
          "ref": "eeec0510-3643-4ac2-82cc-0fe9cd87f3e2",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5a5deca8-08e2-4b21-bd01-043b160fd9de"
        },
        "item": {
          "id": "50a53131-9e4a-4440-9d3d-f9ae81bc6ca6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "76d06906-8906-4652-a5a0-492b7ad460dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a53131-9e4a-4440-9d3d-f9ae81bc6ca6",
        "cursor": {
          "ref": "eeec0510-3643-4ac2-82cc-0fe9cd87f3e2",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5a5deca8-08e2-4b21-bd01-043b160fd9de"
        },
        "item": {
          "id": "50a53131-9e4a-4440-9d3d-f9ae81bc6ca6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "76d06906-8906-4652-a5a0-492b7ad460dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e64b23-8eba-4833-93b7-3551817ab9db",
        "cursor": {
          "ref": "e5206b78-cc97-4068-aceb-ca4443678baa",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "282607e1-396d-44e0-8b59-bc1e31b47ee1"
        },
        "item": {
          "id": "a2e64b23-8eba-4833-93b7-3551817ab9db",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ded62f9c-6246-4fe5-8abf-0a07244ef1eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e64b23-8eba-4833-93b7-3551817ab9db",
        "cursor": {
          "ref": "e5206b78-cc97-4068-aceb-ca4443678baa",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "282607e1-396d-44e0-8b59-bc1e31b47ee1"
        },
        "item": {
          "id": "a2e64b23-8eba-4833-93b7-3551817ab9db",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ded62f9c-6246-4fe5-8abf-0a07244ef1eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3741b4-7953-46f7-ab91-0359c0855f48",
        "cursor": {
          "ref": "6bb15b1a-560b-40d6-a5d3-7d98caef92ed",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a03b3a54-521e-45b2-88a5-8f477eaf0f76"
        },
        "item": {
          "id": "3c3741b4-7953-46f7-ab91-0359c0855f48",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9371450e-9e45-4943-8e7f-0797ebe41ac4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3741b4-7953-46f7-ab91-0359c0855f48",
        "cursor": {
          "ref": "6bb15b1a-560b-40d6-a5d3-7d98caef92ed",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a03b3a54-521e-45b2-88a5-8f477eaf0f76"
        },
        "item": {
          "id": "3c3741b4-7953-46f7-ab91-0359c0855f48",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9371450e-9e45-4943-8e7f-0797ebe41ac4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67372326-31f5-47dd-b512-2a6fd692b97e",
        "cursor": {
          "ref": "88713a7a-2890-4bf5-86bb-a12821790c82",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bdd2da81-bb9e-4bd0-8f85-18e593d98045"
        },
        "item": {
          "id": "67372326-31f5-47dd-b512-2a6fd692b97e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bf2377fd-79fe-4d67-b649-0f5f0fbf8b19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67372326-31f5-47dd-b512-2a6fd692b97e",
        "cursor": {
          "ref": "88713a7a-2890-4bf5-86bb-a12821790c82",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bdd2da81-bb9e-4bd0-8f85-18e593d98045"
        },
        "item": {
          "id": "67372326-31f5-47dd-b512-2a6fd692b97e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bf2377fd-79fe-4d67-b649-0f5f0fbf8b19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0184c0a-1d09-4cb2-8681-f8d1bd70f403",
        "cursor": {
          "ref": "7d403f00-27e1-4a36-8101-1940f1e7764a",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2b0fb667-499a-4674-a1c1-b37304f91f2f"
        },
        "item": {
          "id": "d0184c0a-1d09-4cb2-8681-f8d1bd70f403",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6acf2b4f-981b-40a2-b3a8-d3f57b117945",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0184c0a-1d09-4cb2-8681-f8d1bd70f403",
        "cursor": {
          "ref": "7d403f00-27e1-4a36-8101-1940f1e7764a",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2b0fb667-499a-4674-a1c1-b37304f91f2f"
        },
        "item": {
          "id": "d0184c0a-1d09-4cb2-8681-f8d1bd70f403",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6acf2b4f-981b-40a2-b3a8-d3f57b117945",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddd1cb6-b666-4074-9792-e39540b19ffe",
        "cursor": {
          "ref": "7a7fee2f-a717-4c9d-8d22-384e88fb3891",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "50029ec0-c8fd-4490-941a-c943540ad48f"
        },
        "item": {
          "id": "9ddd1cb6-b666-4074-9792-e39540b19ffe",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4821f1fa-1dbc-4fe9-9e57-f821dc9b8682",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddd1cb6-b666-4074-9792-e39540b19ffe",
        "cursor": {
          "ref": "7a7fee2f-a717-4c9d-8d22-384e88fb3891",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "50029ec0-c8fd-4490-941a-c943540ad48f"
        },
        "item": {
          "id": "9ddd1cb6-b666-4074-9792-e39540b19ffe",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4821f1fa-1dbc-4fe9-9e57-f821dc9b8682",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70f4956-2001-41dd-aace-ce6598733c6f",
        "cursor": {
          "ref": "bfb7feba-2b2e-4c41-805f-c117e544bd60",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "40221f1b-d67c-4055-841f-b7189900ffb4"
        },
        "item": {
          "id": "e70f4956-2001-41dd-aace-ce6598733c6f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ba0ed1a6-dcc1-461a-b078-2af9d0f7a7b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70f4956-2001-41dd-aace-ce6598733c6f",
        "cursor": {
          "ref": "bfb7feba-2b2e-4c41-805f-c117e544bd60",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "40221f1b-d67c-4055-841f-b7189900ffb4"
        },
        "item": {
          "id": "e70f4956-2001-41dd-aace-ce6598733c6f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ba0ed1a6-dcc1-461a-b078-2af9d0f7a7b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68d3eff-28eb-4b62-986a-8279b18b6114",
        "cursor": {
          "ref": "91f91462-de84-4b9a-bb7a-561de8b5cda5",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d4a27a95-c5ef-4862-9499-1409f9d075cc"
        },
        "item": {
          "id": "c68d3eff-28eb-4b62-986a-8279b18b6114",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ff945fcb-f2b8-4141-ad03-cea3a9c3c98e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68d3eff-28eb-4b62-986a-8279b18b6114",
        "cursor": {
          "ref": "91f91462-de84-4b9a-bb7a-561de8b5cda5",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d4a27a95-c5ef-4862-9499-1409f9d075cc"
        },
        "item": {
          "id": "c68d3eff-28eb-4b62-986a-8279b18b6114",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ff945fcb-f2b8-4141-ad03-cea3a9c3c98e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d6d50c-4327-43d0-93b3-fe30ec4af4fa",
        "cursor": {
          "ref": "24fc1222-ce71-4886-ae1f-b30a43e2ba88",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b45d4ff0-fe2f-48a2-88c4-8170f4f8f17f"
        },
        "item": {
          "id": "69d6d50c-4327-43d0-93b3-fe30ec4af4fa",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f28ca366-40f3-4e68-b74b-d326790a443d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d6d50c-4327-43d0-93b3-fe30ec4af4fa",
        "cursor": {
          "ref": "24fc1222-ce71-4886-ae1f-b30a43e2ba88",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b45d4ff0-fe2f-48a2-88c4-8170f4f8f17f"
        },
        "item": {
          "id": "69d6d50c-4327-43d0-93b3-fe30ec4af4fa",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f28ca366-40f3-4e68-b74b-d326790a443d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e1ec6c-7b81-4bef-b5ab-6abc20414c53",
        "cursor": {
          "ref": "b318fd0f-4133-4f62-b8ee-0b47412c3790",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "31058910-de29-405c-ba9a-1ba4eb91fdee"
        },
        "item": {
          "id": "c0e1ec6c-7b81-4bef-b5ab-6abc20414c53",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2e875405-9ef9-469c-9204-7930c64a069e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e1ec6c-7b81-4bef-b5ab-6abc20414c53",
        "cursor": {
          "ref": "b318fd0f-4133-4f62-b8ee-0b47412c3790",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "31058910-de29-405c-ba9a-1ba4eb91fdee"
        },
        "item": {
          "id": "c0e1ec6c-7b81-4bef-b5ab-6abc20414c53",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2e875405-9ef9-469c-9204-7930c64a069e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2e5990-8710-4763-a659-d0002acb2162",
        "cursor": {
          "ref": "5de916b6-d590-451d-b050-a16dbf2a28bb",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "572a9406-2018-4131-8dab-266dba3aa4c7"
        },
        "item": {
          "id": "4e2e5990-8710-4763-a659-d0002acb2162",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a38bdf28-b261-409b-9075-90c1a14bed25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2e5990-8710-4763-a659-d0002acb2162",
        "cursor": {
          "ref": "5de916b6-d590-451d-b050-a16dbf2a28bb",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "572a9406-2018-4131-8dab-266dba3aa4c7"
        },
        "item": {
          "id": "4e2e5990-8710-4763-a659-d0002acb2162",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a38bdf28-b261-409b-9075-90c1a14bed25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26532df-d3c1-4e51-aa70-cd0b984b5005",
        "cursor": {
          "ref": "3203b5e1-c4cd-4afe-a55b-552a679dd151",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4f2af5cc-ee3c-4c51-8b42-ebe13da18466"
        },
        "item": {
          "id": "f26532df-d3c1-4e51-aa70-cd0b984b5005",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1b592e4c-d8fa-4730-a834-e5461eb0d829",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26532df-d3c1-4e51-aa70-cd0b984b5005",
        "cursor": {
          "ref": "3203b5e1-c4cd-4afe-a55b-552a679dd151",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4f2af5cc-ee3c-4c51-8b42-ebe13da18466"
        },
        "item": {
          "id": "f26532df-d3c1-4e51-aa70-cd0b984b5005",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1b592e4c-d8fa-4730-a834-e5461eb0d829",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d43f47-24d3-4b22-adc1-f9cd937de5bf",
        "cursor": {
          "ref": "9ec3a395-8cff-40b2-b7d2-d33546f4b63c",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2b78d59a-9a02-4d1f-9ae7-8b7b205a5a59"
        },
        "item": {
          "id": "78d43f47-24d3-4b22-adc1-f9cd937de5bf",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "01de8a4c-90f0-4b80-b96e-14fd4a1a8534",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d43f47-24d3-4b22-adc1-f9cd937de5bf",
        "cursor": {
          "ref": "9ec3a395-8cff-40b2-b7d2-d33546f4b63c",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2b78d59a-9a02-4d1f-9ae7-8b7b205a5a59"
        },
        "item": {
          "id": "78d43f47-24d3-4b22-adc1-f9cd937de5bf",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "01de8a4c-90f0-4b80-b96e-14fd4a1a8534",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9d7b15-d918-4146-bb0e-77dff8033818",
        "cursor": {
          "ref": "33685f73-07c5-43eb-b471-0cbf62ac6f62",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4b8157c9-f700-4c89-a32e-7057ea746f68"
        },
        "item": {
          "id": "fd9d7b15-d918-4146-bb0e-77dff8033818",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c447ef08-859a-41ab-8868-ff9d0cab9405",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9d7b15-d918-4146-bb0e-77dff8033818",
        "cursor": {
          "ref": "33685f73-07c5-43eb-b471-0cbf62ac6f62",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4b8157c9-f700-4c89-a32e-7057ea746f68"
        },
        "item": {
          "id": "fd9d7b15-d918-4146-bb0e-77dff8033818",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c447ef08-859a-41ab-8868-ff9d0cab9405",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0bc09a-5044-4ebd-9685-68f0b662e611",
        "cursor": {
          "ref": "e79cddcc-0074-4e20-b905-c7fe15c70077",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b42cfb3b-e7c2-47d9-9efd-0b071aa35555"
        },
        "item": {
          "id": "6a0bc09a-5044-4ebd-9685-68f0b662e611",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ce072f37-4490-440e-961a-c3b2149709b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0bc09a-5044-4ebd-9685-68f0b662e611",
        "cursor": {
          "ref": "e79cddcc-0074-4e20-b905-c7fe15c70077",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b42cfb3b-e7c2-47d9-9efd-0b071aa35555"
        },
        "item": {
          "id": "6a0bc09a-5044-4ebd-9685-68f0b662e611",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ce072f37-4490-440e-961a-c3b2149709b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db29f0e-f7db-4cbc-825b-bf839118a746",
        "cursor": {
          "ref": "9707507f-9699-4652-8835-7bcb373e0a4d",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4c82e64b-1c8a-43a5-8e18-2109db1df4ae"
        },
        "item": {
          "id": "5db29f0e-f7db-4cbc-825b-bf839118a746",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b05d9f43-62dc-4932-90f9-a963ebe85738",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db29f0e-f7db-4cbc-825b-bf839118a746",
        "cursor": {
          "ref": "9707507f-9699-4652-8835-7bcb373e0a4d",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4c82e64b-1c8a-43a5-8e18-2109db1df4ae"
        },
        "item": {
          "id": "5db29f0e-f7db-4cbc-825b-bf839118a746",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b05d9f43-62dc-4932-90f9-a963ebe85738",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43986c29-836e-407a-98da-4c7cd48a2c76",
        "cursor": {
          "ref": "5642d8d9-7556-4f34-8767-f4e68e06ca5c",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "963e23fe-e0b5-4caa-a4aa-5b6cdb298c23"
        },
        "item": {
          "id": "43986c29-836e-407a-98da-4c7cd48a2c76",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0b7ac6b6-25e3-4f5a-ac31-14fc4ef5ef45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43986c29-836e-407a-98da-4c7cd48a2c76",
        "cursor": {
          "ref": "5642d8d9-7556-4f34-8767-f4e68e06ca5c",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "963e23fe-e0b5-4caa-a4aa-5b6cdb298c23"
        },
        "item": {
          "id": "43986c29-836e-407a-98da-4c7cd48a2c76",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0b7ac6b6-25e3-4f5a-ac31-14fc4ef5ef45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa80647-6406-4a10-bdde-e15095b0e54e",
        "cursor": {
          "ref": "7bf9c227-9fe7-4efc-a6b9-3252111deb3c",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c728f0db-8fc3-4d11-836f-69ea4fcf5a6a"
        },
        "item": {
          "id": "7fa80647-6406-4a10-bdde-e15095b0e54e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "92411145-25a4-4aa1-9c82-7438edae2a31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa80647-6406-4a10-bdde-e15095b0e54e",
        "cursor": {
          "ref": "7bf9c227-9fe7-4efc-a6b9-3252111deb3c",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c728f0db-8fc3-4d11-836f-69ea4fcf5a6a"
        },
        "item": {
          "id": "7fa80647-6406-4a10-bdde-e15095b0e54e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "92411145-25a4-4aa1-9c82-7438edae2a31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d609d0-8684-42e3-a4e6-cd6e7602d26a",
        "cursor": {
          "ref": "2f8b97fd-ee69-4248-8e1b-e27af36e9e0f",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "efa3b60c-fb60-420a-8778-695ad753e8fb"
        },
        "item": {
          "id": "d4d609d0-8684-42e3-a4e6-cd6e7602d26a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1f35739f-a24b-4249-ba92-7f0a01949895",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d609d0-8684-42e3-a4e6-cd6e7602d26a",
        "cursor": {
          "ref": "2f8b97fd-ee69-4248-8e1b-e27af36e9e0f",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "efa3b60c-fb60-420a-8778-695ad753e8fb"
        },
        "item": {
          "id": "d4d609d0-8684-42e3-a4e6-cd6e7602d26a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1f35739f-a24b-4249-ba92-7f0a01949895",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7028dbd5-b62b-4a4a-8d60-6f0409ae2b6f",
        "cursor": {
          "ref": "0ec7afe3-da77-4086-a1f3-9fff03cb5ffc",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5022cf06-886a-4f40-8bca-f1f3772a183c"
        },
        "item": {
          "id": "7028dbd5-b62b-4a4a-8d60-6f0409ae2b6f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "98d4bf61-a18a-4d82-9fe7-6ff5750e9586",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7028dbd5-b62b-4a4a-8d60-6f0409ae2b6f",
        "cursor": {
          "ref": "0ec7afe3-da77-4086-a1f3-9fff03cb5ffc",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5022cf06-886a-4f40-8bca-f1f3772a183c"
        },
        "item": {
          "id": "7028dbd5-b62b-4a4a-8d60-6f0409ae2b6f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "98d4bf61-a18a-4d82-9fe7-6ff5750e9586",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeabae9f-0ed2-4d4a-b6b9-def71deb717e",
        "cursor": {
          "ref": "d5c9e35d-3f7a-4934-9d39-b34210813553",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b4b2c4fd-15cd-4d2c-ba52-469aaf8b94f4"
        },
        "item": {
          "id": "eeabae9f-0ed2-4d4a-b6b9-def71deb717e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "296ab4b2-e921-4594-ade5-8481a00e45eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeabae9f-0ed2-4d4a-b6b9-def71deb717e",
        "cursor": {
          "ref": "d5c9e35d-3f7a-4934-9d39-b34210813553",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b4b2c4fd-15cd-4d2c-ba52-469aaf8b94f4"
        },
        "item": {
          "id": "eeabae9f-0ed2-4d4a-b6b9-def71deb717e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "296ab4b2-e921-4594-ade5-8481a00e45eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359045f3-4c54-4f72-9a8a-e859e4d932b2",
        "cursor": {
          "ref": "ac6ad407-77b7-4d5f-aa8a-91c2845db870",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "eec14094-3ace-4a1d-8de6-3d7783606db1"
        },
        "item": {
          "id": "359045f3-4c54-4f72-9a8a-e859e4d932b2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "21736ab4-3c75-4387-8786-7eb27ac8a844",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359045f3-4c54-4f72-9a8a-e859e4d932b2",
        "cursor": {
          "ref": "ac6ad407-77b7-4d5f-aa8a-91c2845db870",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "eec14094-3ace-4a1d-8de6-3d7783606db1"
        },
        "item": {
          "id": "359045f3-4c54-4f72-9a8a-e859e4d932b2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "21736ab4-3c75-4387-8786-7eb27ac8a844",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1635d3-2d5d-4971-ba52-4e9aea653b3a",
        "cursor": {
          "ref": "8eae0c68-37fd-422d-9916-420a162f972e",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cda669a2-dbaa-4559-a366-a4ca24fd83f9"
        },
        "item": {
          "id": "2c1635d3-2d5d-4971-ba52-4e9aea653b3a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "68d057a7-df1d-45f3-af29-15afd74128fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1635d3-2d5d-4971-ba52-4e9aea653b3a",
        "cursor": {
          "ref": "8eae0c68-37fd-422d-9916-420a162f972e",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cda669a2-dbaa-4559-a366-a4ca24fd83f9"
        },
        "item": {
          "id": "2c1635d3-2d5d-4971-ba52-4e9aea653b3a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "68d057a7-df1d-45f3-af29-15afd74128fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5aef572-2470-48a6-93b4-b39936edc2ca",
        "cursor": {
          "ref": "01bcf373-2ef3-4041-bbb3-b531cadf474d",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9bae12ab-920f-4dc9-b63d-58e0ac31c10d"
        },
        "item": {
          "id": "e5aef572-2470-48a6-93b4-b39936edc2ca",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8be8797c-35bc-4727-8d2e-21fe8483f43c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5aef572-2470-48a6-93b4-b39936edc2ca",
        "cursor": {
          "ref": "01bcf373-2ef3-4041-bbb3-b531cadf474d",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9bae12ab-920f-4dc9-b63d-58e0ac31c10d"
        },
        "item": {
          "id": "e5aef572-2470-48a6-93b4-b39936edc2ca",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8be8797c-35bc-4727-8d2e-21fe8483f43c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95be8858-2b73-4e92-8bea-2353e61e9b92",
        "cursor": {
          "ref": "023e0594-9d9f-4428-b4b1-a4981bdc8694",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b2b977fb-a667-45e7-8830-7feaf593648b"
        },
        "item": {
          "id": "95be8858-2b73-4e92-8bea-2353e61e9b92",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a9a025e5-3611-4259-9711-942ea466c6ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95be8858-2b73-4e92-8bea-2353e61e9b92",
        "cursor": {
          "ref": "023e0594-9d9f-4428-b4b1-a4981bdc8694",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b2b977fb-a667-45e7-8830-7feaf593648b"
        },
        "item": {
          "id": "95be8858-2b73-4e92-8bea-2353e61e9b92",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a9a025e5-3611-4259-9711-942ea466c6ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5942872-36e2-422c-b5a4-58eed146371d",
        "cursor": {
          "ref": "22b63199-2b71-4a96-ae9d-8834342ef8c8",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "33637119-b6c3-4b06-bb82-07a034587535"
        },
        "item": {
          "id": "d5942872-36e2-422c-b5a4-58eed146371d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4e754c75-bf55-4a49-8933-0a044cde0001",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5942872-36e2-422c-b5a4-58eed146371d",
        "cursor": {
          "ref": "22b63199-2b71-4a96-ae9d-8834342ef8c8",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "33637119-b6c3-4b06-bb82-07a034587535"
        },
        "item": {
          "id": "d5942872-36e2-422c-b5a4-58eed146371d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4e754c75-bf55-4a49-8933-0a044cde0001",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932b5270-f5c3-4aaf-9421-93717d1b1037",
        "cursor": {
          "ref": "3b9b55c4-6036-4b9c-90f8-4b4ee1e638ec",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "53c08560-be1f-4ece-9749-73043021190a"
        },
        "item": {
          "id": "932b5270-f5c3-4aaf-9421-93717d1b1037",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8d10275d-7061-456f-bdb5-00e8e04a23be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932b5270-f5c3-4aaf-9421-93717d1b1037",
        "cursor": {
          "ref": "3b9b55c4-6036-4b9c-90f8-4b4ee1e638ec",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "53c08560-be1f-4ece-9749-73043021190a"
        },
        "item": {
          "id": "932b5270-f5c3-4aaf-9421-93717d1b1037",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8d10275d-7061-456f-bdb5-00e8e04a23be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ff61f2-1685-408f-ac15-cce5786df596",
        "cursor": {
          "ref": "43575fd8-613e-4a11-88be-d45ef3951227",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7c843c46-4b4f-4bc6-a181-a4250abb0152"
        },
        "item": {
          "id": "c5ff61f2-1685-408f-ac15-cce5786df596",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2929598f-8b61-45ed-b471-45ceb6f62a21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ff61f2-1685-408f-ac15-cce5786df596",
        "cursor": {
          "ref": "43575fd8-613e-4a11-88be-d45ef3951227",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7c843c46-4b4f-4bc6-a181-a4250abb0152"
        },
        "item": {
          "id": "c5ff61f2-1685-408f-ac15-cce5786df596",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2929598f-8b61-45ed-b471-45ceb6f62a21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9651ac-ae83-4a68-984c-240978051913",
        "cursor": {
          "ref": "bee7b714-f994-42aa-adfd-b9340165e2d5",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d3c63432-b342-45bf-aad7-19dd7266cb54"
        },
        "item": {
          "id": "fc9651ac-ae83-4a68-984c-240978051913",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8fb6b3fe-eaf9-48ff-ac0e-ea3184a598c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9651ac-ae83-4a68-984c-240978051913",
        "cursor": {
          "ref": "bee7b714-f994-42aa-adfd-b9340165e2d5",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d3c63432-b342-45bf-aad7-19dd7266cb54"
        },
        "item": {
          "id": "fc9651ac-ae83-4a68-984c-240978051913",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8fb6b3fe-eaf9-48ff-ac0e-ea3184a598c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf25682-47a2-4d5c-a665-27e2c3a1d102",
        "cursor": {
          "ref": "f349f081-79b8-43f1-b253-665774cd5a77",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0cf8c6c6-90ad-4446-95bd-322f10493258"
        },
        "item": {
          "id": "fbf25682-47a2-4d5c-a665-27e2c3a1d102",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6d12e410-1a7a-4c32-836f-e66792e92c72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf25682-47a2-4d5c-a665-27e2c3a1d102",
        "cursor": {
          "ref": "f349f081-79b8-43f1-b253-665774cd5a77",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0cf8c6c6-90ad-4446-95bd-322f10493258"
        },
        "item": {
          "id": "fbf25682-47a2-4d5c-a665-27e2c3a1d102",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6d12e410-1a7a-4c32-836f-e66792e92c72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f30853-c083-4e78-a5ae-d5630a2bae6b",
        "cursor": {
          "ref": "624735d9-1789-47e5-975f-1c5af49877ad",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "32174afd-e0fe-434b-8db0-639c411d3f94"
        },
        "item": {
          "id": "d3f30853-c083-4e78-a5ae-d5630a2bae6b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "eda836b8-efbd-47b0-8011-dc77b3426e88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f30853-c083-4e78-a5ae-d5630a2bae6b",
        "cursor": {
          "ref": "624735d9-1789-47e5-975f-1c5af49877ad",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "32174afd-e0fe-434b-8db0-639c411d3f94"
        },
        "item": {
          "id": "d3f30853-c083-4e78-a5ae-d5630a2bae6b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "eda836b8-efbd-47b0-8011-dc77b3426e88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f72c6f-8afa-4719-b7f2-c8ac2f87f7ab",
        "cursor": {
          "ref": "5e08b7bf-0577-46d2-a790-8783746c08bd",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "78541a45-317a-4274-bae6-be09e37bdf2f"
        },
        "item": {
          "id": "98f72c6f-8afa-4719-b7f2-c8ac2f87f7ab",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bbab04f3-9a9e-40d1-9e1f-477c6b5be1c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f72c6f-8afa-4719-b7f2-c8ac2f87f7ab",
        "cursor": {
          "ref": "5e08b7bf-0577-46d2-a790-8783746c08bd",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "78541a45-317a-4274-bae6-be09e37bdf2f"
        },
        "item": {
          "id": "98f72c6f-8afa-4719-b7f2-c8ac2f87f7ab",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bbab04f3-9a9e-40d1-9e1f-477c6b5be1c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf51a21-15e4-4314-b582-0183e1f91311",
        "cursor": {
          "ref": "96d50792-6d33-4635-bb53-65f690bb2b31",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ee5063cd-c74f-4d91-8620-68f18580c9bc"
        },
        "item": {
          "id": "caf51a21-15e4-4314-b582-0183e1f91311",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7204c345-5346-426c-a4f4-1189fa5bf619",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf51a21-15e4-4314-b582-0183e1f91311",
        "cursor": {
          "ref": "96d50792-6d33-4635-bb53-65f690bb2b31",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ee5063cd-c74f-4d91-8620-68f18580c9bc"
        },
        "item": {
          "id": "caf51a21-15e4-4314-b582-0183e1f91311",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7204c345-5346-426c-a4f4-1189fa5bf619",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60967233-08a3-4dcf-afee-6880ad9aacaa",
        "cursor": {
          "ref": "190e1083-2a7d-498b-b195-eb6add71f69a",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8231f643-cfac-411e-9b3e-b1b393880c14"
        },
        "item": {
          "id": "60967233-08a3-4dcf-afee-6880ad9aacaa",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d2f9f55d-d966-4d2d-8d63-7c67265796c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60967233-08a3-4dcf-afee-6880ad9aacaa",
        "cursor": {
          "ref": "190e1083-2a7d-498b-b195-eb6add71f69a",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8231f643-cfac-411e-9b3e-b1b393880c14"
        },
        "item": {
          "id": "60967233-08a3-4dcf-afee-6880ad9aacaa",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d2f9f55d-d966-4d2d-8d63-7c67265796c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24bc20e-9d22-4a25-a886-c09c9bd10941",
        "cursor": {
          "ref": "9743b1d5-e701-43e0-918b-674d8e29db75",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "42ba3f13-525a-42a3-b185-8efd12ad3e7f"
        },
        "item": {
          "id": "c24bc20e-9d22-4a25-a886-c09c9bd10941",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "014cc42b-e9b7-426c-97c4-373ca95ab490",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24bc20e-9d22-4a25-a886-c09c9bd10941",
        "cursor": {
          "ref": "9743b1d5-e701-43e0-918b-674d8e29db75",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "42ba3f13-525a-42a3-b185-8efd12ad3e7f"
        },
        "item": {
          "id": "c24bc20e-9d22-4a25-a886-c09c9bd10941",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "014cc42b-e9b7-426c-97c4-373ca95ab490",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e07dd1-08d3-4c81-9113-45a43e75b5f4",
        "cursor": {
          "ref": "bfdd4477-5ddb-4af0-aad8-f86fc52a8d08",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3b1b17d9-ca1d-4266-a6be-ea77e153d426"
        },
        "item": {
          "id": "76e07dd1-08d3-4c81-9113-45a43e75b5f4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e35bac77-7268-4e9f-a755-899e87926a4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e07dd1-08d3-4c81-9113-45a43e75b5f4",
        "cursor": {
          "ref": "bfdd4477-5ddb-4af0-aad8-f86fc52a8d08",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3b1b17d9-ca1d-4266-a6be-ea77e153d426"
        },
        "item": {
          "id": "76e07dd1-08d3-4c81-9113-45a43e75b5f4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e35bac77-7268-4e9f-a755-899e87926a4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edec7ab5-44b8-441f-a198-36ac82425e42",
        "cursor": {
          "ref": "f35334d6-8c84-42d1-ba0a-7d41c538dd85",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "951f6bfa-b67b-4209-87fb-780fe2d41742"
        },
        "item": {
          "id": "edec7ab5-44b8-441f-a198-36ac82425e42",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f71cad96-960e-4b5d-ac5c-c1ef14b65b47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edec7ab5-44b8-441f-a198-36ac82425e42",
        "cursor": {
          "ref": "f35334d6-8c84-42d1-ba0a-7d41c538dd85",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "951f6bfa-b67b-4209-87fb-780fe2d41742"
        },
        "item": {
          "id": "edec7ab5-44b8-441f-a198-36ac82425e42",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f71cad96-960e-4b5d-ac5c-c1ef14b65b47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b063528b-1db9-49be-b958-ddb4ed66814b",
        "cursor": {
          "ref": "bb5605f7-1cdf-4226-9a57-fc3203706b6b",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d7060a5a-fa20-4682-a458-1d230cac62d2"
        },
        "item": {
          "id": "b063528b-1db9-49be-b958-ddb4ed66814b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c2a0bd44-003f-4d93-9ce3-7b6e006c8a19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b063528b-1db9-49be-b958-ddb4ed66814b",
        "cursor": {
          "ref": "bb5605f7-1cdf-4226-9a57-fc3203706b6b",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d7060a5a-fa20-4682-a458-1d230cac62d2"
        },
        "item": {
          "id": "b063528b-1db9-49be-b958-ddb4ed66814b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c2a0bd44-003f-4d93-9ce3-7b6e006c8a19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b1c8c5-7c50-4868-8758-8d742a85af5a",
        "cursor": {
          "ref": "a2f03f38-2193-4fcb-9f45-1c0ad32dbe69",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "aaa812f2-0a39-4058-8b30-b9d7781d7c0e"
        },
        "item": {
          "id": "36b1c8c5-7c50-4868-8758-8d742a85af5a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d1cd28b3-5dc2-4f5b-9aca-9b9bb055cdfd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b1c8c5-7c50-4868-8758-8d742a85af5a",
        "cursor": {
          "ref": "a2f03f38-2193-4fcb-9f45-1c0ad32dbe69",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "aaa812f2-0a39-4058-8b30-b9d7781d7c0e"
        },
        "item": {
          "id": "36b1c8c5-7c50-4868-8758-8d742a85af5a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d1cd28b3-5dc2-4f5b-9aca-9b9bb055cdfd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd89dbf4-bac8-43d1-a506-3d9f055aa279",
        "cursor": {
          "ref": "b8a29b63-4add-4914-9e68-256247704719",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5838aaa9-4c96-43f6-a741-a0b19d1d2890"
        },
        "item": {
          "id": "dd89dbf4-bac8-43d1-a506-3d9f055aa279",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "356b9112-7fc2-47e5-bd0f-993ff62b31b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd89dbf4-bac8-43d1-a506-3d9f055aa279",
        "cursor": {
          "ref": "b8a29b63-4add-4914-9e68-256247704719",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5838aaa9-4c96-43f6-a741-a0b19d1d2890"
        },
        "item": {
          "id": "dd89dbf4-bac8-43d1-a506-3d9f055aa279",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "356b9112-7fc2-47e5-bd0f-993ff62b31b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f31c31b-86f5-434a-8e3c-27754c686b60",
        "cursor": {
          "ref": "605ea366-a9d8-438f-938f-2402a0377701",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "dae1f3bf-c8a1-43bb-bcff-1a15cab63e30"
        },
        "item": {
          "id": "1f31c31b-86f5-434a-8e3c-27754c686b60",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "96dddb86-80b4-4502-b1fe-f2551bcc2020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f31c31b-86f5-434a-8e3c-27754c686b60",
        "cursor": {
          "ref": "605ea366-a9d8-438f-938f-2402a0377701",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "dae1f3bf-c8a1-43bb-bcff-1a15cab63e30"
        },
        "item": {
          "id": "1f31c31b-86f5-434a-8e3c-27754c686b60",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "96dddb86-80b4-4502-b1fe-f2551bcc2020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b7cbb6-902e-4b42-a01a-250b0cda4ddb",
        "cursor": {
          "ref": "14004f02-59b2-4be9-8f87-8f05944c5f5c",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "d2b053dd-b1eb-4e5c-9068-6ce3f1435d73"
        },
        "item": {
          "id": "d0b7cbb6-902e-4b42-a01a-250b0cda4ddb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f52c3315-8786-4253-aa7e-3c4e81139d8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b7cbb6-902e-4b42-a01a-250b0cda4ddb",
        "cursor": {
          "ref": "14004f02-59b2-4be9-8f87-8f05944c5f5c",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "d2b053dd-b1eb-4e5c-9068-6ce3f1435d73"
        },
        "item": {
          "id": "d0b7cbb6-902e-4b42-a01a-250b0cda4ddb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f52c3315-8786-4253-aa7e-3c4e81139d8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee690f7f-1b7c-4109-8ad8-968f63c581ea",
        "cursor": {
          "ref": "6ecfa54d-79cc-4f26-b1c4-b516e3e85bf5",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "f06ed4a5-6ea2-44d6-bdd0-5cea12810e68"
        },
        "item": {
          "id": "ee690f7f-1b7c-4109-8ad8-968f63c581ea",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f81cd471-84dc-47ef-936c-ead6b60c4ab0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee690f7f-1b7c-4109-8ad8-968f63c581ea",
        "cursor": {
          "ref": "6ecfa54d-79cc-4f26-b1c4-b516e3e85bf5",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "f06ed4a5-6ea2-44d6-bdd0-5cea12810e68"
        },
        "item": {
          "id": "ee690f7f-1b7c-4109-8ad8-968f63c581ea",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f81cd471-84dc-47ef-936c-ead6b60c4ab0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ab4eb4-c82d-460c-a7e3-96b569333a75",
        "cursor": {
          "ref": "6293eb35-d8c2-4b07-99ba-8931472cf551",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b187e28a-729c-4668-ae7a-472baecda111"
        },
        "item": {
          "id": "65ab4eb4-c82d-460c-a7e3-96b569333a75",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f5adc603-3cd6-411e-b0ce-802138a55780",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ab4eb4-c82d-460c-a7e3-96b569333a75",
        "cursor": {
          "ref": "6293eb35-d8c2-4b07-99ba-8931472cf551",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b187e28a-729c-4668-ae7a-472baecda111"
        },
        "item": {
          "id": "65ab4eb4-c82d-460c-a7e3-96b569333a75",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f5adc603-3cd6-411e-b0ce-802138a55780",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c386e32a-b289-41c7-a54e-328e589f6446",
        "cursor": {
          "ref": "5179f872-9f5a-4f70-8eaf-af9451958b33",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "e8f13259-775e-493f-bb6a-bafd43c57ca7"
        },
        "item": {
          "id": "c386e32a-b289-41c7-a54e-328e589f6446",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a854d008-667d-4f58-9562-2f3ccebb22d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c386e32a-b289-41c7-a54e-328e589f6446",
        "cursor": {
          "ref": "5179f872-9f5a-4f70-8eaf-af9451958b33",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "e8f13259-775e-493f-bb6a-bafd43c57ca7"
        },
        "item": {
          "id": "c386e32a-b289-41c7-a54e-328e589f6446",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a854d008-667d-4f58-9562-2f3ccebb22d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e396a6-0c6f-4abf-8034-7d277b2abafd",
        "cursor": {
          "ref": "354c523a-df70-435c-8c6e-3ccede9961de",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "034c7c22-3a75-459c-8c2a-693b8263aa90"
        },
        "item": {
          "id": "64e396a6-0c6f-4abf-8034-7d277b2abafd",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a8f2ec5b-37a3-437c-a90f-a80a6cae3c34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e396a6-0c6f-4abf-8034-7d277b2abafd",
        "cursor": {
          "ref": "354c523a-df70-435c-8c6e-3ccede9961de",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "034c7c22-3a75-459c-8c2a-693b8263aa90"
        },
        "item": {
          "id": "64e396a6-0c6f-4abf-8034-7d277b2abafd",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a8f2ec5b-37a3-437c-a90f-a80a6cae3c34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01466405-e428-45d0-8f87-4b36eccc23d9",
        "cursor": {
          "ref": "7b5da8d9-08ad-44cd-8a24-f5e36eb51610",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "a17d70dd-a8aa-43f8-afc5-bd8d1f6a38c5"
        },
        "item": {
          "id": "01466405-e428-45d0-8f87-4b36eccc23d9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e5420b5a-c363-4ff7-9cf3-a0866e023296",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01466405-e428-45d0-8f87-4b36eccc23d9",
        "cursor": {
          "ref": "7b5da8d9-08ad-44cd-8a24-f5e36eb51610",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "a17d70dd-a8aa-43f8-afc5-bd8d1f6a38c5"
        },
        "item": {
          "id": "01466405-e428-45d0-8f87-4b36eccc23d9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e5420b5a-c363-4ff7-9cf3-a0866e023296",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e9c3d3-c78c-477d-af79-e9d6a3c3b122",
        "cursor": {
          "ref": "d5d104f6-c259-45b5-9ec6-82ebd17dc9c0",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0af96bc0-85c4-453f-92c4-edebb6bb1b81"
        },
        "item": {
          "id": "51e9c3d3-c78c-477d-af79-e9d6a3c3b122",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cb08ed1a-12e9-47c0-8bf7-b175e53df9be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e9c3d3-c78c-477d-af79-e9d6a3c3b122",
        "cursor": {
          "ref": "d5d104f6-c259-45b5-9ec6-82ebd17dc9c0",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0af96bc0-85c4-453f-92c4-edebb6bb1b81"
        },
        "item": {
          "id": "51e9c3d3-c78c-477d-af79-e9d6a3c3b122",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cb08ed1a-12e9-47c0-8bf7-b175e53df9be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cdcd673-1f1e-4822-ba70-04bfe642b495",
        "cursor": {
          "ref": "40062a8e-c627-492e-9676-ce9bd61acb08",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "0405c86a-c07b-4030-853a-17fbea6866ae"
        },
        "item": {
          "id": "0cdcd673-1f1e-4822-ba70-04bfe642b495",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "aeb5738f-0897-419b-b5a5-aeb1f944b458",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cdcd673-1f1e-4822-ba70-04bfe642b495",
        "cursor": {
          "ref": "40062a8e-c627-492e-9676-ce9bd61acb08",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "0405c86a-c07b-4030-853a-17fbea6866ae"
        },
        "item": {
          "id": "0cdcd673-1f1e-4822-ba70-04bfe642b495",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "aeb5738f-0897-419b-b5a5-aeb1f944b458",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f0f5e8-5a03-4fb5-85d9-c9843d6d0d7e",
        "cursor": {
          "ref": "04481063-2fb7-45ca-a235-3675423e0b29",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3fcff790-6f20-4246-ab9d-7d91e18926c7"
        },
        "item": {
          "id": "b8f0f5e8-5a03-4fb5-85d9-c9843d6d0d7e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "607f3196-9178-47a8-96aa-6c0b7d9aa73e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f0f5e8-5a03-4fb5-85d9-c9843d6d0d7e",
        "cursor": {
          "ref": "04481063-2fb7-45ca-a235-3675423e0b29",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3fcff790-6f20-4246-ab9d-7d91e18926c7"
        },
        "item": {
          "id": "b8f0f5e8-5a03-4fb5-85d9-c9843d6d0d7e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "607f3196-9178-47a8-96aa-6c0b7d9aa73e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781b9df0-c3c3-4a4a-a137-d8059e613a4b",
        "cursor": {
          "ref": "6763be61-d5ee-4a21-85af-32539869b09d",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "b1cb80e3-a2b6-4993-a075-b1a3eaf9df72"
        },
        "item": {
          "id": "781b9df0-c3c3-4a4a-a137-d8059e613a4b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1ce0dd3c-6495-4fed-91fa-89b8380f7be4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781b9df0-c3c3-4a4a-a137-d8059e613a4b",
        "cursor": {
          "ref": "6763be61-d5ee-4a21-85af-32539869b09d",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "b1cb80e3-a2b6-4993-a075-b1a3eaf9df72"
        },
        "item": {
          "id": "781b9df0-c3c3-4a4a-a137-d8059e613a4b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1ce0dd3c-6495-4fed-91fa-89b8380f7be4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943a1587-a0f2-457a-829b-897db43668c5",
        "cursor": {
          "ref": "1c6997ed-7940-4c10-bce0-2ca57971c32a",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "2e5a0878-ff3e-4b45-b016-ca996c67da5f"
        },
        "item": {
          "id": "943a1587-a0f2-457a-829b-897db43668c5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "27cbfb34-9cdb-4aa4-a64d-a7240ecd3489",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943a1587-a0f2-457a-829b-897db43668c5",
        "cursor": {
          "ref": "1c6997ed-7940-4c10-bce0-2ca57971c32a",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "2e5a0878-ff3e-4b45-b016-ca996c67da5f"
        },
        "item": {
          "id": "943a1587-a0f2-457a-829b-897db43668c5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "27cbfb34-9cdb-4aa4-a64d-a7240ecd3489",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab4683ce-21a4-4ad5-977b-c6dadd833f96",
        "cursor": {
          "ref": "832c8bf4-050e-4d5d-927d-a096c92b383b",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "21bdae6a-2831-43c1-a4d3-4275525e7cb4"
        },
        "item": {
          "id": "ab4683ce-21a4-4ad5-977b-c6dadd833f96",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bffbee50-523d-4f39-b294-404106dac953",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab4683ce-21a4-4ad5-977b-c6dadd833f96",
        "cursor": {
          "ref": "832c8bf4-050e-4d5d-927d-a096c92b383b",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "21bdae6a-2831-43c1-a4d3-4275525e7cb4"
        },
        "item": {
          "id": "ab4683ce-21a4-4ad5-977b-c6dadd833f96",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bffbee50-523d-4f39-b294-404106dac953",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584a8c91-d5d4-4b59-93b2-c946cbdf90a6",
        "cursor": {
          "ref": "94dfa531-a0ee-4570-b37a-1671c19a89ad",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "28dcdd9d-616d-47bd-b06b-8d7436476acd"
        },
        "item": {
          "id": "584a8c91-d5d4-4b59-93b2-c946cbdf90a6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6bf113dc-68bb-42ec-9729-9c06c060b1bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584a8c91-d5d4-4b59-93b2-c946cbdf90a6",
        "cursor": {
          "ref": "94dfa531-a0ee-4570-b37a-1671c19a89ad",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "28dcdd9d-616d-47bd-b06b-8d7436476acd"
        },
        "item": {
          "id": "584a8c91-d5d4-4b59-93b2-c946cbdf90a6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6bf113dc-68bb-42ec-9729-9c06c060b1bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d81e87-794f-464a-883e-6ce84897c660",
        "cursor": {
          "ref": "9368e97d-3718-4dd4-b1c0-788682029fba",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5d925fc9-da89-416c-a087-c3fb5c7f84f7"
        },
        "item": {
          "id": "e7d81e87-794f-464a-883e-6ce84897c660",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9194d9ba-58c7-4cb9-a16a-42347a43d1f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d81e87-794f-464a-883e-6ce84897c660",
        "cursor": {
          "ref": "9368e97d-3718-4dd4-b1c0-788682029fba",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5d925fc9-da89-416c-a087-c3fb5c7f84f7"
        },
        "item": {
          "id": "e7d81e87-794f-464a-883e-6ce84897c660",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9194d9ba-58c7-4cb9-a16a-42347a43d1f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25617f70-f387-45ae-a003-da62038535a6",
        "cursor": {
          "ref": "93b7a3ff-71c7-4891-84f8-d04d784dd740",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "86c1dd1f-6aed-46fe-a3d0-df03dd37f3c5"
        },
        "item": {
          "id": "25617f70-f387-45ae-a003-da62038535a6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2340d2c7-ba9e-415c-a78a-981392aa555d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25617f70-f387-45ae-a003-da62038535a6",
        "cursor": {
          "ref": "93b7a3ff-71c7-4891-84f8-d04d784dd740",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "86c1dd1f-6aed-46fe-a3d0-df03dd37f3c5"
        },
        "item": {
          "id": "25617f70-f387-45ae-a003-da62038535a6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2340d2c7-ba9e-415c-a78a-981392aa555d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9451e6c-3854-466a-a789-c2dbcf9a1c98",
        "cursor": {
          "ref": "749a9572-e167-4715-9a78-c23d3b905c2e",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "35eb0821-420d-4275-8c3d-cdef0501f344"
        },
        "item": {
          "id": "b9451e6c-3854-466a-a789-c2dbcf9a1c98",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e19ca74e-5ae3-4e31-b056-b0ac270be485",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9451e6c-3854-466a-a789-c2dbcf9a1c98",
        "cursor": {
          "ref": "749a9572-e167-4715-9a78-c23d3b905c2e",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "35eb0821-420d-4275-8c3d-cdef0501f344"
        },
        "item": {
          "id": "b9451e6c-3854-466a-a789-c2dbcf9a1c98",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e19ca74e-5ae3-4e31-b056-b0ac270be485",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2543a497-b719-4b0c-8754-60eed989ea9e",
        "cursor": {
          "ref": "07536edc-138e-4654-b939-73c9f6b76a62",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "2c25acdd-2e27-4317-ad32-fd8851080c8a"
        },
        "item": {
          "id": "2543a497-b719-4b0c-8754-60eed989ea9e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "871851d4-0886-41d7-ade1-3147218376ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2543a497-b719-4b0c-8754-60eed989ea9e",
        "cursor": {
          "ref": "07536edc-138e-4654-b939-73c9f6b76a62",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "2c25acdd-2e27-4317-ad32-fd8851080c8a"
        },
        "item": {
          "id": "2543a497-b719-4b0c-8754-60eed989ea9e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "871851d4-0886-41d7-ade1-3147218376ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071ad2fb-9005-4988-b50e-ad101cdc4a44",
        "cursor": {
          "ref": "38963be1-9d99-40f8-af3d-8058139090b0",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "4af0965e-bef4-4c50-9b95-3c1e909d290c"
        },
        "item": {
          "id": "071ad2fb-9005-4988-b50e-ad101cdc4a44",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "67bab257-f305-4a6f-b4f3-f28f8aaf7131",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071ad2fb-9005-4988-b50e-ad101cdc4a44",
        "cursor": {
          "ref": "38963be1-9d99-40f8-af3d-8058139090b0",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "4af0965e-bef4-4c50-9b95-3c1e909d290c"
        },
        "item": {
          "id": "071ad2fb-9005-4988-b50e-ad101cdc4a44",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "67bab257-f305-4a6f-b4f3-f28f8aaf7131",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8abb047-3511-4b14-b5ec-4b64ca2e75b0",
        "cursor": {
          "ref": "e55db553-ecb0-4475-b1b4-b755bd644f3b",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "4e12d34d-f3d9-4c6e-9a94-9e84a430d062"
        },
        "item": {
          "id": "b8abb047-3511-4b14-b5ec-4b64ca2e75b0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "520604c7-ff50-4742-bfbd-82b4ea4ad8ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8abb047-3511-4b14-b5ec-4b64ca2e75b0",
        "cursor": {
          "ref": "e55db553-ecb0-4475-b1b4-b755bd644f3b",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "4e12d34d-f3d9-4c6e-9a94-9e84a430d062"
        },
        "item": {
          "id": "b8abb047-3511-4b14-b5ec-4b64ca2e75b0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "520604c7-ff50-4742-bfbd-82b4ea4ad8ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b58888-6d1a-48fb-a681-0eac8c23b0a1",
        "cursor": {
          "ref": "9129eaa2-db14-4702-a6b0-a79383e6c6c5",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "9c37dffe-d79e-4a4d-b965-15c91357db82"
        },
        "item": {
          "id": "22b58888-6d1a-48fb-a681-0eac8c23b0a1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b3955051-03b3-4c0c-9321-338d1e5c8517",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b58888-6d1a-48fb-a681-0eac8c23b0a1",
        "cursor": {
          "ref": "9129eaa2-db14-4702-a6b0-a79383e6c6c5",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "9c37dffe-d79e-4a4d-b965-15c91357db82"
        },
        "item": {
          "id": "22b58888-6d1a-48fb-a681-0eac8c23b0a1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b3955051-03b3-4c0c-9321-338d1e5c8517",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654aac2c-fb6c-43f9-bd16-cc63ecd9db87",
        "cursor": {
          "ref": "ff958afe-33f4-4433-9b93-5fe502b17513",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "131af1a4-3e8d-4417-bd01-a0e9bb70ffef"
        },
        "item": {
          "id": "654aac2c-fb6c-43f9-bd16-cc63ecd9db87",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0b25c006-b438-43c9-8963-5b95fb1c226f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654aac2c-fb6c-43f9-bd16-cc63ecd9db87",
        "cursor": {
          "ref": "ff958afe-33f4-4433-9b93-5fe502b17513",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "131af1a4-3e8d-4417-bd01-a0e9bb70ffef"
        },
        "item": {
          "id": "654aac2c-fb6c-43f9-bd16-cc63ecd9db87",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0b25c006-b438-43c9-8963-5b95fb1c226f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3521ef-8ec8-4c8a-908a-3df6f848cc96",
        "cursor": {
          "ref": "47769291-10c0-402a-884a-c1c656a15cf1",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "cfc8f9c2-4d92-437d-aaff-7480181c4d75"
        },
        "item": {
          "id": "ba3521ef-8ec8-4c8a-908a-3df6f848cc96",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "76626d09-cdbd-4400-a8be-780732c6b0af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3521ef-8ec8-4c8a-908a-3df6f848cc96",
        "cursor": {
          "ref": "47769291-10c0-402a-884a-c1c656a15cf1",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "cfc8f9c2-4d92-437d-aaff-7480181c4d75"
        },
        "item": {
          "id": "ba3521ef-8ec8-4c8a-908a-3df6f848cc96",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "76626d09-cdbd-4400-a8be-780732c6b0af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8658feb3-c231-4a99-a464-6ec22fdbdf58",
        "cursor": {
          "ref": "69027d51-c9be-47f4-923e-164b168f22d4",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "aae329ea-23ae-4d0e-a558-9a5243424c74"
        },
        "item": {
          "id": "8658feb3-c231-4a99-a464-6ec22fdbdf58",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "778cebd2-1f2b-46fe-a036-fb1154087bb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "8658feb3-c231-4a99-a464-6ec22fdbdf58",
        "cursor": {
          "ref": "69027d51-c9be-47f4-923e-164b168f22d4",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "aae329ea-23ae-4d0e-a558-9a5243424c74"
        },
        "item": {
          "id": "8658feb3-c231-4a99-a464-6ec22fdbdf58",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "778cebd2-1f2b-46fe-a036-fb1154087bb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "08d96c64-5fd7-451b-84f5-de7766aef6f3",
        "cursor": {
          "ref": "012834ac-d696-4d9a-a0f8-48c3e32c0aad",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d52286cb-0ad8-47bd-b117-4a0581b8e3db"
        },
        "item": {
          "id": "08d96c64-5fd7-451b-84f5-de7766aef6f3",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1138b26a-6911-4c7f-a2d8-46ce626169ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "08d96c64-5fd7-451b-84f5-de7766aef6f3",
        "cursor": {
          "ref": "012834ac-d696-4d9a-a0f8-48c3e32c0aad",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d52286cb-0ad8-47bd-b117-4a0581b8e3db"
        },
        "item": {
          "id": "08d96c64-5fd7-451b-84f5-de7766aef6f3",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1138b26a-6911-4c7f-a2d8-46ce626169ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "8794fa7a-2445-44ac-ae9d-43429a130596",
        "cursor": {
          "ref": "144b65bc-6b6e-4c65-a75a-db28a7404ec9",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "35975bcd-31d4-40fb-a1ae-38784579a523"
        },
        "item": {
          "id": "8794fa7a-2445-44ac-ae9d-43429a130596",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a8c5fc88-3a47-4dbc-bf43-b6f94b75cbf9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "8794fa7a-2445-44ac-ae9d-43429a130596",
        "cursor": {
          "ref": "144b65bc-6b6e-4c65-a75a-db28a7404ec9",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "35975bcd-31d4-40fb-a1ae-38784579a523"
        },
        "item": {
          "id": "8794fa7a-2445-44ac-ae9d-43429a130596",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a8c5fc88-3a47-4dbc-bf43-b6f94b75cbf9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "db099fe4-8086-417e-a0f3-38b85d6a5c30",
        "cursor": {
          "ref": "a6460ac6-060e-4e06-b36a-d62ec50487bf",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "4dae922a-cdd3-4f76-91a7-4cd83bba84c0"
        },
        "item": {
          "id": "db099fe4-8086-417e-a0f3-38b85d6a5c30",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5da67162-031f-4945-a352-7151a7b946b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db099fe4-8086-417e-a0f3-38b85d6a5c30",
        "cursor": {
          "ref": "a6460ac6-060e-4e06-b36a-d62ec50487bf",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "4dae922a-cdd3-4f76-91a7-4cd83bba84c0"
        },
        "item": {
          "id": "db099fe4-8086-417e-a0f3-38b85d6a5c30",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5da67162-031f-4945-a352-7151a7b946b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db099fe4-8086-417e-a0f3-38b85d6a5c30",
        "cursor": {
          "ref": "a6460ac6-060e-4e06-b36a-d62ec50487bf",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "4dae922a-cdd3-4f76-91a7-4cd83bba84c0"
        },
        "item": {
          "id": "db099fe4-8086-417e-a0f3-38b85d6a5c30",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5da67162-031f-4945-a352-7151a7b946b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1734bcf0-69fe-4309-a1d8-10b1f0fe7aa1",
        "cursor": {
          "ref": "9697ec2e-54e2-49d9-b985-65a60fc6df0a",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "15ca62e5-c3c9-44d4-b46a-2c0722061d80"
        },
        "item": {
          "id": "1734bcf0-69fe-4309-a1d8-10b1f0fe7aa1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "49165d7e-bddb-47b5-b0a3-0960ca3dd933",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1734bcf0-69fe-4309-a1d8-10b1f0fe7aa1",
        "cursor": {
          "ref": "9697ec2e-54e2-49d9-b985-65a60fc6df0a",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "15ca62e5-c3c9-44d4-b46a-2c0722061d80"
        },
        "item": {
          "id": "1734bcf0-69fe-4309-a1d8-10b1f0fe7aa1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "49165d7e-bddb-47b5-b0a3-0960ca3dd933",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4fd41e5-4913-4456-89ce-753313c91c1e",
        "cursor": {
          "ref": "c8a7c25d-2a32-45b2-a258-9910da1a7e46",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "1cc55bbf-376d-4f02-a613-12e54b14a480"
        },
        "item": {
          "id": "c4fd41e5-4913-4456-89ce-753313c91c1e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "01aa4eb2-8ee1-415f-822b-688fc418287d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4fd41e5-4913-4456-89ce-753313c91c1e",
        "cursor": {
          "ref": "c8a7c25d-2a32-45b2-a258-9910da1a7e46",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "1cc55bbf-376d-4f02-a613-12e54b14a480"
        },
        "item": {
          "id": "c4fd41e5-4913-4456-89ce-753313c91c1e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "01aa4eb2-8ee1-415f-822b-688fc418287d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}