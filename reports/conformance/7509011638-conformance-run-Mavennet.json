{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ef262587-cf01-4398-b596-421d7e2efc29",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bc7f27c2-e9fe-4586-91b4-89b3450738d4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d0f5c57a-277d-4875-bb14-36a4616d4cf9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "49e28c5c-e219-491f-a99b-943b65c81ded"
                }
              }
            ]
          },
          {
            "id": "adb364bb-6d68-4505-84ed-bc9684ad1104",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dfd07736-3960-4135-a249-8d4a4d8ef1fd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b3ea8a79-4ce0-449e-a274-de61f324c7f8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "815802b0-ddf4-463a-8384-a2ead3f4210e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ef4f69d1-26bd-4709-9d0a-50207baa5608",
            "name": "Positive Testing",
            "item": [
              {
                "id": "da0ad977-56cf-4dd2-b7ae-a94568ea6ac2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a22b220-76b1-4683-9910-a4fe540b8818",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7463df07-7fb7-4bfe-bbdd-1a8c418da43d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4341b2ee-fe15-46f1-a87f-127517e292ec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd441285-16be-48d6-8e39-aebd3ef526e6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aa8fd4bf-8177-4982-aa55-a0f38fcd71ea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9ccf39a5-ab46-4aba-a3af-45705164962e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0dae5cd5-6764-4a7c-ba33-4a8fb92bf383",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e9a32c77-e179-43fb-b6c8-dc0cef43d7bc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ab5e083-a33d-42a2-b05e-99aedb6281ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7405befb-11a0-482d-b4bf-7664db39f3d7"
            }
          }
        ]
      },
      {
        "id": "08da6b18-22c2-4427-bcc7-143e41b40130",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "469d5436-96be-4520-bb2f-5cddf8b5ed42",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dbde428e-c37e-4c38-9606-31794f66d941",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d2447f47-5f5d-4c2e-b9e4-3e3db2e5bd51",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684efa6b-125c-4bce-83df-7eba2103a781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "001cd146-b26f-4011-ac61-0207a5d1094a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42cbf24-c54b-45e9-afd4-762af9fef7bc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a448fe-e8c9-4038-a209-87ad0677df21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65fbb641-5463-491a-985b-8e41afde0664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d24c293-bd05-418d-91dd-6189a0cfa0c7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe620ce4-eebb-41c3-9558-f31cab92cbbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "100b3e70-45bd-48fb-857c-277047db075c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "673cb988-f640-4f7a-bf6d-7e2b7e19bba0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46fea234-5486-4563-b6f3-25b32cfc5dda",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a198ea-67f2-4f3e-94b8-ef2be332fb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6373710a-a62e-439b-9671-61105520abad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6156e5fe-dabf-409a-9e2d-f15c2cfc26a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2720a80b-143e-4aa4-91e7-9acd89f10c9a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "73d6300e-eaac-475e-9983-f333ec37a32c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1b9b0a05-e38f-47b8-91e2-6c5ae0d403df",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff1c053b-716a-4e53-ab0d-aecaa5be3c41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4a55bdf9-a950-4aac-b4c8-665ac8f27a48"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44d97680-66ac-410a-934b-635239f65346",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "16816c7e-ec1e-474f-b717-bddb2c34b8aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d310066-579f-43a1-aca1-f7ea78ce018b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a072f50-1c38-441e-a470-94e22750ad3b"
            }
          }
        ]
      },
      {
        "id": "aef09b74-e647-421c-b93d-983a36009e4f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c696938b-1344-4765-b90a-3a12a9f333be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a3cce413-0925-425b-a138-c63ade4aad1a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "071840df-8c8f-4584-bd09-9b90c5623820",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17398321-51e1-4474-bf01-91de9fc54026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc19adc-6ab2-463d-bdf1-8549bb2893f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4b6daf-5c18-4718-bcd3-5c53b2e57e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3356f1ea-710a-4335-a047-d4f4faf9d6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f597498-4afe-4a88-ae85-d91f743ea4c7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5196ad-74d2-4e95-baf1-44c8b4385ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ded8c1-83ba-4f8d-82f1-12abf205610c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ff038c-cdc8-413d-80eb-4b98eeac6192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67e631aa-3bd4-46c7-8acf-90a5796cc626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4f2fd3-f5de-4759-a1b5-a0cd50d83b94",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee432b6-f200-41fe-a4a4-4a90802b2128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de086212-26d7-4014-9c2a-5daa836a966b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb02d17e-f6dc-408f-a138-13c9d5c56598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "162ac2e7-63b6-4d4b-9634-06258a737d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4941c699-a249-4ef6-b9c6-cc6f9ce00d10",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3ff3b9-9472-40d6-bcba-1b0aa28360ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9bef0f-bfb8-4ad1-8af0-638b4e2d2d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca73a0b8-1103-4eab-978a-67b24baa4cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94656161-a3e4-434e-a977-4117eee4a97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f80891e-3d74-4fde-a8d8-94ce02186d1a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcb91b4-9778-4a50-acd6-92d6984ccccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b62b38e-1c69-4ec5-8492-cd5bc1412088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8edea1f-1c40-4a93-94d5-94a779163948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f2c3023-9ef0-419a-9572-265a02c536bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfec526-34d6-4369-acb6-797564787d76",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6b8961-46f3-4603-97a9-b3f99e3bbd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99a42fa4-4708-4f6d-9455-304ad430578b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a656c19d-aaf2-4f90-a776-38c49f99b7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cfb6946e-e7ba-4aa3-8ba3-aab33fb2911b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776def6f-e7b4-4cf7-9a58-daa28f7f13f7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15acdc3f-53b8-49c4-a10c-6d00977dda6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9047447d-108d-4538-9178-dda0b3351d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cab2ee9-6874-411f-b291-5e375a178d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc330b4e-862d-4bed-95fd-1eb345634c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b7554a-2a21-451d-a8f4-5b6b37d57540",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a59e6ca-5d5d-43f7-9249-04cc46495f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073a31bb-b71c-4cb5-8259-c052738be8ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc02447f-05f9-44ff-9387-9a750b76676a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "755afa18-8651-4ba0-9b1a-74cb23881200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd9b943-cfbd-4c77-87ce-d131992ec3c9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d766800-24fe-44b4-b936-c33d1e948d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca92d855-52c6-41b4-9b27-c2721849b448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142bb4c4-21cb-48b5-a54b-f0de77b65538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47b05a16-907f-4603-b7aa-2e8826abd626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853af6ad-aec2-4706-86c6-2114733376f9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63df1629-aaf0-411c-961c-b1b53cbc9499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0321e0-9ebc-4d75-9c7f-d7134f7bc207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e86a13-ff94-4083-ab34-9e85afd73034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2c3dd62-0e03-4a9b-bd52-6a2eabeb8f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64715445-8b65-4c21-bcd2-c1af95606942",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3001b2-619f-469a-9afc-e0cf2e14ffa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c5bb752-1967-4b56-975d-ee52ef9dcfd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c9e487-3853-47b6-9c69-bf357200fa45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a93dc38c-29d3-45cf-bf97-ed8c4a4b76f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f3801f-da7f-4972-afa4-9805a50e3586",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10902bc9-8206-440c-8068-0352216b19f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70976089-ece3-4847-ade8-01815e294150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535a39e0-f6b2-4dc6-ac95-a008ac09fc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df3b1a05-e8c6-4403-a175-487cbcba81e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4364fe1d-df9a-4d82-a2d3-4660e824a727",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1ede55-e1b9-4c99-80e3-2d271af1ddaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c2913a-4d82-4dd5-89a2-6dd50877b116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0da29c1-a2a5-4b52-a511-0ada34957219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc87732b-19e6-4af6-8687-0605c38fb29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b14ce5-64b8-4138-83b0-925db7522fad",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833c045c-8ac3-4d7f-b436-251680683a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a962b2c-33b0-450a-8465-dcea9017aee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1d4923-1ba4-4168-8d8d-bb18f1e7acc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "783c0ff7-af03-4c46-b8ce-bc4f108ca374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b948691-9937-4823-8f1e-6bbceac0b9ab",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bc8b47-f5be-427d-a63e-9ee3b13aa7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91b4000d-c73a-40f8-b012-7097fedf5f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1d4c89-3a18-417f-9d6b-e9d406dff082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe63fe7c-a646-4a09-a3da-fe655ae32f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a22329-eacb-4035-ba3c-419ac0ba1fba",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cefe1b1-a1ba-407d-a994-b796b0f1bd0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e78a6ae-87d7-43c5-af7a-0b71fcdd585e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ccbb5d-2184-4cd7-986b-eb4473ca5c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2edb3198-7ae2-46ac-b9e2-6b17ca35aa81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ecfcf1-5c85-4e89-8d3f-839f28939962",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834f103b-3d7a-4a19-bd53-d64a98cedfa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e565e933-be1e-4668-91cf-08f08d960f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd409d2d-2b76-4ed8-bcc9-e3e95a96dbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69ef3dda-5709-4592-8481-0a0644d35e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94491e80-6063-4216-9064-697a64c87d2c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9532d56f-cba1-4c83-8ce9-896941726161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96caae8d-c449-411b-89fd-b81ea6ff6b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11c974a-8575-44df-a927-4ce26d80bb72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b589dda0-7259-419d-8988-ce530bb570cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade08929-3113-4b36-81d7-f6725e82635a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62afb7df-9f61-49e3-8e1a-13a98d37da76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0639f1a6-919a-45fb-b558-937724bc9200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1d79c5-c55d-4b87-a55c-f327c23a788a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66e8c79f-3232-46aa-a02f-2467382a76b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5993cfb0-18aa-4f1e-a563-64decb53ab94",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4ea8db-f200-4445-bf5b-9420ed35c552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da5b88d6-accc-403c-96b4-ed20ed52b9f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f064a0b6-c4de-4eb2-8616-e6c0f3c1b391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "adf90c6e-0020-47d9-a0db-61b846df47cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313aed1e-132b-4542-b5e5-060ed1ed2b18",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d49349-86f0-4c71-99ea-46b3ae69e303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "588a37e0-5f59-4c3e-b611-a78536aab92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08bd4c45-120b-47de-bd37-77515d4fdb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4301cdbe-84b5-4c79-b631-42de7f8d493e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d5c29f-c18c-43c1-8b43-3826ddf6a54b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86236400-39d3-4e98-825e-528105050428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1fc73b-73d1-48a8-aee3-38a305545a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213bff5d-1762-4a70-97e9-b217b446fc04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dae42761-9bba-4da2-9583-bbae6254d041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50d9b59-0a5f-4d01-8f78-62a8ec286b94",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee519dd-970e-44e3-9202-55a6ecd21c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fed3b15-8118-45ca-af4c-aba4a43e3e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51fdcb5c-4e09-45c2-9c63-62ce989f7d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "07eccf8e-da57-4b8d-bb03-db41c92cf35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f153a16-d39a-429e-987b-b8c5d506e740",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6bba98-d36b-4c14-b9d9-f677a0b52e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58918b87-bac6-46c6-a95d-dbc021998dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b76a4d-81ec-4cfd-845b-af2c127d74bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6754e41-26b8-414e-a3a7-d903745137b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f117d4a8-e9c9-4bdc-814b-141460a6f705",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b222065e-7940-406e-b182-0d862f015f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68ec610-b943-43ae-85a6-a5871d99324a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7ee37d-98a4-4d5c-a802-409ccdce66d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2fbd652-e108-482b-a5a8-3f27491eae29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33dc0f68-9470-4135-9e36-acefb89aa2f5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f51eaf2-a14b-4eeb-ba66-36248d1e6b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e78b02c-3b91-47fd-9520-4b48fa1b871b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d15b03a-a30d-4ea7-8ea9-2a70b4e3ccf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13f1715a-560e-453a-ad8f-7a986fa6a17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408ba071-3b5b-4938-b404-e2f6b0d239b5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404a5b7f-1668-40a5-a684-4927474e094b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f6e926-d4fb-4b27-8524-351b4556a04a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de7cf31-543c-4e69-b931-4ff2bb0a3c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21f0b104-7477-41c5-aee4-5c257db8aa6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2789a403-a507-4fa9-864b-3434a7c1aa2a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f2f7b7-ca1d-4bc7-97ca-171202164cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859618ad-c297-4c15-b557-70fbe3fa9a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8ce16f-013c-487e-bca2-f814ca089b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "60c6bead-d7b3-46e7-87e4-77c2585e4202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bb2bb3-75b6-4c58-9390-8b83d66d7208",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d6fec9-dd2d-4e88-823b-55aff7aa2187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803aaffe-0945-4911-8932-ced9a3c7fb14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b4a551-810f-45bf-8dd1-60794263cf5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bc2065a-fccd-4996-9d08-31e1a3d8d569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02138ea-c441-4eb8-a367-2bdf009d87d0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee82954f-8a6b-4aeb-989c-80d54a3c042c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e22696-04cd-40e1-a2be-c12d45361bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e7ce6a-8810-475e-9cee-f672018a9075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "77db5b44-ce41-4830-b9bc-09478e0db23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f02df8-249f-4bb0-b71e-4a1f98192427",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b902bdbd-7145-401d-9bdb-f49a92cd74e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7218a2c8-1130-4bb4-950f-2f79d3b28076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff32d336-0568-4405-b7c2-2ba07f2872db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "05d0e5d7-b92d-4c1d-8b23-224723c8c042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9795e82-93eb-407c-9bd4-97f2ab014138",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec2cd85-39b5-475c-835e-d1d1305d638f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "641a04ce-801f-4735-b732-371d992c4ff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c096c68-4fb7-494f-938e-cca2290e60ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a26c0104-2c9b-454b-b043-9da4b428d632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c92450-46fc-47f2-ad7f-f8b408b0c880",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da67a86-9e2f-4069-8c09-df4102a89bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11422a65-39e7-4deb-a94d-838ccbcda07d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ab73bc-48d3-4021-8ee7-057e60f228de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7799cb38-2397-4eac-ac61-2a60a3f8ef13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067fad24-1592-4900-a1cd-6cad920a38e5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d27fe01-7eca-4510-bf6f-fb1a1d3915a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc415d0-31f1-4b4e-b579-04ff4498f8af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992c2317-651f-4ea6-9c48-b30acd64c3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef5845b8-5177-4f38-a6fd-d70acb882596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd6f685-b45e-41db-8f06-c92daba0ff45",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc8d9e6-2b13-43d4-8b0b-0016ebbcf24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8c23013-3a3c-4951-876e-7da4ac398295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732047e8-ca0b-42f3-946b-0f3787247ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "674edf09-15c2-45ca-be52-a4ace7be9a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d64384-34fc-4db5-8cf1-c45223e055fc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c77c109-186b-458d-a699-f1d23959ab36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d79aa85-10c7-4a79-9d22-f501fd4a7d8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0d7c77-ccfb-491e-816c-1c1204767ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9590111d-db6b-4333-86fb-24f57e08627c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ac5d55-f0c8-4cb3-ab99-2bb3f6ea77b4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e0ed7a-be0f-42cf-afc4-72a27912f397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "facd2efe-26af-4138-aaa7-f8975a9d11c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3b48aa-e105-4faf-9a85-14bddc3d97ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d2df987-21ad-4b81-a215-ec5bdff6285e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169447e7-8cd1-465d-9221-17311003ded4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5e0e00-26c3-49f3-a3cb-a5311569eb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86560fc7-3f80-4d6c-9dfc-92d8f7159c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a395dae2-5d59-4929-921a-b55a1763ff5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab90283c-fd69-4b42-a7ce-bdf700b38d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f461c2-97c3-44a4-913d-3234c7c2dfe6",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c41a1be-9eb3-4467-8084-b895091e72d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1b29aa0-5580-478f-870f-136ffedbce2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5affe4e4-8b56-4ca5-8795-daef05a0b348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a36a90c-100f-4d1f-bc1c-503bd97712f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b425aec-0e2c-4ba9-96e9-3329b125a8b6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6baa9971-0c68-4daf-a594-b6ed80eaa699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d03fd5c-5a33-4a9e-a8a8-2c4ac6fbcd7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0114973f-2fb1-4537-8772-6fc94df90708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "10799278-669c-417d-aec3-d56eb9d727c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56a2b08-9383-4053-9938-d5c2c00e1d93",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35470d71-a74a-47bd-b4fe-c4b787584058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97df31f3-a199-4b6a-85b4-513900254e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d893c44-0496-41a6-a8f4-6a461a65d2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b678000-4278-4644-933f-5f98d6aa8992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26debb8-96cb-49d7-b49d-ad5d1373660d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41084e75-6409-42dd-995c-bbdfb50ec5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d680f9-56e8-4b5d-a385-c3b806b6e3b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4234bb34-0659-4571-9294-38e73341c900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "80c2d080-4d44-40f1-9db7-735c8337640d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650468f6-47ea-4150-a8ce-fe4f287a6df9",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec47740-a860-4a99-8970-1a385e761788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be0f7176-909f-41f4-9abc-42d641bbd419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3adc76e1-4d40-418b-9a36-76f25096687a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b03b40-f0df-4c2b-b9ea-28a05b9e6f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a48a2e2-7415-4ebf-ade0-d0c166809c45",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524f8eaa-57ab-41d7-adcf-9f691032663b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d4e6df-dc79-4941-9284-0056b39ae73f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11aacc94-7cd1-4aea-851b-0a0c4d34dc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9d48446-6d57-45a2-ad30-1cdfbe319076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f07272-e54a-4185-becc-574c9f05c0ee",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5c644f-f696-4cf1-8acb-099328d6e018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7914d53-5128-4b72-84ad-4aea1fd8d8b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e427b89-f1e9-4b9d-bc8c-74ecea4c421b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c643f7f9-3054-4889-ab28-f2740ca2bb0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf33228-af18-4315-90aa-e20d645d493e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6e0389-e934-4e5b-bb9a-672a35ab6199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f782e7c-9ac7-4a10-97ea-32364c7909bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f647232d-0cec-4e4d-b02e-3410756864fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "699d7bfd-6ca8-4cee-a08f-db46e30fae0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b44baa-3d74-4948-a1b5-b5d90e537f84",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "321e427a-b5c1-4b07-8237-1aac1e4dae94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade290d5-96d3-4f0e-8764-95ba0e9449ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558605c3-8869-43a4-aab4-d47a047fa6e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9834f600-6fa6-4c79-ae45-e2759b776da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ef48e9-4984-459c-9cf4-2154f35ff1d0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5421808-3410-460f-8a27-7a8a6a1eb663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b35cd1-1070-4915-b920-024ac701bc22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcebb4bb-fb75-4194-91df-c39ead2cd99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0923aa4-6297-459b-8ef6-1dcc520d4c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65addc69-b70b-43bf-8191-effd2606c7e7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add300d1-f92c-46a5-a607-a86e17a7efa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253d2d64-eecd-4e33-af8c-8aea0747bc2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d6ec54-9937-478a-9c96-7ea6d4b9db9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "177cc766-4690-471c-8fb2-c4ef63f1dd5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16319dc-e634-4c92-9f12-b0ffa71f77a7",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac36f81-b44f-4e4b-95b3-f83c9805d15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60041d9-0127-4af1-ba3c-9610a1be4ba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ced4ae-6ea9-4cc0-81f1-3e87476e662a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2be00bdd-8a42-4479-9557-6f88de3cba38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9762d728-b0d8-402d-aef1-628b62b02deb",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bdc9d85-4815-4a87-bc4b-10e5d66d3fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7035bd52-9500-4523-b170-002bd7f02bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be0c697-a087-438b-88ea-fb2449d935cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7417137a-7436-44be-9f00-b82ced1b4d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf9756f-cb03-47eb-bce4-af249be7b52d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cddf9f64-58a2-41d5-b73d-bb2f0b4e5280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c214170-db34-4e14-9801-8a8cd942afa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7769bb6d-d894-4686-88f7-ddf9c679b279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd9bd048-7945-480b-90de-5f47f559eb7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abaec93c-62b9-4ec9-bdfe-dd5f795c0527",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c14bd61-85b3-4f94-99e1-2fddae7d4e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482cb942-0e06-48b5-a764-e0e1f556ea22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b700a4e-3112-4fc8-8d7e-f16c6380c7ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42d6f8f6-520e-4f0a-a5e4-7f67aa7307b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b859c300-b705-4749-9783-886af2916c6f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8ae637-60ca-4b55-8ac8-3ef01b92bbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d90b212-d854-459d-9554-f4daaf3d0c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c12e2b-f478-46c8-a480-7e13ad58560d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "285cab09-7ad1-4a1e-8ab5-f4f8722f3c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636b1c97-9978-4a3c-a1ab-b82bc8ed1b60",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0170dca2-72c2-4960-8d3a-68dcbdd63dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "489eb9b7-c44a-4b62-91a3-0f82e1c48550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98dac3fb-5c99-4677-bd87-d213d92acfab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7dbe035-491b-42d6-8bf4-a3f39f4e1961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74bf5d2c-76cc-451a-aa81-5151f03bac86",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25893581-25f1-4380-bd26-7fff17401c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf957c8d-0864-4fba-818b-40f0ce3c162a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0faf8f-d9d8-4b7b-b0f8-d53da3c3c121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9110d97b-d595-4c5e-96b5-cb626c16705b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ad2085-c20d-4f62-a282-c07c207a775b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5512856e-3056-48a0-81f9-8d444ff1c92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f98a8b-026c-4301-8ed7-a855c8c760a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d46c71-64e9-4b54-9e5b-e3a2cbdcbb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "59d9446f-625e-431c-a2af-1aa3383f5b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd274e5-dcf5-4b75-abab-b97a32e1d144",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887a49d0-c14d-4bf8-89c8-93cccc71623b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945771ec-6451-42e6-aa11-9a2ae77ffac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f3f7b9-fa93-4abb-ab75-6c948b12ae87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "50f83eec-a705-4fe0-b723-4f7377a54a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1e377c-1f97-4214-997e-6801b6bfe233",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d757ad15-251b-4be4-b204-cb129bbe6f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df2b998-922f-46b3-b3fe-1049870df974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9024c6a7-1366-4412-8028-26650d4c337c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4cdac1d5-4a0b-45d9-909d-809bc58447ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10dc8723-4f6d-4a00-ad21-91d656f14039",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4583f2f-9418-4e63-ba6d-d75f3df89b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d867a3-6146-477d-a599-abf220eb321d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2370b84c-f018-4219-b782-b768f1ec95c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f75f7261-ee71-4652-af46-2e78ee1c1cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66302a7b-43ad-4a3d-bd43-7eb981c0a3ec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606125cc-fb57-4b6b-b823-82e3c47327e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3008068b-3d9a-4bd6-bb7f-c05246d74ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290a6ea5-0e90-4f9c-bdf9-d9d4b054300b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b277fb28-8588-410d-81f6-3e8db32daba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17194528-5151-4b53-a5e5-cebcb983cbeb",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b16ef7-dea2-4856-9f5c-c4358282762b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca50c9d8-2fe7-44e5-8ad5-7bf66fc737e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223dad4c-1f11-4c26-b9e8-936509d0bd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "326677a3-5b09-462d-88b1-ca7f3905524b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515e6e0e-3ed6-4570-a192-6faf3875c5a6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed9252b-d3eb-4c46-a504-4c181a3ccfbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01b8a711-7ccd-49f0-81e6-d6599cb7bd09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425adbb4-113d-421f-ae67-734fe202c734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bb1a30e-e5d4-416e-9384-ffc670bc60e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77862628-ac2c-4c28-931b-6131e44ca815",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1918854-f980-406d-b76a-b86fd111f837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97cf4474-7b4c-4e06-8f62-f0857733cf06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9fb481-6084-4572-90da-1aa7ccee088c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "93431b70-41e3-4ebc-97e2-3e2e759cc2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79fd6c62-80e8-4352-9a36-70cbac07bf9b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2f842a-dde6-4cd9-98bf-ab2c81dd11ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de78e330-3dff-4866-b687-922a8cef8b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd052252-2d18-4428-bc2f-4a9862de8533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d1c46c2-110d-472f-ae8d-51a1080bfd6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a311f2c-f69f-48ad-bc72-d3957b44d193",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a629094c-2982-4ce3-b869-19a55bbe45a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55f05a6-d370-41c8-961a-6c9151c2dff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca2fbf4-2abf-4baa-8c8e-6976be84ff94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa687ec-3f23-44cd-8d4e-9ae953fd7098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905ab399-4d64-4076-9f55-03df2142ef36",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ece1133-0398-46e2-8b03-edb5bdae2bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea471ec8-86a9-4d0e-bbbf-5609fd516ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989a89c2-eb7b-4f5b-ae90-59e32f02918e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "018726b1-aaf0-4874-9360-fd4f5970ac28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46496d8-c8ca-42cd-aab3-67521c6d66b7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efeedc36-215b-44b8-9ae6-1a6c02412056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d31295-5008-445d-9dbb-25fe0bd31791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37866c68-9406-4a1d-85b0-a98e9c57e107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c62736df-7ea9-4732-95d5-51476145e345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac839a2-8da6-46f1-85fd-a34c11b3140b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81ea70f-f31c-4417-a4c7-f800208589a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad11b29c-c8cb-4c15-b6ba-2ca3ca366cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b59f6e-0782-4a9f-ac97-b6153258f8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b613b21-33c9-4dac-b464-e51eb21a0365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73edd902-45f5-4399-80d1-82c6f6a2da46",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f166fc8-2f3a-432a-8ce1-ec6267339fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0af156-df66-407b-b92d-818a799c85ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d66cd9-b759-4905-9780-2b68e5459f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b15e006b-b263-4338-99eb-b15fe0262832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9878bb35-f24e-4fc3-bf06-df64b208ec0c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045aab91-79b1-4412-a7fc-b6a6dfc68f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e834b4c7-51b1-4575-89a1-b12e0c747da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7941a92-924f-4f54-aa31-98b76642e9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33c7439c-013f-4fde-9e7b-f9c4842b1da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93704a39-e100-4f56-ba1a-d0b508e11ae6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6dc1a2-1d4f-48cd-86f6-99396ce0495f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6edcb8a9-f2fd-4c09-a41f-0a6441b8b384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5c7274-8e03-4537-9155-cf67c2b778eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e584a13-3c6c-4a65-847f-74b47c8df2b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461915cf-04b3-40ee-95d3-fb728d859804",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb66492-4201-4ba4-8daf-f25e791309dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8413f2d2-6466-4a5f-b872-e9c3b6409330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de7fcd5-e962-471e-8d3c-bbc62f56f9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a433e23c-9cc0-4554-826f-bd11e95e751e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c19c07-f131-413c-a2e6-f5bb9bfcf0b5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a194b1f-d8b9-47f3-b20d-593d7bf05fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ea0e73-e200-4e88-9518-fd884d69291f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f490a099-c436-464b-a1f7-bb9d6e806e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1d16688-d58b-4b0e-8c5b-44f2e1b9fc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0b32e3-51ef-4994-9bc6-5c84f442d9c9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4131c590-8053-4700-95a1-4655648a5fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac2001a6-7540-4b4c-bdd7-2336b967f87d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005d0528-72a8-405c-a499-9fc4f4fb1367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "42aac0cb-2f2b-4e8f-bc17-e1d257ef746f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b56cab6-4551-464f-b1dc-939f050b5447",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edfc4243-8cb0-4256-96d0-b2c6977fac2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b33e0d-e988-497a-856f-7f6e198cd958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc625ebf-aaff-4d16-a7b6-a4bd72a5f2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1b53b2-6f87-4c4b-afb4-d435f78d4884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5c65cd-87da-4c26-b4dc-c6b27bd144a1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9b8ade-07c8-4771-801f-6bd31bf93551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cb5b6b9-c62e-4170-93d6-7b194f592db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c10864-bce6-4598-9a9f-7d048bd31716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5be4d08-26e0-43b7-9fb9-3ea9d78b77a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166c18ce-3ac5-4f77-b0f7-82746452e84e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96987b7f-c339-40a0-bc09-104225a6a05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58864d3-14c6-4b9c-9b9a-1c2095b404f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda4c1bf-7d6c-45fc-91fa-1ad72e1e5783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "adb63ba8-b674-4ccd-b299-7b2562ffaacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1842dbb-3737-425c-ab3c-58bf93bb588c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf92e6c-b9c4-426e-acc5-76c6ada7d100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f29ad6d8-fbca-48d2-9131-4db0c65752dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30358a56-fc27-4062-8180-9105142fe5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ffb3970-143f-40fe-8d81-c0e7886f09c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a46f43-fe9c-40fd-bc9a-56f9bcd15ba2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec52b371-376a-4feb-ad16-92cb3e6a4885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aec2758-ccbe-4b6a-9593-df748d8da101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976462fa-a41a-4a46-9114-a8db50fe05e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67aaf098-0aa8-4ae1-827e-11c4626c369e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62d2b62-850d-4333-b5e0-e96403d7f7d0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40437628-d693-471a-b0d9-59377add40c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c93b2f8-abea-4712-a854-a0050a3c44c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d682369-bb03-4a2d-990b-03a62f8f0708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec37eb45-c5ec-48bf-91e6-8de1b33af67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27e8aaa-dd0d-404c-a3a4-9247d447a837",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceafe727-a82e-48ff-839a-aa68ecebef59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687e21ec-9d6a-4990-b21b-019c46fe0cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf86313b-08c1-488e-9691-645f11daedcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1366448a-9f5f-439c-93bf-8d7c1b504187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37233c99-c216-48c9-8e8a-81cd8c5b7c07",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85eb6473-3050-41d1-88a2-40a5c366f09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba4f57a9-8dd5-429b-ad7b-5705bef28fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f516552-fbdc-4da9-b7d2-838e0ea67a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb38986-de48-43d0-af99-11bd5d54fd49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f88c107-18a1-4402-8249-09675b739b85",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f291bd9-3223-4fa7-b058-d46ad7344b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcff1517-db1f-4b62-a9f1-a2ac9fb5dba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72815ee0-5905-4028-87b6-5a52c1148081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4ac3cc-564f-4f34-b7a5-c8034adc4aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99697954-9215-4955-ba25-e5bd2220151d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16476b4-8489-447d-9797-a161ab9e7d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7658f053-f7b2-4d3a-9675-e269623fbd06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37fdfce1-d7b2-419c-94f8-1b7028772d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0012ecac-e580-4993-834d-3dcb2119694e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d102b3-91a9-4a15-9e1c-86497916babc",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a445ac9a-c1f0-489c-a15a-c3905b4f9231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47225a75-3454-489b-b204-052fee69e17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef6ffb9-4f64-4b19-b789-5a662bc5954d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bca6fb42-5c38-4b65-b17f-b518ff73695f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a4389a-9e6f-48b6-8b9e-b8f7f0d9f0be",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aafa582-4ad2-441a-9232-4ebb7e8ba18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aebdec9a-424d-4736-b52b-7bac7a81e85b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82b65e7-ce70-4dbb-a229-7220e8047d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a10a23-f25b-4403-88e7-98356db83fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e63204-701a-4506-9e9a-53e3600d714a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeae06ba-d9d0-4607-b79e-c53b0670718e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633e610e-a84e-465d-9778-3456c916d550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c36b41-3330-4ac9-bf19-b6156eb71e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d156b8a-c2e3-4218-b4a6-3983cea59b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb7b6d8-c2b5-4985-8492-791eeef5d908",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a10e751-1032-419d-a19f-5a52f5f7bd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c28ec4-4c5b-4ae3-bf63-6c370818b146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2ff4fa-2198-4aa5-a895-6054410404ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5826af12-15aa-478b-b8ca-3f60755e7524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93af1481-cdc6-4ace-861f-78b6cc35f914",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f88e71d-e898-46a4-a1bb-8705546e4027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b66fb31-8ffb-46d1-8283-1e715dc4f3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fce2454-a0ed-4cc3-ab8a-13f528169682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3630720-d4e4-4274-ae7a-e0d405994aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df18b9c3-2204-41a0-8487-c7b089bddb67",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700ea686-0fc0-4a11-8c55-120d67337ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0297bb3e-873a-45bf-bf27-d69fbfa5bfbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf70bcd-a2bc-4b34-861f-7fe40cc02704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3734ec-0cbf-470f-9aa0-ea9bfbd9d7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793e3a8c-1f40-4f34-abd8-7841b1138ff3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db2a78f-4ba3-4c94-9f51-abbacf05760a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a52da206-511a-4e1e-b792-aed72764db4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a57ffbd-6cb4-4d8b-9a0e-c08ae9b59ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "83c0f08e-0ab4-46ee-9e14-9af4c8c2e176"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9c58eb5b-becc-46d8-9c53-87a4fc3fe847",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e6c2428d-5434-4fef-80d7-53bdd3421da9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3393ea2-8ec5-4e1b-b17f-12cbd3f78d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a6c022c-03ef-41af-8a33-74388a1b72c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b144084a-af41-44c5-8fe1-ef2a2ec9ff83",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f639f70-0ec7-431a-a587-a5d08cc35d78"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da22aa8b-055e-4ad8-8a8e-4e274e94fb10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "931d372f-15ce-48da-8bd9-c107ff83349e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a5b8de9-0119-476a-a3a1-8b3fa0b5c184",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3a580db-d282-432a-b3c5-d54f61e56bee"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "11e39b27-fdb5-4825-b76e-75fd1ece07f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a206b40-5de4-4590-acbe-6515cc1e9073"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "13aa69fe-62c6-4f69-8ab7-b8ef40486b88",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e4a4577-1823-4770-b92b-7e82c8565657"
                }
              }
            ]
          },
          {
            "id": "c439825a-9338-4d4a-b137-0485a621d7e5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2e1ddf17-ba58-4500-9155-b58c0629c764",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "771dd6a8-a1b5-4f08-87e2-62e1904e46cd",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9729aa4-ae66-4dd9-b2d5-860d508948e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b656d1f4-73fe-4349-90cc-acab29b36594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531a8d85-bf95-45a7-a0e1-e6da85637d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "056010da-47bf-45e0-a9f1-957e700248f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0eeb5775-4d10-48bd-ae59-91aa52322610",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4344a3ad-059c-4add-8e0b-4fc67ee74b18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc1fe825-d456-4400-85ed-f9d7719cd578"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f785ae3-d4d3-436c-ad96-f4f3789b530a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "26b3f929-7b29-41a6-8f44-631b6d511a8c"
                    }
                  }
                ]
              },
              {
                "id": "5fecde70-a7c9-4f8e-ac45-2d6154c7b50c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92d7d277-c30d-451a-a6dc-c1d180d67c9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3069b111-44c5-48b4-a1c8-d8a5b0e836f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f5844b3-8f2f-4c32-a3c7-1f0fbbb3dbb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "65b2c472-cdd9-40a7-8a17-51f488069d7f"
                    }
                  }
                ]
              },
              {
                "id": "b945f904-a164-4d52-bbac-14138a4c8683",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c45202c-4d7c-462a-8a8b-1f240f583ac5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89dd1bcc-ee37-486d-b27a-017068fc19f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08ef6590-e3f6-4f23-9b6d-297a6961eca9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "785e905f-a929-4313-8f20-8e9ee5b16e30"
                    }
                  }
                ]
              },
              {
                "id": "eec41369-82e7-4550-9085-66e052e63bbf",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49dd71e8-f312-412d-80e3-08b12a926d36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe2e7e32-2af6-40a0-8d9c-3a952b448709"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "960dd8ea-b476-4513-af1e-ff014c1d797a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6a7388c1-b2d9-4b41-b2b0-a59ba35d7ad7"
                    }
                  }
                ]
              },
              {
                "id": "e1ccf2be-3347-49c5-a4b2-ed50cffc8277",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aeca8630-eede-4f8d-82c7-53a86e26c8df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "88ee8a99-4187-4a7c-a734-90448fca9b2b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19a9aa8b-846f-4b47-8412-d3275fd39d28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "59d6286b-2fbf-4deb-8860-45c214f42ef5"
                    }
                  }
                ]
              },
              {
                "id": "d730c56a-f0bb-48db-b9f7-3aca6c514bfd",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91cf6c36-aa07-407f-90f4-b0331428b78c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74e4dbf3-01d9-46dc-933d-16d477359981"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4a3a3a9-d6d1-414f-9739-7b7323c6aa19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "572c41fa-6d74-42b0-9eff-0311acabde11"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e036591a-130e-4689-9830-00cb683d4376",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02a77ca9-d0c3-45ba-aa50-5a91d20ac211"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a44b1df0-e911-4551-a2cd-6f9e30dad657",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0be3b5e4-cfaf-4735-96e5-dcb24adf12c0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7bfd5854-23dd-4d74-baa2-0341ce78ecc4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "118432c7-296a-4d7f-8f99-b8b68507d59a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8acd0a0-735a-457d-9ef9-9a412f68028f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c2dc2787-5c31-46ce-bcb7-f9ced6a44e30"
            }
          }
        ]
      },
      {
        "id": "853d93fe-0cfb-4cd2-9a19-8ecdcfdc13a8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "84cfeac3-c1be-4a8b-aef3-951be5a6105b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5e506c7-5ec2-4e27-9d90-77efb7f378c6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5247800e-a9cd-445c-af08-8e52fdffb22a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b5288f-71b3-4d1a-bf79-5fa47266d3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc14d09-38c7-4222-83ea-d32be20cbaec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e112958-0278-442c-8fc3-4a4cd8549fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae5f648-c130-46a1-9058-bfbdc60ff869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bde3e8-efb8-4ef7-bb2a-67b8eba20f30",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959e919e-4f82-4f59-be6a-b30e5df18d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6939047-8e35-414e-8569-9a498289e530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5603a1ed-ca25-4ec6-abcd-0de099f21258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "87dfde54-901d-467c-861e-a3e66734ca93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43eeaef-931a-4682-9d96-e69f07ca4fba",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "784c16d4-3b66-423e-a033-9e626d1498ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8751689-1abd-49d1-8eba-48342c8cecc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e4444b-7b27-43f6-9721-5b744951889d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c16e874-02c6-4127-9c18-b4cc9a588ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ffae72-d5ae-4fb9-b217-4d30c15bd379",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9441c18b-aed8-4b7d-943b-ae6e278f3fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7850be56-5669-42f5-bd81-3552a500d96d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082ac175-93ce-43a7-94b4-cdd2c927bd85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5781d13b-6ca7-4659-95f1-71da84c1e988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4559ddb-09f0-42d6-bfc2-db90905446f6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5745b0-33b1-405b-aca4-ba790d0585b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304ad18f-fad8-4ce5-92b6-a700de22df0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8928d0ad-a3c1-48ec-bfec-7a9b8cd2d3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c754d31-b257-4864-9e22-15594994e370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa31df13-e5c8-4d62-9334-23fbe37592f9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7088d5d-42c0-4c71-924a-898edd2371f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202d5b5f-7194-43e7-ba9f-f93377745871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cc24da-84d0-44b2-b71b-779f27a4b2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "60c1fcbb-5776-47ec-a278-05f4964a5f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2355b7-1d11-4517-8aa4-e2277fdf400c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6cf515-122b-4418-b90c-d070eee86035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7cf0f3f-36ab-4816-927c-2460228faaab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3458c068-5aca-4d6c-b334-215261010d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "52459330-5a12-4a13-a8cb-05afb745b8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4668f6-b8b0-444f-a43b-4e07923b53b3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34e85dd-7314-4bb1-8f4e-7a576b5d5cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f33af7d-ec58-49a8-99e6-fd215b7faed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec2867f-e240-4a7a-ac41-f1cb07f0020b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25ec9c5d-b1ba-4595-baef-098bd2af8042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d22ba2-cdb3-4ae2-8cc6-ae2e76b6ecbd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921d908a-02df-4fbf-abf7-2807bb87be5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93eed2b-2509-4f93-b67d-2036b3237066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f611a82e-964e-4ad2-ac42-5d3f67663b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "229ec013-900b-483a-9fa8-155fff32b253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29c2f6e-c466-4bae-8009-e99d7b5bd749",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "463157cc-3164-4c5f-9d2b-73f3481518ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c0acb3f-f173-4bfa-98a6-ba73d8926232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0584c7ec-e375-4c93-b128-874e981aae6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "08a21548-0dba-46f8-9a59-b30e12e439e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a98ff5-e29d-461b-8977-6b2bf6a39d0c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ca4afb-27cc-496f-bb50-657e6f25b9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c826a775-be2c-4571-a91d-9b4aa59557ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4918d209-6e17-46b2-a6d1-a836f2d64688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "79ced63e-f86b-4b8e-8429-aa73251f2b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ae1751-ff23-4224-8896-1922f67879d8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a783e72-ecdc-46eb-b926-52c6b9d665c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa6ab59-b75f-411a-9ca6-89a243362651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5268fe1d-b90b-4560-b09f-cf41bb1dd6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef94c30-3286-4e86-b280-70197289eb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968e4aea-2b24-4eb9-ae5f-35e06e38873b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712d103c-c185-4dbb-8fb6-64f651a01ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97fc8f9d-96b3-45f4-a0fb-0cd75086fa62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3286a23-b834-4573-8986-24201723b0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be75e8ae-fc16-46e8-9406-888da81212a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4269aee6-4d95-4b38-8ed9-22f15fa64ca2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010a84cd-1282-4080-bfbb-f76ec3693e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8397653b-66c4-425b-8a82-56411a83f5ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1b59a6-36db-42bc-a9fe-803987bd2042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "eafc3f2b-4346-4270-9f35-4806cbedce5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45bf93d9-56cf-40b8-b84a-fb23c5f88e98",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ccb8ef-718a-44ba-8104-a8a56529c1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ee7d29-5aaa-439b-a486-f47a0d6b71ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616c988b-ab9d-4aef-bf73-f7eaf4d72765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9186fe63-6154-413c-a408-202b236c3d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0df5903-c1d8-4fe7-bf2d-15502ec86652",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7242e515-82b0-4ef2-8018-ff2b099836fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac89be17-be85-4dac-ad13-57a549587e98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec9fd33-f06a-49d9-9f68-1eccdd95e34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ee7c37-50db-4892-b628-08440fe2ca4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f6dd62-f3a0-4437-8d67-e6da241ae1fa",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b4492d-06c8-40a8-90cd-3c027981eb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5dc5ecb-3700-4736-9d96-16eab2fa928a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ea7b23-9992-4ffb-aa06-6320455f398a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "59fbb40f-c240-494c-abf1-b01e3f027949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec15f88-0a7f-48bb-b00b-f450fe605220",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4f8d58-b1b3-49ad-a7d8-e279298076f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c68bc6d-22d6-41ee-838f-873d452d5061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31958f54-d659-4e88-9951-850fbe754354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0fb3fa6-0099-438d-925f-13d0576a0723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac921010-5892-41b5-9e85-efd282084b1c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1867f4-028f-4316-a2a0-288df43c3f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56350eb2-bb9d-4d34-9c53-9375f8c07be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa26a98-d9bc-4828-9f5b-163989784f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef695633-96da-4cd5-ab8c-ebf56ba0ac29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c45bb3-6af5-4bde-a97d-6237894bcb65",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a489866-3b4c-4de3-b4da-db8b033f8827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206be519-4729-42e6-b2e8-a0a978a4a47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca733236-e87b-4850-9e77-4b8b6228c6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0719cb4-a543-4229-ae40-8cd3c93dac87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b52aa67-7329-47bc-a76a-397ed00d6aeb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0392592-f0d9-4e58-8d88-5957e5803126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945c969e-9f41-47f0-ae49-4662463ca691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c9a46e-7af4-44f4-a9d6-e61cd0ddfed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab7726b-a01c-4332-ba1d-5936b09be82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652b5840-9f0d-459e-a73b-2e21065dcf0f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db15862-61db-4078-90dd-6259bc969679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e07f9e-1f3e-44f9-a4bd-f8ca2142165f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd999021-4d29-4350-a7e4-e92c3e59865b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b4cca9e-830c-4df0-b7df-182753d66255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a5ba46-a90e-493f-88b7-689fce1751cb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b773984b-64c7-47f1-865d-1bc05c6a8ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed5e5d0-4723-4a30-8494-4812f6c8fd76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc858408-456d-4227-9be3-f43351059934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd9ac7e0-2109-413c-b607-06fb30ebd0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789260d1-b724-44dc-8585-f22fef1224ca",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0034ba-f553-4cd4-bc86-b006a01115a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82511bdb-be24-4fbd-98ef-4f3090ee801a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafecb50-d95b-47ee-ad7b-3b90315eae77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34a36bf1-8efc-4ede-9de5-2593ea795fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29f419c-b887-40e9-8697-e488146618d1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e91dff-c925-4c77-a831-a9250e43f813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b76424e-3997-4dd9-949c-84aefc31600a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe62824-154f-46f3-a811-f3946a199e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa70a43c-b50d-4072-bd6e-83633a86dc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18bbd5b-63b3-4d40-9a19-956106fe9f37",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713ee6a1-8151-4cb3-a9e7-0d9160432e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1c4ab1-f250-4f80-b351-7479d671eb6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b480de-aecf-47c4-a7e8-fa5852d65fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80871208-8ff4-4a56-999a-daa713b4488d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543543c6-4555-452c-ba45-da5273818b32",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862c8751-090a-44bc-bf0d-4f99d268cac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b14194c-2ba6-46b7-889e-245de26a57a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55613be8-c6bf-4f00-8ad7-8f23567e86dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d1a1ac4-d3de-4b90-b444-e2a67c723c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545d87f4-bb7d-4a6d-b6e9-66019afb4948",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cc9a43-af63-4fa2-a011-8bc175dda77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5262b4d-ccf5-498e-a0ed-230a8604c0ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b018dd2d-e68b-4010-9fba-6cb5dca2d1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b3b208-baac-4f93-933d-cbe2984216bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d3b11b-3bfb-4827-968b-841b1f7ee550",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d56f3f7-a992-44a8-ab3f-a69fe862df12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "620843c7-f6ba-4d75-a69d-4aa1bb71b2d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a6dcc7-973d-45b4-9693-253dcbd512b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d66a32be-2ba0-4053-ab3c-673a2e0fad12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe84983f-9108-4193-bc20-51df54b5e399",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71dc0d9-b68d-4fee-a130-85bb9963cd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b43931f-fce5-4dd0-8c14-1e21f81a58a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d009395-c0b1-44c2-9223-8484dfd236fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0bbdd31-f006-4153-a2b5-19df3988e1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47fe7eeb-3147-48a0-a580-ef2207d66a22",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742e3163-d582-44f7-91a3-7585e462184d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf1a3f9-91b2-418a-b591-0754566df69c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c5f6c5-1cd2-4c82-b703-9e4e93e49d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "455ab619-736c-435e-b316-43eb505615ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a058979-3834-44d7-914f-6e5da051ad7a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a3aa56-2b12-4668-adf7-d560d86b9fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6e31a0b-a38e-4807-9e76-6d1890c1b9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b667f709-2e0e-410b-9028-211f77d2f156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d662d98-0263-4f85-960c-114133cb0eba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "131158dd-97e8-48b7-aeb7-3f24cd3a4284",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4044e51-7bc7-4581-88b1-4bcb8d3e64e8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecaa24b4-d0b3-4529-91f5-fe52c5f53a39",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d3357ce8-25bb-44c1-a0f4-139bcd01ad10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6b5e76-b2ea-4414-8aef-0724584e58ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "926f9080-5e0d-403a-90f4-7edad75c0b07"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c64fa8b7-83a9-489b-824c-9f6a93672c09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b599af18-3821-458b-8bc2-abeea7ab1fd8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2259fc9d-f492-4152-be50-ed576f20b67d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a31db1ae-44f9-446a-8233-0867428e85c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ae84116-1a6b-4f5d-84a1-c934e3edfcc7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "84033395-2ed6-4abf-b0ea-eada660bb981"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c4a0ac0-9cfe-492b-9775-25f2d4de583f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f072709-7756-4c03-896c-3306104d96f7"
            }
          }
        ]
      },
      {
        "id": "3cebeb2a-3fbd-4857-9844-4483495ba570",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "6ec6d601-9e45-4683-a5e8-996c23a764f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec00441b-7431-4439-b7de-432127342510",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "04d7863a-4a52-43df-957b-779466db3fc6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3c371a-cfdf-4358-a1ea-4a92e2e70041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b1dc64-6ad9-425b-93c5-7806a02c9b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bc6419-cbfe-40b4-899c-4fd3e8a95089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c26cf0-67f3-4c96-af6e-b7b7819f7fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9beb0dc8-2313-408e-b887-b6763e4f5ed0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb7e717-598d-4738-bc08-40bc102dff1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe508ed-51c8-4a36-9606-5a13a56f0832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7073a4b-0deb-47ae-8e2f-7c5690619d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd527bf0-db65-4c4e-aa07-1870768fb700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1bad7e4-98db-4f7d-acae-6373e0bc4d06",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d995e3-5c4b-4bf5-b271-75317b4981c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd9ab7c7-447f-4cda-8aaf-f330783aafa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d78f4a-d322-484b-bab2-a0e84d445fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27dd067d-ee6f-4505-bd8a-54d2e0a1ec99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6971dc35-da4c-4a9c-bb8e-78409a123462",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60b0e26-6b3a-49ce-b743-3a62c2df6cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7647c84-1696-471a-871a-690855a6a6c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0ae299-0253-4c30-bd54-48608d6eca58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1003cbf5-c4f2-45ff-bfd3-a9f581f6854c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14fcb5c-7250-40df-95e4-c616d05853a6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd92c2cd-4f0d-4fac-a8dc-e73cc653b4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0257ee44-0a91-4897-bb35-7e267609e66e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786cf279-76bc-4ace-818b-1c36dca8983c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6de0375-c25f-4228-9e02-3d39badadc28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d63807-2d12-4d65-a32a-176bad46585a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa33a2b1-25e8-4d55-a23c-4c869f631fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51340bf2-ba7a-4637-8c64-98fa2561a661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04fde56-e577-464b-a5b8-4bb5434aa37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "67b866d7-aecf-4f2f-8cca-787fbf2c0d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb96e5d-6821-4fd6-b67c-1ac8b024a388",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affa9a24-9702-4574-b8fc-c9371484e8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e76abd7-ac99-4720-95c1-3c6868d43d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ea8952-ad07-4346-9c13-68410fe4c3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "292785a0-3e90-445a-97d7-84fa17dfbd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235b7319-a90c-4f46-a1b3-082d86016443",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558eb673-21a6-4c10-9355-f6334fc7289f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73f8e04-5c0f-4f0d-a908-8544574e6d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502a0bb7-3cdb-4c3e-b80f-aa1f8a5938c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48effbb3-f4ae-4c6c-8dbb-ca2bf784e63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebcbac2-727e-4d0a-9c64-f50ebde6e3e8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ca621e-51b6-4aa6-8af3-e2c9b03f35d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9babad0f-9af0-4a28-9ff1-fc3a95aa6e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901f96a0-6394-409b-a6d8-dafa858b7c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59eed07d-edc7-40e9-8067-88cbe2080e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbff715b-4841-4e6a-883e-1a4f8329170b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37afc85c-e798-46e6-b789-0ea0843ea466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bae7d6b-888b-4728-bdb8-44795e5ac594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2040adf-5d47-4782-bea9-e7cf8cf0161a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bce5c1e8-d8f7-4f61-baaa-933299186b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b5f5ca-f88c-4805-bdbc-d272c439bd0e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42b0fb6-202a-4183-b592-b10bd7672aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4fb3ab1-0b97-4a55-914a-63c140b7dea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796851f3-75e5-4963-a3d5-3238a77469d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "16369b6f-e4ae-477b-9f98-cbce3c436d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27dc5de-df58-431a-845c-c00ca63e381d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbfcfe96-c218-4dec-ae15-b34dc2af1e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b6000e-0770-47b7-8cfa-088549aeaf65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3954a05-f2ec-404e-b5fb-95d410955fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e1ee6dc-5e83-4f88-8e6d-dc21b842d177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b521598-0ae3-4c1c-9ad7-341d2782b403",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c35564-bbb7-4f59-8499-79f199d55cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc49719-42d4-4325-864b-22373be9a5c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17e7485-98b8-41e8-be47-a7b39b29b59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e80e3840-8aeb-4f50-99bb-7716f2eaabde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5b798f-01ae-49cc-b0a3-6a6a1047711f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273bde09-0995-4c51-9c5c-7330e9c8f78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcbfc563-ceaa-4b77-bfce-63d087e43d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0babd523-3d5b-4735-8b2a-4723a68d6cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a4ef8dd-472f-44e6-bbe0-9f222b37f038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d10093-4905-40ba-97a3-97a22ea43ff0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76678de-7116-48bb-bc03-0cd3cb93db65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea36bf0f-f28d-477f-be88-191deb734457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab037351-0a6c-487d-953d-ad7407f090af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e1f7023-db80-4e79-a999-5c6c8282f398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced35b53-29fb-4f63-93be-828a55db247e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03a6956-9649-4cc1-93f0-9af080186eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c177b49-fbfe-43e7-8007-136add77ccb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf38376-86b0-4bff-92e7-b69fb59c8b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f550f7e-6cc7-417f-84c5-1a8b7142c05f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e856fc35-20ff-4da9-aa27-332985592f1f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cb6650-9f19-49f7-8382-2497f8c6c6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef42702e-1c03-4512-9bac-6d4c1f870f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9df7f1-5af4-4025-a4b3-02753a080fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c47a2c3c-9944-4c90-9d70-25a87d9522a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010b15f4-26b1-4e09-8786-142cdb5bbef0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a387ff-5ccd-471a-a0fd-d1ac374d3a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce2ae1b7-6085-400e-91f7-0be8ccc3ac0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acacaa3e-b4ba-4b71-8bc9-c753ed7e6883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec91478f-dcfa-471b-b691-2d6665949098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e5d1fe-b537-4375-ad08-d1f1943b5cbf",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd25138-a134-4e9c-9779-948e069dd4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff42b297-159b-474f-8c7e-a9ee9309a3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b099d0b-554f-4db2-898a-e715f3f14cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c18f6b89-e3ee-4448-9568-fb3e87e2b287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d082f7-7da5-4d5e-b795-12c557df6469",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ce4cd1-c9b5-4b5e-ab2d-53eaf4a30a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e484f8c-fbd6-43a4-b2d7-3972f5075168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7be01d0-1be3-4d2b-a65a-d15699ba3228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77c18359-165d-41c5-a710-7cdd5206797b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673ab2c1-d144-4b66-b269-38bbfb8cb9dc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b3b05b-d9a6-423c-b7b2-d10930125d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d1e3be-7eb0-4a41-9e59-ea5d77278bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a9ee76-e8a8-4561-b4be-784f30fe4171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77c2ca3a-e8de-49c4-a24c-12ee094d7dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b740ddd-d209-41e0-997b-3084a5c9689b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de31c4e2-c44b-4c5f-872a-3f5864f8ed28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1224f18e-333f-4387-8860-1556e40cef45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7acf46-c63e-40fa-8825-9210166de5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75ffcd17-68bb-40a2-8f94-0106ef548cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d88168-d662-48d3-a65c-82f37c3e52c8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a064e247-6e69-4fa2-958e-fad32edddc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cdf4fc0-a722-46b2-b95a-d87177d35b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ed3286-8457-483a-b859-7fa0904e25ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db99935d-b164-4bb0-8488-a2b85577f8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c604fcc8-a6ec-465e-aa5b-fae04efebf16",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67074ce1-8e13-4100-b740-3dda56bcbf87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7911efc-2991-4a0f-a4a9-b18c51499c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ff7442-04eb-404a-b9bc-7b78348c198b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "898f1911-c354-4dac-a4ab-d6a02d80febc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7150a1ee-b1c2-415b-81a1-5c906b8770b4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356da8db-0b29-4e67-9127-ba0d6abd2945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce7258aa-394a-4dad-8682-cfbf50f1134d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a423450-ab86-4293-9b09-c87e6861c86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "325ecd55-d594-43a3-8bd7-7ff449d69edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df8ac4e-8614-4130-a377-352217948e1b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0045eba0-06ba-43be-b3fb-fd991a216d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f2a4d53-4a0f-450e-8a9b-b27708f30cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30dd90e3-b271-4746-a4cf-f0490714e31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6097736f-6aca-4c0d-b6a3-84756df74322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f62a768-280c-4abb-82dd-7bd31db27c1f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6aa159c-3f96-4287-a671-d0489255d8bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1bf68e-cbdd-493c-92f4-eafaca2a04e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8a7efc-9e4a-4a79-9cc6-0b6c05499540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93d6ca0b-63ba-424c-88e1-af551fba4d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c044e5-2ea2-415a-ac91-6d71f5d35eaf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43b537b-e600-4b0a-b11a-9e97afb85139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f45a2ed-add1-4f06-b837-d1318f22609d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6014d795-91ab-4a60-8496-e73b32cf1c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b403e36-9f25-4fa8-a89e-de2f4e5620aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0cc5d2a-64c2-4d05-b6ce-a4794229f225",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d0b2b3-3002-4662-94d8-ca6a69ca969a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e3a09a1-fe67-4bbc-9598-eb585ca6cf81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa69140-d929-4a7e-aa5e-c9068d31f44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c78508e7-8bdb-4914-a2d0-565b1b177a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514517ea-a758-4bee-8e0a-741cbe70f672",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debcd96f-abef-4a1b-8105-fb7c967aa122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1e805a-e1aa-41d9-bce9-7db87156b5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d4dd3c-ea67-4376-aa4c-1d06f236069f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77114d33-4adb-44b2-a8f1-e48160e332ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794d0752-bc89-4355-a2db-377e569b469e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1580617e-fb8d-4e03-8132-33fe7b41a09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "421c3887-31c1-409a-adb8-5e9e1dd61995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b708243f-8064-4e41-b528-fe0764be3240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6dddb05-8668-4b60-8d24-cd700985bd89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993cd3cd-29c2-4a67-8c34-1c6b3e286bef",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c783e4f0-02b1-43b4-b7b6-7bcc8a494bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ec64a8-bc9e-49b3-b1d2-c6aa64aafbcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ef8138-88f2-4210-835c-9447eb2c659e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e32b4a-e00e-4f75-9205-6bd71dcbd2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc4d1b0-4513-412e-a050-900aed49b7f9",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69b22bc-687e-4b7e-9fd1-8894a004e7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ab9f6c-f146-434c-808f-fced6ce7be33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7601618-8ad7-4253-b131-b46d40dea6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01d08ffd-b606-4c30-a98d-56110a98906b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb0a711-0dd5-4a8a-925a-485f86a1a94a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea2f0ff-633e-43cd-889b-9f4acfce80fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3d0bf8-ecd5-4686-b046-4a86eedabb3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cb4a25-9775-4d65-b9e4-256a2eef0baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35414ccc-52c3-4354-bbe5-e66484258157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43525d6-b17a-4273-a56a-303389885b41",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f03d67-dac7-4c89-a7df-9fbcd6ad1d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e83998d-1f18-466a-8121-ebd711ed4bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e5d375-3087-4884-82e2-b1b9d650bbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "827d6988-fadd-4b8e-9b04-0be3bd1ca61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8678eaa-3c5c-4209-8ebc-2931420ae840",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49dac00a-88b0-496f-8312-2ec65152bb56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53dafc95-7605-482f-aea8-39c59e7c7ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ff8436-4929-4372-84ea-e953a642fe8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e48ba8c7-1dd0-4825-b572-aa822de8d409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5536d4bc-2a01-4471-9202-8aaa30baeb0e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7d981d-2fe4-4784-a7dc-ba918a693fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac77dd6-d8be-4df8-ade7-4528187aff00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a97e8d-0a66-4c72-8604-26c913530b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "864eabd9-e92d-4386-a342-012d19fd9a0a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "19b7710a-32e7-4642-b2a6-1a4c49b26127",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8da77e0-b11a-4c52-8de7-19e13902cf96",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe99735-a9b5-4c85-859b-73e9b1d0f7ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1aa704-897a-42e9-affe-0a514f7f4a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3238a0-fcff-426e-95cf-28ea0780162c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ee03bfb-0781-4de7-a9b8-fbd95542c998"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb5f0329-518c-4615-93b1-02ce51787595",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e0be955-1398-4ab1-92a0-0af4475e3b18"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "317ce810-587f-4dc7-907b-f28a6538c7e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2904c538-3a4d-46c5-8fa3-b63bc6d16802"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "23c48118-0f26-4f76-a675-9b0a979961e9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b181a4e6-2e0d-4b0b-8b92-44dc5c5ce38c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f95dc363-e02a-41d4-8815-a117210c4cb2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a822d883-5868-42ef-afcf-9839fcad9ce4"
            }
          }
        ]
      },
      {
        "id": "01ed6d36-817e-4183-8cf9-fd15b3dffdc7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "81d587e7-e6ec-4f23-920c-468484932a87",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e8b6c3d-ad7e-42a9-93d1-e19ef957ef1b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eb1555a9-c97d-4d69-8b23-fc1766b7a140",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec2bdd5-63e6-49b8-9ba3-8b3120cfad78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1fdd4f1-c8d7-49ca-824a-daff711f1fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a5de68-b05f-4874-9596-d5fa81d1c4ea",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35de0e13-9923-42b5-b18b-4283112f8229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd225fe-1a05-4dc7-ab79-c12a866a4ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db7b5ad-2bb7-480e-a343-5f8771f85c08",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98fb9e6-7acf-4e96-9160-2fda44a47dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b15afd-7b94-4164-a60d-c671c90d21b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0414e368-8a90-43f2-9943-7544f14296f0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc5e0b6-0600-4338-91ac-b290f9f3acd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0a8b3a-72fd-4bc4-b716-2e383d6d106e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbdf5d7-dd6d-445d-a7b4-a8b9ccda798d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb89248-6ac9-4bb5-9129-114e88c251cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c1135d-ac8b-435f-a719-c26c4391a637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ae3eeb-041f-4db5-83a0-600645f2745c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ee8d48-e956-41da-8087-e609a90e7b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3d65e9-44c6-421a-b34a-fb37ae7e045c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa79250-93f2-4d58-8d02-3a669abcfc3f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00cbe02-4b5d-422e-b751-64958972b449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c245ab5-5a98-4418-ae7e-7cab245b3697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a89773-955e-423a-af81-849b98e1ef47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b09affa-7600-4dd9-9da0-c758887832da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779c04b8-d6c0-414e-baa0-37357d92d16b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ea8635-a2e2-4d51-8ad8-70c0c8f28b82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "131d071f-81d7-423b-b0cd-370c205ffbd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81185464-d666-4895-900e-50c5473509b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69340278-d705-4035-bb27-a24d5b5f5642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d352a1a-e152-4e01-b023-c5c7f96a9e17",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c9b32f-3666-4a5c-a251-57d51036d04c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bb580fd-f156-4031-9a7d-f873917d6fb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6619514a-17b3-408b-868f-3ce24b55a485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f5a704-6b23-4029-bbd4-faf8cef32373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f30817-a8d3-4f5d-b87e-37cb86e07754",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad230e2e-7d26-45cb-9f9f-f35533573709",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d67454ac-1723-41a1-a536-b55dc3d48f03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "653d344d-22b9-4b07-846e-2a0623c16eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b8b5d6-56ca-490a-a6b8-091cf4052392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d76dee-aa10-4237-8ec6-b91fb9174482",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163a1217-0965-477c-9a8c-d53509e09340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39941342-0c8f-4b94-a100-76a0705def82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82400537-155a-4fd7-b7c3-f04823f461d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "541c2225-bde7-4315-8baa-643f91ef9207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d414002c-6b0b-4892-b15a-52885e1e471b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d1c854-b3af-4157-a8f8-20f3e3a429c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9eb4b78-bc3c-40a7-95c2-88200ea7ce32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f187c7ec-cd81-4676-9dc7-a9b010b119a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "941f9b64-0b12-4c0c-a594-8760b35e0374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a00659-5855-4d9c-bdb7-1a5635c2e5bf",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda4e902-552e-4b90-b3a4-d23f6af0c5b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24b93a73-d41f-4e69-945f-f09eae5ac65c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea4eaa4-aca5-41ff-a5bd-b5098352fbbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b030ddc-9d18-47ba-8154-6bbaef251b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6745b6-9966-453b-bb4b-8a6752b88629",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8b92b7-21a5-4343-ac58-44bdf243ae05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e62826d-26ff-4f09-80d7-25a7d03ffedf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ba7b9b-6bd9-4414-95c2-c1cdf8618a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d47660-6242-49af-8ea6-03ef2101fb44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120e3604-3464-459c-8754-ba656f2262b3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8942f422-2846-493f-a346-39a11f7414f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e31026b-380b-4553-b283-9fbb406ad626"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9a8e19-aad5-4b18-9727-ce02ddc1b550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b598387-0c00-439e-81ee-e36101b97a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457c4c6e-77f5-41a0-b7b5-4e3e3ced525d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3fd3f8-92ec-450d-9b83-b4174b8e2b98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc8978e9-5e92-427a-b869-3f3077367e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e929d8c4-7305-489a-938c-a8edf9e14af1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be5e4f63-1f4d-46a7-a957-8a4006184688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6072f5b-c4d2-4898-b44e-c36635031b34",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42431966-fab7-481d-94e0-d2a4891eb419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71e2121-01fb-4843-a01e-8b5d7b7fe4c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89357a21-7c8d-411c-9cff-034d61d4e20f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6105139-5518-4d4d-ba60-1d990b0e8b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4e3bce-bf90-4318-874a-c8b5b73e9c27",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b921e6d5-ca60-431e-a7db-62c203348613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "062f32f0-0501-4897-a74b-597edf799cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05efab76-def4-4060-97dd-d0a1d6a6d102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcbf34f4-c22c-4209-b04e-8c4c18a454e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d4e2b4-7402-439b-8c62-bfa531064d23",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d4df8e-9043-4415-8c06-6a029dbf5e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9afb9bb5-dd12-445e-bc73-e4ba8f4006f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8849812-76be-4229-8137-a71748a7f8a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44cf012-c11f-45de-8249-328bd5cc8b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e40185-6955-44d0-a60c-17f975608565",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c438d3d-08de-404d-b83e-2deaa28ee8e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a0b44e-a63a-41be-94be-484a92c3349a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e75dc94-9586-4a31-b507-d52886f79ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0945ca10-5f41-4927-9eda-266a4cab3f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5649041c-0166-49e9-9c5e-a9920ba4192e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d12c08-8c4b-4a57-9271-894f8aa5de7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e75ef93-d02f-4802-aa65-6613044b88e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4486b1-9ff9-453e-ad3f-b78256fcf384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662d3f8e-a53b-494d-88d1-2ebc969bc9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f13e78b3-a200-49d1-9217-22f9da6009f4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6aed7f-3602-4031-ab02-373796f63076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a55be2-6651-4605-bf3f-82671ab3ce89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e39d13-cc90-42f7-9fbf-31136787e754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a565219a-ad3d-4664-946b-89bb22dd724d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b2c713-9eab-40a0-9436-dc091a3955e7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523f2a55-f9a1-4fc3-9c12-b38c99c8617b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12332b74-dd82-4108-ae89-41e44b7f537f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a63af8b-73a8-4997-ade9-b213032b8f79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4856f061-16cb-4519-bd75-d80fbedbaaff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51e4cdd-34ee-463c-8238-21fa272d4c77",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2688fe99-b064-4fb8-bbaa-97f65459e288",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ccfb13d-d51a-4790-9453-405889644e26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "379f49fd-a581-4bf0-9e61-3d982533ef4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ddeee99-4029-4ad4-8163-3b0e1d56a317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b99bee-58d7-430f-859d-ea417c5948c3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae55f04-6954-4933-935a-5307159bfbb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffc80fd5-b4b6-47fe-903b-12ac044fd4b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db18174-051a-4e92-8715-1b151e170f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac596fef-839c-4236-b021-406eec95e137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84cd3cee-ac1c-499a-af5e-9c2c7094a6db",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35da6f3-f3f9-4859-9fba-c63744096a75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a33874b9-1260-45ff-bd5c-8d6f79bcfc72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49d0347-0b04-41f5-b3f0-7ccfc2c9fc44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da0e7c4-2acb-4c20-ba4f-6ab12fcf7b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e006b8d1-a35a-4547-bb9d-bb158ff3923b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdabec8e-c9b5-41b8-9c13-3eac0783fe00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8acd0c3-f950-453d-8b66-7b43402e3bad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3521e442-ef53-45c4-adc6-c768f259bd51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e9f7c2-4ed4-4106-a5cc-d54c8bd0c1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044f0943-6d5c-4e33-a001-f6fe25fd5be9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035639e7-bac8-4540-8668-a7a9dc156776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b209c1-6f72-48af-a70a-2fd33cf9ac88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a09029-274a-4798-af4b-e8da05b9ae03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf24c99a-7ed2-4373-a922-ddadd5116ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756a1469-d7e2-49f6-a2e5-c4863e2a73ec",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297327a2-3bb1-4ee1-aebf-7ed4a9c7aa09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d27c98cf-3521-4912-8d34-247d6b54c50b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa9d7af-5b49-4e54-820c-d1446e05a3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6756103c-8eea-4fb3-a16d-4d9b350fbbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b8d2c4-f5b0-4904-bb7b-f621e8dcbf2f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9f5b8f-faa7-4547-848b-25d2b8e11593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5743c354-a23d-46a1-86ba-8e5084e33cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46984c3d-f60a-4763-b27f-41e634de3d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1da4a1-db7a-4988-875a-efd83ba3d288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7182fb-4aa5-4e3d-934c-122a393de05e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28814a1f-500a-43c6-85bc-6e16fe53e827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a79991f8-7b66-4571-b36a-4c86e5e3531b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c22830f-7094-4aae-9c3e-ed7683e195b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93016d89-4875-4c0c-a1aa-c7a0c00a7fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3fd3e5-cf40-45c9-bbb0-614f3649b8be",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929e86b0-14d5-427a-b728-cc7d4ab231a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2217ced-d888-435b-b894-ae48479a11b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f8f4d8-eb93-4020-b959-88a5ec4ab075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fbd6b0a-f795-460b-9bac-4d5b1caf29a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9538437e-1bbc-4760-9e41-299fc51b0eca",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17c8aa4-f66d-4d8e-a9f8-4fda97d68bf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2dd3651-7d35-453e-a5d1-c1f82478d832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d53d92-c4ad-4477-9703-a7f0b8f5e859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe16a71-82b3-4b08-8a07-646390c48dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280bb073-79f0-43d7-8c5d-98aa15e87e2b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401926bb-3b79-482b-9d70-4461a2f93591",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78bae2a4-449b-4976-90c2-03114489667d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65277eeb-6b60-46a8-9565-cdcca0635372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a977554-44f2-48b3-a3c6-8fe1f06870b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c9a785-aa9e-417f-ac2c-6258ecb277ea",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5294cb-1a20-4086-a836-8579d07537ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2b66ab-e24d-432d-bbf2-a676c493091c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4b8c93-5428-4db1-be09-450a37f5a851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95c1c0a-6d4c-49de-a232-0f2e4737ece3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea66ba9-68bc-438d-87b9-48fc0dd561c0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f8f6b4-b118-489b-9fd1-f4e4e87af6d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5028359e-4d66-4b83-b61c-896cb6c1968a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78baf33-696e-45a0-81f0-e4a7a0c5aafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd2242ee-ccd1-49a2-b639-71810ed294c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a82be6-fa96-4dd8-8904-66b4286d86fa",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9847ba-206a-4ada-8dfe-38ad5283828d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb65fa8e-febe-419f-8a16-6e9a8fafa066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f4143a-1188-447f-b11d-4a88d6de2ade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d555dfa-78a6-42ce-afc0-48d5f654033f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2a3398-c36e-48b0-ac35-2fd20a7ff5ee",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bb6767-12d9-4410-8338-2afc81e6503b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfa634ce-b8e2-41b8-91ed-c0c952f83569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f099aea1-e429-48f1-b1bd-993c0f3ed8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc2ccf0-61a5-491d-85a0-e4d7e89680c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f06737-700c-4a96-b307-ee2c88f6bc35",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c362ca1-7d21-4f0d-a47f-493fe544a67c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8928e802-ed05-406f-982d-6a7b08181fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2235bdfa-34d0-4202-9832-7f93c81c8de4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a3fcfa-8e71-49b9-b1cd-6a1b14cf6260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21374411-b9a9-40db-ba0f-9b9175ce3094",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851a7af0-0a5c-46ec-972e-46ca0dc2e7ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501f2174-1caf-414f-82f0-1c5f01d31384"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0bddad8-8059-48ba-92d9-014fb607a192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbfeb21-84bc-4967-8762-6125f52f58ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2266ca9d-ab3a-4bd8-9e68-4b20b0ce56e9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbda49c-938c-4b9b-ae84-e0c1215e79be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83824690-4d72-4965-9d68-3d7e9a131d0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5261d09e-79f8-4c71-9395-05a97736a9a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f72a8bf-98c3-43c9-838f-7664213b2bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960437f6-e18c-4b82-b984-ea71a4cc0e6d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a149fde0-3436-43fc-ab92-4ee4404c517c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc66e431-0780-4aec-958e-0b415c4174d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b411bea1-15be-4d18-b7ad-ce2c31ab3936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9d2c1e-971a-483e-aea1-acd6c1e2b8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305a40e4-16e9-49c2-b41d-507be03f1c87",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca419286-b96e-479d-b1b9-0bda99de63ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9320d5f-3e08-42ca-bc59-d1bc1edafc83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "770ed103-a3e0-4a83-8f7d-f1a4e8a302ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1f50dad-0370-4ddf-8f2f-daf9c6326d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd9b139-b9a0-4f9d-9074-01fa540936e9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a025c50-1951-4265-97a1-f749067fc013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a88e4779-1aeb-47d8-8e24-52a603bd8ade"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fd2525-fc1e-4069-8fa0-d0bdb6ae513b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acfce903-9ed4-40ab-a186-5679e8dc5142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d521aef7-98f4-48b5-b99e-013fc7747dfa",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562df4dc-eb9e-4528-94d4-5364dfdbdab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c52afb7-c3b4-4a12-b3c2-3859d6f9e3c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90d983c-7327-4d87-841e-90b646de62bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2738b4a4-c4f5-42a7-b53d-d669eeb38541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1dcd65-e5ac-4e22-beab-17ce1030c052",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db167bde-44a7-4c85-ae16-bc1a5e35d7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5052cc19-6472-4762-8b75-595bd1c04e19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e487820-d8cd-4198-b661-0bd1715f20e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1eee96-eea2-44d8-a94b-1a9f30b24c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7e9b41-1de5-49f9-b411-2b98a1a2b6fc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d83d89-a1f2-4a7e-b652-0f4cca8909b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04efc772-c14b-45db-b6b2-df0189a76279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fc8ecb-0477-428c-8704-8de9da38d760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71ff9e6-85bb-424b-a352-f4311b7e53b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a74b102-de44-40fe-8942-7a8aa2dcc77b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bb0d23-f4b0-4e4a-ad01-077223c09f11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00728e62-fa8c-4a70-8487-c0f58aca7ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd529c32-ca45-4771-9242-ef1617d45444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb16b2c2-f577-4d5f-b72e-43c7683d0725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6780c946-2c7d-4fac-a0b2-0fe40911035c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ff628e-5059-45ef-b8cf-72079416d67b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53aa698d-8e3d-499c-9eba-10a2b41b49ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05b4d62-e4c4-42d9-bac3-5a8b45bbcf17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d6b1a0-1c54-4842-83ae-41924b153690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0761e750-d985-4ffc-989a-ae3d57ac3d24",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8aa619e-d8ec-4e22-8f17-2074b9d34494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f723e6f-ea4e-4824-999d-e8eae726b2f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73ba306-4b68-4a10-8747-654412408e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b074eb-4672-4d28-a83c-6c191eb8fe2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512f4a94-dc38-49cd-859e-d05899a8e510",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d215e12c-3af9-4318-9080-5011912a7d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e0b3ec-d121-4f74-acd1-e2ac0d76909c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fad6d3-e853-41c9-83f9-48d6135795a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c4fd98-cf03-4a90-be64-268a8d8a83d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e19a646-17fa-4dac-b8a7-b1f1b8a32215",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28653f30-3655-4260-90ff-27ee702f54b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945d6c4f-c8ed-4e15-842b-f7089471f5ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cfb0a8-376d-4ce4-9424-cd5bd2360d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49222d3-ec4a-4cc0-91c4-2edc53fad428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891ecd64-da1f-41f3-9a05-a4f724473e7e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f992e9-5f8d-4bb6-acf5-f4bac8936e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea69a56-c535-4595-9976-412e278198be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25407b86-78db-4293-ba80-ae0d7257947b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6f0244-5492-4d36-93bd-522f2372bb2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c029085f-e3b3-4170-8f0a-6fc44e23d987",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf35ec0-cbdf-4938-887d-3018baa7a9ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b63e294-4005-4bc2-91b3-5c0a65adb770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76400ee8-2334-4c05-a6d4-2689904ee403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7b5f97-a03c-4556-a8b6-18704f7b8a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270ab7d2-f4f3-48e3-8535-9a79d735bbbe",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2097ee-46b6-4384-869c-5e31bc1b5ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7afbb41b-dffb-4352-9a89-e8b7508df759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1404b3ee-7d60-4176-a636-d3c6dc8f256e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348458bb-138e-4f0f-82ac-d1c3bb916a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26eb84e7-5129-4472-b03c-a4b89baae735",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472fb848-9bd6-4fb5-88a0-de1a0c7dbc77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aed27ad-2dfb-4af2-9c72-bfb661b3cb45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf625f6-a2b6-44d1-a606-508bbf24ce77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d752b9c4-1f81-44c7-bc9a-a65c240b8bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a43dd1a-b50a-4c24-a26a-a3c8e705e1d5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9d883a-af6f-45b7-897c-174b8690a903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abfec08e-3ebb-4b6a-afc4-f7512351fdfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb3cf01-dbc7-416e-a230-3c71e685f2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "722bff03-6b82-47f7-a953-6a754b866bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e759a8-7d44-40df-927f-63889aae3339",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99e2e95-70ae-426f-9942-9b929a121f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed039d12-5bdb-4f04-a09f-311239fce9a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8cab0d7-1caa-4c7b-a2b9-72b9d4b96e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb2795c-0c4f-4e9a-b674-e7107c3553d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294004f3-3ab7-4baf-b847-e9b58b2dc45e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0c4c35-3966-42ba-8061-1bc771b7d134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2539c89e-7d86-4324-be22-678950e60e60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "def9a4cc-8776-4532-82ec-200c872ce9eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a453442f-5b2b-4b6f-b1bb-a1fd87afc2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f4e7a6-6580-4c7d-9e4f-bbd8d956d148",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cccfd21-c7c6-4680-9c5e-46d5bdf9ade0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc73515-92f2-44e8-b6ee-8fcbc1c3406e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce81f25-ac11-4c44-98d2-ce361542728c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6240483-ffad-4867-bb6c-63128839fed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2286194c-1f79-47a9-8809-f715958edb4f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333eb984-92b3-407c-8cb7-4d8c6fdeb08a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42748dbc-867e-4c26-8ebf-49c01dfff3c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c958d967-d303-4e86-bd00-2046df5bf11e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31468a8e-6274-4589-86bc-7370c91b8d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5eeb34e-e3f9-4f1a-960a-94c99dee5024",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a34f52-b67b-4b21-a29d-027eecbbcd24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162fb0ea-45bc-4ac8-ae61-c82429857479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24add2c9-e30b-45d9-937e-233e13cec613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3755bd57-6e2e-4410-a9db-597fc3d8f803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7088d21-03f6-4078-a3a1-38cdde7c5366",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79a8f63-881f-4840-8b43-f5067d02de40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0caeff94-36a5-46ee-82f6-b946274a2ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c5660f-23d3-40d5-ab9c-1c0038d0c8d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "450019c9-1dc6-4fa0-9301-f38d758415a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daecfc06-a421-4ae0-93ab-2a0effaa707e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90abaad7-c9e9-4dbe-b199-e5637246e0f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a13b07b-ebc1-4bd4-9f36-48c14ca2daf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5180df-1086-4838-a1b6-6862ef938294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffdbdbcd-104c-49a7-b0d0-29d63c599346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db24ca96-a0a8-4e30-8ed6-88e9b7497af8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "decee387-598a-4d2d-811c-6aa9fd6e78e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "071d590a-ba5f-467a-937c-9545fbaf5339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "731c9f0f-550d-445e-a069-c477dac16078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9882ce6a-d1df-423a-8d09-e6dc05f66a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70dd7c2-d1fa-4059-abbc-06be22d297f7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d35e756-ece8-4ce9-8607-b0b026c02363",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6f97a84-1473-4232-aaad-3d92e5c43528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5007834-672b-4553-bb24-7d93112eabfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651c336a-10f5-4da7-9ef7-25f6f573681d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e49f62b-9849-4809-a4b3-d0c809ebcced",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191d173b-0643-4844-9b68-ce31232483e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43886480-e463-431a-88c7-bbca297b89cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95af6888-1992-494a-8d1f-dddcd0e9801b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69cbab9f-af4a-40dd-af74-62d10b6dca8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6264d5da-85c3-4ba0-82d0-87e4ca8a6d54",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf126485-65e9-4c5d-ba20-142b9c17ef92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "341bb837-8069-4c91-8133-5d6bcadf0c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "810ece90-4c19-480c-87c3-323f7e8ba915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8e6358-e392-4371-8a45-7a6d2d071509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3306fde2-f6c1-4114-88b5-1951899408ec",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728a8d68-17ba-4ff4-bb49-dc2a4b9bec94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aab72f53-d45b-4a1e-ad0e-f76c95af7c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8f8308-f268-4a91-8fee-bfea5a2d78df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc869a6-06d9-4bbe-a300-6b212f495e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1819bd3-f1ca-48ac-a10d-01a04767272f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2957020c-257b-4044-a326-c4a3151ee786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d14cc1a-77c0-478d-9e2e-8cfac43b38b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1e4567-b8ac-4aeb-8a3a-158572c30776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c806b09-3a91-4c00-9d94-7429e0555503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20ea73d-7c59-4134-8c85-972164990d45",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3e42e2-69b1-4c1f-92f6-2a515f845dad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c25d7d5-f13a-4f7f-8316-e5b8a6addea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d876ecb8-a4fa-4496-8950-9abfb73e03c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c45d776-7fce-40c9-849b-b98377ea240b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a16c71-8712-42cb-b98d-4964f43325f4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbfedb7-0443-4066-ac68-8dd51fc75ae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44c579d3-4432-49c8-b303-58affbb80060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67ff076-3ca7-412b-af65-0bffe80728e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "258e6a3c-a2d2-4b07-95a5-c6e1381f71a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8bdeb3-251b-4fd8-9232-90211150fda4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b31ba2-921e-4b78-a420-7b6ca1babaee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a558416-b2ac-496e-8694-290e39e9784c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3ea5c0-df17-4219-9130-0b9578af299c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40623da9-861a-4709-8a63-9a3c744ea65e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3571c33-beab-4b59-a395-cfb1a3462789",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed9b447-69b8-4516-a7be-eedf9b9f3e8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0edee3f9-53c1-4f2f-a2df-310c6d3a1740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125ae73c-1c6c-4f60-8fa9-8089cfeebc52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90627186-9ec0-4315-ab12-2bd88d0fc205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50eba14c-06fc-4dcf-8b27-f7bf136244e1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01f718b-a332-4764-b84b-b16fa8ceabb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "378e0bbb-f8db-421a-b56b-7aff4c343545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3871b943-fd29-4d95-a2be-b708279e413d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a859c1-7e8e-4463-9faa-1cbd581e5b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593c30e3-8317-4c91-9aec-db45a73f9b21",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831275ac-5531-427e-844c-6bce5ab7861d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a73c954c-0bce-4a23-a04d-3624d1872ed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4275eb-3731-4c30-9429-935c000e54c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15332176-0aaa-45e1-8e58-5375b5e6c303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0aae592-1abc-4ebb-8740-5211ab2c6fd4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b45473-5f8c-4996-9593-846d85f7a586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9436fae1-2736-4aee-a2d1-65258232a2b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ae98a4-81a5-4295-978f-0868bfe81ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54512b3-db22-4e75-84a1-248f0aa89c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc8c261-11f8-400c-9ba8-202720a223c8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c28c2e4-1edf-4181-aa29-ab72e85860c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2977957b-2fc1-40f9-9265-f88ec3f3f23c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d417cd3b-fcb8-41e0-b3bf-4eb932ef68b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad7f01b0-4c25-459f-8879-6bc47dab42bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0c99c9-f1c5-42d0-bb2c-f4407f0c27df",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ead7f04-b463-419c-b5b5-f9e6a085405a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec3c1c86-204c-4c8a-9763-f9e858b68789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7d1358-8d6d-4a7b-af2e-49cde4f05894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d41239ba-98a9-4b4b-81ae-a11b24c2c8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c575e8-65f0-440e-b940-cbf595e41043",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3a9152-2536-49c6-abf1-a33aa0efbe22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66d27c85-3cf3-4d0c-97d9-8eb17f2154a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc66648-bcf4-45ce-9569-25652ff75d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef86801-48c9-4381-907a-ef1a08024eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25229ab-2060-4f4f-b250-70f963356aa9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5635bc54-710d-498d-a3ed-1181eb42700a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "862f0a2c-431a-42ea-be52-64f779f70909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "136020e0-a2bf-4d9e-93b6-0011b150e3ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91aa9f6c-aede-4bb8-89c7-4ed95170e79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ba303d-ae9a-46f7-b037-130fbb78e669",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be8e42b-275b-4bcc-bf05-ce0f5211bc4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "763c2a41-6aba-4c11-8d80-e658c04bdbe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8fb1d50-0936-4ba0-a2e7-f457464cef9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b18fe5f-5b98-44d9-a40a-302847bd115b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38491602-d246-4ce1-8ec3-cface6e2bb20",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb1f784-77ea-4f93-8b4a-ef0469abd799",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83bff429-e4fe-41cf-97d6-db3372a7149a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c9b0a8-417b-437a-b3b7-69650604fd27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d671f1-76eb-4c97-90fa-9f27d42e578e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7de272-906a-4063-b889-8f6cefcdbb34",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e612ea7b-a7e3-41ed-aacb-7922d0a2da25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "359b7e7f-3f4f-4cff-92e5-bb6073ac6b29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ef93c1-7b41-49f3-bfd3-17cc98051e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df7d052-f622-4988-908c-c04f5d8a80f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a81273-9e09-4b90-8e3d-bec360b4954a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4e3be2-987c-4689-b692-a6f97564e991",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "193c2ec5-d5ac-41ff-af3c-a5d894195ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66567e75-1ebb-427f-8c0c-256164abfac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5d001f8-ea6e-47a0-99de-399f8453ed0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce597e6-be50-43d5-b0b4-9ff3e7a89f03",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fd0dd5-428c-407d-be36-e70d73b77065",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2961f8f3-1780-4102-873c-39e22a2fc5d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02855f1e-f300-44d8-ab40-f0a035dc95ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54accadb-3566-4e2a-bef3-4c2356fba502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f52fb11-a878-4b54-8ce4-12bf48c789c5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7382d92a-fbf6-451d-bc12-5ef09e81fb1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a31ab2a4-0694-4186-8f5e-1e75a0b63706"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5746cfbf-b3aa-4387-8503-7b67d61a4960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1599929d-d248-43a8-adf7-8996ff216e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4722dab-d273-4cbe-a794-da2d860582e0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e7d593-a23a-48f5-b022-fa9496dd9163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f7a28da-9f1a-4439-a03b-9bfad661a161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbceb957-ad46-45a5-97be-b9009b1da813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "411d6b40-42d2-4f7e-886e-df5b4d155266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b7c6a7-fbc0-4e3b-a2fe-ebdf4edcbe7e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e735b4c5-f4f1-4143-8aba-921ed9f7c046",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3468f589-b153-47bf-99cd-3b448d09ef5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34898e66-1913-4ced-9aa8-9c617db181ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6444c1c7-17ec-46c0-821d-1fb9fba2137d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab8817e-99f5-4b9b-b011-d6b8962aad79",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0126d36-757a-4181-8355-5159607e89fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db4ad4a6-9afe-4e95-962b-a795e96b40ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "915ecdf2-e271-4e99-9f7d-8053ea5280c4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22944936-184c-4578-bb6b-6fdd082c36b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0678e35-1092-4b8f-84d5-d578f006984e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d262b2c1-8c86-4929-9632-f02d8c3cae6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "223a8ce2-ce02-4e08-ac8a-22ba10a6d1cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b00257-9221-4f83-a920-bd7fa59bcc1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc2ee7a7-a23c-4122-898f-d15037564ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f6e545-93c6-47a3-906d-336b9701d1e3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e903d417-3ef5-4b7d-b710-8263a2bdfc64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae6aa690-512b-4983-902a-377a209efa23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4262c0-f96c-43e1-bffb-9551f802dad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b01bde3c-e49f-4740-b6ab-f57aacf4ba99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58eeb6d9-ad1d-47ef-a148-fe1fbf7575de",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4ac1a6-56c3-4cd8-915d-876b7b102ce6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcbbc8e5-3555-491e-b5ff-2234e7629eb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efba13fd-ad67-46b6-b7bc-f4f739978f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd38b266-b199-4197-8390-48aa8a9c2659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78b7363-3faf-41b0-97f1-3ab369d0d046",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaaf2539-c978-43eb-82eb-7b55d650bbe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3712740-d3e7-4ade-865f-7062c10ab374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1ac26a-75f4-45c5-bc93-c071cc6e7e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9aaebc6-5188-4a62-9280-0d32d110b6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4915eab8-a190-4440-b2fd-c3181feaabe2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719b18b7-4a97-4378-88af-f158ca7176af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0a593e5-e76e-4767-9a84-da731fc3ca4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb63fd7d-c4ab-4dd0-9048-f86998bf48f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c188f2a5-5382-48b9-89a1-2a6a9560bc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6edac9f-bc19-4cb9-a747-f620aa53ae62",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f8c4cd-092b-4f46-aa7f-df8477655e04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1a6428f-10cb-4b54-a5e7-b84ec74a52e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa00b79-9ea6-484e-a0a2-d2f6d69515e1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b5de93f-a029-4b6c-9e37-39f7d2bb1236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b780f8-e577-4e08-93fd-7aa9a7e0dfef",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db5a5b2-57f6-4e7e-9fc5-506565a6240b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f43d1ea-4a3d-4370-8e5c-336b397e02cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2465139-7926-4d21-8d58-79e9a7a9e04d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d9d395f-3a62-4ab8-b199-921d5ea15b1c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1b92a89-0fae-4545-96fc-5136a8270718",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca181c74-bafa-4348-a772-171c92c172e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff4d9b27-e814-492f-b6de-1fe5f3eddb64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "36ba4b45-edcc-4ff4-a519-b13780d1701c"
                    }
                  }
                ]
              },
              {
                "id": "d2e070ab-3f2a-4690-bb2d-f901683560f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "225fbfb2-d6c8-49ed-a5d9-722ab12052c6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751c7e27-e282-42c3-9ff3-c1f85f969c12",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1d8b24bc-2da3-4549-a72d-b134641dd890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf578431-67d8-49c1-87d4-12367c2a3772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "968acda2-02d3-4cf3-b1a6-8e177e8c3bb2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37a4ac62-286c-4351-9ab5-151bd14589e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "998ed95b-44cb-43cc-9e09-cf8ade3a7081"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ca39f1d-e378-47c5-95b8-063f2bde1e9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2da0041a-2761-448f-9b76-ca8e5621276b"
                    }
                  }
                ]
              },
              {
                "id": "2c829b06-6342-48bf-ad64-12c11cfbd545",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5cd069ca-5f1b-4184-bd63-43a48a32fc8a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf30923-d7e5-478a-a9a7-b7f9e347e058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "778adb3e-4992-4a5a-836d-59433179c516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867ac1ff-43fb-4980-9070-5a6e1ea04498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969e61c7-8c32-4f53-baf1-f276d6b3145e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ead000b7-f36b-450c-833e-a4a70e3eb77e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1c8765df-710b-4f59-9142-1df0b419ed6b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0e7cc1b-e88f-4834-a975-d7bba95b9e05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d32e0a55-fa83-4a8d-9eaa-e403f559ea37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afd7b5d4-e4de-4ba1-8252-980b5096767d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df9f6227-acac-4cf7-ba47-1b4c5e041971"
                    }
                  }
                ]
              },
              {
                "id": "10c0b2a4-b3cf-4ed4-ad07-3955c0bef12d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5608393-3b73-41b6-9ac5-51a54c7387a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cf97f6e8-89f3-49ad-a23a-df1add028bda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39ea48fd-9080-4ba8-a1a3-484397b525bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7396990-abb5-4980-bdd4-d375f9f77c09"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a22a01b-431c-41a3-b7f6-c12c78a34518",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "367ba8f6-8f54-4873-9eda-86630de428a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54a43e07-0b9b-4025-928c-4d1dc843d2cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a0fd57b3-047a-4859-80c6-457efa6e72af"
            }
          }
        ]
      },
      {
        "id": "13bd3751-6267-4365-8115-2ea984ba325e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "31ac6cea-1916-4b24-be3c-c14ffb4b6af9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ed35f58b-6085-4635-a40e-6c7c316da54f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "628960e1-cf0a-4922-a5e5-b4a30c22a51f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b52c56-1710-4ce4-b020-c867736ff427",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9f3b8fda-01ab-41e4-b987-0cfe9aecd28c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1444aa-614f-45fb-adf6-845a92d4f95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea31c6e7-d792-491c-9c10-f7fdcf20269e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4a56942-0fbc-4679-b8f0-35b9a435d5cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff55a701-a2c5-4930-9829-5c6480116148"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "09d41caf-1d56-43e8-93d6-d0951e119c9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3ba311d-1295-4d4c-9347-a71e592d43d4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6aaf4ab3-c140-4211-9780-0317e2b740fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "87d81cc4-aa09-4f45-8f6e-54fcafd0d6a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c4a3b4a-eaf3-450d-bb4e-959ec16deebc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50af4065-f4d0-452b-a2d9-6d5db19da96e"
            }
          }
        ]
      },
      {
        "id": "a0f65222-c54d-4975-a883-d97f54e21b75",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e7cd9012-17b9-4783-9952-5a7f483a8263",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2eee8cbb-8b26-4899-b34c-68b7e170c7e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0123a54-0043-48f6-b914-c69f72b9d67d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cd1b84-1adc-4f55-80b1-e4b51895cfb2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "060e2d4c-4e81-4849-a3da-58d66ab57bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ca8db6-7601-4d15-8f83-18463fe8a30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e6a1199-5940-46b4-a6a4-851abb077006"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d36b8aa2-095c-4ba3-b1da-d9c2ec8b2ded",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5bfd7f7-caee-4ba1-8de4-9bebe33f10c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad1d5339-60c1-4a75-b13e-946724405a57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03cdf9ff-347e-45c0-9c06-2b9a174a1845"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37e8b240-9773-4088-83e4-ed05f2b5eaef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2fbd22dd-cbd3-4f8e-9dd6-336d27a7e78f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c9d82e2-456e-419a-a593-b277b6082872",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38b67bd5-1c49-4c3b-b251-e0dfee4972a1"
            }
          }
        ]
      },
      {
        "id": "17517628-b8bc-4613-92cf-757846d0819a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "94acfb99-b024-44fd-9a24-ababf038ad3f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2b1bbde4-e3e7-4736-a069-ac785738fc64",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c989799d-fdf2-4e03-aa1b-506b35b1cc27",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f5b267-5b3d-45b9-b634-2a0ac9e308be",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1e56460-0d18-4598-942c-6420c97bbecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1154a2a-3efa-47cd-8744-8295430e1a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b4716f9-910a-4393-8d5f-064e5a08987c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea62e3aa-9ed6-4f49-8bcb-a4b1e889785b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41711a32-e43a-4a17-95a9-08771a584e8b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c900a40-87a4-42bb-841d-dd32eec32ea3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ce8d393-5595-47c6-8c50-ccf858143b5e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd6edefb-cb73-460c-9fa9-27188733c7fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9cede7c0-8374-42bf-b33f-b2de83d12b14"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "688799ec-a9c2-430d-a05c-ae7241f41aef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee73fb9a-9fdb-4728-ab7e-146f1cd1ce12"
            }
          }
        ]
      },
      {
        "id": "abcdb768-a15d-4cb7-b83c-ce1790226a5d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2cdc646a-603d-4ea9-999d-7fab04b66c92",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8a68c3f-38fc-4c5e-b51e-5817ac23d854",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9d6a728b-f45c-4f89-8fef-01339855b34d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "292aca83-6c14-4852-9fec-15ce88d2c91b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff18ff43-a723-405f-a80d-8238b66d84a9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 103.45964912280705,
      "responseMin": 20,
      "responseMax": 720,
      "responseSd": 76.4087068145369,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1705106164133,
      "completed": 1705106203113
    },
    "executions": [
      {
        "id": "bc7f27c2-e9fe-4586-91b4-89b3450738d4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4503950f-647f-40c0-95d0-f4ecee9c928f",
          "httpRequestId": "3eca6a07-230d-4c9f-a645-8649e12892d9"
        },
        "item": {
          "id": "bc7f27c2-e9fe-4586-91b4-89b3450738d4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "af0ebb15-02f7-440c-83d5-aa4d330ebe3c",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 0
        }
      },
      {
        "id": "adb364bb-6d68-4505-84ed-bc9684ad1104",
        "cursor": {
          "ref": "e49ce71c-1e98-4c71-82ab-56d1fe4e045f",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "db9782e0-3c24-4b72-a537-32f94dd65438"
        },
        "item": {
          "id": "adb364bb-6d68-4505-84ed-bc9684ad1104",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7dc5900c-9175-4ab0-a2ed-5c37fd27a3b1",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "da0ad977-56cf-4dd2-b7ae-a94568ea6ac2",
        "cursor": {
          "ref": "1d55f2e7-afe6-40d2-b744-ad37991d37af",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5d307639-5670-4b1b-8005-d7d364ddce15"
        },
        "item": {
          "id": "da0ad977-56cf-4dd2-b7ae-a94568ea6ac2",
          "name": "did_json"
        },
        "response": {
          "id": "cb2586d1-61b7-46b6-8adf-0e6b882f8910",
          "status": "OK",
          "code": 200,
          "responseTime": 600,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2447f47-5f5d-4c2e-b9e4-3e3db2e5bd51",
        "cursor": {
          "ref": "59d1e5c2-2beb-406f-b268-926e7fa7faa2",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "daee04d7-942c-4d02-b9a8-88daba3b00b9"
        },
        "item": {
          "id": "d2447f47-5f5d-4c2e-b9e4-3e3db2e5bd51",
          "name": "did:invalid"
        },
        "response": {
          "id": "e54a2da1-a28d-4791-9881-b0420b5e25c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2447f47-5f5d-4c2e-b9e4-3e3db2e5bd51",
        "cursor": {
          "ref": "59d1e5c2-2beb-406f-b268-926e7fa7faa2",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "daee04d7-942c-4d02-b9a8-88daba3b00b9"
        },
        "item": {
          "id": "d2447f47-5f5d-4c2e-b9e4-3e3db2e5bd51",
          "name": "did:invalid"
        },
        "response": {
          "id": "e54a2da1-a28d-4791-9881-b0420b5e25c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42cbf24-c54b-45e9-afd4-762af9fef7bc",
        "cursor": {
          "ref": "ff36f680-9d60-40b4-ad97-343d8435650c",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "622035e0-682b-48b1-baab-2326babd5155"
        },
        "item": {
          "id": "e42cbf24-c54b-45e9-afd4-762af9fef7bc",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a15d57c0-6baf-435c-aba2-8d2ee818cfa3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 137,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d24c293-bd05-418d-91dd-6189a0cfa0c7",
        "cursor": {
          "ref": "183663b5-e4b5-4d47-83f6-f683aca60975",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c771821d-6c46-4e10-9618-7b30242199a4"
        },
        "item": {
          "id": "6d24c293-bd05-418d-91dd-6189a0cfa0c7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4710ea1c-ff10-4919-8326-ffb5a1066642",
          "status": "Not Found",
          "code": 404,
          "responseTime": 83,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46fea234-5486-4563-b6f3-25b32cfc5dda",
        "cursor": {
          "ref": "7ada9cad-e708-445c-9ff0-fc75aef28560",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b3e9eda7-9f75-4c1d-92fb-5c2997b59f66"
        },
        "item": {
          "id": "46fea234-5486-4563-b6f3-25b32cfc5dda",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "23caed94-3670-4a3f-9649-8fed987f9ba2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9b0a05-e38f-47b8-91e2-6c5ae0d403df",
        "cursor": {
          "ref": "1f103470-d48c-42f3-b5ae-5549f9f1124e",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "90e2de0d-7aa8-4c70-b4b3-a607a09b7471"
        },
        "item": {
          "id": "1b9b0a05-e38f-47b8-91e2-6c5ae0d403df",
          "name": "identifiers"
        },
        "response": {
          "id": "1c274c2e-22b5-46f0-9dec-92845b87ee73",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071840df-8c8f-4584-bd09-9b90c5623820",
        "cursor": {
          "ref": "11491ffa-7600-4714-a30b-c96d59de17c1",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "95066fac-b703-40fe-9736-8b0e1828c8b4"
        },
        "item": {
          "id": "071840df-8c8f-4584-bd09-9b90c5623820",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bc09c56e-8b9d-4c0a-84a0-20f29436fa98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f597498-4afe-4a88-ae85-d91f743ea4c7",
        "cursor": {
          "ref": "fd2bdf8e-9bda-4725-98bc-ad3571ef06e1",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "df32414e-7aeb-4715-968a-beaf710ec1dd"
        },
        "item": {
          "id": "3f597498-4afe-4a88-ae85-d91f743ea4c7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "092120a2-20a1-434b-81f0-b03e22f42d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4f2fd3-f5de-4759-a1b5-a0cd50d83b94",
        "cursor": {
          "ref": "29914a5d-81a0-4694-a99a-d0271b971977",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2f9e5418-9850-44c3-ac5e-37307200ee68"
        },
        "item": {
          "id": "cb4f2fd3-f5de-4759-a1b5-a0cd50d83b94",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "311ef34b-1b5b-4b3d-850e-e0c477c4305e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4941c699-a249-4ef6-b9c6-cc6f9ce00d10",
        "cursor": {
          "ref": "5c71bf62-9050-4614-a4ee-a62fa0e11479",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0c17952f-17e8-4935-98d8-4eee84558caa"
        },
        "item": {
          "id": "4941c699-a249-4ef6-b9c6-cc6f9ce00d10",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "14cf9570-1fb9-4615-8c2f-44476ade43cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f80891e-3d74-4fde-a8d8-94ce02186d1a",
        "cursor": {
          "ref": "1de61964-2fa1-4434-a2bc-8a7ba9621f98",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c644953e-da72-445b-91f2-c93cb50d34f0"
        },
        "item": {
          "id": "3f80891e-3d74-4fde-a8d8-94ce02186d1a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "074bfcb7-df85-4cee-8b82-11f1d21e44ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfec526-34d6-4369-acb6-797564787d76",
        "cursor": {
          "ref": "48669b60-4b72-4bf3-baa3-b52b0c54b8f3",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "84ff5808-9d5c-4dc3-b254-c9b6e375cbb1"
        },
        "item": {
          "id": "dcfec526-34d6-4369-acb6-797564787d76",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f1827796-4b05-4a54-8793-d8d40bb8c24f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776def6f-e7b4-4cf7-9a58-daa28f7f13f7",
        "cursor": {
          "ref": "84b1489e-c006-4bfd-83a9-a5e082df7436",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e5e3d998-8895-4d56-ab52-ec149ee5e8a6"
        },
        "item": {
          "id": "776def6f-e7b4-4cf7-9a58-daa28f7f13f7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "49c7e41c-623d-4e61-9aa5-3d776e88669a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b7554a-2a21-451d-a8f4-5b6b37d57540",
        "cursor": {
          "ref": "a5c4b1f4-8c2a-476b-8c19-978c21138515",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "58c63945-806f-4569-a4d1-b12e40b0d898"
        },
        "item": {
          "id": "72b7554a-2a21-451d-a8f4-5b6b37d57540",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f6318771-bad6-4350-97ab-6a5d6d9f8de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd9b943-cfbd-4c77-87ce-d131992ec3c9",
        "cursor": {
          "ref": "1f51dc2d-ae49-4198-9297-d47b2b082289",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "31954216-e503-4574-b3f2-f61e20db3f69"
        },
        "item": {
          "id": "cdd9b943-cfbd-4c77-87ce-d131992ec3c9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7f7e8f24-8cff-49fd-bb8d-d3a515cbb8ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "853af6ad-aec2-4706-86c6-2114733376f9",
        "cursor": {
          "ref": "3cd6731d-7ea4-49e1-9493-684eb9970039",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "949057a4-08e6-4b41-a907-a1c5329db02c"
        },
        "item": {
          "id": "853af6ad-aec2-4706-86c6-2114733376f9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6b418786-4835-4c68-bec6-52cc1e1ef584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64715445-8b65-4c21-bcd2-c1af95606942",
        "cursor": {
          "ref": "4d2079c5-1fda-4e95-969e-34a5c609f7af",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6567c39c-b95e-4f27-931b-8616866b4e17"
        },
        "item": {
          "id": "64715445-8b65-4c21-bcd2-c1af95606942",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "739e6911-bf29-4d4d-af9b-ebb722da76ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f3801f-da7f-4972-afa4-9805a50e3586",
        "cursor": {
          "ref": "c07f4448-ea28-4e64-bd39-7d6f28c51a60",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "54b04750-5446-4e33-b62b-6dde52d11a29"
        },
        "item": {
          "id": "64f3801f-da7f-4972-afa4-9805a50e3586",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "372a2429-9a37-4bbe-bdad-4dadae95860e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4364fe1d-df9a-4d82-a2d3-4660e824a727",
        "cursor": {
          "ref": "72aa3118-1a66-48e5-8da6-f507e6a1b703",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "93d87fe4-8f90-4882-bc60-a2cef4149c03"
        },
        "item": {
          "id": "4364fe1d-df9a-4d82-a2d3-4660e824a727",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "67d5c265-8a54-4705-a6eb-600ff6b45acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b14ce5-64b8-4138-83b0-925db7522fad",
        "cursor": {
          "ref": "4d189678-d295-43e7-806a-07bb50c5ee41",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3d97f7b1-38ef-4c2e-bae8-d9f74a1253cb"
        },
        "item": {
          "id": "51b14ce5-64b8-4138-83b0-925db7522fad",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bfdafcd1-11e3-4946-856e-f5c4d2d33e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b948691-9937-4823-8f1e-6bbceac0b9ab",
        "cursor": {
          "ref": "8e93eb10-043f-4c78-8231-89c01dd3d7fa",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a23ac9c8-152b-4e85-a5e0-935a6066ff7c"
        },
        "item": {
          "id": "5b948691-9937-4823-8f1e-6bbceac0b9ab",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "434e28cd-f03b-4c2d-8c3b-c45e31e0af5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a22329-eacb-4035-ba3c-419ac0ba1fba",
        "cursor": {
          "ref": "05ab52a9-e61b-451a-90df-3266e8cbcb31",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "28a32a74-b70c-4d04-9945-978851b69ea2"
        },
        "item": {
          "id": "d9a22329-eacb-4035-ba3c-419ac0ba1fba",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "30127523-9bfd-43f1-bb4d-c0686a09b9b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ecfcf1-5c85-4e89-8d3f-839f28939962",
        "cursor": {
          "ref": "16e3730a-dd19-4c23-8add-4c26ddd2660b",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c11ee8aa-5e1f-4e5e-8121-f3c2e88e5563"
        },
        "item": {
          "id": "02ecfcf1-5c85-4e89-8d3f-839f28939962",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "035d0b28-ac8b-450d-b3bf-f15fabb895cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94491e80-6063-4216-9064-697a64c87d2c",
        "cursor": {
          "ref": "5e161919-e895-40a6-9311-5ddaa3fc0c1b",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "70da33bb-37e7-44a9-98ec-eadcbc65d20e"
        },
        "item": {
          "id": "94491e80-6063-4216-9064-697a64c87d2c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "513cfe19-558b-4038-9fe7-65b86ef27c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade08929-3113-4b36-81d7-f6725e82635a",
        "cursor": {
          "ref": "74279df5-d62b-443d-aa49-8fcc1ed006ce",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "36bd3f4e-655f-4f7a-93c3-9855294900e4"
        },
        "item": {
          "id": "ade08929-3113-4b36-81d7-f6725e82635a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "837a7f87-ca2a-44bb-b04f-b8ee3c8128a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5993cfb0-18aa-4f1e-a563-64decb53ab94",
        "cursor": {
          "ref": "e7238696-82be-4f66-8436-c1286ee801d7",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "723611cb-f486-44d6-8493-1cabf6c26c89"
        },
        "item": {
          "id": "5993cfb0-18aa-4f1e-a563-64decb53ab94",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8394ce9b-5702-4f04-aa35-c47b7e132775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313aed1e-132b-4542-b5e5-060ed1ed2b18",
        "cursor": {
          "ref": "0e8ce657-58ba-496c-8371-58d1c18d9507",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "172ce01f-a541-475e-afe4-6f57919f1d19"
        },
        "item": {
          "id": "313aed1e-132b-4542-b5e5-060ed1ed2b18",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6da697eb-d923-44b7-a504-738efe4b4653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d5c29f-c18c-43c1-8b43-3826ddf6a54b",
        "cursor": {
          "ref": "7cf8b8bf-c740-41b0-928c-367f07deb7c6",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f6af7f74-3394-4171-98e4-1df9ba1d092b"
        },
        "item": {
          "id": "e4d5c29f-c18c-43c1-8b43-3826ddf6a54b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "df8e84a9-b5a2-41e6-b315-de0c6cf25590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50d9b59-0a5f-4d01-8f78-62a8ec286b94",
        "cursor": {
          "ref": "d4aaa1e3-96d8-4543-aaf8-cdc5decacc56",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "83661f84-0499-42c3-98bb-6db947efff80"
        },
        "item": {
          "id": "e50d9b59-0a5f-4d01-8f78-62a8ec286b94",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "70b5ec25-988b-414b-9517-23d97120f655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f153a16-d39a-429e-987b-b8c5d506e740",
        "cursor": {
          "ref": "4d79cb98-c826-45ec-91f6-e4288c8d78da",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fe0c0630-fc86-4bcc-afeb-6b37124aa617"
        },
        "item": {
          "id": "4f153a16-d39a-429e-987b-b8c5d506e740",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "69d22954-9a68-4078-817e-d53c735b6909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f117d4a8-e9c9-4bdc-814b-141460a6f705",
        "cursor": {
          "ref": "5191674e-4d04-4ed0-973e-2cac7d9675c9",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9f498262-c7e3-4222-a6af-4ec8ab45f600"
        },
        "item": {
          "id": "f117d4a8-e9c9-4bdc-814b-141460a6f705",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "941212a8-04ee-49fc-a37f-cf8ef341104f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33dc0f68-9470-4135-9e36-acefb89aa2f5",
        "cursor": {
          "ref": "2e88e71d-1870-4fdc-8408-4e207b7af4a2",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bf99539b-f701-4705-9e2f-50b149ac297a"
        },
        "item": {
          "id": "33dc0f68-9470-4135-9e36-acefb89aa2f5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ee87c4c0-c45b-4caa-ba5e-5740dcf57942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "408ba071-3b5b-4938-b404-e2f6b0d239b5",
        "cursor": {
          "ref": "3a4edb23-2b6a-4ecd-af98-3471a1c0a547",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d8ffe736-946d-4ac2-8af5-c51b852ed2eb"
        },
        "item": {
          "id": "408ba071-3b5b-4938-b404-e2f6b0d239b5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cdaf00a4-366b-4544-b8d4-a1d8ad6b35be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2789a403-a507-4fa9-864b-3434a7c1aa2a",
        "cursor": {
          "ref": "f1333368-534a-4963-9364-a296b0f163bb",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f9def59e-4dcf-4535-ba16-393b9354fdf9"
        },
        "item": {
          "id": "2789a403-a507-4fa9-864b-3434a7c1aa2a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "24a302a3-4a78-488e-a697-3ff0f46df9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bb2bb3-75b6-4c58-9390-8b83d66d7208",
        "cursor": {
          "ref": "dda12825-8f87-4c2e-ae09-f020fe7ed2a8",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "10a7c3d3-edd7-4614-a455-0ab684383bf1"
        },
        "item": {
          "id": "94bb2bb3-75b6-4c58-9390-8b83d66d7208",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "16aa0f7d-423a-4e88-94e0-49bf0a89bbe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02138ea-c441-4eb8-a367-2bdf009d87d0",
        "cursor": {
          "ref": "ce183296-b0cf-47b8-92d2-84f88406cb0d",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c20c3d3d-823f-4d95-aaae-995d8673273e"
        },
        "item": {
          "id": "a02138ea-c441-4eb8-a367-2bdf009d87d0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b231c3b2-6eec-472f-adc4-e4f0067fde06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f02df8-249f-4bb0-b71e-4a1f98192427",
        "cursor": {
          "ref": "7758caad-5330-416a-a8eb-4464b40f08ff",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "44bff163-b5c5-4fde-a33b-3634f4724171"
        },
        "item": {
          "id": "91f02df8-249f-4bb0-b71e-4a1f98192427",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c8389819-b864-47d2-9a5c-a22503aa4ecb",
          "status": "Created",
          "code": 201,
          "responseTime": 720,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e9795e82-93eb-407c-9bd4-97f2ab014138",
        "cursor": {
          "ref": "00f2473b-b243-46e6-b3eb-e1e36af92520",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "632f82f6-9f13-4109-b457-e15af2745251"
        },
        "item": {
          "id": "e9795e82-93eb-407c-9bd4-97f2ab014138",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1b363368-d493-4626-be86-591cde6f27cc",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "77c92450-46fc-47f2-ad7f-f8b408b0c880",
        "cursor": {
          "ref": "d5ceb0c7-b12b-4060-abd5-176ac6971322",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b64b63b4-f396-4084-bc58-0550f8d02283"
        },
        "item": {
          "id": "77c92450-46fc-47f2-ad7f-f8b408b0c880",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ed61a414-4306-4c0b-bd27-c6167d4dc4e1",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "067fad24-1592-4900-a1cd-6cad920a38e5",
        "cursor": {
          "ref": "505e5782-ef2a-45e2-b291-91b2fa5c51ec",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ac81d4b5-4114-4af1-b53c-532903612992"
        },
        "item": {
          "id": "067fad24-1592-4900-a1cd-6cad920a38e5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "74133088-1485-4754-9584-35d3721ff0de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd6f685-b45e-41db-8f06-c92daba0ff45",
        "cursor": {
          "ref": "e3500463-1bc3-4b14-a4fe-1db53b79abac",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "71feb746-f6fa-4c61-bce8-70033ee276f3"
        },
        "item": {
          "id": "7fd6f685-b45e-41db-8f06-c92daba0ff45",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ddab9f94-9673-4b99-aa39-98d3c854d486",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d5d64384-34fc-4db5-8cf1-c45223e055fc",
        "cursor": {
          "ref": "e43653b3-642c-4a5f-8c5f-3c469b2603f3",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8c1b729a-de92-4a11-80dc-511aec6cc584"
        },
        "item": {
          "id": "d5d64384-34fc-4db5-8cf1-c45223e055fc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e507aa6a-8124-4cf0-8209-0bc410c27800",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "05ac5d55-f0c8-4cb3-ab99-2bb3f6ea77b4",
        "cursor": {
          "ref": "c69feb38-4ccb-474f-9134-490d90985d7b",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8dcb5705-87da-4097-a5a8-2fdbff3fc61b"
        },
        "item": {
          "id": "05ac5d55-f0c8-4cb3-ab99-2bb3f6ea77b4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "af3f517e-56f8-4900-be43-607da31c799d",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "169447e7-8cd1-465d-9221-17311003ded4",
        "cursor": {
          "ref": "4a51f1cb-e47e-4786-8199-96e633af845d",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f0c3acd9-94a6-4d03-9b79-b466e55a001a"
        },
        "item": {
          "id": "169447e7-8cd1-465d-9221-17311003ded4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1b7b2d7c-be5f-45b5-9c48-fc0e7bd7521a",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "60f461c2-97c3-44a4-913d-3234c7c2dfe6",
        "cursor": {
          "ref": "83bb1371-7e42-447d-a040-a73323d31553",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b701d198-6673-41de-ae8d-05fadc977cfc"
        },
        "item": {
          "id": "60f461c2-97c3-44a4-913d-3234c7c2dfe6",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ef97f268-0065-4469-9a51-7282ce571c4c",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3b425aec-0e2c-4ba9-96e9-3329b125a8b6",
        "cursor": {
          "ref": "2a63dc9e-65ae-4d00-af09-b57f27be3d80",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1832c222-e29d-404a-b416-cde038340ff7"
        },
        "item": {
          "id": "3b425aec-0e2c-4ba9-96e9-3329b125a8b6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "11e6e94f-f81a-430a-9510-ae92e68310a5",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c56a2b08-9383-4053-9938-d5c2c00e1d93",
        "cursor": {
          "ref": "93f79f51-9cfb-4698-9b93-da5e38e1f010",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5376d06c-930a-4942-bace-0c1cd70b7823"
        },
        "item": {
          "id": "c56a2b08-9383-4053-9938-d5c2c00e1d93",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "82ce0ece-b627-4c6d-b97e-571417ff4c31",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c26debb8-96cb-49d7-b49d-ad5d1373660d",
        "cursor": {
          "ref": "b61f43fe-bd69-44a1-afa2-148e47bca195",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "76bc1244-63f2-432d-858e-c6f7b5dbc3b4"
        },
        "item": {
          "id": "c26debb8-96cb-49d7-b49d-ad5d1373660d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "055a7c1f-4ebf-4746-832b-25a76c4369c3",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "650468f6-47ea-4150-a8ce-fe4f287a6df9",
        "cursor": {
          "ref": "d7f9a7c5-612e-471d-8b21-a52b36c53e23",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9f7e7d83-06eb-4eb8-a120-f2c5bc4909f2"
        },
        "item": {
          "id": "650468f6-47ea-4150-a8ce-fe4f287a6df9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5342cb66-2164-4a07-9a39-0189bac76653",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8a48a2e2-7415-4ebf-ade0-d0c166809c45",
        "cursor": {
          "ref": "fb0cdf47-29e3-4006-bf4b-8c7405a5104c",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a792b7c0-0946-47c4-8466-0e3476f77a32"
        },
        "item": {
          "id": "8a48a2e2-7415-4ebf-ade0-d0c166809c45",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f1239997-a019-40f6-8609-25fcc206a2ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f07272-e54a-4185-becc-574c9f05c0ee",
        "cursor": {
          "ref": "807ac2c5-1edb-4b28-8735-ba2028ef9bd1",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "45dcb9c7-d6f9-408e-947b-12a7cf063370"
        },
        "item": {
          "id": "61f07272-e54a-4185-becc-574c9f05c0ee",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "de251041-d219-4c8f-89f2-b5f94edf6c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf33228-af18-4315-90aa-e20d645d493e",
        "cursor": {
          "ref": "08691ac2-e22e-4ca1-939e-90142adf4c02",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9255f3b6-6161-40ae-b5a2-6eb1cc2cfa76"
        },
        "item": {
          "id": "3cf33228-af18-4315-90aa-e20d645d493e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c0432d32-fd03-4437-ba1c-6badb280b24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b44baa-3d74-4948-a1b5-b5d90e537f84",
        "cursor": {
          "ref": "2f279bf8-6449-42e0-bfd1-06bd41cf6961",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e490e9cf-87ae-47a9-b7c2-b4c9afe550cb"
        },
        "item": {
          "id": "d3b44baa-3d74-4948-a1b5-b5d90e537f84",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c5709995-8404-416d-b24e-485293085dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ef48e9-4984-459c-9cf4-2154f35ff1d0",
        "cursor": {
          "ref": "6d17670c-10d4-4bf0-a949-939e412efc5e",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e248fff4-c8df-455f-af5a-b37181f4877e"
        },
        "item": {
          "id": "f5ef48e9-4984-459c-9cf4-2154f35ff1d0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "84bc2637-be4b-4914-800c-fe53a733fcbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65addc69-b70b-43bf-8191-effd2606c7e7",
        "cursor": {
          "ref": "704dff09-fda1-4c5a-8cac-62b4ffa9aef4",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "516f1566-d3f3-4aab-9eba-ad1495ad4a8d"
        },
        "item": {
          "id": "65addc69-b70b-43bf-8191-effd2606c7e7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a2a5d33f-b39d-472b-b547-f411afb4a585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16319dc-e634-4c92-9f12-b0ffa71f77a7",
        "cursor": {
          "ref": "7ee8eb15-6b67-43a3-ac07-dc4faef3021a",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4cdf0552-9fb0-4855-9402-33b0d36283e5"
        },
        "item": {
          "id": "f16319dc-e634-4c92-9f12-b0ffa71f77a7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "dd5e1810-ec3d-46ad-9c14-c8e61541bf6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9762d728-b0d8-402d-aef1-628b62b02deb",
        "cursor": {
          "ref": "46c75387-ad38-4043-983d-247ff79f0254",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9d66c5fc-b81f-445c-9a66-1a1bd2bd3e6d"
        },
        "item": {
          "id": "9762d728-b0d8-402d-aef1-628b62b02deb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6ae3f583-ef73-4287-9b2d-10630a380382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf9756f-cb03-47eb-bce4-af249be7b52d",
        "cursor": {
          "ref": "4a25fa6f-4d31-4431-b0ea-91f883752f4b",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "538b1afa-f27d-481f-8bce-dc5f2170b142"
        },
        "item": {
          "id": "4bf9756f-cb03-47eb-bce4-af249be7b52d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f6703cf5-6bc2-4e80-800a-bd5b8ff5860b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abaec93c-62b9-4ec9-bdfe-dd5f795c0527",
        "cursor": {
          "ref": "613d8604-b517-4d10-9c52-1d26b77dc926",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "aafa1919-4286-4831-9331-ec5db89fd1fa"
        },
        "item": {
          "id": "abaec93c-62b9-4ec9-bdfe-dd5f795c0527",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2d92e55d-099b-4dfb-ac3c-14d3d07b994b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b859c300-b705-4749-9783-886af2916c6f",
        "cursor": {
          "ref": "b6803158-6a9f-4563-ba02-887ecdfa0a58",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b108744e-70f0-4c24-91cc-4b4e89dd1163"
        },
        "item": {
          "id": "b859c300-b705-4749-9783-886af2916c6f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ae8882b4-fc40-467a-8e07-68c9e7e462c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636b1c97-9978-4a3c-a1ab-b82bc8ed1b60",
        "cursor": {
          "ref": "4fd9892a-9948-47c1-ad86-c81fa800acc3",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c661034d-15b2-4dde-8ef4-daa769090a29"
        },
        "item": {
          "id": "636b1c97-9978-4a3c-a1ab-b82bc8ed1b60",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1f851e9a-e5ce-454b-be5e-ac22abc55778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74bf5d2c-76cc-451a-aa81-5151f03bac86",
        "cursor": {
          "ref": "16907902-cd3e-4fa8-b8c4-457d7f417afa",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "42e02dac-b9d6-42a6-8709-26084443abc4"
        },
        "item": {
          "id": "74bf5d2c-76cc-451a-aa81-5151f03bac86",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ec404dcb-33be-4570-95ee-39e5cf8d29b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ad2085-c20d-4f62-a282-c07c207a775b",
        "cursor": {
          "ref": "e9e8ab33-0cad-4984-ad9f-34060de403e6",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f75c6e98-aa79-41e7-b2fd-c76b239240f9"
        },
        "item": {
          "id": "16ad2085-c20d-4f62-a282-c07c207a775b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0aa37470-d0e8-42ed-8413-c02270649677",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "acd274e5-dcf5-4b75-abab-b97a32e1d144",
        "cursor": {
          "ref": "584c6dc7-0e83-4df3-b6a2-74bd9b7a6bde",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "360d20e2-f6df-4819-b405-b8364c52d4ce"
        },
        "item": {
          "id": "acd274e5-dcf5-4b75-abab-b97a32e1d144",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ef86881a-1238-46a3-83b5-1fc220c28444",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "bb1e377c-1f97-4214-997e-6801b6bfe233",
        "cursor": {
          "ref": "22cb76f9-b689-4800-92f7-d220212f4922",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "29234a90-c699-4e31-8a72-8e54ae464d0d"
        },
        "item": {
          "id": "bb1e377c-1f97-4214-997e-6801b6bfe233",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "76446d97-bdf4-45e9-8cf0-21984564653d",
          "status": "Created",
          "code": 201,
          "responseTime": 385,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "10dc8723-4f6d-4a00-ad21-91d656f14039",
        "cursor": {
          "ref": "850f4b8d-ad26-4984-ba31-4a8b558e910a",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "52de85a0-5b34-4b05-a98d-9de50c7c75c6"
        },
        "item": {
          "id": "10dc8723-4f6d-4a00-ad21-91d656f14039",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e3d0e85d-6553-4864-9cd3-7344fd425995",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "66302a7b-43ad-4a3d-bd43-7eb981c0a3ec",
        "cursor": {
          "ref": "04137acd-c68b-40d7-8fdf-e79f4c068884",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2c6e4a6f-f5d1-499f-a2b7-046fb0d15594"
        },
        "item": {
          "id": "66302a7b-43ad-4a3d-bd43-7eb981c0a3ec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "859658d8-1444-4961-b44a-42422fa34531",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "17194528-5151-4b53-a5e5-cebcb983cbeb",
        "cursor": {
          "ref": "cea5489a-5e62-44f0-8c93-e4055f2033af",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "58c8d49c-b480-43c4-8bda-ec4fcc698803"
        },
        "item": {
          "id": "17194528-5151-4b53-a5e5-cebcb983cbeb",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6aaa5bd3-f2da-49a2-a208-3a39f4e039a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515e6e0e-3ed6-4570-a192-6faf3875c5a6",
        "cursor": {
          "ref": "92bb7287-ccce-4d3e-bbd2-0c1cc61d5be7",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "87555fee-bddb-4992-9e81-f84508ef3a13"
        },
        "item": {
          "id": "515e6e0e-3ed6-4570-a192-6faf3875c5a6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ff3f5113-ce37-4a82-9b1b-fbeeab9b983a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77862628-ac2c-4c28-931b-6131e44ca815",
        "cursor": {
          "ref": "0994e380-b280-4640-96cb-a815cd36b19d",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ca403698-5f53-43c2-9b4d-cb3e362d9af4"
        },
        "item": {
          "id": "77862628-ac2c-4c28-931b-6131e44ca815",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "56ec8378-e66f-43c0-beab-f02860f25ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79fd6c62-80e8-4352-9a36-70cbac07bf9b",
        "cursor": {
          "ref": "c3b6c232-eb7b-44c6-971b-a9c20727eb8a",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "019a6990-0238-44d0-a893-f5ce350f859a"
        },
        "item": {
          "id": "79fd6c62-80e8-4352-9a36-70cbac07bf9b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bc9010f9-4d4c-42a2-b05d-e2ac8f46c1e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a311f2c-f69f-48ad-bc72-d3957b44d193",
        "cursor": {
          "ref": "9994a00e-118c-4965-bd55-051f0beeccce",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e56373bb-1eaf-4142-b9e9-b7d71cf999af"
        },
        "item": {
          "id": "6a311f2c-f69f-48ad-bc72-d3957b44d193",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8e855753-9b29-469f-bde3-11e7ea8528a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905ab399-4d64-4076-9f55-03df2142ef36",
        "cursor": {
          "ref": "c41b4f69-e01a-45fe-9537-921c99e46226",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ca4845b6-3110-40f9-9f52-54fc50fd753e"
        },
        "item": {
          "id": "905ab399-4d64-4076-9f55-03df2142ef36",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "23728c98-4798-4472-85ba-8cc6984cd61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46496d8-c8ca-42cd-aab3-67521c6d66b7",
        "cursor": {
          "ref": "de8231f8-72bc-4866-9259-a2f46bf3d965",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "515c91ff-4406-458b-b7c1-2e8743f59b3f"
        },
        "item": {
          "id": "b46496d8-c8ca-42cd-aab3-67521c6d66b7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2744f90b-c191-4213-9476-e347fe9f6ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac839a2-8da6-46f1-85fd-a34c11b3140b",
        "cursor": {
          "ref": "d567eb84-4b6c-403f-a276-eefa121ed3cd",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "fa7ccab7-5678-4052-a949-1bc0a96852af"
        },
        "item": {
          "id": "8ac839a2-8da6-46f1-85fd-a34c11b3140b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "adb76968-c50d-4cfd-a416-fdb735ecb637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73edd902-45f5-4399-80d1-82c6f6a2da46",
        "cursor": {
          "ref": "ca4a1309-f68b-446c-bc56-0be274c639f4",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "17b1ae42-4f55-4ebc-a407-c0674c8d10dc"
        },
        "item": {
          "id": "73edd902-45f5-4399-80d1-82c6f6a2da46",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "182151dc-d9b1-4fff-98b6-f1c4aa66e9d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9878bb35-f24e-4fc3-bf06-df64b208ec0c",
        "cursor": {
          "ref": "b165ba76-3a97-4459-8247-af8d078e6673",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "005697ed-d21f-43f7-a4f8-fba8fab3e375"
        },
        "item": {
          "id": "9878bb35-f24e-4fc3-bf06-df64b208ec0c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "449e93cd-e261-4b38-8b06-f0dd7784e001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93704a39-e100-4f56-ba1a-d0b508e11ae6",
        "cursor": {
          "ref": "af014ddd-0a95-4e62-a6f3-33a38c641d8a",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9a19144d-eedd-4f56-9bd8-a2e772498173"
        },
        "item": {
          "id": "93704a39-e100-4f56-ba1a-d0b508e11ae6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "75e98472-144a-4789-b896-8cd744ccc7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461915cf-04b3-40ee-95d3-fb728d859804",
        "cursor": {
          "ref": "893eb041-9ba3-4af5-b3e3-c9502b63899f",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6b7b6f7b-d7fd-4fef-a360-770d35d20156"
        },
        "item": {
          "id": "461915cf-04b3-40ee-95d3-fb728d859804",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a4e716a3-c908-4c5d-8d73-9475d93e544b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c19c07-f131-413c-a2e6-f5bb9bfcf0b5",
        "cursor": {
          "ref": "ee89d01a-8aca-4790-afc8-a6ec0e21a925",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "24fafacc-eb20-469a-bbd4-ac8a75032c57"
        },
        "item": {
          "id": "77c19c07-f131-413c-a2e6-f5bb9bfcf0b5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c146fe10-9b62-41c4-8d23-9fe193c5b5a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0b32e3-51ef-4994-9bc6-5c84f442d9c9",
        "cursor": {
          "ref": "926be812-cd13-4003-b0e1-355aa69c3f39",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6d250363-5771-44d9-b251-c8fec80fd01f"
        },
        "item": {
          "id": "9b0b32e3-51ef-4994-9bc6-5c84f442d9c9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ed30ffdd-22ff-4f58-913a-af58494565ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b56cab6-4551-464f-b1dc-939f050b5447",
        "cursor": {
          "ref": "907759fb-439a-4ebb-ab8f-03eaf792eb94",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "511c2711-99c5-4497-b2c5-8f2137a28e28"
        },
        "item": {
          "id": "8b56cab6-4551-464f-b1dc-939f050b5447",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0fc54318-d20a-45f3-adfe-3fce240814cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5c65cd-87da-4c26-b4dc-c6b27bd144a1",
        "cursor": {
          "ref": "90800b1b-4ffb-46d1-8e09-bf0275b532d0",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b370cc51-be52-4dcc-9fb5-c355134593e4"
        },
        "item": {
          "id": "ec5c65cd-87da-4c26-b4dc-c6b27bd144a1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8f3cc479-7782-4882-ad4a-d4e6df43240f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166c18ce-3ac5-4f77-b0f7-82746452e84e",
        "cursor": {
          "ref": "0a5120e5-8004-43f2-9a19-ea1306ee30ef",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e90947d1-4abb-416c-a461-fd855c3750ab"
        },
        "item": {
          "id": "166c18ce-3ac5-4f77-b0f7-82746452e84e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e667853a-9a4a-42d5-8339-be613d1eb535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1842dbb-3737-425c-ab3c-58bf93bb588c",
        "cursor": {
          "ref": "773b553a-1156-4280-b1ed-1752dc2ee93e",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "192e9b61-10a6-4021-898d-eb6c67c26687"
        },
        "item": {
          "id": "e1842dbb-3737-425c-ab3c-58bf93bb588c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "722c8327-dd94-4a17-8001-61a7931c0030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a46f43-fe9c-40fd-bc9a-56f9bcd15ba2",
        "cursor": {
          "ref": "6b56800b-739b-43a0-9aad-1db934945d98",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6cb707cb-fa64-4129-9da6-c86302677d6d"
        },
        "item": {
          "id": "f5a46f43-fe9c-40fd-bc9a-56f9bcd15ba2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7c3c8c45-9e17-4647-9fcf-27061f329bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62d2b62-850d-4333-b5e0-e96403d7f7d0",
        "cursor": {
          "ref": "c6311a0f-53e2-4762-8e38-750f5285a83d",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "63f05d1a-29fe-4c34-8bdc-bed71e27484a"
        },
        "item": {
          "id": "d62d2b62-850d-4333-b5e0-e96403d7f7d0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "cc857418-c3f4-4bd4-af3e-05811bfded81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27e8aaa-dd0d-404c-a3a4-9247d447a837",
        "cursor": {
          "ref": "4d8e62e0-38c6-458f-b394-e72a337695c9",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "68ddbb81-1af1-4d59-9eb8-6d9164837f03"
        },
        "item": {
          "id": "c27e8aaa-dd0d-404c-a3a4-9247d447a837",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ac4c7b2a-c131-4e28-b40f-0b96dea784a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37233c99-c216-48c9-8e8a-81cd8c5b7c07",
        "cursor": {
          "ref": "399d0982-28cc-4e1c-97a5-511d04d958e6",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "016f15b8-202a-4961-9fd4-c697e943777a"
        },
        "item": {
          "id": "37233c99-c216-48c9-8e8a-81cd8c5b7c07",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f2f38567-693c-48dd-83c2-b9770aed9b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f88c107-18a1-4402-8249-09675b739b85",
        "cursor": {
          "ref": "960e8f97-c458-4433-b350-09b668fc42e3",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d9c637a5-a413-4aae-a4a8-1c1b6a062fa1"
        },
        "item": {
          "id": "9f88c107-18a1-4402-8249-09675b739b85",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f1faf1f9-e939-46f4-9cf3-24ee3d12cebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99697954-9215-4955-ba25-e5bd2220151d",
        "cursor": {
          "ref": "28a8a69c-2e42-4ed1-9e19-61211771b167",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d19a8275-27a9-4320-8806-3ffa4286bd6b"
        },
        "item": {
          "id": "99697954-9215-4955-ba25-e5bd2220151d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d3f01e92-576b-4872-9349-f36cc73b76f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d102b3-91a9-4a15-9e1c-86497916babc",
        "cursor": {
          "ref": "00491b1c-ae27-4a30-b31a-c554b2f56645",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7d66de25-063f-4186-97d6-b9cfc4dabc30"
        },
        "item": {
          "id": "54d102b3-91a9-4a15-9e1c-86497916babc",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f3d8fb4d-71f7-4896-87e3-85f00b6c7e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a4389a-9e6f-48b6-8b9e-b8f7f0d9f0be",
        "cursor": {
          "ref": "4143be2e-e12e-48b9-9615-c176c4428d59",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "43cb9599-8992-4467-bbde-8062fc32c96b"
        },
        "item": {
          "id": "86a4389a-9e6f-48b6-8b9e-b8f7f0d9f0be",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "43793aed-60ca-49a1-9473-970a98f014e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e63204-701a-4506-9e9a-53e3600d714a",
        "cursor": {
          "ref": "a583cbaa-62f1-41af-b675-d968d75fa17a",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "254c8ffb-3783-41d6-8f2d-162e457ab708"
        },
        "item": {
          "id": "30e63204-701a-4506-9e9a-53e3600d714a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "beec498f-a2fc-451f-8f30-39b8c495b566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb7b6d8-c2b5-4985-8492-791eeef5d908",
        "cursor": {
          "ref": "c93c0daf-363b-44f7-9521-b0ec2cd0d2be",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "acf0c30a-4ed1-4a3a-8279-71befc4e6187"
        },
        "item": {
          "id": "4bb7b6d8-c2b5-4985-8492-791eeef5d908",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9bcac799-01f8-4e8a-84b6-7af89337464e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93af1481-cdc6-4ace-861f-78b6cc35f914",
        "cursor": {
          "ref": "ea5f3272-80fc-4aff-a0b4-5c305751d826",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6acaa54b-5958-452b-aec9-9fcf3814811a"
        },
        "item": {
          "id": "93af1481-cdc6-4ace-861f-78b6cc35f914",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a7586040-113b-4025-8ec3-ec20f00f29d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df18b9c3-2204-41a0-8487-c7b089bddb67",
        "cursor": {
          "ref": "c07ac3e3-9dbc-4bbe-85a7-2920b646f999",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9f714599-0f58-43b3-8dde-f08b489602d2"
        },
        "item": {
          "id": "df18b9c3-2204-41a0-8487-c7b089bddb67",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "543e0edf-262c-4c12-b2a8-70512381cb3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793e3a8c-1f40-4f34-abd8-7841b1138ff3",
        "cursor": {
          "ref": "1d3ca8c1-ca7c-429f-8bf6-b5eaf80f16d5",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7ae4dc80-c0ae-4ef1-ab0c-d70c4860a40f"
        },
        "item": {
          "id": "793e3a8c-1f40-4f34-abd8-7841b1138ff3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ab6b6231-9ad4-4d40-a1b9-6345d91e63d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c2428d-5434-4fef-80d7-53bdd3421da9",
        "cursor": {
          "ref": "29412988-b450-4efe-9c30-b38cbe803073",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "60b7c348-f822-45a7-aed5-c0c5a81e8ca2"
        },
        "item": {
          "id": "e6c2428d-5434-4fef-80d7-53bdd3421da9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d48e33d7-4987-42ee-a967-0747f3af332c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771dd6a8-a1b5-4f08-87e2-62e1904e46cd",
        "cursor": {
          "ref": "cd4b6378-5b6e-47af-9f84-c5eac75fa8a7",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "43aacba6-35b8-4c6a-9ce4-3157e2fbeb7a"
        },
        "item": {
          "id": "771dd6a8-a1b5-4f08-87e2-62e1904e46cd",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "33812090-7d0e-45be-b249-e2b5f1fd007c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0eeb5775-4d10-48bd-ae59-91aa52322610",
        "cursor": {
          "ref": "a961e208-7f13-4546-9f36-7401fb4135ab",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "975def96-579c-4a86-8c72-45b8a4a9d0fd"
        },
        "item": {
          "id": "0eeb5775-4d10-48bd-ae59-91aa52322610",
          "name": "credentials_issue"
        },
        "response": {
          "id": "48028d8f-5ed2-4a04-a927-5f067658696a",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fecde70-a7c9-4f8e-ac45-2d6154c7b50c",
        "cursor": {
          "ref": "ffbc6ee6-d1fe-4f88-a067-5689aa3b5ef5",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "eba60ab1-873c-4195-96eb-dba6ebc5d7dd"
        },
        "item": {
          "id": "5fecde70-a7c9-4f8e-ac45-2d6154c7b50c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b0892533-78cb-4585-a6ea-bb2a6453adb2",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b945f904-a164-4d52-bbac-14138a4c8683",
        "cursor": {
          "ref": "3a1b36e0-186d-4c0f-8a97-57144c66ef48",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0d2530e4-0b84-4bf7-b558-71c01e880535"
        },
        "item": {
          "id": "b945f904-a164-4d52-bbac-14138a4c8683",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "84c495dd-9eb3-4761-8eed-8c5f2ee3eb6a",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec41369-82e7-4550-9085-66e052e63bbf",
        "cursor": {
          "ref": "a368c350-06e9-4d45-99f8-974e5d789985",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "758c5569-8a3b-4166-888c-a1152004c152"
        },
        "item": {
          "id": "eec41369-82e7-4550-9085-66e052e63bbf",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "030c9722-63a5-4aad-991b-190bd155d69a",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ccf2be-3347-49c5-a4b2-ed50cffc8277",
        "cursor": {
          "ref": "cf9d7d87-faad-489c-ace0-a1b93f61b27c",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b7343420-a060-4af2-9b84-9aca1755b8a1"
        },
        "item": {
          "id": "e1ccf2be-3347-49c5-a4b2-ed50cffc8277",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c7f31f20-90df-4d75-ae88-a0485184b626",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-13T00:36:22.095Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-13T00:36:22.095Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d730c56a-f0bb-48db-b9f7-3aca6c514bfd",
        "cursor": {
          "ref": "22dc0f6d-0a4a-4f53-968d-75a551b97eac",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e41c9280-a115-4158-aa52-f4894955b0cb"
        },
        "item": {
          "id": "d730c56a-f0bb-48db-b9f7-3aca6c514bfd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3fef58de-47f6-4eba-8864-323f73a8965b",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5247800e-a9cd-445c-af08-8e52fdffb22a",
        "cursor": {
          "ref": "7976b73b-c7d7-4138-b922-588c7c3c318c",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f60ee3cc-e95a-43d6-b029-f4765cba5c82"
        },
        "item": {
          "id": "5247800e-a9cd-445c-af08-8e52fdffb22a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e75a62b4-de53-4ce3-9bb7-9a9395c8affa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bde3e8-efb8-4ef7-bb2a-67b8eba20f30",
        "cursor": {
          "ref": "7fda5365-db24-4a81-96df-c2ce71acb93d",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8bd319e0-8af0-42cd-acd6-dd2213d31559"
        },
        "item": {
          "id": "07bde3e8-efb8-4ef7-bb2a-67b8eba20f30",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2eba6ae3-6eb5-43b3-b53d-b186965ec7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43eeaef-931a-4682-9d96-e69f07ca4fba",
        "cursor": {
          "ref": "59a83906-3489-4201-a3aa-1292e71629ac",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "906c31fa-256f-487d-9e38-bd185fd9a24f"
        },
        "item": {
          "id": "a43eeaef-931a-4682-9d96-e69f07ca4fba",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1cae0df9-5327-4501-a92a-9eb80d9d18c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ffae72-d5ae-4fb9-b217-4d30c15bd379",
        "cursor": {
          "ref": "dbb2361a-083e-4624-ae09-93b4c4a171ba",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "264f8b9b-c181-445a-971b-fa9c32af3eb1"
        },
        "item": {
          "id": "15ffae72-d5ae-4fb9-b217-4d30c15bd379",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1bf562fb-59c7-4184-a976-eac683612750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4559ddb-09f0-42d6-bfc2-db90905446f6",
        "cursor": {
          "ref": "5d51e350-5172-479e-ab65-219ea5d53b9f",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b8f72a6d-e882-49c7-9fa2-5fde8ebf7f66"
        },
        "item": {
          "id": "a4559ddb-09f0-42d6-bfc2-db90905446f6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "52bde306-0dda-4099-aa25-177adf8cd753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa31df13-e5c8-4d62-9334-23fbe37592f9",
        "cursor": {
          "ref": "0c965f11-281a-40db-9b7c-f6fbbaa41a52",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "206d40ab-e2f3-4a88-83dc-d25370e865c9"
        },
        "item": {
          "id": "aa31df13-e5c8-4d62-9334-23fbe37592f9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ea957384-ed0a-41cb-b514-595d7c31dae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a2355b7-1d11-4517-8aa4-e2277fdf400c",
        "cursor": {
          "ref": "e193c8a2-dee4-4379-81a7-fa6580cf2625",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e444f868-5892-42fa-9fd1-c60b50945d29"
        },
        "item": {
          "id": "7a2355b7-1d11-4517-8aa4-e2277fdf400c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "618a02a5-2ec3-4ef9-898c-9a64a9734a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4668f6-b8b0-444f-a43b-4e07923b53b3",
        "cursor": {
          "ref": "973b5e0d-3ec7-4099-a606-08c13eb6dc9c",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "04b58b20-a921-4e8a-85ef-a7dd6fcea2a8"
        },
        "item": {
          "id": "aa4668f6-b8b0-444f-a43b-4e07923b53b3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d4a75c27-e674-49ab-bb49-ab9c1442dde5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d22ba2-cdb3-4ae2-8cc6-ae2e76b6ecbd",
        "cursor": {
          "ref": "7bc42a1d-246e-4293-9af9-f6ce02184ebc",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fcc471f2-dbb6-4733-98e4-10042b211b1f"
        },
        "item": {
          "id": "c2d22ba2-cdb3-4ae2-8cc6-ae2e76b6ecbd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b83d8aba-022b-485d-9ffd-50f306400914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29c2f6e-c466-4bae-8009-e99d7b5bd749",
        "cursor": {
          "ref": "8efcdad3-f857-4a81-9cb5-c110c11301aa",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "12d3344c-c56c-48c5-875b-5660c58b9de9"
        },
        "item": {
          "id": "b29c2f6e-c466-4bae-8009-e99d7b5bd749",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "79510545-eaad-4955-996c-f5c8f894f8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a98ff5-e29d-461b-8977-6b2bf6a39d0c",
        "cursor": {
          "ref": "b4856ff0-1150-4e84-bff8-4c9283083551",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2fcd892b-e507-4877-86a1-3374500d4b5f"
        },
        "item": {
          "id": "05a98ff5-e29d-461b-8977-6b2bf6a39d0c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "edbd769f-14da-4513-8774-ee776c6d06f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ae1751-ff23-4224-8896-1922f67879d8",
        "cursor": {
          "ref": "e979c3c0-6a42-4887-9bdb-1ff2e3216d12",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1bc81f3d-259e-472a-ada2-0479bb22293f"
        },
        "item": {
          "id": "37ae1751-ff23-4224-8896-1922f67879d8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9f550660-c431-4bb3-b8d1-691044e5293c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968e4aea-2b24-4eb9-ae5f-35e06e38873b",
        "cursor": {
          "ref": "ec87b9f8-70b2-48c6-9689-6254611bda22",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "af7d8105-c893-4b85-b01d-85bdca98ee61"
        },
        "item": {
          "id": "968e4aea-2b24-4eb9-ae5f-35e06e38873b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ca86d2f5-1516-40e4-9553-5ddc6cf56d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4269aee6-4d95-4b38-8ed9-22f15fa64ca2",
        "cursor": {
          "ref": "dda1041d-e983-4e70-ba4b-e1abf6ce6530",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "89f97fb0-e5f7-4264-864b-ae31252045df"
        },
        "item": {
          "id": "4269aee6-4d95-4b38-8ed9-22f15fa64ca2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "21c5c1fe-e617-4ea5-b072-28c10fb005e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45bf93d9-56cf-40b8-b84a-fb23c5f88e98",
        "cursor": {
          "ref": "b65a3de2-b7be-4c03-9141-643be5226c16",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dcc51225-0e95-4fba-a027-ce94184537e5"
        },
        "item": {
          "id": "45bf93d9-56cf-40b8-b84a-fb23c5f88e98",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1f6b1e2d-351e-45f8-9dd3-839255e60b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0df5903-c1d8-4fe7-bf2d-15502ec86652",
        "cursor": {
          "ref": "855b11c7-525f-4cd8-b53d-d3352a553c8a",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2ee636fe-dff2-4c25-82c5-91fbe322b939"
        },
        "item": {
          "id": "e0df5903-c1d8-4fe7-bf2d-15502ec86652",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d947f91a-3e5f-4d87-bb92-c4727f7aa344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f6dd62-f3a0-4437-8d67-e6da241ae1fa",
        "cursor": {
          "ref": "de582137-ea2a-4e80-9697-66bc3a7f5aee",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "877efbe5-f6db-48ec-a38e-c8387cec4a16"
        },
        "item": {
          "id": "33f6dd62-f3a0-4437-8d67-e6da241ae1fa",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b7504d31-122f-448a-a51e-3b59c654b4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec15f88-0a7f-48bb-b00b-f450fe605220",
        "cursor": {
          "ref": "7401041c-6b1b-4a2b-bab2-572d0038938a",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "122e89e7-792c-4ebe-a143-82546d18d5fd"
        },
        "item": {
          "id": "6ec15f88-0a7f-48bb-b00b-f450fe605220",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "28021ca4-056c-469e-8c20-a1ef439c51cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac921010-5892-41b5-9e85-efd282084b1c",
        "cursor": {
          "ref": "6848e646-d92e-4e4d-a437-48acc5aa917f",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "be805f55-90bb-47d2-b192-29f003a4f3ab"
        },
        "item": {
          "id": "ac921010-5892-41b5-9e85-efd282084b1c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d3439b26-16ae-4451-9b88-1741705a86ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c45bb3-6af5-4bde-a97d-6237894bcb65",
        "cursor": {
          "ref": "40b3bd4f-e42d-4cab-b73a-9e280a48a55a",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3cad2106-457f-4ba3-b80f-94c2bedba881"
        },
        "item": {
          "id": "18c45bb3-6af5-4bde-a97d-6237894bcb65",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6738dc13-85f7-4ab7-8c46-fd7979426c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b52aa67-7329-47bc-a76a-397ed00d6aeb",
        "cursor": {
          "ref": "5790900e-abc1-44d1-9c6c-f9ee1b00bce6",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7d91c89c-ae30-4dd4-a7fd-f81cbb58c2a2"
        },
        "item": {
          "id": "9b52aa67-7329-47bc-a76a-397ed00d6aeb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "35bf68b7-aab7-449d-a2c6-a8f3377b9191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652b5840-9f0d-459e-a73b-2e21065dcf0f",
        "cursor": {
          "ref": "ab6250e6-bd41-419e-9728-df6e68b0bac7",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cee98e01-76d4-4401-a5dd-1482974be8c2"
        },
        "item": {
          "id": "652b5840-9f0d-459e-a73b-2e21065dcf0f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4a4c105b-13a3-434d-9d5e-67523c02772a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a5ba46-a90e-493f-88b7-689fce1751cb",
        "cursor": {
          "ref": "9a29f269-6851-4e79-9a99-2c2c3581687b",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9921ad2d-7974-4ca6-ad93-ec99e1d9ef9b"
        },
        "item": {
          "id": "85a5ba46-a90e-493f-88b7-689fce1751cb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9e30b7c0-1b33-413a-bf59-ec01b822a51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789260d1-b724-44dc-8585-f22fef1224ca",
        "cursor": {
          "ref": "f05e44a3-01b4-4e1b-84a4-ad68a3cebf7c",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8911f4f8-35a6-48f1-9235-a38929484be5"
        },
        "item": {
          "id": "789260d1-b724-44dc-8585-f22fef1224ca",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "819bffc1-45c6-4d2c-b1dc-59f382e955de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29f419c-b887-40e9-8697-e488146618d1",
        "cursor": {
          "ref": "48a2dd11-379c-4669-8dd0-71d976aa9e2c",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2c2621ba-e4ee-418b-85dc-df716fa94428"
        },
        "item": {
          "id": "c29f419c-b887-40e9-8697-e488146618d1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f7ab7479-043f-4983-82a5-a60543e2f255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18bbd5b-63b3-4d40-9a19-956106fe9f37",
        "cursor": {
          "ref": "9436482a-56ea-43da-8945-43785e56e78f",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d646bbe8-8390-475d-98b0-5d46616419d3"
        },
        "item": {
          "id": "d18bbd5b-63b3-4d40-9a19-956106fe9f37",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a028ddc6-47b0-4c56-a78c-14928c801c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543543c6-4555-452c-ba45-da5273818b32",
        "cursor": {
          "ref": "2965c178-49ed-4221-a93c-a25cd1706181",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "930a2141-d6e9-4ed3-b792-155604dc1f57"
        },
        "item": {
          "id": "543543c6-4555-452c-ba45-da5273818b32",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3306d247-1b30-472e-852c-02d35120dd9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545d87f4-bb7d-4a6d-b6e9-66019afb4948",
        "cursor": {
          "ref": "ea3ee2d5-c4b0-4158-b223-fcc22a088fa6",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4682d205-d3ce-4af8-a05d-4f16c4f53127"
        },
        "item": {
          "id": "545d87f4-bb7d-4a6d-b6e9-66019afb4948",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3105614a-805d-4e7c-addd-ae078f0718e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d3b11b-3bfb-4827-968b-841b1f7ee550",
        "cursor": {
          "ref": "5b804515-7d6d-4ceb-8e22-7963d627a700",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1e5c6673-0ed1-4369-bdbd-61f2c83ecd2f"
        },
        "item": {
          "id": "29d3b11b-3bfb-4827-968b-841b1f7ee550",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e4fe4316-051d-4fa7-af4f-5a1361fc6f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe84983f-9108-4193-bc20-51df54b5e399",
        "cursor": {
          "ref": "a366de4f-f28c-4297-9773-698fadf94eaa",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a85b2ff9-01e6-44c2-8c2a-f8ae47a92540"
        },
        "item": {
          "id": "fe84983f-9108-4193-bc20-51df54b5e399",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3f46c193-bdad-41cd-8b96-7af715c2d098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47fe7eeb-3147-48a0-a580-ef2207d66a22",
        "cursor": {
          "ref": "8b300cb8-39d2-4ea0-b092-d3ec52f0e6d5",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c582280d-cf87-4432-83fd-cba616d1db0c"
        },
        "item": {
          "id": "47fe7eeb-3147-48a0-a580-ef2207d66a22",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e24303d9-ed37-4976-93e7-1f49b069e965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a058979-3834-44d7-914f-6e5da051ad7a",
        "cursor": {
          "ref": "83bc40e9-7809-454b-827b-69691b60e1d3",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a48406dc-1ae8-4f37-90dc-8f643e0ff8a8"
        },
        "item": {
          "id": "6a058979-3834-44d7-914f-6e5da051ad7a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4fa1dcd6-cb1a-40cf-820c-d9ff10361309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4044e51-7bc7-4581-88b1-4bcb8d3e64e8",
        "cursor": {
          "ref": "17478dec-f2e6-43eb-a68d-c6588f595c08",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0b4054eb-d4b1-46c1-b929-da96cec9ea9a"
        },
        "item": {
          "id": "f4044e51-7bc7-4581-88b1-4bcb8d3e64e8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "87f08210-ccf8-4db6-896a-45e109ff728f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d7863a-4a52-43df-957b-779466db3fc6",
        "cursor": {
          "ref": "b6b29a0b-fceb-481a-bf44-43ba7e5fb219",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3e378dea-1c62-46eb-a9e4-85a11bbecb79"
        },
        "item": {
          "id": "04d7863a-4a52-43df-957b-779466db3fc6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b22e86cc-5844-4c71-9e7d-5525ff42468a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9beb0dc8-2313-408e-b887-b6763e4f5ed0",
        "cursor": {
          "ref": "0956fd0c-ed7d-4d3f-95d7-c1da84eaada2",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8a5db6ea-eaaa-4731-886c-3e6eb4258800"
        },
        "item": {
          "id": "9beb0dc8-2313-408e-b887-b6763e4f5ed0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "67b0a8c8-9b0e-4bbb-a375-5b6fa7a239a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1bad7e4-98db-4f7d-acae-6373e0bc4d06",
        "cursor": {
          "ref": "fb920d9e-51ca-4d9e-9519-84e4563f00b2",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f03d7f3d-905f-4f62-9d10-898a327a784f"
        },
        "item": {
          "id": "e1bad7e4-98db-4f7d-acae-6373e0bc4d06",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a2a821a7-70d3-4910-a5d1-6a925bb29fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6971dc35-da4c-4a9c-bb8e-78409a123462",
        "cursor": {
          "ref": "c00a1eb6-54f5-4298-b2cd-9fc302b3f699",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8bfe02fb-7f86-4ecd-beaf-0556d9e06cd7"
        },
        "item": {
          "id": "6971dc35-da4c-4a9c-bb8e-78409a123462",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9d6e5cd6-15b7-4200-a140-1c4559d62b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14fcb5c-7250-40df-95e4-c616d05853a6",
        "cursor": {
          "ref": "66cee404-9ee4-47a0-ad7d-5c994469010c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7b3ee776-a4b2-40b5-8c63-7e922e798f12"
        },
        "item": {
          "id": "d14fcb5c-7250-40df-95e4-c616d05853a6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1ee21e50-2e84-4187-a98c-0cf16f1d4cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d63807-2d12-4d65-a32a-176bad46585a",
        "cursor": {
          "ref": "008c1094-da58-40c9-b738-bc6bcfdba592",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "30ac46cc-7aea-4458-aed5-e0ef1a3e45b7"
        },
        "item": {
          "id": "64d63807-2d12-4d65-a32a-176bad46585a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "864fa561-c519-430c-a860-639714b9a73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb96e5d-6821-4fd6-b67c-1ac8b024a388",
        "cursor": {
          "ref": "12a86273-f0ae-431e-a6ba-107384bb376d",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1af78b0b-a634-4944-80ac-e492cf2290ff"
        },
        "item": {
          "id": "dbb96e5d-6821-4fd6-b67c-1ac8b024a388",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4d993e70-72ca-499c-bc04-5a20e6ca1680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235b7319-a90c-4f46-a1b3-082d86016443",
        "cursor": {
          "ref": "9e205549-8925-499a-8458-d9256f448948",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2cca12da-32de-4664-ae4e-24bc16082663"
        },
        "item": {
          "id": "235b7319-a90c-4f46-a1b3-082d86016443",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9acd4f26-091a-4b62-89a7-9e27a8d7b3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebcbac2-727e-4d0a-9c64-f50ebde6e3e8",
        "cursor": {
          "ref": "5f17c518-4bce-4afe-b14f-297e73022820",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "69b54ba6-e950-4e7c-a3f9-d4b431af7cf1"
        },
        "item": {
          "id": "aebcbac2-727e-4d0a-9c64-f50ebde6e3e8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d9958569-e8c6-4892-ab08-2ce30e2827a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbff715b-4841-4e6a-883e-1a4f8329170b",
        "cursor": {
          "ref": "9af05f47-02ef-4ecb-9c9e-038d70783808",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4859c28d-1041-455b-a65b-701988ff0b34"
        },
        "item": {
          "id": "cbff715b-4841-4e6a-883e-1a4f8329170b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fb86f856-fb5e-48e8-9e1d-4b28f70fc762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b5f5ca-f88c-4805-bdbc-d272c439bd0e",
        "cursor": {
          "ref": "d1286238-d5a6-45f0-b69b-58b9e4662ad9",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6445ad3a-88c6-42fb-84e7-7c84b588cb11"
        },
        "item": {
          "id": "39b5f5ca-f88c-4805-bdbc-d272c439bd0e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "20aaddfe-2daf-4d65-90d0-585ad0b3ef43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27dc5de-df58-431a-845c-c00ca63e381d",
        "cursor": {
          "ref": "e46fbc01-fe4f-405a-b5ae-5e16e0ef8f8a",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7958c23d-1983-49ea-9f2c-55ad1eda2005"
        },
        "item": {
          "id": "e27dc5de-df58-431a-845c-c00ca63e381d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1d72d944-4539-44a8-856a-584338c75fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b521598-0ae3-4c1c-9ad7-341d2782b403",
        "cursor": {
          "ref": "e59f0e29-08cf-40dc-8849-058299968b8b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "40c4e92a-be63-40b7-aa4a-81640cde90a9"
        },
        "item": {
          "id": "4b521598-0ae3-4c1c-9ad7-341d2782b403",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a652a814-9696-49cf-bf5d-19e3c5981d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5b798f-01ae-49cc-b0a3-6a6a1047711f",
        "cursor": {
          "ref": "ea07bef0-3513-4b54-ac02-190be949bcec",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "64103f51-a136-4fde-ae56-9a369e6be277"
        },
        "item": {
          "id": "ed5b798f-01ae-49cc-b0a3-6a6a1047711f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2cf2eb9d-a8f9-4ab7-9339-ff2cc4645ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d10093-4905-40ba-97a3-97a22ea43ff0",
        "cursor": {
          "ref": "1e00d32c-297a-4c9c-ba92-43dfcbcebf9e",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c0bed4f2-0a04-4d4a-b725-6cf27ea43633"
        },
        "item": {
          "id": "69d10093-4905-40ba-97a3-97a22ea43ff0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "35f661e5-2815-430c-8529-26bef664428b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced35b53-29fb-4f63-93be-828a55db247e",
        "cursor": {
          "ref": "59679bd6-a1be-4ca7-9a46-053b4f1db26a",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0e5dd994-cf1c-4cfe-9070-78e25333e4ba"
        },
        "item": {
          "id": "ced35b53-29fb-4f63-93be-828a55db247e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "58d99399-abe4-41aa-8ab3-71ea2b0cb558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e856fc35-20ff-4da9-aa27-332985592f1f",
        "cursor": {
          "ref": "f400b8de-ff0a-4499-b409-2d8e5ba6f161",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1c957940-7c45-408e-9f73-d714eca07a40"
        },
        "item": {
          "id": "e856fc35-20ff-4da9-aa27-332985592f1f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "19b868fb-dfba-4337-b2a8-0f23d97c5443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010b15f4-26b1-4e09-8786-142cdb5bbef0",
        "cursor": {
          "ref": "a4607094-13ce-4352-8a00-01ff2288866d",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f1ee1948-3f25-4664-b8a2-ce6cf6c81844"
        },
        "item": {
          "id": "010b15f4-26b1-4e09-8786-142cdb5bbef0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4960b36b-db98-4066-9131-b254ec5f5ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e5d1fe-b537-4375-ad08-d1f1943b5cbf",
        "cursor": {
          "ref": "0102468a-4da1-44ea-8059-a41a0a83bcbc",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3bcf17b5-405c-42af-8d81-26c96d7ab466"
        },
        "item": {
          "id": "b6e5d1fe-b537-4375-ad08-d1f1943b5cbf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "083795c8-005c-4667-9753-727aa3df3d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d082f7-7da5-4d5e-b795-12c557df6469",
        "cursor": {
          "ref": "a9fb5f2f-4467-4b52-b90c-1d8fa1a966b7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f826d090-a6e9-4e8b-aff4-730e029d2d1b"
        },
        "item": {
          "id": "27d082f7-7da5-4d5e-b795-12c557df6469",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4a5328e8-b45d-4fa3-a069-3ac350efe04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673ab2c1-d144-4b66-b269-38bbfb8cb9dc",
        "cursor": {
          "ref": "0940095c-1f36-4407-871f-c0325c347e43",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d41e4bc6-6387-445a-8625-06f825e6ee52"
        },
        "item": {
          "id": "673ab2c1-d144-4b66-b269-38bbfb8cb9dc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "83854c2a-4bf7-4f64-ab2b-09e414210f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b740ddd-d209-41e0-997b-3084a5c9689b",
        "cursor": {
          "ref": "f6d20b0e-ec77-4a37-9eb5-20bbd6d6fc52",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "86b6abfd-3528-400a-831b-e68435834d6f"
        },
        "item": {
          "id": "8b740ddd-d209-41e0-997b-3084a5c9689b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e440edf1-af2c-46ab-a28b-bff87020ee41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d88168-d662-48d3-a65c-82f37c3e52c8",
        "cursor": {
          "ref": "9f549441-ace3-4783-8d1d-85e0b71adc89",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e9c43410-21cd-4966-af85-34756b660d8d"
        },
        "item": {
          "id": "82d88168-d662-48d3-a65c-82f37c3e52c8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "dfa1452f-b1d9-4192-95be-ed8f0154ed77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c604fcc8-a6ec-465e-aa5b-fae04efebf16",
        "cursor": {
          "ref": "f9b55820-dc84-4e56-8dfa-c02abff8875f",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1d237797-145d-426a-83d0-cf2504b27a0f"
        },
        "item": {
          "id": "c604fcc8-a6ec-465e-aa5b-fae04efebf16",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "391820d4-7c3f-4fc7-b37a-7cb0ba7b7b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7150a1ee-b1c2-415b-81a1-5c906b8770b4",
        "cursor": {
          "ref": "e25c5a42-b5ef-4b54-9647-6d20e5719108",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d23312aa-36d6-4388-9d95-d2c7231bacec"
        },
        "item": {
          "id": "7150a1ee-b1c2-415b-81a1-5c906b8770b4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f2865b1d-4573-4339-9f95-e4d4e2c48df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df8ac4e-8614-4130-a377-352217948e1b",
        "cursor": {
          "ref": "55964aec-60c2-4d21-a7fd-1ff7a74317e2",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "539be369-2ad6-4142-ae3d-9b48ad087ab5"
        },
        "item": {
          "id": "2df8ac4e-8614-4130-a377-352217948e1b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a40ddb98-c70e-4601-82bd-a15c1b774020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f62a768-280c-4abb-82dd-7bd31db27c1f",
        "cursor": {
          "ref": "76d42862-aefb-46c0-bb9f-f47773e110eb",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6ed19c45-d98b-4dc5-a75c-d09eb2ac1898"
        },
        "item": {
          "id": "6f62a768-280c-4abb-82dd-7bd31db27c1f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9ed6254a-419e-4c1c-ad47-cd7f8f3901e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c044e5-2ea2-415a-ac91-6d71f5d35eaf",
        "cursor": {
          "ref": "7ae88698-af0f-4207-91c1-87e28cfd39b3",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2a3022a3-52a7-4cf6-8222-ae2b587021cb"
        },
        "item": {
          "id": "06c044e5-2ea2-415a-ac91-6d71f5d35eaf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "dc3728c3-3ffc-4009-81b9-080c39dcdd36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cc5d2a-64c2-4d05-b6ce-a4794229f225",
        "cursor": {
          "ref": "e9f5c1b3-ded9-407e-ba41-8c13af0951fa",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a1966bd0-6d7f-4e47-a39a-37e0307a5148"
        },
        "item": {
          "id": "e0cc5d2a-64c2-4d05-b6ce-a4794229f225",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6ba30705-83c1-44e9-affd-42198b25ff9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514517ea-a758-4bee-8e0a-741cbe70f672",
        "cursor": {
          "ref": "ef68cb58-4f72-4531-8071-ec417e60319c",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9b65e272-cc25-4883-ab61-67c1896294bc"
        },
        "item": {
          "id": "514517ea-a758-4bee-8e0a-741cbe70f672",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "62a4c179-a4e5-43e8-995f-df44d3945e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794d0752-bc89-4355-a2db-377e569b469e",
        "cursor": {
          "ref": "9bbbac23-5e04-4d6f-94f0-d7c5832308c0",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cd45f7dd-bb65-4523-abcc-5940ed3cec8a"
        },
        "item": {
          "id": "794d0752-bc89-4355-a2db-377e569b469e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c19d0209-fa87-4082-9fad-fe6197a957cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993cd3cd-29c2-4a67-8c34-1c6b3e286bef",
        "cursor": {
          "ref": "700c4883-9583-4f46-848b-57c6ca6f6e5f",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "db53a706-9cae-4f6f-8546-ad9e32007b52"
        },
        "item": {
          "id": "993cd3cd-29c2-4a67-8c34-1c6b3e286bef",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e21670c0-900e-4f12-ac25-43808ae3c3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc4d1b0-4513-412e-a050-900aed49b7f9",
        "cursor": {
          "ref": "b25e6e25-c885-4b65-b9b3-d6804980d408",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "dbf28023-3fee-4164-992f-35d0893328ea"
        },
        "item": {
          "id": "5dc4d1b0-4513-412e-a050-900aed49b7f9",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "faa9c2b3-4e8a-4e34-b690-c9d5cd192952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb0a711-0dd5-4a8a-925a-485f86a1a94a",
        "cursor": {
          "ref": "2a153054-3efa-45db-9d15-a4c6c7f249b0",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d513f70d-ccdc-467e-9e18-81b476adf8c7"
        },
        "item": {
          "id": "1cb0a711-0dd5-4a8a-925a-485f86a1a94a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ec4fe243-6d89-4e78-8c36-c40740f33abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43525d6-b17a-4273-a56a-303389885b41",
        "cursor": {
          "ref": "a1964ba8-c086-4c67-8981-600937b7de3e",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "397bb743-2071-4048-a736-861819fb8806"
        },
        "item": {
          "id": "f43525d6-b17a-4273-a56a-303389885b41",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "9488271f-9f2a-4b06-98bc-0fc83dff8d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8678eaa-3c5c-4209-8ebc-2931420ae840",
        "cursor": {
          "ref": "88b518ba-bae2-4892-9243-6e5ed826aa80",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d42ded41-d8d9-4b76-861a-e050183a3a3d"
        },
        "item": {
          "id": "c8678eaa-3c5c-4209-8ebc-2931420ae840",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ddbe5e43-7885-4c16-bc7e-b09863433409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5536d4bc-2a01-4471-9202-8aaa30baeb0e",
        "cursor": {
          "ref": "5847d827-daeb-4021-8b6d-6a2147e240b4",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7f6e3520-fde0-4301-96c7-a2b3c24d8a24"
        },
        "item": {
          "id": "5536d4bc-2a01-4471-9202-8aaa30baeb0e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5f3df01c-11d8-4362-95a7-664159109f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8da77e0-b11a-4c52-8de7-19e13902cf96",
        "cursor": {
          "ref": "42f3c682-877a-4b7e-9a0c-8c37ffe206e2",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bfb92065-e0e2-4d74-8b5a-2c54c305f6f0"
        },
        "item": {
          "id": "f8da77e0-b11a-4c52-8de7-19e13902cf96",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1a0b1442-4f1f-4dd4-9737-80b0be32a62a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1555a9-c97d-4d69-8b23-fc1766b7a140",
        "cursor": {
          "ref": "db05fd41-5a9d-4076-bb44-0f93d3941cdb",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "be9a4b76-3b6f-4c73-9de7-665e3eecad4c"
        },
        "item": {
          "id": "eb1555a9-c97d-4d69-8b23-fc1766b7a140",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e4df87aa-8b70-454c-a5b0-ada2d38fba84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a5de68-b05f-4874-9596-d5fa81d1c4ea",
        "cursor": {
          "ref": "b2d962ae-3497-4a0c-b330-eeda13e9ac23",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0c565f94-9bd0-455f-83da-9bafffa23bf0"
        },
        "item": {
          "id": "02a5de68-b05f-4874-9596-d5fa81d1c4ea",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f7a81abe-1f97-4a92-ae8c-11139fceb500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db7b5ad-2bb7-480e-a343-5f8771f85c08",
        "cursor": {
          "ref": "4a9cc0a9-1b17-473c-bf85-0555f5753d43",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "71b9a340-8531-4776-b411-bc3733cd74c1"
        },
        "item": {
          "id": "0db7b5ad-2bb7-480e-a343-5f8771f85c08",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "597dadb9-3594-4cb6-ba4c-c2b49e0c05c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0414e368-8a90-43f2-9943-7544f14296f0",
        "cursor": {
          "ref": "15d56b32-5a08-40a2-824c-7642322a3127",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d4a38303-7435-41ea-a50f-a3d278e5d95e"
        },
        "item": {
          "id": "0414e368-8a90-43f2-9943-7544f14296f0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d7aa8aac-b080-471c-a4df-fd84a0c248cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbdf5d7-dd6d-445d-a7b4-a8b9ccda798d",
        "cursor": {
          "ref": "a8e649bf-aa43-4400-a23d-918571c82cff",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6f8ed894-d8a5-4a9f-95ba-26e8d90f70b5"
        },
        "item": {
          "id": "cdbdf5d7-dd6d-445d-a7b4-a8b9ccda798d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "abc720ef-8156-49e9-9dc4-82abcdf01076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ae3eeb-041f-4db5-83a0-600645f2745c",
        "cursor": {
          "ref": "3a3de42e-af24-4e05-9203-b0c0d8bdad99",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6b4dd46c-9e88-4595-abf5-33289848633c"
        },
        "item": {
          "id": "c0ae3eeb-041f-4db5-83a0-600645f2745c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e606421d-3614-490b-a9a8-ea24cfc8c8d1",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "5aa79250-93f2-4d58-8d02-3a669abcfc3f",
        "cursor": {
          "ref": "4bc4fe42-49df-462e-8a4b-312af20d727f",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8e2b8ec0-5ebb-424c-a55b-9be3770989d6"
        },
        "item": {
          "id": "5aa79250-93f2-4d58-8d02-3a669abcfc3f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "450c3e5b-c666-4319-b7fa-af8744fc0983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779c04b8-d6c0-414e-baa0-37357d92d16b",
        "cursor": {
          "ref": "bc3df502-5bcb-433c-821a-b2ae56943075",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "56b421ca-acb9-4aa3-af18-712eae85ab58"
        },
        "item": {
          "id": "779c04b8-d6c0-414e-baa0-37357d92d16b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b20df247-5596-4b73-9395-9baf8af60b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d352a1a-e152-4e01-b023-c5c7f96a9e17",
        "cursor": {
          "ref": "beb4a1eb-dadf-4224-b3b0-052affcc7540",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "394d5d27-332e-4757-8c46-6d7e57fe594b"
        },
        "item": {
          "id": "4d352a1a-e152-4e01-b023-c5c7f96a9e17",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1b26e12a-5796-49d1-b4ed-ea3490192668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f30817-a8d3-4f5d-b87e-37cb86e07754",
        "cursor": {
          "ref": "cdbfe156-38c4-4908-9182-e931e754d4f2",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b6b7a7f8-4ea7-4e8a-866d-8de50ceaed6f"
        },
        "item": {
          "id": "d1f30817-a8d3-4f5d-b87e-37cb86e07754",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "428c6c82-3ee1-4c4f-9bd3-6d4292ab83bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d76dee-aa10-4237-8ec6-b91fb9174482",
        "cursor": {
          "ref": "2f5beae7-b040-45ef-9603-750b11d6c64d",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3fa94395-580e-456d-b5c8-64529c7e8e8c"
        },
        "item": {
          "id": "d4d76dee-aa10-4237-8ec6-b91fb9174482",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3a69aa9c-cd5a-4bd5-a00c-e113e327b381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d414002c-6b0b-4892-b15a-52885e1e471b",
        "cursor": {
          "ref": "c8810ce9-1719-4368-b62c-aaccba2661a8",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2e207873-4c69-4a59-9d04-ac6fb7ec51c4"
        },
        "item": {
          "id": "d414002c-6b0b-4892-b15a-52885e1e471b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1672e358-4232-4472-a043-9df406f18e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a00659-5855-4d9c-bdb7-1a5635c2e5bf",
        "cursor": {
          "ref": "7bbfb92a-c2b0-46d3-8ce0-7c37ffb0f1f8",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b643436b-c64c-4bd8-ab8a-3be67753f005"
        },
        "item": {
          "id": "d4a00659-5855-4d9c-bdb7-1a5635c2e5bf",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bb160a42-3d00-4cd9-bedf-6ad9ac73bb84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6745b6-9966-453b-bb4b-8a6752b88629",
        "cursor": {
          "ref": "753084b6-553f-4061-b0d2-81cbaf9df985",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bb189a2a-7714-4cd4-90ee-eeb5296c4f40"
        },
        "item": {
          "id": "bc6745b6-9966-453b-bb4b-8a6752b88629",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "51106040-3c31-44ef-b521-6d745bbc1064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120e3604-3464-459c-8754-ba656f2262b3",
        "cursor": {
          "ref": "c2b58651-0a56-4ec3-b77d-535d5c7f45db",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e9fb4e5a-4435-4185-85b4-5e4768c52671"
        },
        "item": {
          "id": "120e3604-3464-459c-8754-ba656f2262b3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "454e88db-d65a-46ca-87e2-e647996a3576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457c4c6e-77f5-41a0-b7b5-4e3e3ced525d",
        "cursor": {
          "ref": "2f49bca7-aff4-4fe1-bfa8-1366c23e1e34",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "322e8547-49a1-4525-8cf0-e6dad90b8e96"
        },
        "item": {
          "id": "457c4c6e-77f5-41a0-b7b5-4e3e3ced525d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "230ac660-2fa4-44a7-a617-b72f19a68cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6072f5b-c4d2-4898-b44e-c36635031b34",
        "cursor": {
          "ref": "fef2babd-d922-488f-b364-159222520e48",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f91657a4-e870-4896-9bc7-355bc2c5f106"
        },
        "item": {
          "id": "d6072f5b-c4d2-4898-b44e-c36635031b34",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c8419866-17c0-48e1-86b7-31b7487fe6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4e3bce-bf90-4318-874a-c8b5b73e9c27",
        "cursor": {
          "ref": "810a7d0f-2530-4cc3-a9d0-e1945c1859d2",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "07b1099c-b83c-4bad-8e98-827bef4e0a60"
        },
        "item": {
          "id": "5c4e3bce-bf90-4318-874a-c8b5b73e9c27",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bec52580-11d2-49a3-87c7-20fa33527070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d4e2b4-7402-439b-8c62-bfa531064d23",
        "cursor": {
          "ref": "27bfcb01-473f-4625-bb2b-aa792a4ce34a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c03f9319-3a60-4f5b-a5f5-229467aac1b4"
        },
        "item": {
          "id": "b0d4e2b4-7402-439b-8c62-bfa531064d23",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ae869626-8932-40bc-89b4-ed7be6ac2ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e40185-6955-44d0-a60c-17f975608565",
        "cursor": {
          "ref": "17bc2ae2-a327-4cc9-8c16-5fb9698fd27e",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "38f19063-8d57-48e5-b13a-1d20957104e4"
        },
        "item": {
          "id": "28e40185-6955-44d0-a60c-17f975608565",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b7874fe1-5957-4478-ab27-6ad0a863b937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5649041c-0166-49e9-9c5e-a9920ba4192e",
        "cursor": {
          "ref": "c4576c6f-cec7-4029-af2f-40545a464972",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f76e7b25-e6cb-4b09-9b29-f1d6b61b51f8"
        },
        "item": {
          "id": "5649041c-0166-49e9-9c5e-a9920ba4192e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b9c30b41-068f-4605-9d59-f51a28cea6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f13e78b3-a200-49d1-9217-22f9da6009f4",
        "cursor": {
          "ref": "434bcd12-1bf4-4701-b714-1b630a67591d",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6d642396-8bf7-4171-bcfd-2af89ee1f674"
        },
        "item": {
          "id": "f13e78b3-a200-49d1-9217-22f9da6009f4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b16ac821-7d2d-44e1-a9b0-250f763a1cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b2c713-9eab-40a0-9436-dc091a3955e7",
        "cursor": {
          "ref": "c8868890-91a6-4422-b8af-40ffa82eb362",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e46e5383-7d87-4354-87d3-4181fce3eedd"
        },
        "item": {
          "id": "b0b2c713-9eab-40a0-9436-dc091a3955e7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "be3f7449-d624-4f97-afc1-6e50d13ab531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51e4cdd-34ee-463c-8238-21fa272d4c77",
        "cursor": {
          "ref": "f61a9dd1-1bff-4c22-af48-ec0cb84b74b7",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "582962f8-c714-4ff5-8e49-cda2be5bdd51"
        },
        "item": {
          "id": "e51e4cdd-34ee-463c-8238-21fa272d4c77",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9de893bb-22e9-4eba-8c38-49a455028da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b99bee-58d7-430f-859d-ea417c5948c3",
        "cursor": {
          "ref": "5ee92ac9-ef4f-4b3a-a242-c9e2bd75484a",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f9681817-1cae-4836-9e3c-5e8ffedfd5aa"
        },
        "item": {
          "id": "c3b99bee-58d7-430f-859d-ea417c5948c3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8ce9e43a-756e-43ce-9101-d72670a14a36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84cd3cee-ac1c-499a-af5e-9c2c7094a6db",
        "cursor": {
          "ref": "341d75f8-bd45-435a-975a-adc80b5c6a92",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "99a70fb7-4bf0-4409-886a-93cef32e6e91"
        },
        "item": {
          "id": "84cd3cee-ac1c-499a-af5e-9c2c7094a6db",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b463aa82-7553-452e-91e4-1dafe08328c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e006b8d1-a35a-4547-bb9d-bb158ff3923b",
        "cursor": {
          "ref": "a53124ba-945d-4f89-b4a6-a0d7270b6b2e",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "406dcd1c-70ff-4dbb-840a-8fbac4335640"
        },
        "item": {
          "id": "e006b8d1-a35a-4547-bb9d-bb158ff3923b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5069ed91-e84f-4f6c-98b5-415bce423b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044f0943-6d5c-4e33-a001-f6fe25fd5be9",
        "cursor": {
          "ref": "b3214f0a-ed63-4ff9-965a-3210f1070960",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e51652ce-3a29-4425-863e-0bc6550345b6"
        },
        "item": {
          "id": "044f0943-6d5c-4e33-a001-f6fe25fd5be9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6794dc47-bf50-418f-87db-fe2b46d87bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756a1469-d7e2-49f6-a2e5-c4863e2a73ec",
        "cursor": {
          "ref": "5fa273fd-77b8-4c10-8d9a-a9566f3863e3",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "caabd47d-865f-415b-9c5e-079f838e252c"
        },
        "item": {
          "id": "756a1469-d7e2-49f6-a2e5-c4863e2a73ec",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1fad639e-c4cc-486e-8677-07f9955255ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b8d2c4-f5b0-4904-bb7b-f621e8dcbf2f",
        "cursor": {
          "ref": "8b315a22-6abb-4fa2-925b-514c8d5b62a4",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4f078e08-f359-48c7-ac5d-04ec37fd0b94"
        },
        "item": {
          "id": "f4b8d2c4-f5b0-4904-bb7b-f621e8dcbf2f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0c183f08-78c2-471d-90cf-e8cf0c3ba30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7182fb-4aa5-4e3d-934c-122a393de05e",
        "cursor": {
          "ref": "4f4d0d31-ee32-42f8-8fb2-84e303093aa4",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e09663d8-54cd-4aa2-8708-e1fe9f1b3469"
        },
        "item": {
          "id": "7b7182fb-4aa5-4e3d-934c-122a393de05e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ac8b0bd0-afe0-41c0-b3c0-c6244a764c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3fd3e5-cf40-45c9-bbb0-614f3649b8be",
        "cursor": {
          "ref": "05774fa5-77d1-4e86-bb92-fabbc7daa501",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "35ac7c10-8cf3-4b56-bef2-659120eec9f2"
        },
        "item": {
          "id": "ad3fd3e5-cf40-45c9-bbb0-614f3649b8be",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d81d06ea-2a2f-4e59-aca0-2e25106e60b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9538437e-1bbc-4760-9e41-299fc51b0eca",
        "cursor": {
          "ref": "0d056438-64d5-4555-ab72-a99a525d43d1",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "724fe4d6-4ba5-497a-bc01-a8e50d52b0b9"
        },
        "item": {
          "id": "9538437e-1bbc-4760-9e41-299fc51b0eca",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "99671e6e-7b62-454f-b80e-d5f262c1561a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "280bb073-79f0-43d7-8c5d-98aa15e87e2b",
        "cursor": {
          "ref": "efdaf14e-960b-4d1f-ad4d-9736b93b65ce",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a01d3f03-69f1-4500-a3eb-657db9154c6f"
        },
        "item": {
          "id": "280bb073-79f0-43d7-8c5d-98aa15e87e2b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "674afc8d-edca-4327-8d49-121ff2fa49c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c9a785-aa9e-417f-ac2c-6258ecb277ea",
        "cursor": {
          "ref": "47f99e80-cc73-4ad1-af40-dfc8932da58c",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "35c00fd1-63c5-49d8-9144-c778852833b0"
        },
        "item": {
          "id": "47c9a785-aa9e-417f-ac2c-6258ecb277ea",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "3ce55667-ebe4-4090-92f3-3a02bf177dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea66ba9-68bc-438d-87b9-48fc0dd561c0",
        "cursor": {
          "ref": "01a9e2d3-25a3-4681-8987-d6acc988ff77",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4593ff42-b953-4342-bfcd-19cf8d9d326b"
        },
        "item": {
          "id": "9ea66ba9-68bc-438d-87b9-48fc0dd561c0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "10471144-c72b-453f-95df-574dece90df4",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "a9a82be6-fa96-4dd8-8904-66b4286d86fa",
        "cursor": {
          "ref": "f3178ca4-0188-4ee8-9fc7-f00a77c5e00d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e2bbe728-5624-4abe-b9a4-d4ef09880b48"
        },
        "item": {
          "id": "a9a82be6-fa96-4dd8-8904-66b4286d86fa",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ff48b324-c03d-4e6f-86cd-6a5ee392762e",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5b2a3398-c36e-48b0-ac35-2fd20a7ff5ee",
        "cursor": {
          "ref": "2f42dab1-8de7-470e-9885-a144515a22b2",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7e70c79b-80ea-4884-9006-62e2c8509a8f"
        },
        "item": {
          "id": "5b2a3398-c36e-48b0-ac35-2fd20a7ff5ee",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cd87e552-3b47-4870-86a6-aaed573fd096",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "98f06737-700c-4a96-b307-ee2c88f6bc35",
        "cursor": {
          "ref": "728ea13d-2017-4543-bfae-79dbc6dc2a8f",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "050afcab-fae2-47eb-8bee-a5c8f86b158b"
        },
        "item": {
          "id": "98f06737-700c-4a96-b307-ee2c88f6bc35",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d6e98c2f-3085-40a2-85e8-5ddcd50d3377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21374411-b9a9-40db-ba0f-9b9175ce3094",
        "cursor": {
          "ref": "59afc399-e781-4cc3-9026-409b6f418bce",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4c64ed8c-652a-459a-a77f-f34ff0b2bf8c"
        },
        "item": {
          "id": "21374411-b9a9-40db-ba0f-9b9175ce3094",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "13fcf5b7-a6db-4862-a3af-7875b8c8692b",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "2266ca9d-ab3a-4bd8-9e68-4b20b0ce56e9",
        "cursor": {
          "ref": "a29253a3-c86c-475c-ab6c-1700fcbe00f5",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3f68c84c-4401-4a03-9fdf-9367645f3966"
        },
        "item": {
          "id": "2266ca9d-ab3a-4bd8-9e68-4b20b0ce56e9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "de98c5b0-b643-4b50-b74d-aa36fe169cfa",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "960437f6-e18c-4b82-b984-ea71a4cc0e6d",
        "cursor": {
          "ref": "20e600d7-ee00-49d8-8c55-e9a3a8725abd",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2b9bb678-389d-4149-8139-ab11ad1eeff1"
        },
        "item": {
          "id": "960437f6-e18c-4b82-b984-ea71a4cc0e6d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "66183a06-8b54-4d12-b60b-a2edaf842906",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "305a40e4-16e9-49c2-b41d-507be03f1c87",
        "cursor": {
          "ref": "a6239b52-b9e9-4d21-bc16-4fbe49f0e31d",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "87a5eafb-b171-4db3-8407-d276457dd15e"
        },
        "item": {
          "id": "305a40e4-16e9-49c2-b41d-507be03f1c87",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5332c468-f979-4557-ae1b-5a3654db410a",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "7dd9b139-b9a0-4f9d-9074-01fa540936e9",
        "cursor": {
          "ref": "cce7fa44-a3ac-4c3e-98da-1b18ae012be9",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3ca87fc1-699d-4c90-b260-f4f3801e97e3"
        },
        "item": {
          "id": "7dd9b139-b9a0-4f9d-9074-01fa540936e9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "06c45b4a-1e3c-43cc-977e-0529672d4478",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "d521aef7-98f4-48b5-b99e-013fc7747dfa",
        "cursor": {
          "ref": "72f1e79c-f55c-4dc7-a078-055de1d2f5ca",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "06c52326-4e2f-40a5-aa5d-6214af1ac450"
        },
        "item": {
          "id": "d521aef7-98f4-48b5-b99e-013fc7747dfa",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2aef9718-1692-4d24-8979-d6148bcb8d6e",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "1c1dcd65-e5ac-4e22-beab-17ce1030c052",
        "cursor": {
          "ref": "2e0642c6-da77-4997-afdf-d81dd2fbe0ba",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "75f64576-9b5a-4436-9483-1d4fe2aa8433"
        },
        "item": {
          "id": "1c1dcd65-e5ac-4e22-beab-17ce1030c052",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "72395cbb-96fe-45cf-b099-4cc3a85d491d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7e9b41-1de5-49f9-b411-2b98a1a2b6fc",
        "cursor": {
          "ref": "34197f0a-861d-49ad-9b68-e785d063a01f",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "cab1ed82-5ce2-44c4-9ca3-227734f4d3c9"
        },
        "item": {
          "id": "0a7e9b41-1de5-49f9-b411-2b98a1a2b6fc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "72f279c8-1384-455f-b12e-7bfa7afaaf66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a74b102-de44-40fe-8942-7a8aa2dcc77b",
        "cursor": {
          "ref": "902c64d3-3e75-4351-8413-ecff7e9c3385",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f766771c-713d-4fe3-9f15-ccd42b172b72"
        },
        "item": {
          "id": "6a74b102-de44-40fe-8942-7a8aa2dcc77b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "68194cc1-beca-4470-abee-88b9c9bfe1b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6780c946-2c7d-4fac-a0b2-0fe40911035c",
        "cursor": {
          "ref": "e156c5c9-1c17-4afd-bbe8-12bac1893b71",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e20dc25c-fff1-41a9-b15f-234de195b46f"
        },
        "item": {
          "id": "6780c946-2c7d-4fac-a0b2-0fe40911035c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "96c28c77-069c-474d-bff2-c400a4ef8c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0761e750-d985-4ffc-989a-ae3d57ac3d24",
        "cursor": {
          "ref": "f8c1119c-ef92-4983-a430-347c50a61595",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7a78ed88-b34a-43dd-abf5-f59bc8d5e233"
        },
        "item": {
          "id": "0761e750-d985-4ffc-989a-ae3d57ac3d24",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1d6c1297-547f-45cb-9e29-d8e428667c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512f4a94-dc38-49cd-859e-d05899a8e510",
        "cursor": {
          "ref": "95582251-4db4-484d-855f-eb4e239db5c6",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "dbbe6e9e-281e-49e6-9546-bf377665d82c"
        },
        "item": {
          "id": "512f4a94-dc38-49cd-859e-d05899a8e510",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "10be82fd-7a97-46be-8bdc-20cc563cc765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e19a646-17fa-4dac-b8a7-b1f1b8a32215",
        "cursor": {
          "ref": "46088748-0744-4a4a-8813-567244bef63e",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8f3d4154-ef86-4778-b8eb-d01eabc1ce52"
        },
        "item": {
          "id": "9e19a646-17fa-4dac-b8a7-b1f1b8a32215",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "847e9603-3f6b-43e0-88ef-62910ff6b996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891ecd64-da1f-41f3-9a05-a4f724473e7e",
        "cursor": {
          "ref": "e318c4b0-9f28-4b85-8522-be606b4571b7",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3ceb527e-b183-408f-a987-3f11798d8393"
        },
        "item": {
          "id": "891ecd64-da1f-41f3-9a05-a4f724473e7e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "86d1571b-2b16-4ef9-8aa6-03c816befd1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c029085f-e3b3-4170-8f0a-6fc44e23d987",
        "cursor": {
          "ref": "8e248ab4-e0fc-4221-81de-bb484fd8d281",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "63990da2-0646-4487-b8ec-28bf52e6a864"
        },
        "item": {
          "id": "c029085f-e3b3-4170-8f0a-6fc44e23d987",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6a59f37c-2fd8-481a-be00-6959eb4a40fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270ab7d2-f4f3-48e3-8535-9a79d735bbbe",
        "cursor": {
          "ref": "d2614938-fc2d-40cb-9436-4a7f605279cd",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f84b6254-5ca6-4193-bda3-3aa8fc217ceb"
        },
        "item": {
          "id": "270ab7d2-f4f3-48e3-8535-9a79d735bbbe",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3c105df0-e8f0-43bf-827e-bfa9257a4762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26eb84e7-5129-4472-b03c-a4b89baae735",
        "cursor": {
          "ref": "89af29b5-2340-470c-91e0-974d5eb31700",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "bf939b35-ebc5-42ad-ae08-2afa17493234"
        },
        "item": {
          "id": "26eb84e7-5129-4472-b03c-a4b89baae735",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4ec09038-635a-43e9-9bdd-086a7f7ed7bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a43dd1a-b50a-4c24-a26a-a3c8e705e1d5",
        "cursor": {
          "ref": "9612842d-c490-488a-9bf7-7d8410796074",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "afc0dc31-5f00-4983-839a-450909d4e59b"
        },
        "item": {
          "id": "3a43dd1a-b50a-4c24-a26a-a3c8e705e1d5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "35c73409-f9b0-49a9-84b7-5efce3c67dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e759a8-7d44-40df-927f-63889aae3339",
        "cursor": {
          "ref": "765ab0b5-5a75-4b41-a289-a0f91b5b4b97",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "82c0fc30-6410-47e2-b28a-dbf9b50154cf"
        },
        "item": {
          "id": "a5e759a8-7d44-40df-927f-63889aae3339",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b71c622c-1dd6-4dbe-afed-214854e8b6a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294004f3-3ab7-4baf-b847-e9b58b2dc45e",
        "cursor": {
          "ref": "2d69d2ab-6b18-4b08-a5c0-8ecda1cd5d3e",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "69069143-26f8-4dd8-a4a4-17e4765ddaee"
        },
        "item": {
          "id": "294004f3-3ab7-4baf-b847-e9b58b2dc45e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "124f1b52-5a34-4448-9093-40dae59859aa",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "67f4e7a6-6580-4c7d-9e4f-bbd8d956d148",
        "cursor": {
          "ref": "636767cf-c021-43b9-8343-bebc799684e5",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "47435216-89ee-45a2-b878-6b4324f1f3f2"
        },
        "item": {
          "id": "67f4e7a6-6580-4c7d-9e4f-bbd8d956d148",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "324b70b2-13e6-4301-99a4-3721c1189024",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "2286194c-1f79-47a9-8809-f715958edb4f",
        "cursor": {
          "ref": "dfdd5e65-2289-415a-963e-0f207afc8810",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9b9b8527-4e2f-40b0-96fb-10b30ce073d8"
        },
        "item": {
          "id": "2286194c-1f79-47a9-8809-f715958edb4f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b5e66ca6-23f5-4092-8558-6feff4a079c2",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d5eeb34e-e3f9-4f1a-960a-94c99dee5024",
        "cursor": {
          "ref": "c7a13096-9470-424c-9397-45eed23beb5f",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4fb7d32f-49f3-4b36-8d65-58e4a33aad1c"
        },
        "item": {
          "id": "d5eeb34e-e3f9-4f1a-960a-94c99dee5024",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "614816a6-6590-4ae1-9d7a-08d93cc2af0a",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f7088d21-03f6-4078-a3a1-38cdde7c5366",
        "cursor": {
          "ref": "50c9ee83-0d91-483a-88bf-5b51e769df31",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5a9ddb17-e132-4947-b8e2-bf1ed0925a89"
        },
        "item": {
          "id": "f7088d21-03f6-4078-a3a1-38cdde7c5366",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f6c99a44-a5b8-4157-859e-f50be5b4564c",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "daecfc06-a421-4ae0-93ab-2a0effaa707e",
        "cursor": {
          "ref": "da6fe8f5-bce4-4c69-8c27-9a5f6957ad18",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "70985cbf-b371-4469-a97b-d8b946a92dc1"
        },
        "item": {
          "id": "daecfc06-a421-4ae0-93ab-2a0effaa707e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5e9dc224-c06f-46a3-9781-ab81d18a0f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db24ca96-a0a8-4e30-8ed6-88e9b7497af8",
        "cursor": {
          "ref": "019bccf0-a899-4ae6-9d5c-2651ce3fabf3",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ae408d1b-8e07-48b4-869c-de9b57fd7617"
        },
        "item": {
          "id": "db24ca96-a0a8-4e30-8ed6-88e9b7497af8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5c493cbe-67c9-4397-b934-96389811b38d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70dd7c2-d1fa-4059-abbc-06be22d297f7",
        "cursor": {
          "ref": "7156ff39-43ca-4237-bf97-33fb28625e71",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7427a414-f1d1-403d-acbe-9b8025aac399"
        },
        "item": {
          "id": "e70dd7c2-d1fa-4059-abbc-06be22d297f7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8f2e2cc9-8ad9-4b7e-a7b1-bcf9de6d5ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e49f62b-9849-4809-a4b3-d0c809ebcced",
        "cursor": {
          "ref": "b89a7077-c84c-44a4-8709-8935e8c2580c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a78dfba4-92b6-4e8f-929c-0fa55a510e70"
        },
        "item": {
          "id": "5e49f62b-9849-4809-a4b3-d0c809ebcced",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b3f70076-ef6c-435a-9a38-c99d6396d7bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6264d5da-85c3-4ba0-82d0-87e4ca8a6d54",
        "cursor": {
          "ref": "c72defa3-ecac-4a95-a805-d272057f3f0c",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fb5733ec-6465-4c62-a137-77873bf480c2"
        },
        "item": {
          "id": "6264d5da-85c3-4ba0-82d0-87e4ca8a6d54",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3d3553cb-a3ce-4e45-9270-4eaf98e7b9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3306fde2-f6c1-4114-88b5-1951899408ec",
        "cursor": {
          "ref": "8b0c668f-aca0-48ad-9334-50e02abb9522",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "848670ea-c523-4a10-98de-9e0da4c6ee4a"
        },
        "item": {
          "id": "3306fde2-f6c1-4114-88b5-1951899408ec",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "617123ff-0a09-44c8-a3ed-70a243159494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1819bd3-f1ca-48ac-a10d-01a04767272f",
        "cursor": {
          "ref": "df6b5ef5-54d1-4426-80c1-571345671fde",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5412e77b-eb00-425c-83cf-9a61d33b74b7"
        },
        "item": {
          "id": "c1819bd3-f1ca-48ac-a10d-01a04767272f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8aef6849-72f7-4fa4-8c08-5219ebcd0dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20ea73d-7c59-4134-8c85-972164990d45",
        "cursor": {
          "ref": "01f4f48b-7523-403f-936f-f827cbda5882",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e1ac8f2a-e057-4b4d-a30b-030a6132830e"
        },
        "item": {
          "id": "f20ea73d-7c59-4134-8c85-972164990d45",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "31ddb5e5-2c1f-49d1-856d-86f90ef28f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a16c71-8712-42cb-b98d-4964f43325f4",
        "cursor": {
          "ref": "d148cea8-b17c-412b-bb60-32121160544a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5f2a8bc2-d230-4e3d-99f7-1327c4803663"
        },
        "item": {
          "id": "d0a16c71-8712-42cb-b98d-4964f43325f4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2213eeb2-2e94-4e7d-bfdd-715e4d14b409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8bdeb3-251b-4fd8-9232-90211150fda4",
        "cursor": {
          "ref": "4f92a014-afb8-4b87-afbb-86ab8b9be0f8",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "75fe234b-81af-42e7-948d-cdbe9a70a28d"
        },
        "item": {
          "id": "2d8bdeb3-251b-4fd8-9232-90211150fda4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8962d22a-72a4-4564-b8d0-dcf6fbfabd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3571c33-beab-4b59-a395-cfb1a3462789",
        "cursor": {
          "ref": "c73c6763-24b2-4d41-bb9e-ef2d0fd333fa",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "b70b56ba-7a30-49fe-af0b-4e02d3a14b5d"
        },
        "item": {
          "id": "b3571c33-beab-4b59-a395-cfb1a3462789",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ab3cabaf-795c-478e-b053-acc02fa2ed53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50eba14c-06fc-4dcf-8b27-f7bf136244e1",
        "cursor": {
          "ref": "323e7d68-a42f-4b23-9482-44b114345889",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "1ff3367a-3337-45d3-ae0d-ee7c14404c98"
        },
        "item": {
          "id": "50eba14c-06fc-4dcf-8b27-f7bf136244e1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "30b1c5d2-814e-4e3e-9e7c-f2add2f05572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593c30e3-8317-4c91-9aec-db45a73f9b21",
        "cursor": {
          "ref": "5fd2469e-6130-496a-abce-8b5cbfe23390",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "0fa81bb3-179e-451e-9be4-3ddcd77e12ba"
        },
        "item": {
          "id": "593c30e3-8317-4c91-9aec-db45a73f9b21",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "77e963c0-755d-4dcc-99ea-1498ebddd0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0aae592-1abc-4ebb-8740-5211ab2c6fd4",
        "cursor": {
          "ref": "9a0cd116-8e87-4695-ab1b-9b1c652a7e7c",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "52d348ae-5855-41ee-9754-5c2563da988b"
        },
        "item": {
          "id": "c0aae592-1abc-4ebb-8740-5211ab2c6fd4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2543cb2a-1be9-4526-bd94-fee334506809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc8c261-11f8-400c-9ba8-202720a223c8",
        "cursor": {
          "ref": "f1b4a7ad-6d30-47e5-a29f-19c9ad1d6895",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "acbd6b71-8357-45ec-8ee9-677f046995f5"
        },
        "item": {
          "id": "6cc8c261-11f8-400c-9ba8-202720a223c8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "85ab5327-b0ac-4906-91b1-c323047a52cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0c99c9-f1c5-42d0-bb2c-f4407f0c27df",
        "cursor": {
          "ref": "ef5de7ca-5951-4494-b8ba-369467c2380b",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "15584635-0dbc-4095-934b-1d5e2ca76a93"
        },
        "item": {
          "id": "3b0c99c9-f1c5-42d0-bb2c-f4407f0c27df",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7d71f404-c579-4927-9e7d-04a682f0c432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c575e8-65f0-440e-b940-cbf595e41043",
        "cursor": {
          "ref": "4d34e700-add8-482b-bd00-524277ee71bc",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "40b43979-4df6-43e8-bbb6-a8ce12276938"
        },
        "item": {
          "id": "d1c575e8-65f0-440e-b940-cbf595e41043",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "302edd41-29c2-4e90-b69c-5ad80824bf9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25229ab-2060-4f4f-b250-70f963356aa9",
        "cursor": {
          "ref": "7e65b510-90d9-4a31-8a7f-f60cc0e7683c",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "56f63c2f-8d9c-4479-8713-8c3ca712fd3c"
        },
        "item": {
          "id": "d25229ab-2060-4f4f-b250-70f963356aa9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5cd77558-d956-4633-8bbf-206f6105ccc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ba303d-ae9a-46f7-b037-130fbb78e669",
        "cursor": {
          "ref": "a1fbbc20-1f72-438f-92ee-f6c85882a746",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f8e514dd-58e1-409f-b20e-8cbb60f4d881"
        },
        "item": {
          "id": "e8ba303d-ae9a-46f7-b037-130fbb78e669",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "86601276-2835-4808-9c84-c2af34dbd8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38491602-d246-4ce1-8ec3-cface6e2bb20",
        "cursor": {
          "ref": "6e76c711-a019-4b7f-95e0-d4b144076c6b",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "6190321b-4625-4bcd-82fe-9f79c4a9d4f5"
        },
        "item": {
          "id": "38491602-d246-4ce1-8ec3-cface6e2bb20",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0a9e997f-1e96-414a-a6b8-ba4e76dd92a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7de272-906a-4063-b889-8f6cefcdbb34",
        "cursor": {
          "ref": "e74de15c-dcc3-48a1-9fb2-edff0921c6b6",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "81d08240-ef23-432d-b2e3-73d27c54f705"
        },
        "item": {
          "id": "bf7de272-906a-4063-b889-8f6cefcdbb34",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1463ca1a-ed4c-4fb7-b62d-81f2c4b55150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a81273-9e09-4b90-8e3d-bec360b4954a",
        "cursor": {
          "ref": "b7f70716-89d6-4350-94d0-432ae84f9c39",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "5a3851a8-a0a6-4876-9144-332d5bffef05"
        },
        "item": {
          "id": "51a81273-9e09-4b90-8e3d-bec360b4954a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5777a00c-ef78-4778-9268-5adc73da386f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce597e6-be50-43d5-b0b4-9ff3e7a89f03",
        "cursor": {
          "ref": "ecc2c71f-d1bd-4a0c-89f5-370412048d9f",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "061afc2d-9731-4734-95ef-ce9e1c01559d"
        },
        "item": {
          "id": "bce597e6-be50-43d5-b0b4-9ff3e7a89f03",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "98aed3cc-f904-4127-bceb-8d19ffbe861a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f52fb11-a878-4b54-8ce4-12bf48c789c5",
        "cursor": {
          "ref": "bc7fef42-5976-47fa-b874-4abff1eddf2f",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7ff417ae-0c2c-4266-80be-b4656c507a1f"
        },
        "item": {
          "id": "8f52fb11-a878-4b54-8ce4-12bf48c789c5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "92fe3134-3f27-424e-80c8-1ee3f5670e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4722dab-d273-4cbe-a794-da2d860582e0",
        "cursor": {
          "ref": "b0ba68ea-9a90-4a63-8898-6df40d5c0329",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3187fe49-80ae-4557-9be1-779bb7e95658"
        },
        "item": {
          "id": "f4722dab-d273-4cbe-a794-da2d860582e0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5d80bcec-ffaf-4d02-8ca8-302d4ae49e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b7c6a7-fbc0-4e3b-a2fe-ebdf4edcbe7e",
        "cursor": {
          "ref": "6dc0371f-9c9b-45e5-8298-b75b024c0df8",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "d2be36a5-4d9f-4ccb-9e06-8e823bbbfb28"
        },
        "item": {
          "id": "d4b7c6a7-fbc0-4e3b-a2fe-ebdf4edcbe7e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9fd3c691-ba48-44ae-ac1e-da891491bef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab8817e-99f5-4b9b-b011-d6b8962aad79",
        "cursor": {
          "ref": "43d127fa-de14-450a-8896-7ff4d9176555",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "fe4619a0-81bd-4ea2-a653-8d2d1d785903"
        },
        "item": {
          "id": "bab8817e-99f5-4b9b-b011-d6b8962aad79",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fd2f884e-fb7f-48f4-8919-81649a6fe5c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0678e35-1092-4b8f-84d5-d578f006984e",
        "cursor": {
          "ref": "83aad211-6638-4641-b141-9afd4eb64019",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "504952de-0305-43b0-9865-b0b28a151b8e"
        },
        "item": {
          "id": "e0678e35-1092-4b8f-84d5-d578f006984e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "137460fd-e86c-40db-841d-5cb271ed5c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f6e545-93c6-47a3-906d-336b9701d1e3",
        "cursor": {
          "ref": "a2c7087d-c2e0-44b2-af79-f8c470ed2384",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "0250360d-b246-4038-af22-b9e3ce7f88b9"
        },
        "item": {
          "id": "b4f6e545-93c6-47a3-906d-336b9701d1e3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "911b4ba5-f163-473b-931c-9a996ee2bf18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58eeb6d9-ad1d-47ef-a148-fe1fbf7575de",
        "cursor": {
          "ref": "930b3a65-241c-45ff-a255-264864f6cf49",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "668945d0-7458-4230-bed6-1af097300cc8"
        },
        "item": {
          "id": "58eeb6d9-ad1d-47ef-a148-fe1fbf7575de",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "13e374fc-71ba-41c3-aba3-772ad80419ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78b7363-3faf-41b0-97f1-3ab369d0d046",
        "cursor": {
          "ref": "3adac222-9505-47cc-b2d9-f4ab75c75052",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "9e248b1d-e15c-45a4-8100-e91140a557a4"
        },
        "item": {
          "id": "e78b7363-3faf-41b0-97f1-3ab369d0d046",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "89fd951b-d62b-4967-a4e5-e561b148d7e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4915eab8-a190-4440-b2fd-c3181feaabe2",
        "cursor": {
          "ref": "4fe15917-2158-4373-83bb-ebd1eac76c34",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "67059ff8-5090-4ace-a297-986589c43a4c"
        },
        "item": {
          "id": "4915eab8-a190-4440-b2fd-c3181feaabe2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "82dd5c2c-1e1d-472b-bdca-26f769b0f01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6edac9f-bc19-4cb9-a747-f620aa53ae62",
        "cursor": {
          "ref": "444aa435-e649-4a2a-9dcc-493486c15c25",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "52d8227e-4976-4a86-a354-9c41d408091e"
        },
        "item": {
          "id": "c6edac9f-bc19-4cb9-a747-f620aa53ae62",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e61ada66-c61c-438e-8ca5-6c1bb4fef3f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b780f8-e577-4e08-93fd-7aa9a7e0dfef",
        "cursor": {
          "ref": "24fbd64e-bd02-43dc-892e-3859097778d3",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f85eb23c-71fc-4920-994d-bc261faef7a7"
        },
        "item": {
          "id": "83b780f8-e577-4e08-93fd-7aa9a7e0dfef",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9df76c6f-7a0a-401b-b3ca-1bf46208272a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225fbfb2-d6c8-49ed-a5d9-722ab12052c6",
        "cursor": {
          "ref": "338429c5-da9d-4b4c-993d-74225441f5f0",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "02c45a46-01c8-4588-b4a3-a2dcb8924810"
        },
        "item": {
          "id": "225fbfb2-d6c8-49ed-a5d9-722ab12052c6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f04c8687-6cb6-4868-b779-f06aa059e21f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd069ca-5f1b-4184-bd63-43a48a32fc8a",
        "cursor": {
          "ref": "99dcf8bf-b951-46ec-97cc-a75e77a9b6b5",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "78f98d57-3956-4ddf-ac48-49d51492a089"
        },
        "item": {
          "id": "5cd069ca-5f1b-4184-bd63-43a48a32fc8a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b9cebe2e-b0d9-4d21-9957-b8586b192278",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "1c8765df-710b-4f59-9142-1df0b419ed6b",
        "cursor": {
          "ref": "237d08a8-4c41-49d0-b25e-11780f21dd3f",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "5d53ca17-fac2-486f-af49-5c65ef82d4b1"
        },
        "item": {
          "id": "1c8765df-710b-4f59-9142-1df0b419ed6b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7b3a1efd-d028-4a76-b6d4-2645ba79cabd",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c0b2a4-b3cf-4ed4-ad07-3955c0bef12d",
        "cursor": {
          "ref": "0d02602b-a95f-4a40-9265-227000f0179e",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "067e3c17-6c0d-4a32-943a-27d4f8e23529"
        },
        "item": {
          "id": "10c0b2a4-b3cf-4ed4-ad07-3955c0bef12d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "309b9489-9f49-4bdd-995b-00088b5359aa",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "628960e1-cf0a-4922-a5e5-b4a30c22a51f",
        "cursor": {
          "ref": "acbb6bcc-c807-4d90-a8a3-63ca198a0fa3",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e590d31f-0e4d-41aa-8f01-390e4ba89158"
        },
        "item": {
          "id": "628960e1-cf0a-4922-a5e5-b4a30c22a51f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "09cd9b1b-62fa-4db1-978c-0628803e5a44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628960e1-cf0a-4922-a5e5-b4a30c22a51f",
        "cursor": {
          "ref": "acbb6bcc-c807-4d90-a8a3-63ca198a0fa3",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e590d31f-0e4d-41aa-8f01-390e4ba89158"
        },
        "item": {
          "id": "628960e1-cf0a-4922-a5e5-b4a30c22a51f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "09cd9b1b-62fa-4db1-978c-0628803e5a44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0123a54-0043-48f6-b914-c69f72b9d67d",
        "cursor": {
          "ref": "e4fa0c13-fc16-4b3c-a4ee-4c49d9f2ec7e",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f44fa9d5-0a6a-4307-b6de-4c5f9718d7ad"
        },
        "item": {
          "id": "c0123a54-0043-48f6-b914-c69f72b9d67d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d8c9eaa7-6769-49e6-b71d-06df57ca6bae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c989799d-fdf2-4e03-aa1b-506b35b1cc27",
        "cursor": {
          "ref": "b2c5280b-086b-455f-b033-a0c167b8d2b2",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9f6ed30f-1863-4788-a8f3-1251b8ded67d"
        },
        "item": {
          "id": "c989799d-fdf2-4e03-aa1b-506b35b1cc27",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c2a375fa-87a2-4273-91c1-bfe84877e935",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}