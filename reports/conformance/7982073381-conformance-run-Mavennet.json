{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "19df168f-d89b-4bfe-988c-aec40f735d59",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bf5db1e9-9fbc-4db4-bc3a-0f57a7aa9e94",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9eb45063-5abc-4dd9-b7fa-0dfeea39e542",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "32933e89-e07a-4e67-9478-a7e432ffb7df"
                }
              }
            ]
          },
          {
            "id": "bb634fbe-2521-4bd8-9c55-f7bb3ba211bf",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2cf78cfa-abf6-4769-84df-fd2f5d8e0845",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "14c37452-e473-445f-818c-9e8c6426b0a7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f724291c-9871-4364-808a-ba5479268066",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "72f3e5b1-cf28-4254-93cf-82aa0613e4d6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8df42c53-f8fe-4f70-86a1-89da089d81d1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f78a657f-7a6b-46d7-9202-a84f463f3cf9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2f43d51-757d-44a3-8629-151d21d70e83"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e2b4cb8f-2804-4e76-9bc0-d5108da4104a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9761d7fa-3f1e-4b9c-a718-d7e0dce3fec3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c68a16b9-9c45-4d38-a579-fb2f83bc2a28",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7add0724-8618-4117-b521-f7f163c62d49"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9bc3ce9-62e4-4874-adb7-baffc5a0f049",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fbde0faf-133c-44ca-ab45-03557f155f1b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb068704-0b62-4589-9d1d-2a48b34866e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12ff2563-76ac-4eac-b9f7-f7046bdc9101"
            }
          }
        ]
      },
      {
        "id": "0bb5a042-158f-412e-9bee-59f5c7f398d3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "52f4fb8d-d56a-4160-87ea-2146d1af91be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "349f7820-141d-479d-a41a-55be33d404f5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cc103949-695c-4c79-85f8-0a39dba6d519",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221f6063-0cae-4a4b-941a-f5964f23ed99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd1cdd15-6115-4893-bc0a-8d8c6f256d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db69fbdc-cfac-4c74-ae1f-a9645cd7c0cf",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5e842b-761d-4e3f-9701-1da0e9f2df79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b8edd98-2c25-46be-b3c3-3b40786bf6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2a93bd-4d95-4912-8365-def9bbdf1364",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fba0aa-211a-4737-8dd6-31ecaa4a09d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3032f045-7fc9-48ad-8113-7b9c26be7948"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "53a9bab3-62a2-4d9f-bcfb-d3d3c4199c16",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bb18a936-2ec8-4245-b6f5-556136f55059",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c9dae5-1536-4ae2-a584-aa8544e00ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "538a2bb8-b5e5-4ae5-8fd0-76aa470bd693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1ba7ff-f38c-40c0-b6c2-609a29b7babb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744c7109-31b6-4465-b68e-bfe912dd8c5d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "817e4189-324e-428d-a73a-1d893a0e382a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "554e3a28-eb34-4369-8762-0811aa8c8981",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b83fcc73-cfaa-4df8-aaf8-25e4bda18c1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c115c4f7-e5fb-475c-a560-36cd85082f09"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2cb700c4-7c0f-4145-bd71-eb518d7aaa99",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a4f5fa23-fd6e-48c2-9179-44fad6776422"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d877819c-dc17-4161-86a1-631cdfb0be6a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1914d05f-1088-45fb-b6af-845c58147576"
            }
          }
        ]
      },
      {
        "id": "6af89350-dd44-4e7d-baf3-0534b27ab447",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7d32f5f4-0ac4-4ecc-820c-416ed4e51b56",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e726cd0-f0bd-41d2-a97f-30ec4de46565",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "41affbde-e214-437c-817b-f3ca63662dc3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66cd3a6-04e9-4200-bbd3-bedffcdbfbfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ddf9d1-459e-4973-aacd-01e6acd964dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e838fb81-bea8-4690-a460-c0ea9ddc7432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ffe7f91-e090-41a6-a034-ea8a6f598d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47705f4-7b28-4b92-8f9b-a9b85124f7af",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a05cd25-061c-4a39-95ab-3797bc5f5509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c04851-b71a-473b-99b2-5bf1f28f427f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7609c8d3-cb0c-4c4d-883b-45d1301ef0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8084bdb5-0ca6-46f0-aa2e-8ba26823cdba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e1d8ce-ad7a-41dd-b6d9-5a4ee44ead0b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4aa4567-3865-4fcf-a4cf-803051276eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16999977-097d-4258-90a1-49d0164ff1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee68a67-05df-4fb4-bca9-51f2b068b8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1365abe0-b69d-4240-a21e-5c0536218ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15a2971-bdd4-4201-b6f8-70d111d871ed",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab21acff-d718-427b-a46d-9db353bf78a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "170e7616-9273-47d2-94a2-88b085014055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b735c64e-4dc9-4d06-a4a6-a016073f93e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4699ae5-a2cf-48ae-b881-e634f38f68b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eaa219e-5229-491d-b2e0-90889954af53",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feda0ebf-1c39-4180-9969-670625c76fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "525b7ee0-75f1-4ee7-a199-1373470d85d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921d4324-9509-4a6d-a31b-13c17b97fd41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "264ffba5-f87d-425e-bad5-65147e0eab6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605a352e-3aca-414a-82bc-53ec3c36f1bd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8e1fb2-e58a-4115-8c0b-e578584bf950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58752dd6-48b7-4d70-ba6a-63a5c1f94a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b43a23-e4f1-4199-aea4-dca0d132b89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d970c61-f159-4d77-87cf-ff3c3bdbcb60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42442029-29e8-420c-af64-2b25e09e2701",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc76967b-bd3a-456d-b15a-e2f6c8f4101f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263641c5-9476-45ec-a36c-7fccb19f55cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7454d0-b4f0-4b79-bab9-6ce945c6e685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b04858d4-d3ec-4f13-b672-af11962eb006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f7edcd-8b0b-4520-98f7-7a19ae57e09c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a810481f-53c4-40bd-8106-a87960ba6493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af445d2-fb37-4955-812d-aae1c401a305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e9e139-0e49-47db-b57f-2fb42c0e7b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07ddab96-fba7-40be-ba97-1941e582f53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1caf932-f677-461c-bd8c-d676b8151037",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e79bca7-4820-4bb0-b783-59eb8b1404aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc7e387-6e15-4598-bf1a-029f0c262400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97732043-9b80-425c-a5e1-c9cc6a9ec9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a205b32-a3d9-4860-82f5-36003e03ce8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61748d2-d0b4-44ae-b1cb-d1511d664c95",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fc7e6e-0cb2-470e-9cd5-e731acea91cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b3286b7-fca8-4598-9e5a-333ce6aa538e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc79ea74-2d47-4350-9362-642b5cf2be4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "099faba7-0a44-4855-93f7-8bc111997eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d7abf0-3ae5-4eac-b48d-6582dc7735a1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80764f7b-32f5-4deb-8a94-f2f662ef69a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7caebf86-a9e5-4edc-bda5-4e8d338defa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c8e2ca-023f-4162-9a57-3fefd628dc2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e399f707-6ffc-4304-bf22-5cf8fdbe4729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f97012-9e06-44c9-89d8-adef88bf7d36",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a644fd6-41b1-4e5f-8046-e4a73448e52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01307163-bc9e-4a64-9a17-95e8a9d48881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3e9a29-1b45-4ad3-9cf0-8a2f7c219509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f6bd6e9-e397-4d20-b7d4-0b3fca96b521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128cd698-f03a-4451-bea2-67fc18a36141",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a750e33-0f4f-4530-b511-cff26768e24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afed5e76-e37e-4bdd-a5e3-a93f7618b6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36e65a8-d135-47be-a58c-86d376a9473d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70346559-9255-43e7-989c-8f2510bf0b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41afae80-1747-4ac7-875f-ca8c0bffe896",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150f0b20-8788-427b-9be2-7d6e2d86e558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f93a86-57b8-4f44-bdcb-a15eca2b4d1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a65ec2c-6a0c-4617-85e4-3041a9c0eb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8a0bf0d-1ad2-42aa-a138-2654d8bdcb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85045fcd-b0a2-4460-b2b5-6ad273138bf1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575e19c7-be74-4635-848f-c6bd244f8a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b68f7a-b9be-471f-b056-59a826dca279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75dd1da7-f65f-4d73-a0c0-5242742159d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "549792c5-ba8f-4c87-9843-e92ab25f5537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd89d46-82bf-486a-bf2f-017e430c29ca",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f501b058-7f9a-4734-aca5-1c83ddeba0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4e6ce4-365a-44e2-a580-d9ddd9bb48a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611afb09-078f-4fbd-9bb9-5aacc61e0864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0e73de5-2fb9-4ebf-ad5b-5b3f99a25d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46869f77-f206-4acc-80de-12daa29bcb30",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251af515-e676-4a5f-88fc-02da1836e0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f17a02d8-fef2-44b5-85f3-68826711dd0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0e96c5-3baf-4952-affc-46f9636dd5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8480fc86-e0aa-437e-8579-a44eb9455971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83165e1-844e-4397-99ad-07c372823188",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25bc1323-ce68-4b2a-9ce7-b432c65932e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d87fabf2-fc30-4482-970f-dbffc1883992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b3a82b-4820-40e4-825c-7bde365d8b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8376cb00-0da4-43c1-b21e-434d3e9cfe1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d221b6d-dbab-4f98-b1d2-7d7f9f774bba",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b39c4a-9aeb-4398-bc34-81ec0349cc67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc01e62f-c675-4d58-9d45-ae6437d82141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37550a9-042d-4635-b8ae-b2d1cebaf7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2caeb83e-a598-4bc0-97be-8a77bc0c06e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462c3f7d-3d17-492c-926b-ca95ab5dd484",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4938bd45-d360-4ad4-b3a3-f3cc5b8e70e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6146bb1-5cd1-46d1-ab5e-afc2a6f16970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22aa71ed-d065-4587-b479-3e0a4c795cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45ffab0f-3aeb-4e4a-8d11-14523ba751b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f944da-2ddf-4885-a969-49bb8fae7d0c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2761f069-bd61-471a-a48a-9939b5db762f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b7616e-da6e-43fa-a14b-62531fc73533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd44e867-a8d2-488d-bd9c-736c43c09ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0fdd19-ea8f-476a-87ae-54351531d006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287dc428-df33-40b0-ad24-76d48612047f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6f82e6-79ec-4490-9c92-a9b8ce21f497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "619035bc-1c4d-4518-83a4-c9d6909d4618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29899991-afc1-4c9b-8922-daa70fa581e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "81b5dcf0-3a8d-4c81-ab07-7467c8b4f0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1a2c7e-b277-40a3-b547-2535f858f75e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c81ed7-748e-456b-a3b2-ca67554f628c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24171c22-ea22-4ef4-be6e-757843cd6c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5e4874-8a8c-4457-a95a-ec245ff2116e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7c7aede9-ee52-4c37-b2cf-df4b45548612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a710e535-8539-40fe-8488-b0d0169b236c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87696559-c7d3-4572-8cc5-f725390b9626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f648c7d-6ef1-4312-9237-aa42ad247861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475d641f-e7a7-4f38-a5a2-87f4efb5d9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e083edb8-0fbf-43cb-9ef7-4d742da95c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0546ca-6d83-4228-9d0a-cb9295f54b22",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ad18cf-0b0c-485b-b37f-ea7b8a5074a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7936f3e-ce9e-487c-8138-35e41300696e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584eec5b-169e-4141-8e49-cb5d55ff9a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "52668d01-4504-4742-82c5-cef0deb138b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59ce607-8ef2-4cdb-b0b0-f047556f2c2c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa23624-7c2a-45b6-9ca8-9a89373d5b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8f1b79-077b-4f02-a5b5-51b9dd23e602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92cbc175-7111-4d83-a14f-e1e1997add32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "884aab8a-703c-4fe6-a282-d3d14cbcfca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ec6a37-f06c-4be2-80c8-976e6160cb80",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "befde09e-b406-4aff-9dfc-756ea42bfc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3555c253-ac3c-402c-acbf-29116061a4a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3593b88-4c7a-412b-8354-94262f687232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b648e9-a43e-453c-a202-a8d6bafe935d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b24db4-77ab-497c-bd0e-8ff94cb85b53",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8936a48-f9c8-49f5-bc4b-96b1b485f498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94bfff9f-323c-4253-ae1b-3d74218ea2e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e87a6b-68f2-42bb-9712-19b6920db0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "90ab2760-f532-46a8-9cb5-affdfee82020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a739d4-66de-43b6-b420-fd83cd7b8500",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a3795f-ddf5-4fa6-9da6-039b78904191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a460aa-b4af-4468-8ef3-698114878ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35254654-349f-4eaa-8e62-f270d9c8be28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a4a284-67d0-4aba-a58a-6b6a83e8ca74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5c3308-16de-4f7a-a295-1d4609c568e3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8e8cc1-2447-46d4-b804-697cf3c008b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1abc935c-4794-4c71-95cc-b6b5597cdb5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333fb485-8106-4249-bc01-d6c608d5dc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "026a8538-8d71-4c05-8fb3-11611a8311e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6333cd-7c83-4339-89d6-05fdff221818",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b662b1-106d-49e0-9af7-2a917d205ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddc7af2-1bd8-4c2b-9915-61dd20c24a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42457ec1-483c-4eca-b492-3f75156a5249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "863f31a1-97a8-4cf8-82b4-556d6dc9517d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77dc9dd2-475b-4e66-8080-d3bb3b793ed0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07e3eb7-4e23-4045-b4ff-27aad3671e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6534d68-674c-4b86-b280-ff88def08484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2ee4c5-52d8-4299-81b9-9ff49afe5cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e126fbe5-7b36-446c-92e2-194a66b4a18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0740a1-77d9-4950-a532-2be41b5dde3b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35b6d8c-684b-4343-9ecc-9d2247094d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15b0a408-1c1e-47bb-96b3-51878ee1d960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66b54a8-467f-406a-8f32-eb4bd7ee72d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6be852d-28bb-4d04-990f-e889dd904673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb428255-d21e-4a6e-8a51-1190ee1eb2af",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22eab185-2e09-4c16-9b3b-d692b292d92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bc94752-83de-488d-9e38-2ad1a0d1b818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f741b7-ec8d-4d31-9be2-84c1e2c6cd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85750be5-64f2-4c5f-ab62-6a41a78de556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84ad733-92c7-4841-b98e-d25e30e1b9d6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2401dd-2b61-498a-8cb2-cdc451f81d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94b5bf14-04cc-4e53-b0ff-457b8d37f4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8c49b3-e960-4717-8326-c4d6c86b92bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f44c52cf-18f5-4c0b-8fee-c048bcc2d600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd1c1c5-cc36-4a8e-8a6b-56b2170d324e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cdf626-746e-4baf-b796-629c8dbbd0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf9ed6c4-9aca-4dbe-9569-304f2b6be705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "440387bd-9ab4-49c3-9825-7f712a28de6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f731415e-b873-4fdf-9156-fad17b8dac14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1adced6b-ac43-4388-8b6f-116f8667c8b1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b1a142-ae65-4825-9ddb-183db1290303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed6110cd-13c1-4578-88a3-6125ccd8484f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6afec3e-c316-40ca-93b4-50393045a4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8947b7a5-9aef-48fe-bc0a-968e6e3d872b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71f874e-5f6f-4a99-b45a-9cdcd3b96a87",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f870ee-e64f-4a7b-923e-505730088957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407fd94b-4595-4b64-88d1-f23faf0e636f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efad922-37a9-46ce-a2b9-c7025f032a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b59ebf-5b01-42e5-a119-1f27e23aed58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739e9c4e-d961-45c4-aff9-736de3714204",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "971c2a9c-6cac-412d-b925-cbe3d2896b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d0cf442-9d7f-48c8-a25c-20df3d04b169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fd0f96-94d0-4767-8dfd-05ede90500b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c55e29be-25f9-4309-862b-58c608afb704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713bece2-058d-4310-a3e8-261e0199fbc7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb48fb9c-6d70-4464-a551-451dd24a480a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3bf2ad6-b71b-4a0b-a5cb-03433113ecb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31630d52-563e-4c7e-a589-4b14eee559de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8f937a8-fd26-41f1-a139-8c3bd1668d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61284f39-822d-40fa-a188-41e6ed58c7ee",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a76d542-26a4-4b1b-8ca3-f5c82614a248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215145a1-f13e-4ab7-b64f-983c6c3aed30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184440f8-ec2b-4638-a95e-9306b1291b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b55b5fa8-ac43-4bc9-a39f-5262c3094f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0593dc53-591c-4a4c-860c-21f968d7e278",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d83c52-e1d7-4ec1-ae00-8b3c103f678c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163710df-0328-4bbf-88f1-d1ec4ad78c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95055c22-f584-4e40-ad6a-cf9b7f4c50da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4a62f2-70c1-4787-86ca-8b35ca12a2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a060756-c1fc-4af9-82ba-03d1caf02b03",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5253dca8-04cd-4a3e-a1a1-2f6fc3217a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef344e5c-3975-44f2-a5bc-2052b43b0c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0301b15f-badd-4106-a6c6-815e5785b640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "14731401-2b2f-446a-8f30-91259bf393e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e541c7ed-b192-4415-975f-0edbad956c04",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ec6e69-24ee-4ad7-85a2-b52fd200640a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08cfe59c-ecca-47bf-b429-81448b26e7e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f62118-ae8f-4ce0-8d75-1f1db51d6ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "08eeddcf-ca91-4c74-8f5e-ad1a870b3e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ced61e1-66fb-4a68-b891-07932ff1c792",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bc62f2-5be3-4c74-aaed-8268cb6853c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f8877ca-6fa7-4ab1-8e87-6ea6faafcb03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5effbf-9924-4340-89bd-d8a14cfb9eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8bb6d0-aa90-4938-9c86-d25c8130fd28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e12705-602c-40cb-96d8-d5290536e9a0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a57927-7e9e-48ee-846d-222629628bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "374f37ff-741d-4690-9ed9-f714de5ba7a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8179a9b5-8520-43a3-89e6-7c1b14b22e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92d064f0-20c2-495e-815b-92182d1f3343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a9c801-77b3-493b-a4f8-f360654af9f3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbd3ac7-95fc-484a-b8ea-9aa397d78801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f87309cc-b660-4073-ac74-5717b30f3fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2642c4bc-f20b-4117-bc16-c8e37525f6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "187e05d5-f8bb-47ee-a401-efe0038a263f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abf5982-aae2-477f-8ead-34fd3b34c764",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0045df78-11f9-4dac-80cc-b53b5ddc72a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb709abd-1910-4414-8b07-52fd164043a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606476d2-ec32-4faf-b6e6-097e416bf5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cdf3788-0ba0-4181-aa11-839e26730ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9564ccf-7e2d-4236-8f4a-3e2e49a8f779",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35bf822a-63f7-4f83-ae01-0b4c611285ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb9855b-09d1-4f00-b667-8faa1433c924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cdc774e-1d5b-43d0-b631-0ac71c56be23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5027112c-467e-4850-93df-bc876a48289a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd16bfe5-8b0d-4c45-85b8-b1dbaef0f3e0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16986269-a5ff-48f7-a709-d3a611a99633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffef5e60-b11b-4c7c-af11-63bbdcf53f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0824dab-72bd-41ae-907d-a676172ddccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9653f3f3-875b-48df-8898-1e61b05a892d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ff329b-c754-41b2-9081-ea14815a240c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393829f1-e4db-4ec0-9a3b-9e3521e0a95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa01c386-00cf-4d47-85be-a358e8be1135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7c5399-c2fb-41c9-bb5f-cd0d03b1014a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8fb5ea7-575b-4fd8-af56-b917633b648d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b6020d-7aea-4865-82ac-a9d915f1e816",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1917ed60-d3ea-4a57-b7d2-a0d0e8c7a0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ce8fc3-aa8d-4ad0-a42b-2f7b79120e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54af057f-d93f-4ce2-a7f1-933785368f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f35a943-48c3-44c9-b71f-8ce824ded0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320f8645-a64c-4814-9337-b65fde0a0d6e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbe9759-398f-4f16-a922-f815c8c3eb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b80aeac4-e04d-47ba-8022-bdf66c6f0097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9acdb66-ff41-40ca-861a-d94f89c6aeb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a13a503-45d5-4316-9d3e-504ae2e53122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48466c07-8ae6-4948-8642-32da6d5ede96",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ad6791-fe74-4c14-892a-29ea15a80c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e9a8bf-51dd-43ce-ab0d-be56e1f85758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c28df4-4105-4a8d-8a0c-b8d818362e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd6c8a4-d80f-4163-9932-809bca02c3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c40a7f-e9e6-40d8-9185-8ba7be2fce6e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8f6ae8-76c2-4718-867a-803a779248f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d633f9-81b3-4eb1-973a-47d3720498bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b11b841-747c-4834-84ef-46975b8a0fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70559f44-ebe5-4fd9-822d-aa5125f78f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f12c71-049b-4b8e-9c38-49873044d376",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8639c6-8cc5-4dfe-9739-f53a26646187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18c0e6d-9b2f-4f03-b3a2-b0ee6d8e92c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b915fc-7db4-47a1-ba1b-3428d8b81e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "cc35cd81-711a-414e-b842-e3e8ba2734a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e06b4c-b52f-409a-a0b1-7abed56ab5e1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1cce49f-4e47-4a51-90b8-5e7638cfe2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af1d1023-5506-4762-9a03-fd336bf4632d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3fe4241-5f8d-4d1e-bcae-997d135f47f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "56688651-74c7-499f-aa50-67230b1da5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b52324-1d78-4bcd-ad12-70048ec991fd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d00b0b-357f-4605-bed6-7808bf178f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d343a901-dcd5-49ea-997f-309318d06099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3164ba-c94f-4fcf-8600-92b5658210a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2feb87da-bc7f-4361-a194-517b3f20a063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13e9251-d612-47e9-95b0-a587bfa2dd86",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3db08a-6b17-41ca-9476-4db30ade4e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0978e87-2404-4fb9-af12-2534b32ed942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106bc314-900c-4a39-b73e-2ea6237025e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1df45e3-9745-450a-b9b2-57756abd3d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b3e0bb-12e0-4326-bd6d-73cefcbfef06",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "654e750c-fbb8-4b46-8f0e-3db0613f3213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4adfc71-aef2-4d2d-ac90-1c9209e57768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b72b0de-2c14-4e67-ba12-f0eea878b1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "09cea88c-7492-4740-aa30-47065a588ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733d1810-dc57-4624-9fc6-5cb562d3ff07",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fdabfe9-2148-4bea-b782-89100255f6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c029c1b9-1e0d-4b8a-bd77-c952621ceae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601c48a2-f1a4-43de-8237-91b8c6ff0364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "82c8ed8a-85ef-46ce-babf-6a1787fcf703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3440782-bf30-44b9-b73e-3b34754860ef",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c316c8-9aef-4ec9-931b-dc72f0bac723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1075ed9-15b1-4b04-b067-d614afb3f43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c20d1cb-5fd6-43d4-8427-f88305f52c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e309a7d-18a9-4d24-a4c0-6b233b3f93fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23049855-89c0-41b3-9007-ffb8812ac32f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f08a769-f528-4098-b0ec-ad2c274856d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88baf4cf-8c45-4245-b6f5-26629077e1b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e14fb0d-8f49-47b8-ad17-9da88d9b88e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a18dd6ef-0425-48e8-8255-f27afa5b815c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08b9967-a0e8-4df1-83f3-ee8f8913d8da",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5718d9-c3cd-4a7e-a4c0-7a37d8d4c213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d798e5a4-ab47-4aa3-97d2-594b1a9c84b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9749c3-5dfe-4931-9282-da054fdd44bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dec41957-1c7e-43e0-a4de-2b1ad04c0505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98915b54-a75a-415c-a8a6-3d51d98c1a99",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3aec7dc-464d-4f5a-a377-2ba9f58a00d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7f11ec-4a56-467c-965c-33d0891d2318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885aadc6-ee71-46d7-9fac-2a3f46c95f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c42edbf-786a-4f0e-bfc9-7f2e15b97bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5659e8ef-74de-4719-bccb-20af19da0fd4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06759efd-d59f-4a3b-8998-8a2052621d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3087026-ad2a-4e68-9c10-ac06987287a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00818e0-45be-4543-b111-f596eee42fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1314f814-618b-46e8-b643-ff2455d31463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96cf678-6bcc-4929-8719-ac4894d582ec",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5344fe-2c25-4351-a2c1-97b458586721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6483d11-4a30-4a7e-9ae7-b3d649ffba79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea5e149-af29-461d-8432-f710e15e391a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f551f0e0-d213-4e76-9533-9670b5cb2147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469535dd-0524-4dd8-9d9a-02f0e6af399a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e262eff9-0e1b-4566-881c-9f5540a9658c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21675352-5a42-4bcf-87df-19df1069331c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4b68bc-a85e-43e1-afef-043273db0b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7858dd71-b74f-48f4-8167-655c89b3206a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2927ca9e-c6f0-4c2a-be19-5eff5c9356ad",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd0a13d-8fcc-4582-ab47-53b756a8b6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02e35bb7-60a6-4437-b699-0bb413aaad35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c8c790-aeb4-425d-9cd5-218cf792dc37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "14267e02-4d83-4f13-ada6-9c76c07908c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69d35cc-4f99-4ce4-980d-0c84e95eab55",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b66437c-f333-4b10-ad6a-d97c4b6050d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03af6599-dc12-4b59-9fa0-6c882d3a5daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea57cfb-9db1-4fdf-8dd6-b498a5fa8c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d60d17d1-d9bd-4ec4-8162-af0a7bf0cebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee72d09-54a3-4c74-9dfc-516494c8f6a1",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a320472-37bd-44c6-be9d-04f34a555d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30bf548-4f8b-47c6-9f65-3603d751df71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459ee1fc-d270-470e-adf8-83eaba6d148c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "417f2955-510b-42be-96ee-a3f0c88e3de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ec75da-f694-4fc1-9d2e-e55a04b62152",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce63e9d-3feb-44a1-99db-aa04754ec722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69e74e7f-ae3c-4e1d-a241-e8d862aa19aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47529e7b-4c76-44e8-b015-01e595af824e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41b97867-1608-4694-a82c-7a63e24ad8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661c5ed9-59ab-43ee-917f-ec1514a1b5cb",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b03d0ff-187f-4e06-9768-f734bbe93e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434d64fc-4f47-413e-a71e-61920a84e0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b7b0c5-6b36-4589-9f92-8a8e7a664b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b59eae78-e8da-45ea-bfff-a0a945901662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9cc72d-df3c-4c35-a6d5-d29af36444ae",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e901a7b1-4ef0-41f0-92c1-9d2e83e407f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233007b4-0098-4433-9027-9c0ba7ff4ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1235cf17-c1a8-43d4-8e17-d45418d906af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34aa39ce-30c9-43ee-9881-d030bd53904e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a6e0a6-89bb-49b5-8c20-a289b3f81511",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e796f969-2729-43e8-9051-b45e4a23e013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a509a73-de14-4bd9-8d3b-08fbf1188589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e435a562-8c70-4434-a0e3-e737483ad51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e35d8a63-6662-473f-8ec9-457f3cf680d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75b35f7-7864-47ab-8bc9-55c8c591ad7b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c35e406-7d83-4dfb-9656-ecf507edf59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a84ebd3-3c4f-46cf-b8a9-10b621e11d5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a39733-ede1-4567-bd15-90c16a4a244a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23398993-30f5-45ba-88e9-2f48c4a6483f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6042d212-ed7a-4ef0-a2b9-2add5cc368ff",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3959b79f-39ec-46f9-be2c-c4e7fb8c9d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a24affa-f92c-483e-b06e-a7d105464a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729ff83b-f7cb-423c-acd6-a0fdb7b838f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a972c50a-53e1-4699-9a28-213db1ae74a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5ca91f-1f22-42fc-b87c-cf4c44e1bd6b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4374d7fd-1ad0-4905-82bc-6bf43b5d8c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192acbd7-f0b4-44aa-a5a9-ec35babcb6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0b3605-4143-4ca4-906c-34d7e4704d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3af02121-e340-4f0a-8f7a-4bb3c007a518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b258fd-80f2-4ef7-a09b-c49429e3359f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8f8fdc-0d2a-4471-a6f7-e8977826b815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b089cbfe-c2f9-46b7-9f09-9d3e19e493d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af3535a-5bf7-41b4-bd93-0fcb93cd7482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9541e1e-7176-4c37-a574-4c093b7fcb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5423ee2-2e33-49dc-a84f-3b18a5ee4f8b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "927633ae-9504-4eab-990f-1dad851078b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "019346a9-58e7-4193-a41c-f33218c39313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c97060a-78e3-408f-9adf-40dddc73f20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "54385aa1-3135-4c3f-a453-fb81a1446bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26cb48a-7a50-4fce-8b25-88a9e51ace8f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6627b5fc-66c0-49b2-92f4-fe8e2371e9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775dafdc-fc60-4225-8724-444b52e020e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b29778-557e-43bf-8f6b-1a92494700f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4622557-ae5b-4222-a7ae-44fca63f9191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2ef114-4f5b-4c59-8a9f-79547c74a4ce",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4260f0bc-01ca-4883-932d-2e124b6ee5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11cb6ebf-0388-44c0-b541-3c36368c89cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffcdd99d-0f77-410b-9e9c-df3794486860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51116088-24b8-40d1-b88e-28f8023872c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adf9215-8c98-4a04-830d-861a6b1ee3b7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312ccd56-ae3b-4e3a-bb86-9d59e1e03ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "554cc7e5-7214-471d-9a1a-1ad6ce2f2112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df1293c-a7c5-4812-97da-82f8f67dc9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec6ab4b2-14cb-4d39-ab3c-d9da0686f648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff0bf28-6afe-43d4-a936-e5cef34f0dd5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c433502-cbb1-4315-8b84-15dd2ee13513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33932e67-ce52-44bb-b368-ed4cf053f9f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4d0578-2a25-4093-a0fe-be8ccd965816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6506a8b-3530-4807-9f36-2142827dc34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8920e916-4369-4a85-b72d-2be397e687e0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f92616-78e7-49be-baad-586b3b2d08b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c90e8b65-bd9e-4ba9-b4d2-216b51863b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7845967b-d0c8-4b9a-b55d-1ee705561d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c59c8e9b-0cc0-42d3-8c4e-7eae470dbb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5178c0-9aa9-4890-8f20-fd2df7c8f5aa",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0f116e-094c-4b07-993c-c55b0e2d8802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d167887-e008-4653-8765-fd9e9c209cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2afdfbb-adf0-4833-8003-627ffb7dd6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d188744d-e680-4924-b5f8-f672cc6101c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d426d30f-832c-4104-996e-66893e00e3a2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba979f21-6189-45b0-a78f-ee5e6b9db629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b787a3-6cd5-446c-9f22-b82d79907fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7169a42d-e25c-4c60-825e-f4f4e48ab527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc044923-2e37-417e-b6c3-e398807cbe7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd7aefd-b274-43f6-8fc0-8e9ac1938a95",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf5b957-a643-41de-9c13-efc75d909f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b6fccb-5dbc-4bb9-b083-e139c7cca83f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523288b9-83e6-43b9-b95a-a248c62d4439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "efe39da8-1596-4207-90ef-794df7b16ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29843732-fcad-4ab9-a9fa-e284801a2b24",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47ea873-3e08-4709-af4d-ac66db38424a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e6a228-d557-4396-b421-b9f7f4edef18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47a9994-ee63-4517-84ad-5a569e74640f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "86fc7abc-ce45-4072-8766-282a34d9ff7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb5a51b-5b2f-433f-b5ca-9c91ac3c9374",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc718ef-4af9-414b-ba94-ff24f8b9eea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "096e4494-5692-4c29-855c-af5aedb9e4f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83b0161-a570-492e-8a1f-c3c4b87d97d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f25a845-85ca-4e79-901c-f3fb1e11e8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd0069e-a847-4ff8-b04f-de4431a431bb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39702b2-7be7-42e7-aba0-06fd3a69e6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b6f1e7-00b3-40d5-b09a-d7bf7aecb5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c54553d-b47d-4010-b434-ddc879ee5553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd704f4-c8e0-4f78-9583-b6c5536e0e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb070fc-fd75-4b95-a478-91d6606fc370",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6857bbaa-abb3-479b-9b5d-c8c9fe43e242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f1e9f9a6-e9f8-4091-a0e4-4a46367cffae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa590c8-e285-472a-8a51-f6eaf6685df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "685570cb-2f64-40b1-9962-19cef39f68d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7833e1bc-58ac-4365-83c6-bd6c5ef92c3d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5b6ad43b-4619-47b5-9c65-d31fbf2e8805",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fce3dc-d842-4922-a95c-0f68060d9cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "077d0a1b-9670-4381-858c-091186cf7067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc86e2aa-f63e-44cc-bae0-08988b1c36c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58d099b9-78d7-4706-a1a2-772107308b89"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2d23f07-572c-4f0f-bfbf-8b188bbe4f5b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff6526f7-00e8-41dd-8827-8fb06afdecc3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66791e7a-705a-49d3-b67d-65cb9b40fcb8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41d3406c-9fd3-450a-9855-6f7972cafcfe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "42fa7016-5a09-41e2-a06a-4c61f3889e6d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8fad9700-da9b-43cf-8a70-8d5e820d9d5d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "88428659-ac35-4a50-bfe0-3a3d29b96c18",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "034d6ce9-61bf-40f3-971e-c8b54ee4405f"
                }
              }
            ]
          },
          {
            "id": "dac9cea6-1671-4381-bd4e-f224ec283598",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a167f67a-c769-4131-a66d-c8ef669b507d",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "eb3e29d6-d597-4fa3-bc51-5286f8d80f76",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09764a70-f0fa-4445-b2e9-043c38d5da53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "faca33f1-3096-4a9d-895b-64561455710a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76f1c7c-de32-4daf-877b-03dfc83ddcc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f359478-a55f-4f60-a40d-a96851d5d15d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c0d183dd-adfb-4f7b-84ee-30ec0ccc9cd3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6451c2d-a7b0-4e2d-83a8-c134902ca260",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0569e789-10d1-4eb4-a373-fa6810530cce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5b48993-9f38-4699-aa72-a4cc311a75d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3b3417eb-19ec-4f19-8dd3-27c2fa2a3a9d"
                    }
                  }
                ]
              },
              {
                "id": "39ecd3be-273b-45e9-a983-7fc67628a796",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70b6d8b7-f0b7-43ad-b159-557fb2a098c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a1d38b2-9308-4d0f-b0c4-24527535b691"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74c22dba-5fd7-4b96-9eff-c04c1775c5d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "543c7ab7-558b-40e6-87d5-389a7ec23787"
                    }
                  }
                ]
              },
              {
                "id": "24e7fe73-2252-44c8-b225-3792169733e8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07d1064a-a356-4ab6-aeb9-770cf2c63791",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8aebd89-4b2f-44cb-9a01-cab32ed906fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1900e9b1-41b9-488a-b576-71dbdc981c77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "80ccc73d-efad-416e-88ff-9b31b57c06ce"
                    }
                  }
                ]
              },
              {
                "id": "80f485d6-f8d3-4952-b3ae-7f615c747134",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2109665b-72ec-4cc5-8d8f-cb6148d9e93c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f406bc7b-b58d-4d73-a149-1fa569a71b68"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6668e69-a9b7-4b21-96a2-27fc48e208be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2f343d2c-2baa-4852-b334-088e06281d77"
                    }
                  }
                ]
              },
              {
                "id": "0d80563f-5874-451a-9eb6-e17d4e62fdcb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd4dee91-be40-48c1-a939-21b41415e079",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1576d225-498e-44ba-8248-31acb21565f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe2e69f0-0574-4a96-8843-9eae271dfece",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d304a69b-5205-42f1-84b4-a09fa7e2852e"
                    }
                  }
                ]
              },
              {
                "id": "6a4194a5-4257-4643-9145-b0cf96d6845f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88c342da-9ab2-42aa-bde8-eae8f355f06d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "beb0b4a2-ca2f-4d09-ba6d-0f58dcbae296"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a642bc20-2477-4b3a-b841-bda50e0bb396",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e80af915-1c50-4ac7-99ca-3469e0b1d0d0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d6356fc1-4a54-4503-b94d-f89f27a391d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7d5c051b-c596-469e-a8ac-9e387ed0f107"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "baf92064-b696-4751-a2cb-5d6aee313df8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b53d6324-4ffe-4545-aec6-a0a3f7e07a57"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c23e0965-8f68-4fad-b099-5cd5bff91953",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9789930e-fce6-4e7b-9a8c-033d0a681d28"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e569235c-38af-4e80-b95a-364c9211d2d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bdf1cff9-4d6d-418e-98f7-ff60c60f2a6b"
            }
          }
        ]
      },
      {
        "id": "3362fa26-3865-4862-9b41-da852f1cc84a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "703ef48d-29ac-4eb3-8d51-3997721e4786",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df356fba-89a1-4288-b668-7c34f2990402",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4fd48c07-7dfc-4532-8326-b298d9d74cb6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "781240ea-eb08-46f5-80e6-5f2260e5c582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe684368-8857-4bb7-b977-376e332626cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed16406-5b08-4534-9959-f5fab4fbbe7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b49d50f0-8f84-4d1c-9091-9d0ed112ed39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39929d9d-55a5-4f54-862c-54e29fd46359",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2285fb-e2d9-4a5e-aa22-9f1d59473b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c0e074-a0d9-4fb5-83d2-017843ca3510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e12578-7d99-4f51-b3f5-5141cb7f4088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "addf91cb-f8be-49bf-89cd-d4096b6a06b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d7cc09-a05c-48bc-b59d-2ce20f93ff94",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "143fa716-3ed0-4103-bfa4-c2f12ab3252b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3451acd4-af4a-4981-9267-38ea1d3ff7bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683162e5-e038-4404-9f1f-77baa3d9f71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4e4daff-0e06-4fa5-8651-c357a8da624d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686972f0-beda-4c7b-875f-f762c81b303f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ecc78eb-6371-4af8-8333-7f782f04012c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a386d363-085c-4606-bd27-9163984b5a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4ecff6-656e-41e6-b61a-4346269d0f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe2e70c-f2f8-45ce-91ac-450ff210657a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a8ac9c1-fae5-4a1b-8d82-52f9117ef390",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52735007-f2c1-4024-a955-81890dd0eaed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5657ec8a-5170-4878-8652-f9bc36529955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93e4502-f054-4069-8d5f-91c17a46afa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6e0ad94-0a59-4f01-9832-1a46506efa0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11b93a5-425f-47a8-b7e6-cb1fa9d77c73",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd04fd3-c0cf-46b5-b802-7bc41feb6b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d745b5f9-302b-4859-8eb8-e173393319be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e9649d-c71d-4ce9-9428-9ad3cc38b0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "65a94374-9616-435e-8528-5f25895836ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ed5ba2-776b-4241-ae1e-88d1ce77a7a5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09bcacb-f585-4af5-9af0-96a4945c06b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3884e4-7d57-4332-95fc-b61d51cc7902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71563666-a100-46c3-8ef6-5e59a3b19263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "42ddcd01-f834-418e-8511-7de893adb008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518b1707-027d-44ad-adb6-86943b7fcbaa",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2214ff5e-c0ae-4bfb-9f45-7ccc682fd3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90ba38a-758c-4578-b4f2-d194119168fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c858adf-378e-47f2-ace4-1b273b6065c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e144d46-fb54-4dbb-80a7-6456200cfa44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751db8ee-c74d-44a0-b484-7e8e99ce10ec",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9071042-56a1-40cc-942b-94e892a893df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370b3511-97d0-459d-92de-024710bed532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5390f1-6c19-4446-b8ee-d3e32d05c1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63c659d3-228f-4642-aa8f-a023105e657e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f5ed83-8212-4392-9ba5-cf305979a01c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf2719b-bca6-473d-bd46-482781f8fa93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a8f5d9-411d-4f36-8f67-69abcd8a91f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2ffcf0-a513-40ff-9543-bb9e2cfc56d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f94c1a8f-c67f-4a76-b550-064be3d4418c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258bccfa-f895-44b4-ad0f-2773539f1691",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b751f176-fb9d-4353-989c-edb9449bee83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e4dfeb-a849-4bee-b1de-6e01418cac9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a16ef2-7ec4-46a9-a59a-451f1042b83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0e2f1646-68f6-4fcf-998b-2635b68847f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf5bb55-ad3a-485e-9d49-45f18d29236b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09b2bd4-5841-440e-bda8-cdb42562cf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da40873-1e2b-4ff9-85b0-e0db5889e115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e83eba-2590-4bf3-8b74-055a59aa17a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5e5af6f0-6426-4a15-8205-ebd468e5496c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15407e1a-314e-444d-9bc0-1ec79dfe3b59",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb43e80a-415a-4c68-b53a-c7dd2eb01cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80b59b2-b0b1-4078-b475-a0f3e5309032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f867ad-c6d5-42e2-b7a2-b3662564c403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd57a181-2590-40c5-8574-102cb906feab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456e8b07-f507-4efc-ac3a-021130612b02",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ae3a51-f9c1-44ab-b9b8-98a7530f52ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b4ed14-6f6a-4a1d-8958-cd92fa96c000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11368df3-235c-4c72-a27d-e0f4788fcaae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3259204-12aa-4c8b-9173-5fae12fa37cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9361d57c-d528-4bf0-9122-56406fc34a0f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b690ad4f-eed6-49b7-9ac7-fe32703f93cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1138ff36-d020-4222-a4d6-dda995885303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae946258-1acd-444a-8988-6fe1ae18f9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2538210c-cc19-473a-8c19-a96ec386ba33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea456f7-5690-4442-b4f7-17927dca907d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4941a4-1122-4f36-9d21-4e5a011467ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af78571b-5d87-40e2-b366-04071ceb9aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e0200d-5880-4d59-a01c-1cc906871f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "852db5ee-4de9-4472-a865-68ff8db937fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada8b339-832d-4dee-b002-f2114cc054ce",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401adf4e-011f-40ec-89c6-5f26982b0252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "807eaf5b-094d-4327-98e8-39b5a88a22eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3754b9ab-7cfa-41cf-9a95-fad8e0d9c8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb5ca20e-b45f-4ede-8711-86f9bebcafae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4de42e-18f7-4578-9d26-5352a8677898",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75e97c8-12df-4a58-8568-37e9c2c5114a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5698c1fa-9953-4099-b8c1-d6f087784dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2663f5ae-ed11-4149-bb72-ee138578eb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7349b320-a089-4f01-9f64-4fc8c315bd98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769a7f6f-22ef-447c-a13c-06872728ef74",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377be6f2-bcf0-4e1e-9cd4-a793f7d8bed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d172187a-6293-4de5-ab2f-f9848ce62c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eaba7e7-9cf2-494c-b046-e3ee685704d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d7bba77-e512-461a-b5e7-09e4ef25383e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6bbdfb-5362-441f-80df-5fed08bf7aa0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3268eb-1e05-4d3c-a879-dd77df40cd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c201b48-83de-472e-964a-73d3171e6720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5f6fba-4d98-4b28-aff7-2b8429be0a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "524ac597-f5d9-4caa-b718-63cba0f86006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618ef036-627f-4e99-afbe-5d2ca8caab4b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d429223e-ed82-4161-b4a1-4a8bae38aebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc7cf14-7529-4575-871c-efe99c38faca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ab8939-b342-47e2-8d3a-302c8ecd62c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58621ef1-0c35-4c4e-8e4f-a3ebcb59f451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5949e8d4-a431-4c13-9e7b-32c9603375b7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb68e77-7989-499c-b4ab-5eec3677cd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1b38f4-0960-4cf7-9fcb-5b24d33dbb9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e819e35-3e76-4af5-9333-a46dfc7b2a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08110028-3b5c-474b-9b28-a16a33d2b709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0bb013-3b71-4e9e-a749-07ab0cba7f07",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5481db-912b-4dae-93ad-45f7470949c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c23cac-bb66-49f0-b405-e14d2f26dd29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f96ea9-fdda-4cc3-b7f8-6754dbd53bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20951afc-0e70-4bdd-bb8b-89786b57ba35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee185a71-1b43-4c21-90d0-953bfe74de91",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2488945-bf9b-4a8c-a6e1-20d18e3eca82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54260986-e9d1-4edf-ac97-8b9064da31d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aaa00aa-9280-41de-bc3b-516f42e7f8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36c1dfb9-dc77-4663-ab0d-beb66bf91b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be021be9-3872-4413-9e34-92c1814c326a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39126958-4dd8-4411-9afb-436773446417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc3c4d4-a8d5-4b38-9b8d-b063de4d9efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f7e3c2-6413-4a66-a61e-bbf2d85cc401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44249b1d-49f6-4b89-9be0-10baea03776f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ce2095-a1bd-45a3-8d82-0d401195a255",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c722a1e0-58a4-4c7f-bc41-9ceaaa72b192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a32ebe1-db69-4624-abcb-651d63b39994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38471e8c-f1c7-44d2-a9ca-6feb473145ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e83e088-dc78-4bbd-bb61-576b5e74de13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6aa8bd-5892-4cc7-9e2b-b00e8ca113e0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb8cb33-3e41-4bc5-95e5-f3f236bfc332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e42933ec-586b-43a9-bc81-cb4decfc2cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c81d2c-aa1b-4501-af64-cda43a6097cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aec3389-9447-49d2-8931-0c8adc87db62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3a2257-3f08-432f-94a8-3752d31f069f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc12ea51-1086-406c-a896-065477527c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b961aba7-77d7-4d5b-9975-4517b4c27c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a43a9f5-1340-4c92-a822-5b74002dc34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf19689-587e-4b3c-8817-faa26da23664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4a9b21-039c-4ef6-9bd3-b3904f9c7d43",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "197e7aee-cd35-4ad2-99b1-16c04a87ef2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068e02b3-8c78-423f-861f-c08f901dfbfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c891f11d-1a2c-4577-96f9-50a166528844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f8219d8-53aa-4561-bd3f-9b24cd46ffc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c49f8ae-2ac4-4b4c-ad09-1e35c2cd2da2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb4bfb5-a12d-4ae6-a6df-9cc91420bc79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f880237-1190-45bf-819f-3a8a709e72b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2d951b-8935-4b65-a8c0-95cf670f67d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "836ce77c-1bbf-4420-ab47-7695a1d88d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782785ab-5a87-4bd8-8c42-b10da49682d4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71856555-7335-4fc7-8976-4de8ece52cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e7eab6-cf1e-43b2-858a-cb73ebff9388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c21c1a5-073f-4b40-b034-45807d332e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5366dc56-b18a-4c70-80bf-f1b129785c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c771c110-ed64-40f8-b4d8-1e2f59a5eb41",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f6e454-6650-46c2-b9b9-7aff8108f4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d94aea4-8ca6-43bf-8cf4-e63c7e0c2442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7449a6-4d98-46b9-b260-22a7afe6f647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bac4884-a88e-4da9-9117-072b3ef59789"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "398ab938-3a35-4d53-83cc-58994e312cce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0028e944-c734-46f0-bb33-a7736a618898",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d37929a-67be-4137-956a-79e4973decc1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5e232c14-f2ce-424a-bc7f-957819e74ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0208c1da-b91a-4d74-a28c-f937027da6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "801eacc5-7d83-4cb1-af70-50fe04339214"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b74be35e-9148-4ba0-91df-cd5a44f1b719",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05345108-ddad-4e6b-a655-6fd268eb2a94"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ac0ae43-f978-4cfa-a546-78781f200d98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01422b95-1b14-4dce-84b2-cb04dece367a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62d2eb38-c77f-4a9a-8cf6-bcebbbaf64fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "833af22e-05f7-4a5d-8e01-931fd9c8e386"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f26e1c44-53cb-4269-83a4-4399af4de451",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "362d8a6e-d29c-47cf-ab14-e09b386403aa"
            }
          }
        ]
      },
      {
        "id": "e91c9009-16bf-4193-bc8d-adc173f5311d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "f8b537e7-cc14-4e9e-ad88-950457aabc36",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e3dc8ad-aed4-4ecc-b78a-23fb12c20136",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "76dfe1d7-2c72-4288-b134-1f3f19515624",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4471a91-4a9f-4262-b478-3e66cee1b376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fda8da-d202-4d2a-a293-5602e457401a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055fd788-e59c-463f-9902-b799b129f7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea6dc3a9-e78d-4dbd-986f-5dcbae59003b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7919c6e-7ad3-4658-a9ee-77e169746f0a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d17dcb-e142-4a3a-916c-74c4f9ba1b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5228a1-0c83-4726-aa60-77852ad9abc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d14bd1f-72c1-4a8f-be95-8589d029a0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ee4055-24e2-4c20-9668-a946f1aae7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8ac55b-e450-4ed7-9f09-74568272f55b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5ac204-549a-45fb-a5f4-8133fa807d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "939e85b8-9ee6-493c-bc58-7e0b8efd2df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e1b1fb-12cd-4e60-a3a3-c2b9c304ee4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0a553d6-6b2c-44b4-8810-a1a5ff2e2dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898b42b6-d773-48a6-9ff9-2c6229e794d8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baefbf4e-f096-4d47-b184-b3049e426ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd937429-b25a-4f64-96fa-c9b64b22b97b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9a6361-1406-4205-80ee-d52f61accef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f69a748-3ac5-4601-89d1-b292cdd25cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31dbb7d0-e5f7-41b3-9ad0-1fcc6787a948",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9a43a7-6115-4463-b10b-b20bafdd6a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a3baa20-fdb8-4ab7-bde4-df803d3a47e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31aa5647-ab16-465f-8931-d4b8fd9ec9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df0f0dee-469c-4bbb-9abd-0c335e202671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36883b94-b171-444e-9a29-fe2e46e325f9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a253ecb4-d940-48e3-8f48-352ffa814f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb02204e-36a1-40fd-b6c9-a1e9cfbccd06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b18ec0d-de35-4ba4-9638-1693fe0981ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "364dd433-48d9-478d-b1bf-b470a9e718ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca307b1e-3057-4868-987f-a4f125b22600",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "518f7469-8236-4140-9076-f2bb6a48c776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "575cb13c-9026-4d11-95c0-8cf452bfa40d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62543e7c-2b78-4872-a544-32a9a8c32d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea5ce11-22f8-4ddb-a0a3-23b1a521f394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114e8a57-3ec0-44e8-9bfd-a9f0f72a47de",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e435504-0ace-4519-b335-9177271fc64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a23fcff-fb8b-49cb-85e3-ccf6f1fa9c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fefc472-3022-4819-b052-992c65d25ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8b4b81d-4bab-4e22-9970-69ff10b0ecfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240c751f-8d37-4327-b24b-b4eeadfc0c86",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91005b0-31d2-426e-aa69-bb772bdee843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4df3bb-be28-4cec-993d-2b686ce7fec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce39bba4-0041-4bdb-8c37-67e12bd1fad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0e9fd0b-c874-4228-b2f4-5d13bfebe659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4c4f8b-4931-474b-b7f1-d00f7bef9542",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f494c65e-c477-4c65-92a8-905a24cb73d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffdf5ea7-6c48-4171-916b-40ccd9c18279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c80bb96-d6df-43c6-a2cd-729b56c7fa3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd63ff22-829f-450e-b07f-17e8e38a141d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9525492d-0106-4791-a2e5-702eedb23dd2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e21671-a5d7-41aa-b1f5-352233c30563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a495c2-6ade-41b8-8950-0f187c184016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8041bfdb-2117-4a8a-96bd-81e343339ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1548d06e-2c39-4edc-bdb3-893f87effac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6757bb94-4e0f-4053-8edd-b1760bf36b7a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74564b8-fbef-4789-882f-612319b50f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f4140c-f13c-4284-aca1-3fc7c360f07c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0212b2-c71d-4bee-8862-a4bccedc225f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "907f2f63-4956-4251-8c6e-6e79b6908e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deba12a1-56f2-4b37-b5d2-2d4089f46181",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e480b05a-068d-48c7-ade7-7f48aea17155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e71efd5b-7e5e-4ba4-8bb0-c8fd5e0a39c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e80667e-0b29-4c16-8cc4-cc2e473949b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "038a5ca9-27ef-409c-90c3-8c2855398ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ea9eeb-8b75-4e74-a53c-7902cb12e449",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37501e4-5ff0-4c4e-a712-fc2aaa98c524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f50b37b-242c-4a28-9af7-5bc084c4eca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d647348-9b85-4a0e-bbee-9bca8190cb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ef50ab-c6ee-4c59-a762-bb7c92f2117f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b0af85-8584-458f-8507-df871deb0fe2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f503c661-22f7-445a-bbd7-d5ea750c9b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b9ef4e-3f30-4853-b6f9-6bb6e574b09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aba8122-99c6-4813-8f20-bb27d8a2b634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d37ea677-cfa4-4f11-8984-971b5a2a8308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a405013-ae46-492b-9ae3-9635dccf506c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a69aaf1-b898-4b74-a2d3-790dcfabd8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c4eb51-d3e5-43d5-8b76-a6ac2af9367f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94457c41-5bf8-4e21-8c14-36e441664388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "05717c0c-319e-4109-b4a1-57c9e7c91b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179f245b-0cd3-4c88-a870-2e6f2e6298bd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0cfcb16-c363-4ebd-b945-fe00c144b0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440a0697-1853-417a-9211-24e055e7df29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaa0090-e4be-44d9-8d5f-7430cced1710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef51939e-c96b-4b49-9ea6-69f4c61d8570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877a94a9-2e3a-4438-9869-8f01894533df",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee45b04-4e30-45aa-bd2c-4c04e8f073db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "421abece-f8dd-4845-8230-d9947f065fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47cc17b-15a1-403a-a999-c24b6fc18b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c13e3c7-8163-43d5-9bb0-0f44e019c821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfe0575-a9ce-46da-9929-4c2faef0e76f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3f11fd-75f4-4599-92be-564360d2ee83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31fb1969-30aa-46ce-a1fc-7c7ea4abb5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff06716c-80a4-4a36-9450-e1ad30f2967d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a342e702-9494-42da-aa51-60b51cbc1df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a12883-c22f-4d2b-9d41-85a8b99a9f9b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f84eafc-40da-4498-a281-2344c9503e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e0652db-7c16-417e-96de-4291aecc1904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999db62c-90ea-42aa-977a-18fa78dc4aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5442aa2c-3f70-4005-bdd9-69c4a916c93d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029e2174-7452-4650-b0d5-e74b9fcac7ee",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e7c543-6c4d-4ef9-aa34-cfae021f746d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48b7b1c-fd3f-48bb-ae48-6eee5f20e2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bcd380-41da-4c0a-a8de-797ff5ab2ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55b89b12-6fbe-4f5f-bc08-12b79b5b11e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f4f272-9d3d-40b4-84da-7a23e315413e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31614265-5d6c-43d9-900e-c8f40fd52ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0e428f1-0542-4bf4-bb41-bc5d24ac1636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8dd1653-5da2-4f58-ac37-23da691a0d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "583e107c-432f-4c4f-b1d1-f86541b37a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24ac5a0-d29b-4b0a-8965-f6c651a509c4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccddca42-c60c-4a25-9126-22a8c1fb8be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b616e34d-27b5-4db5-bb56-459654fb8c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7175d4-54f4-46b3-9ca9-41fd5afb2581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb20dc0-8070-4f4f-9bf9-1a875a0c2fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b669f0fb-b320-4cfe-a1f0-9cb4db368f9f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734fe914-d93e-4d89-babe-b19d060ceab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a18014-0554-4c99-b052-8ddb72bd9cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55533bd-4268-4e58-ad88-28e7928eb72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11e61792-9438-406d-986c-c71eb348c118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7153656-b868-464d-867b-d818423fa739",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "525b741e-91d5-4391-87a6-69f8e860045b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0014a609-9675-4cfc-b1aa-5d583b9189d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e3dd19-994d-4204-abc4-08b05f388f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0be6b56a-775e-48fb-a641-18e2f0f81a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d437211a-b18f-4603-a40e-b1bfd652be4c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d454acc-b82f-460d-8c88-9b0c39975506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224e8e99-7bac-4808-a835-cd503d5c4027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5e30d2-a59c-435c-ab65-ddb9cdf3c185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c5e5dc-ee1f-4d8c-bdf0-508d3cf8f7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e28d6ae-a56f-4623-85c0-8803a0db9051",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06d6e7b-7fd8-40ee-9f25-739dfb412eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf29879-92d0-4db3-adc7-d77c8aae6a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e8bb2f-4485-4618-8227-e513cd70f638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ec6e2e4-7f5c-4108-96c2-9791c29e5dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11d1b81-e365-4345-b954-6b6b20b5ddd6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9e787f-afb9-4a6b-aa27-f2621b6bcb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82fdc85d-5421-4304-8492-f6ea559da0d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee00a53-d871-4e8e-b787-e829040bd7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "046b8e47-b468-4c33-accf-53723542e831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed94e256-bcef-4db2-b17a-bf24f675de95",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d501ad7-4cc2-4836-841f-ef151f7cfb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24315f8f-fb6f-422c-ac8c-629fa5a4c241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea36b0d-2f44-4c76-9c14-413c5a36af96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8afe9b8-a88d-43ee-bc53-7e49e6dfeccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680fbc5c-5fee-4542-a09b-d0a0b84e3766",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49af1074-bac4-4e7a-b07e-d009eab9c553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a732506-e74f-4a09-adda-dd904babe6cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff38487-2075-4c50-b39f-f4433cfa8cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8153994-0936-4921-86fd-cb3214184d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d2633f-2039-4839-9f8c-543c6bb3171a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae128be5-720b-4644-afa0-9b01578fc53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7262ab67-4097-4904-adae-eedcf6d20aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb566d2-a321-4e56-8937-e0bc04a81ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48f5daf2-ba19-482f-ba90-36eddc2f9a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7036534f-914a-4478-a879-4a0fd3f02bf0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeff429d-6488-426e-bcb9-71eca0bcbb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c51269-0542-4fc1-8890-40cb20e50108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8249b0af-41c2-4fdd-8bd9-38db247967fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7db9f6c9-1b13-4a79-9561-e9b60215bea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3143f9c-9b14-42de-811d-31bd4426c369",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e74245-78b7-4a0d-a69e-692d3988b1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a059ba55-2031-44c9-b190-de7444dd4260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed52d59-6a81-4e4f-82f9-c3ddd38692f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb78c77-4272-4997-9941-ce710a910a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46b21ac-82d7-4d86-8661-eb3c47464aa1",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6bbdc80-542a-45e0-abbd-b14c6d165df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8905f3dd-fc49-4833-8bfb-c1cd282f9177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef80cf6-2639-4f8b-9057-e678731468b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe57fe9f-3cf6-41ea-8eab-dc1749eade17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bd5075-81f2-45f5-80af-7ef06ac3abf9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d136b6-967c-48bb-b56a-489bc89daeef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cd3d0b-7d73-40df-beb0-87aac3707e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd376a5-c622-4473-a0f1-962c90475d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4899eba-b2ba-44f4-95bf-06e22e2bb128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f45039-212b-4aed-8ac6-be5ee31f58d2",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da79925e-e595-4d24-b514-aca586b38564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0419d7d0-db79-43c6-9957-20633afb2ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166eb71d-3ee7-4cf4-bd45-3aca620b1f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16d2e730-2495-4d49-9800-c04026c72768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98367100-7d57-48fe-9b1e-4c20123afbbb",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12a5f7f-150a-4d8a-8105-6881fa58ed0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c1c02d-c405-4c85-8150-7ec4c8309b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7489144-436b-46ec-9a18-9b601e73a66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0573c9fd-b096-484d-a9be-6ce575e5cc7b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "94ba1f9d-2214-4a9d-9eca-dd511cc769cb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "62681832-0ec5-43b4-bc50-6fed31c32216",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99dc7863-de01-4764-a7a5-a4b73daf79aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac7f7fa-34fe-4ba3-97ed-7cf55053c283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b65c788-44b7-4ab2-86b5-d1686fdddc5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9701661c-c5f6-4453-a8ec-f5de11a8317f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "721ea7d6-0328-482b-9018-3d67c5c9e5ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79734eaa-3045-430b-bf43-80ae7835f065"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77d64255-9868-4025-8b30-a01b4b2f590e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e13c570d-31b0-43ea-b423-151374b80d80"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b62d8c3a-abec-4fd1-b24c-ee09f8122167",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c1d40d12-9b1c-46b2-832f-90408cf48220"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a4f02b6-e243-44c8-80c9-1836beca4893",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25a9ba0b-4a36-4213-a7fb-89f61fa23f02"
            }
          }
        ]
      },
      {
        "id": "6ac5e12d-1fdd-48b4-834d-fca9af9ffbb4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b5691fd8-b7d2-4f76-a3c1-b766f39f8d2f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb03ccc5-b7c7-42a6-bcfd-efa70250daa4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1d917b69-6c07-41fe-ab8d-e9b986a5c217",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f45d916-491a-42cc-af6b-bc1ddcf4d933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d088dd9e-3be9-4854-9d9b-853ab85a4cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddb13c6-ead2-454f-b3f1-69bf13c27a98",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f450f0c0-6a54-49e4-ac5e-5a297f702f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780c0dd8-c661-4a8c-b3c7-e25786187ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d8c7e4-7274-4bf0-934b-9959c9ce4bd3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276a27f4-ec6f-4a65-aa99-2cfa8001afc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec559d71-cb4f-4f5e-8cc9-fd102793286a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2347cc-4ba6-4413-a71d-f6e041882ec7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f335cb-5ac9-4d7e-b497-9323527c86ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19f4d1e-cfa9-403a-aa63-14e5c0fb414e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1beac6a3-f27b-4fd7-907c-0954b2bd1f24",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c6614d-8cd4-4e43-98ee-196b9b80fd33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d8ccde-2bd3-4b0f-aaaa-041b504e2281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15f90b4-7622-4ba3-b072-5fb396a8085a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15d89e3-bc1a-4767-ac12-124d597443fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b156acdf-8537-4b13-b16c-afc49f91d354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88044bed-da93-4437-9519-bab0e05ac07f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3714aa2c-d53d-43d7-97c9-1e5b7c6af95e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b93340f7-9a11-40ec-a0d1-3672cf4053ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9115f3-436a-4b6e-b5e4-a2d690297cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e3431b-eaed-4b1e-9a6d-07873aca68e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae678e4c-a795-4de0-adce-040cfe021632",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130cb7d5-40d9-48f6-a2e6-2966fd0d3c48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4605c2f-75f5-4b8c-b336-a449a3c1d50b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86233fc-711e-4b7c-b100-3fe0d0a16f46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5830ce8b-2aeb-42a2-b634-fde0fcf411e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45a6350-0362-435c-a071-eccf7079d942",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8745318a-99ac-44c5-8d7d-713577d224f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f115eb-d323-4908-af9f-cbe6c7396205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f231afa-6ad6-46e7-bb34-b594ee4f8209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b8b3dbc-1549-4392-9df1-983c2899707b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bea5422-71f6-4933-93d0-17e06b4c8430",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2096ff3c-b56e-4f24-9d68-eff64fa69328",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4db6d793-7701-4e13-afcc-22d26582d7c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3edf4a1-fc8f-4716-b285-ddafdcc2c3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74341acf-b36f-41de-b912-46afd2d4c8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f450a29a-1598-40ff-aedd-0f08fb369124",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d5ce73-8a5a-486f-85ff-85912daa8126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f8e8243-50b1-4efd-a955-715c4d346b1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bfd64c-138e-4017-b478-f8274cc6a20d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a827f9b-265f-4c6d-849f-cdd4f58fff08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2db8548-cfa4-480d-b4fc-17bda0b30443",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a90511-0ed6-4be9-8bdc-0d5cf9c5d366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a7a988-27d9-4cb2-b8ef-9313b5f53cfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e495aa57-a2b2-4030-b31f-a14bd0ed0ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d8bff57-bee2-460c-8781-b05ec0afb07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105149cf-080a-4b50-ba54-13cba6f09c1b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9711b284-7259-4ccd-ae16-153c881899d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40076a28-aaf5-4e40-8135-9122acf8f599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c64ff8c-99c8-4f61-ad80-3aeb00c12ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01e39339-70df-44b6-af18-d9b61f9c7a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46b48df-388d-490a-80c3-c6797dd9d920",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d0fec6-e8ab-4e67-92dd-799093c3111f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cad6378f-813d-417e-bd97-f25426a35ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be159c5b-54c2-4193-a6e9-609e624fafdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de70a6fd-f62c-480f-99fd-df01d99b0b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7dc3764-200e-4b5c-a9e9-97a40166da72",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75467153-442b-49cf-98f8-6be04f931157",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0023461d-0c7f-489c-95f9-bafddcede2a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "784b4c19-cdc1-478a-b2d5-54cf195f9014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce966f73-42b0-4079-aa04-7a1a7ed4e58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5374d7f3-99b7-4c97-97ef-064757fd69ca",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c956a3b0-04fd-4e7f-ac81-98ee2c6b5c0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "292ee851-6b5c-441f-a900-223ee50fb075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ec3214-7c29-473a-82d2-80028652a3c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c37e7bb7-55e3-45d7-9d55-6621d64715fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e5ccc3-b224-4b20-adca-ffa4b54effce",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b662b6c-0ecf-423d-8318-c722a2de833f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b46dae6-bd02-4e89-8d9c-4eef7cc81f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2d0314-265c-4459-afaa-f667dc6e3ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f04ce47-c453-4376-82dc-be37be32c77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68384a9-cd0d-45b0-9127-9ec7b389dee7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4828b8-5bdf-4630-9c7f-a3aa15b952a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "421c14f2-ee9d-40a2-af64-6bea1232b7b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4fd34f-47f7-4a6b-acc4-97f0d26e2f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe40b473-d592-4d34-a09d-1e4668f5247f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a492031-1a46-410e-a9db-bceb04aeb262",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee64058-25a5-4b93-8707-724a55fe133e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe0d8db-027e-461e-97e1-c4ab62b4e702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e2e888-6cc0-4573-8d86-02392e5c9d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db91118d-91bb-4b4a-8a94-01f3d6b1010e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d0949f-1c31-41ef-8470-d1ce1faa7920",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855e6e12-55c1-4778-b768-dc56e1f23081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb06762-3d38-40da-ab75-8b1ebd5baed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63fcc71a-d2c1-4e9d-8b3d-b994b1743e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de1b2d81-0e49-470a-9f43-8ebcdfade998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e430f1f-7d6e-4cca-9e74-686b5a77285b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322500e2-853e-4e27-8279-3f9b3cfd3d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c861d0-ed61-4458-84c7-c74eccedea34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60180d86-5a19-4b4a-b0af-ab99d55b75a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e033e5-df63-4109-93b8-f5542c0ef70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73295cac-6b6a-42f9-be61-953e61ed2be0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb3fb807-e19e-4ff5-aedd-8ed4ff098b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b39d93-2596-43f3-9867-2ab405156e67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cabfa5c-5a9b-468a-8428-64016fb11122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059297ab-ae65-443b-b85d-a4363d004a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d45757e-46d1-468a-ae1b-792361e18869",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f53e9e-e6aa-4c7f-90b7-aabf090e26f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c74888-77e3-4afd-abfa-5d9dd43225ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faddc0b2-cb0d-4b22-b414-41f399dd927a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ffcfdb-8ce1-4323-a908-33e3117d811f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea22af28-c25f-4721-a7ff-352bea083e62",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532d8b83-35e4-47f8-ace7-daa0de741de4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91ef394d-45ca-438f-b0a9-9a730d0a2379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a94a08-b8b6-485f-a5a1-17c39971fd8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c50a865-292c-4505-a498-83323ac9d853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84eb6f88-88a4-49fc-823e-dcfee15ac631",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1558e3b8-7d24-4a4f-9a92-b094bd29cc1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bbcf826-21c2-47f3-a55c-5e4f72b47f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42db5f9-18c1-40af-a5eb-5ab656aeac43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96737c9-eb7e-4b9c-b05e-c1dee06f8aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933f634e-7ffd-4f59-bff9-bad982c6bb75",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37c4d21-88fe-43be-94c5-f00502ddc37e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "254fe909-ea96-460e-bc9c-74e0d6b521d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec957981-4ebe-4403-a95a-c72f30908116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4732167b-f5a9-494b-add3-462133574bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8de20c-f6e2-48c3-83a3-d2149fb6be4d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cfa6a4-c1f2-4fac-89f9-c0e67126f3f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea7187bf-e989-486c-a2cf-d529d7ee44a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dae0269-8e7d-45df-8ac3-a2ee81f4b703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "995259ed-8561-4749-bebc-1f8edaedb600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ede774-4046-4b74-820b-8409904f5a2e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09af889e-db98-4810-93e0-170dfcd5d449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef073b69-1dcc-4702-a181-d1f5ef703ab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c61632-7f7c-4ebe-b6d0-87b5a3e675bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5490dc81-3a2d-4079-b3f8-acecb66eb82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e954f3-9b81-464b-a4a1-f2701e837d59",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf6a1ce-ebce-4f48-a456-2d298ddd8d40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "296a08e4-2cb2-4ebb-9cbe-2a88c0c7837a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0554cf7-3598-4952-af4e-d9652bd8701b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b5470e-642f-4a88-82ab-a5158cbc13f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745c95db-89c6-420d-83e7-49f296e9782e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8e4b58-f64e-469b-8f4e-6ed721c39917",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d91a523-b5a5-4ea7-b467-e8f59249c9d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "555e1e45-03f4-4f08-b14c-e75095b59422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d49981-e3eb-42a5-8fbf-405d207671c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a035ce-d0d7-4ef5-afb4-bd0a022b8cbe",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6f6fff-4c4c-444a-8b5e-7c8d55e33cb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd913530-c9d6-4404-baa8-e336bafb93c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3704571c-4367-4cea-b5d9-cbd86e45b9ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a125d68b-5e67-4b95-bdf1-9d39cfabb70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2965c05-149a-4e7d-a3ad-2fc134e754d9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df656bf2-7d7c-4b50-855b-516d887cbebf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "953ab6de-820e-4006-a2b2-823c53bf3ef2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c6cb5d-bf93-40b6-84c0-0e74795100d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6400bb-5066-486f-9bfb-f1856efb449c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a25637e-4859-47fe-b775-9713b46587d1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b87c77-11ae-4f7c-bdea-940f03398e35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f0c015a-e985-4f10-a56b-465eb20ce10a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db059c40-d5ad-4610-83e7-3c1c8d02e408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ecab7f-b885-456c-8290-139087929d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be24bbd-d1cd-44d3-8bc5-28ce00a6371d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3613119-26c5-442a-9023-0cb496c9a68a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9fbcd1d-c688-434c-a6ff-9e2cda7db1d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e0e87e-6898-4257-9f4d-3f661aae85c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce54170-c03f-4f32-8428-a63a08f3ade4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6fa0c5-bfcd-42ed-ba5d-988852e993ca",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca4d522-2492-48a7-a54d-7ca05cb2c10c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d3aa72-e4cb-4f69-8b59-a2b97cd2c1d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54d6f02-e9f7-4d61-97e3-87a35fced818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c82afc-14cb-4f4a-8a86-dd99eeed49cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824e2f77-e08d-48a1-98a7-64387f51ef22",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711539ac-a2ec-4b80-be4d-5c4646a488d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa7b7e0-ad73-44a5-a764-9c23ffe4fdde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "475ba61f-656c-4328-9aab-404bacde5b5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a68f672d-cf1b-411a-9636-d9a534cf171e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f742ca-897d-48f3-87fa-d1b810313b2d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a875ae1-72db-4516-ac64-180d3107150f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97926f09-cef9-4d99-876a-40b35e682eb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca3962e-aa4e-40ae-ba76-c183df5ea8c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad89617-bda0-4771-9e0c-b99ab91864c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db134cc0-ab05-48f6-9dc8-cb7a76a89a13",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4a167f-db95-4e08-94da-967d8e2f1a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b21f4df-eed3-4dde-a802-92672784a044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e82618d-4dbe-49b0-aafe-851f1093b06a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d220dc5-b104-4c59-adcf-f3bd4b5f65a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5ef0df-195b-40d8-8a42-11b82d9fda3e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d540a59c-2a01-4b68-92f7-34ee0b01a3ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d246919-3cfa-4e8c-98a2-4b5547dc647f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64686298-72e5-45b9-86e4-defa4eb95090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb8497f6-efa0-4733-a265-4f7e98ca2d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b45574f-c9b7-4bd2-b6b5-1d6dbb142555",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311a593e-00f0-4564-af75-2110d84b4c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c2aa4a-23cb-4f68-b66c-a63abdd245be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcd12e9-c5d7-4f24-95b7-97957b3c8210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "180d16de-3891-42fd-834b-020669ad626e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3752cd66-6b83-4333-bc5d-67c136679128",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61fd82a-4524-4cbe-9bdc-d97f89cce0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73b41bd0-c57d-4746-b6c6-0edf1d6d9811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ec81f2-544f-4bbb-9212-e031af1cda10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65da3480-f98f-42e1-aa94-b08fed69df93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e26fa49-693b-4bf6-9fe6-e5d8fa1a5318",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71186413-68c5-4650-9eb7-f41008745c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad6b8e90-0e9c-4bbe-afc1-fbd184aed7c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "818a88fb-3cc5-4e22-a828-e83cae6c400d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b47fe316-63e2-4152-b703-1eb5ebf63d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f957df-72c7-4101-8069-ba0b69f76175",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b52bd0a-e9fc-4642-b4ca-c6202f6e6c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c1ac0d-4647-4220-a14e-0950d311276f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9765ffaa-ae1c-49ae-a89d-112d14468473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d76b9d-377b-49a5-bcd4-583f330ead2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ccbbfd-bda8-47a7-98bd-e0630892f7e5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada1fdc2-0be3-4755-acc9-a74e7affdd56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8749cd36-628e-419d-8f96-e0ab4d1f3c31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858fb3a9-2550-42f2-b674-33566eae8959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a07db896-97ac-4f5d-99e3-2ebd2dce695f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dabddc1-4f9b-4501-bf09-5fd109bbc41e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97392bc-a8b7-4d69-9bc8-f72c2f44af4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "738ce51a-05fd-460a-bb65-438fd7b9f25a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb5fbe6-9359-43a7-bdc7-bf64756ea48d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3b35aa-5f2b-4ff9-8984-8bbc6451ead2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f2f2df-2bee-416b-aad5-d3d359bef9a1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148b05ca-50a2-481f-ba86-afa1f50809d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcc2cca-2fd5-4c43-9acb-19664cefa514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4735f5-5d1b-49a5-b30d-045f92ca1ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae7abf75-c76a-445c-aacc-44b2151ef1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4b9c41-931f-443d-9f10-a98b082e97ae",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f299a9-ff8b-4b07-bc63-c7e5e52791c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4954ba6f-c1b1-4574-b718-f63a75bc4e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cb85fd-ca7f-425d-8a2a-34a4cc90b41f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b58712ad-b3cc-49fb-8e23-e064623b74fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7252b94-b9fc-46cf-bc25-02071fcd0c10",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc394ce-632f-459b-a4c4-4429f9b42f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ead1d8-247f-4445-8f2b-d68f8787429b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8abd3c2-5047-41e5-a103-96b764e5abf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513e4b19-4d49-4faf-9d25-e7c90c3b2272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bf843e-5afa-4826-892b-eccd75bfa5b5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48623128-7d5f-4fda-8cac-e99917b85666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d06e7e-eb7a-47e6-b0e6-3b352a95b8a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de93dc8-b63f-4fc2-8ffa-df65877927db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a92d75-61de-45d3-b031-4321b4c2f9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ddfb01-1034-4f4b-99be-3d84717c7f85",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd6ad1d-f9e3-408e-9305-1165faaa6df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a47f00-72d3-48c2-963b-8c2d3da6bd76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95bd2225-dc00-4adf-a476-0a77da502c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b7736d-cb0b-4886-b27e-e96048e60424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2210ea1a-be87-45c4-9a25-ecf154454369",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84437bf9-0ec5-435e-9a37-4b6303833583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f346df8-fbd5-4ccf-a270-64f00229d7f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd58fa8f-80fe-438f-80d2-0f03da820a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d54301bb-fded-4707-b03e-fc0d29fa8f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f25523-7a88-432d-9c29-5a15770f9de3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135f2bb3-cf22-4dc5-aa7f-0ef55d98295f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0072bf0-506d-4bb9-aea0-aa13efda9190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f6e1ae-568e-4790-966e-5d8ab7792aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5cd84ad-c062-457e-92b4-148c208de038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53927a0-3c92-41cf-b679-a2208904c028",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997c0513-80d0-4a9c-bd58-bf1f55707d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c7ccd9-0877-4269-99eb-88ef2c2d2e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "115bc903-e1c1-4db8-bef4-2fbe701c433d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb7c522-a768-48f3-9d69-37f1939c8918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4fda64-b163-4621-a893-cfa2f5c24dec",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12f25ac-a913-4fc6-a4d6-6a673000621f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b874543b-2653-465a-825a-30e0b66a5cb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aadb1750-4205-41f7-a16c-73d29c1e2a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4bbf383-fc92-4678-8698-4b24a9a3ccb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2932c627-a1a1-41a1-9fe5-025164ab61f7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ced302-d13f-44d5-bf65-796ccfdfe1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c9baeb-8a4e-4d25-8d7d-a9b1ef14da38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7c773d-0611-46db-96ee-1ea8124ea190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07351c2e-e44c-49ce-94db-fb429efeb99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3d0f6b-23b1-46ec-9072-692b37618f65",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4c4b54-83b5-4c41-93d4-3a6c8ad00762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f31b30ba-cc37-42bd-9945-ad43488829ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a3c1d9-b821-4ad0-aa14-905f4a5a8029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8fb553c-03c9-4e46-bead-58f49f7e30ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01aa9028-ec6f-4a2c-8986-c763176a8aeb",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5c55e1-3a6b-4d4e-98de-dea01658e82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e822af-e363-44a4-af1c-840f22a56689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae61d41-9123-4794-8f87-33723f69f017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e35bb891-3334-4e6c-84d3-fc3ecacf083f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfcdff4-9b25-4d04-923f-ab975caf5e83",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34985049-dd48-4bb5-bd06-68af14a01429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f35713-da9d-4156-8bc8-93068184e91e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17610e63-64dd-4499-a815-b66b4fdf12f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4aa3935-0fb5-412e-a04c-6c4f48b83e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fe125c-069d-4e4b-814e-88ae190fb2af",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec0f1cd-9333-4d67-9087-c2603ec8d389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5e22d8-fce8-4ff7-a041-8a3f8f954cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a2046b-064d-4b31-9ede-082d29753450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ec240c-89fb-4e0b-8cb3-9b516d27e8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3e8198-ab6c-4c8a-84cb-470f40662376",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76805cd-9f78-4fb9-84f5-47a91cf73ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ac46c4-66c6-4898-991a-ddaf5c392fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd53a0a-ae6d-4164-a274-e8d508bdafe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a2048a-c3ca-40cd-a791-344465e53670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0890ec22-e89d-406f-b037-0b7fe88d47d6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ca96d4-5264-4800-a841-2870afb11bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f93c16-46ba-42a3-96cd-628c13150e50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba56e50-2b3e-42c8-b8e7-8208ce847e4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "754f64e5-ef86-473f-808c-c3ae9dee6f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567d236a-0fd2-45f4-98b1-e0ae431786af",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa805f7-46c0-49f2-9b5d-f652eb3d2246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba106252-4172-4ea0-b0aa-45e7ebbdd723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e12c51-f3e5-4de3-a8fa-80cc42df9796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fff9c5b-af8e-4a1c-8020-60508dea813f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce362fa-7d8e-4534-92b1-f39030a4d767",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48e4534-561b-4718-b1e0-acddd9e1f2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f48d6e-dd16-43a6-af36-11afca346d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee186143-6fad-4669-b5bb-afca70b6f0f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a7247bb-c82a-4e17-a1ca-f1b7f063ac87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9238f281-66fb-41f1-b7c9-aded14b5c08d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ade0a3-afe0-47e0-bb82-19361740fdb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15795373-75e0-4efb-b2df-4a650560c804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e36c08-f0ad-413b-a58b-576bd1ed936b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31d5f708-525d-407d-8729-e9afa102689b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8962520e-e1dd-47ce-a86d-70629968de88",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ada255-1f21-46ff-b845-5862cbeae546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72e646db-4e40-4359-94f6-691c0397c440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2312bab-51a1-4261-8c2b-62daa84df4f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42579994-8859-49eb-8ee6-b6bed020bb36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8300761e-0e23-4cda-83c7-857eeea690ad",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373e459c-c3c9-444c-9275-93374e72075f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2245da86-2abc-4c10-aae9-4cd22050314b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8ae20a-6be5-4012-91c7-0406b1918243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d170f7b1-4a37-43f2-b344-bb1f6317f784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec606b1-90df-4d8d-a823-dd015fa9bf46",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cfffab-8891-4fc6-932c-fbe7b0c3515d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cda816ed-b393-4724-898e-be1105dd48cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a23dbe8-7876-4c60-98ac-f7102761f34e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbd4355-9b43-4e5d-b005-5238030fb393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79910a27-8ed9-496c-9166-a8176165ccef",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd73b457-7b0a-4a9d-aba8-ec2aa9366fdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8ca1ac7-c693-4579-b0d4-c83f3afd4245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e6fe49-6653-4f75-adf1-a0ed8d6fd4d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c3354ba-84aa-4564-9acd-f657a2f707d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168877e8-46e5-4772-a3e0-a95728e049ba",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c768f9f-fc2f-4892-af6a-fdcd524acbab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6356d6ff-090c-4549-9ba5-b6832c4eaf49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0381d70-dd8c-402d-93e0-c7d9be2d78ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a1f152-3e5d-4753-86c9-aadeb2222eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526c19ab-6ed2-4ab6-a332-87152d14cc15",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492f5aed-1507-4264-89d3-a9a57d78609b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c02245d-fbbc-4f53-a079-62f502966437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "099d2b9b-9500-47e9-8230-06d8b18b446b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00dfbeb-373d-44e4-b163-c214e01275c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f518ea2d-bf4d-42d7-98a8-5a15fabd21e9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103c1f84-c3ba-421a-a678-f62fb1862abd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4d2d7b1-e1b5-4677-bfa6-ad997a7d6596"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d094a89d-86ac-4cd0-996e-18c5da79bdb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca32962d-713e-4c9e-a674-91bc5b78f2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b48d09-0e34-4ca9-bbcd-2a5c12e33e88",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e576c70d-5f59-48fc-b850-97bf5b481704",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3254b020-29de-4d0d-b187-13c565eda0a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "382a53f6-8b8f-4d04-b9bb-1656b4bf64b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c15da6-7db5-4ab9-8ccf-8f7bd027247f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133cdbc0-9e52-4ab2-ac4f-a23310857b83",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b298f964-4082-4619-81bf-f7c8dbae24fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ede1f87-8bc5-4934-910a-76ae7c59b108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06085610-1303-4f22-a4ce-633fb3150b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1b90d3-ad9b-4e1e-8517-4889eae8e6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af84c07-a12c-4529-929b-d6979bbb62fd",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ce3104-4abc-43e9-bdb1-2e826a77730f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcd4adfe-cbe9-4566-b796-3fe275e6f791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddeba02-acea-46af-9413-ccde4af27ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c8b019a-241c-467f-8283-6b21484f5e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3331c9c-ac91-41a7-a1a4-004cda048040",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76255932-7f79-447e-bfdd-8ab6f4b95439",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c18471b-2c2a-4dca-81ef-a10ae20f7d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6cb8c8b-2a2d-4df1-b6fd-ddaecf3a3b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a63a904-1292-4453-9058-60fc789e85bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21061b2d-bbf4-438c-92d9-e37c7c4b5e16",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682e1c10-4207-49f6-9630-a0a1dc97cc51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d56e96a8-cb7f-4d32-bfcb-72f19bcb375d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22ee807-8617-4af4-87f7-a0815e0417c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32af4369-77a1-4f04-8234-e401639897e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841d3f0c-32e2-47f5-a6ec-a491ef7a8865",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63fefda9-8ea1-4ffa-a0bc-e1c0b5ba56e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edced5b7-100f-417a-b1e7-347074766a29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2b75ee-f16a-424d-8156-a9ba3fa01e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff03c8a-8d46-4b14-a5ba-f6b947211d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bdb846e-4e1e-4c8c-b426-4839b2819e2b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f705ab85-d366-4fd7-b5f7-c7606d0e0377",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5865f71-1a47-41ec-a1ec-7f0a45eeceb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd3e0c6-bf1c-4220-b357-44e1a3e08f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2805a200-fa92-4c31-abb3-c47a4226060a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b435ec5-2908-4489-8900-4a73f70813c4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2e3f0c-43f5-4498-84c4-a4f833673acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ac76b6e-6fef-413b-9401-add4065353b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8006fc83-33d4-488d-88c3-89574462b420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8caacb2e-0b65-4ec4-8bac-266c4cf32fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aec22dd-0fae-4454-a53e-dd2d6aef51ca",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1af01df-ec9a-473a-8309-96ff69293043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e88c3290-f925-42a3-b7b9-5cd23478e2f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45698b33-4878-4798-b93d-adfd958293ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "549c60f6-5e6c-40f6-b063-5cc97e69f408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b2144d-a568-40c9-8501-6d5a34f5dcdd",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e012a6-e2d3-442b-baf7-d325984d3b33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ce6ba2a-083e-4575-b5be-5441c332c64f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07119e77-f8ea-44c5-b427-1c5eb60b59e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c75bc4b3-6ee3-43e4-b14a-95043ca320f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117017aa-65db-438b-bfd0-55fbdb019f85",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb06148e-8ec4-4878-8a33-26283ad76e89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d72c234e-0729-4216-901d-6c46c7c823c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6aacda0-30ce-4260-a056-25998172067d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22d2a8d-3990-46fd-86d0-e3daece9f636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9be529-bff2-4b37-9388-1431cdcd9fc0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9ce9cf-4141-41bc-8d9c-d4520c0dbc1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0361a6ca-7b5a-4e45-be05-633ddfaa86bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb3335d-3652-4dd0-abc9-418cf8994351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933385cb-0233-4051-b110-72ff91b17587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb7bac4-6902-46aa-83bd-545539f59139",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38aa86ab-8d6e-48d8-95ce-c2fc2403e44a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1df282f3-1638-4b5f-a167-01d193800664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "521b262a-4c09-4e9b-99d2-f2dbf71c864c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19fe1dd4-fa2e-4955-8ae0-3f95fe1bfc87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bed814-6a42-40ed-a206-9cf4614d51c4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f29056-24c5-4e90-83c1-bc78167c77d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed03df4b-41dd-4d67-8d12-eba97daedc6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf9690d-e4ca-49fa-894f-3dda107c5059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f0455c-3686-4eff-8c8e-484541319567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7f6e16-d875-429a-8662-1b8c593daa9b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e97893-40ad-41ac-851b-dbf57673645c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fae18d2c-20e3-4d92-bd7a-b6ff812cff35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d2a52c-7bbc-4504-b5b0-21cb1c7d9fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3219fec-073e-4bc9-8ae3-ce53fda49d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa63487f-e44c-4f6a-a697-923b7531331d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e1462a-e789-4ef6-84d0-e4ef0e8dd9e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60318e85-019a-45a9-8a69-604ca7654282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0461418f-4d0c-4b3d-b653-68e6c16a6c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e38be28f-5548-4711-8112-8be369494bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4b79fc-ea83-43b7-983d-fbc4be08f927",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a35ca27-bf11-49a9-8cfe-b8c5c5ba7b06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e0fa32b-4999-4e0d-8ab2-e278990ee845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e89ef2-4b17-471b-93bd-f0985fa3ceb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8accd982-7c85-485f-9926-3934c657ab24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa5ce5b-e1a1-49d7-910a-775b15a4c9ff",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d24c2c7-558a-4eb9-970a-67fe2d97ea1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "210647f7-0cf1-4bb4-a20d-353eec8141a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "756cfa07-618a-4739-97ba-d94d4ed60570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd08ef7-6659-4c33-9c3c-d38129beb63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7105c53a-53d4-4227-9939-5bd6b0f7b4d5",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1954b7-368c-4ac0-8d10-08b0bb24d778",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2476a6a4-7062-4c92-921f-f7ede0b03e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09153760-efa7-497c-83a3-8c3258e60147",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6263a6cd-52ea-4460-a582-fa253c6db2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6fd755-d4b1-4244-98ce-ef92dfd3feba",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7e4d03-3d29-4369-aba1-4210e1c0e7f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dc288b5-5c2c-4405-a06d-b0439de153a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62980f19-4349-4b4d-8a7c-a3386769bc2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d695ab5-70cc-4086-9c46-dcabe1d9d925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e108575c-414e-4560-b0ea-541a0e9f762b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e05dae-572d-420f-9720-ed93e1091c9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bc0a159-9c1a-4f55-9c66-6e2b4e17d963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f4eef6-d434-4ea8-8804-ba886a57e956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2866b02c-8d7a-4c6e-ac7e-5df20eea82bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39daba1e-696f-421b-9013-f866cf91fbc3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f376f521-eecb-4a07-9bea-5f221d2afa21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8f4bdf3-026c-43ea-978b-d8facec90a5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f767b415-690f-4ee7-9d22-006bf66ef693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ce1977-3022-43ec-b9fa-772e5ae9712a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6021e1-8e4d-4d43-9ac7-2cfa4643c9f5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bbe454-7622-4ff3-b6c9-eaa7d32f3fc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f7c9c2d-292f-4a02-9cc9-75770164c7be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13342ab4-0b1a-4c08-a72c-7f5f3772e434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc0b7099-0663-4559-a1b1-0911123ac3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaacb1ea-74ad-4a06-9c73-62ddd26bdd18",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b51edd-5294-4528-a46a-c1611341bf87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c42879e-b7d2-49cf-9ba1-d3feb2ee87b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f3cb76-2367-4a66-9b8e-c84beb9df321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52714529-4d59-43a8-81a0-fd343cf90f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2fca26-b38e-4060-bed1-1a00e63b228b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cdfcaf-1e72-4136-a89e-72a942d2e784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14ed7803-200b-4aad-a7bf-635ef49565ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2faad8-b526-4a48-abf9-9e0b388a8490",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae40606-b04b-4b9c-8c3a-65786d662162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ecaf884-5979-40d2-adf8-991129ca36ae",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206e8bda-9bb0-4a5b-9caf-fa092db3acfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "051ef812-9635-4a97-9c3a-6fd839ac73d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb585a72-ba98-4c06-8a86-c9f586d6ec22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3529b18-d3e0-42c9-872e-8b44ee41f903"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "172f96f1-f381-432f-9893-013e53b3548f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89d2b3bb-d9b5-4635-8e97-56a52dae8be3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "88368b66-82ed-4bc4-8ad5-b85ee23d0dde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "67059e33-3935-4790-9b64-e301b722b5b3"
                    }
                  }
                ]
              },
              {
                "id": "27b54c96-fd02-4af0-a528-05eb279be4be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a1a27aa-b4ff-4fae-bc2e-b21abf7d9139",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2d135b-7bd2-4645-9b52-3656ddb06672",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "435a0773-8d1e-42b3-8466-1d0a7b4a2607"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b5d855-b6a4-4d54-aa1e-3d704be0a63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59d3ddb0-8969-4057-bbf4-ddd5ec8abd10"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5a968fe-2ef5-485a-822a-ea00a9a53c5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4ef0f5f-1b5a-4f2c-a570-19a46b868f4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cdc62af-a3ad-46ff-be83-9e53f9b515d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c6153dd-be3d-4c31-9276-b2cade14bdf7"
                    }
                  }
                ]
              },
              {
                "id": "3919883f-aa56-406f-bc75-f6d8866136f1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "68d37b3c-71b3-4401-a018-34dddb788599",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0530718-6906-4d9a-8f45-ad532ba01d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ea0cddb3-314e-453d-bec7-6aef69fdadf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b888dc5-5294-42fa-b83f-859ecb4e89f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2cac2d4-18c0-44db-8439-41e33dbafc43"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5fcec2fd-9658-4e6e-b8a2-bdccf0fc9b5e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d0fb8fb0-893f-4e7f-8e46-dc8c15fe355e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4bc4c8b-d30b-4de8-ac6d-afa45bb13f76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "25726818-8e2b-4fe9-9128-f8e442445e08"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7632eaae-2498-4232-95d5-f6114e852974",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97cafd1f-4e3c-4f05-8363-a75d347c556e"
                    }
                  }
                ]
              },
              {
                "id": "6aad9fbb-7c0d-41df-a513-d291dff14ec3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "865c6849-b80d-487c-b5f5-3de905dd0022",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b723ffd4-1162-4993-889b-30198d893fda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "017ee565-eaf0-4b3a-bdd0-dacc9441991c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1ca60aa-652e-4870-9d40-d641ef34530c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "310c4e43-4598-43cd-a1c0-90f6af754b0b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f0c104d7-6f6e-42eb-8f08-a9282f79af3f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "761fe231-a433-4a1c-a25b-bcac466c122b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3729d81e-9574-4d3f-94d0-5a4c9565ac60"
            }
          }
        ]
      },
      {
        "id": "e0ab2ba8-d672-4cc5-851d-c7dfa6e3b6af",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "bc533adc-8783-46e9-9135-cd41eb2520ed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f2cd1de1-e9ad-4996-969f-def901521de7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6be29696-524f-4105-b56b-c3e71a9020c6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cdb7d3-332f-4b6b-aa9d-e27b81b19b44",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a3f02c33-c888-40e6-9444-aaf94320e9ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8aa8018-cfd9-4fc1-8812-c6e0a5a33b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb917089-7423-4567-a5d0-ea41a99b713c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33a6f5d4-f5fd-41a8-bd76-a5e8d938d606",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "911e6587-3452-48e1-8420-77a4705e4839"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d239023-b6df-448e-9bd9-245b08341e5f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99be0205-b00a-4888-80d8-9d126af8f1e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba8d87ec-3bb9-4989-9ad7-233c54765db3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8494a3dc-745f-47b6-87cd-b1896c05d893"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22116067-e062-4510-98af-421b2e4fdfd4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9731ef0e-cfc5-4ce1-a6ae-a3d9b9e26aa6"
            }
          }
        ]
      },
      {
        "id": "f096327d-4b09-46cf-9a12-e7152f341162",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6c6cc9c3-7bd8-41a4-bd84-0bbad4e0d766",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a8feb1e-9edc-4fcf-b1d4-08ca40be92bd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5a9fa27-b95f-4489-9ea5-11afd822bf72",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f125aed3-18ec-4859-8e6e-90cd29d54fe2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5d35375-48d9-4b34-9ee7-6801b2d1f76a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1f59f4-77e1-4f57-86c0-8b179a3d878d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9abc4aff-47b9-4b19-8d9f-ee1bdc1ade25"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "596a4898-2d52-469f-b224-926275ab4215",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e784aed-0826-4e96-80c1-d46fcd66f133"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "240298bd-fd91-4231-93d7-ae6c46a8d74a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47cb8d94-7095-45b2-aade-9ddc26bfdd35"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7dd01a96-a716-41d5-bcf7-91b4bf71c3ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d134014e-cc07-45ba-99ea-eefbdbfd11a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3dbb8c2c-4aa7-4d6d-97a2-c38cbab828fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ca94573-88cc-42a7-b346-009845047f8c"
            }
          }
        ]
      },
      {
        "id": "69430643-54c0-444c-96c6-f61d0c6536b2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8ab9e3b3-ec5f-448e-85f4-66c1de283ea8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "676d7d6b-783f-4626-894b-153634a95680",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7568cdbe-851f-41d1-b6b4-0405a5adc3a1",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2894ee-c29a-412a-9ee4-0dd6bd57baae",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97f25491-ac9c-489a-96fb-6e68ce47b4d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e12fd15-ccf1-44be-884e-bc25791ecea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8a1a480-f58b-48f4-880a-fdeecf089e8c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47d36e9f-03ca-4940-8a4e-02a6c7beba1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd088690-0eeb-4e05-9348-0b5028adc352"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b582a62-04b0-433f-8c53-d120150e12ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c028d904-d3f3-413d-88d9-c16f5d3159b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b6cb440-f8ec-4932-a56c-8b22bf985e3d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "72d39d97-9e27-4bee-87ad-cc47258b67cb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef72ab71-7825-42d9-bf7b-a76948800b2d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b850d4a-f685-4a00-ae3f-040ecfd7d9e9"
            }
          }
        ]
      },
      {
        "id": "cb1a939c-5e0f-4746-ae65-d2f972eec884",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6efd810f-6206-465d-a69c-65e7f5927dd9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92f03842-bd5a-475b-a3b4-04e8b7e92a2e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a3dd7dc8-a34e-4ec0-ba23-075d1a0c5ce3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b292a847-7e53-419c-acc9-7e82abad43ff",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3befb178-09c8-4bb1-be4a-8fbf229d7425",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 82.52982456140352,
      "responseMin": 5,
      "responseMax": 541,
      "responseSd": 77.44075259917805,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1708475642906,
      "completed": 1708475676179
    },
    "executions": [
      {
        "id": "bf5db1e9-9fbc-4db4-bc3a-0f57a7aa9e94",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7e0f9b7e-73de-486d-8281-db8f8219f770",
          "httpRequestId": "b56a925b-29b3-48d5-924f-70a30d225fc5"
        },
        "item": {
          "id": "bf5db1e9-9fbc-4db4-bc3a-0f57a7aa9e94",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b2c065dd-1954-48bf-b9af-0489984f27b7",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 0
        }
      },
      {
        "id": "bb634fbe-2521-4bd8-9c55-f7bb3ba211bf",
        "cursor": {
          "ref": "f668cb05-21f7-42c9-a58a-f2aea96d43df",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8c02a0fb-5899-4337-923a-160a149d4cf8"
        },
        "item": {
          "id": "bb634fbe-2521-4bd8-9c55-f7bb3ba211bf",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d0670990-40e4-4150-92ef-9b9b72050101",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "8df42c53-f8fe-4f70-86a1-89da089d81d1",
        "cursor": {
          "ref": "6c64faf1-9052-402a-b606-a017b63d5e27",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6860f795-c381-49cb-acb7-db26a581e553"
        },
        "item": {
          "id": "8df42c53-f8fe-4f70-86a1-89da089d81d1",
          "name": "did_json"
        },
        "response": {
          "id": "7fe8161d-9389-47ea-8cc1-01474ed45f1c",
          "status": "OK",
          "code": 200,
          "responseTime": 280,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc103949-695c-4c79-85f8-0a39dba6d519",
        "cursor": {
          "ref": "c399acfd-d3eb-40be-9032-1c2062de085f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4aaaa3b2-2d09-44c8-a673-ee5f4de6b2e0"
        },
        "item": {
          "id": "cc103949-695c-4c79-85f8-0a39dba6d519",
          "name": "did:invalid"
        },
        "response": {
          "id": "7c5ccd2c-b7f0-447f-b48a-851353ebef14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc103949-695c-4c79-85f8-0a39dba6d519",
        "cursor": {
          "ref": "c399acfd-d3eb-40be-9032-1c2062de085f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4aaaa3b2-2d09-44c8-a673-ee5f4de6b2e0"
        },
        "item": {
          "id": "cc103949-695c-4c79-85f8-0a39dba6d519",
          "name": "did:invalid"
        },
        "response": {
          "id": "7c5ccd2c-b7f0-447f-b48a-851353ebef14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db69fbdc-cfac-4c74-ae1f-a9645cd7c0cf",
        "cursor": {
          "ref": "360cc12d-3d53-473d-bf3d-fcb36659d0ef",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5549babf-f2d9-4580-baaf-f4090c8b3f08"
        },
        "item": {
          "id": "db69fbdc-cfac-4c74-ae1f-a9645cd7c0cf",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "be8b335d-559f-4464-ab56-ea0cc8d24366",
          "status": "Not Found",
          "code": 404,
          "responseTime": 106,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2a93bd-4d95-4912-8365-def9bbdf1364",
        "cursor": {
          "ref": "35c016fc-f054-4da2-ac77-04aa03fef8f4",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0d880687-f691-4aa5-bc98-30fe0641737c"
        },
        "item": {
          "id": "fa2a93bd-4d95-4912-8365-def9bbdf1364",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6565e05f-6d9c-44cd-93bb-4ae63eb44025",
          "status": "Not Found",
          "code": 404,
          "responseTime": 57,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb18a936-2ec8-4245-b6f5-556136f55059",
        "cursor": {
          "ref": "8a861923-04c9-4ae4-b4a4-c0a81498f9b7",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "53807131-f332-439d-9614-5d8d292e7893"
        },
        "item": {
          "id": "bb18a936-2ec8-4245-b6f5-556136f55059",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "eb69f90e-9b03-4afb-8577-66e6ab2b55e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554e3a28-eb34-4369-8762-0811aa8c8981",
        "cursor": {
          "ref": "980a150e-c732-414d-9787-308dbdc659a9",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d1f99db9-c758-4a1f-99b3-1f90dfa3901c"
        },
        "item": {
          "id": "554e3a28-eb34-4369-8762-0811aa8c8981",
          "name": "identifiers"
        },
        "response": {
          "id": "5e2fe4c6-e722-4db5-a227-7ed697586d62",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41affbde-e214-437c-817b-f3ca63662dc3",
        "cursor": {
          "ref": "f6f93280-19e2-4403-a0e4-a748135b694e",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f1c2a06e-9a58-46f5-b1b1-7e1f9d74c37e"
        },
        "item": {
          "id": "41affbde-e214-437c-817b-f3ca63662dc3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e6d47c08-2f97-4fc8-bbea-fc29643696bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47705f4-7b28-4b92-8f9b-a9b85124f7af",
        "cursor": {
          "ref": "57418347-7411-4a9d-826c-c2704e084833",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4fd1fc1a-e01d-4319-ba54-c606d21c0747"
        },
        "item": {
          "id": "f47705f4-7b28-4b92-8f9b-a9b85124f7af",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bc5ba03a-ec21-4a3f-b3a4-b582bed8f7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e1d8ce-ad7a-41dd-b6d9-5a4ee44ead0b",
        "cursor": {
          "ref": "ae0ff133-c424-4596-9a3d-db71b1d3a9bd",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c07f5408-b4cf-4472-9b43-051af38f73e4"
        },
        "item": {
          "id": "f7e1d8ce-ad7a-41dd-b6d9-5a4ee44ead0b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4c211bb4-0de6-4199-9bba-5430b53201cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15a2971-bdd4-4201-b6f8-70d111d871ed",
        "cursor": {
          "ref": "e7e0fe75-4b86-4078-8b58-f4f5805b742f",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "57fbd69b-9f9d-42d9-b622-4e61e641935d"
        },
        "item": {
          "id": "a15a2971-bdd4-4201-b6f8-70d111d871ed",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5ee5c37f-43ee-4c65-8462-15998aad3f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eaa219e-5229-491d-b2e0-90889954af53",
        "cursor": {
          "ref": "a4441c5f-3475-4cd5-831d-4feeb654a849",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c298ede8-c0f5-4079-8bab-3a797e957896"
        },
        "item": {
          "id": "6eaa219e-5229-491d-b2e0-90889954af53",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "138ceb9d-8fee-4e31-8a25-0e06805b200c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605a352e-3aca-414a-82bc-53ec3c36f1bd",
        "cursor": {
          "ref": "9298809a-41f6-4980-86e8-55345249dec9",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a8c41ef6-41f4-4e69-8415-2cdefc038459"
        },
        "item": {
          "id": "605a352e-3aca-414a-82bc-53ec3c36f1bd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6a9c54f8-534d-4eaa-b58a-76f1b4492807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42442029-29e8-420c-af64-2b25e09e2701",
        "cursor": {
          "ref": "50dcfb28-6771-4371-847a-fbcda8882230",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "de98cdc4-544a-46b9-b30f-5e7819e75c29"
        },
        "item": {
          "id": "42442029-29e8-420c-af64-2b25e09e2701",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3160bd6c-a827-466e-8436-01d9072622b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f7edcd-8b0b-4520-98f7-7a19ae57e09c",
        "cursor": {
          "ref": "e138f2fe-2efe-41ed-98b1-028c694a6ca5",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4d4fca5f-285a-4917-884b-91a9f38457f9"
        },
        "item": {
          "id": "85f7edcd-8b0b-4520-98f7-7a19ae57e09c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "13735b10-d4fb-4625-aac1-ae6fd0351b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1caf932-f677-461c-bd8c-d676b8151037",
        "cursor": {
          "ref": "3e45dbb4-092d-42ab-adb0-5d67d06d0339",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8ddb1a23-d99c-417e-bc37-6ad678ea2837"
        },
        "item": {
          "id": "d1caf932-f677-461c-bd8c-d676b8151037",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "22bfb73f-12f4-4b2d-b208-89e875feae85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61748d2-d0b4-44ae-b1cb-d1511d664c95",
        "cursor": {
          "ref": "0cbb0432-c08a-44af-a480-d3f3fac4702b",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c2d9d94b-3565-41d2-b209-efd427a61c95"
        },
        "item": {
          "id": "f61748d2-d0b4-44ae-b1cb-d1511d664c95",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "bd2fac23-d179-4da1-a73a-6c8ecda71f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d7abf0-3ae5-4eac-b48d-6582dc7735a1",
        "cursor": {
          "ref": "dad9d1b3-88b4-45b2-8515-2b8fc07e889d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "15091537-359c-4ca9-8913-4d9139d03ea4"
        },
        "item": {
          "id": "e7d7abf0-3ae5-4eac-b48d-6582dc7735a1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2905d233-d711-41da-855d-c9bc6229cddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f97012-9e06-44c9-89d8-adef88bf7d36",
        "cursor": {
          "ref": "1610d653-74ac-4616-8311-425fb75e413f",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5ac36cad-0c3b-4755-a90d-77aed5f5b42c"
        },
        "item": {
          "id": "50f97012-9e06-44c9-89d8-adef88bf7d36",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8d6d7070-e86a-4fa9-acc5-b8f28584df1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128cd698-f03a-4451-bea2-67fc18a36141",
        "cursor": {
          "ref": "820b7cd0-41d4-49dd-97af-ac3ba117692c",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8117e371-086e-4e1e-a187-1023d97289c6"
        },
        "item": {
          "id": "128cd698-f03a-4451-bea2-67fc18a36141",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a8863b85-ade9-421b-99c0-356f7d1da543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41afae80-1747-4ac7-875f-ca8c0bffe896",
        "cursor": {
          "ref": "f354b6dc-61c8-4bf5-9848-2caba5a258d0",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c3b91bf4-fab2-4876-8b22-eb6dfa625cd2"
        },
        "item": {
          "id": "41afae80-1747-4ac7-875f-ca8c0bffe896",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "148917d9-65da-42fb-9199-63565e37d473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85045fcd-b0a2-4460-b2b5-6ad273138bf1",
        "cursor": {
          "ref": "5e49c835-82de-4744-8a72-2e1dd2dfd368",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "eaa34ee5-c8dc-4d6e-8d6e-c1b28d4ea65a"
        },
        "item": {
          "id": "85045fcd-b0a2-4460-b2b5-6ad273138bf1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e8d96122-daad-42a7-b554-e0846f69abd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd89d46-82bf-486a-bf2f-017e430c29ca",
        "cursor": {
          "ref": "cc03e48b-053f-41ad-9118-d048f16172d7",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d0da374b-fe47-4b77-93d9-a7335adc8747"
        },
        "item": {
          "id": "cfd89d46-82bf-486a-bf2f-017e430c29ca",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "50aee750-8edc-4cdc-a26b-07b1af10b23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46869f77-f206-4acc-80de-12daa29bcb30",
        "cursor": {
          "ref": "065bd501-d518-4cce-a9df-e964762a7a31",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "35a9c33f-f7be-4fa0-9379-054dc06bc5a3"
        },
        "item": {
          "id": "46869f77-f206-4acc-80de-12daa29bcb30",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9227b76f-e876-4575-a9b8-c714660e4e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83165e1-844e-4397-99ad-07c372823188",
        "cursor": {
          "ref": "82895e5a-5aa8-4911-95dd-7f69cfdeb0cd",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6e6867fb-8d86-4bd4-b4ad-0ab2844185db"
        },
        "item": {
          "id": "f83165e1-844e-4397-99ad-07c372823188",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e2f74733-257c-4f72-b456-ef4737583a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d221b6d-dbab-4f98-b1d2-7d7f9f774bba",
        "cursor": {
          "ref": "a0af1dad-ada5-4778-8abf-532b214b04ff",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9cd06d5f-989c-448b-9435-bc4592766fb8"
        },
        "item": {
          "id": "8d221b6d-dbab-4f98-b1d2-7d7f9f774bba",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "49692c4d-b650-4aff-a981-c295b3d354e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462c3f7d-3d17-492c-926b-ca95ab5dd484",
        "cursor": {
          "ref": "b1583858-06b0-4b3c-a6f6-63136a836b40",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "64b8e0ea-c3de-4879-8afe-e8cf11890148"
        },
        "item": {
          "id": "462c3f7d-3d17-492c-926b-ca95ab5dd484",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b9eb30f4-e658-4949-a380-ff91e83fb44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f944da-2ddf-4885-a969-49bb8fae7d0c",
        "cursor": {
          "ref": "3c485f42-c4e3-4b9f-8660-8c8f88e0aad1",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8e74aedd-fc66-431e-9d45-f634045ebb05"
        },
        "item": {
          "id": "00f944da-2ddf-4885-a969-49bb8fae7d0c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "cf5520ad-5711-4b55-b37e-621528e90db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287dc428-df33-40b0-ad24-76d48612047f",
        "cursor": {
          "ref": "97d20a4f-33b3-48c7-b722-7f0366f5fc51",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "dcfbd0e4-b74f-47f4-8f96-23dde8a18204"
        },
        "item": {
          "id": "287dc428-df33-40b0-ad24-76d48612047f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7450aaf0-aa44-4b6e-9554-80b1cf96064d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1a2c7e-b277-40a3-b547-2535f858f75e",
        "cursor": {
          "ref": "4396a88b-f92a-410d-9b68-cdd52a6bc548",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "021ae6b7-dc47-4121-ac39-9516984f90d1"
        },
        "item": {
          "id": "ef1a2c7e-b277-40a3-b547-2535f858f75e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a4def040-bdea-4a65-90ee-f992f3d51d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a710e535-8539-40fe-8488-b0d0169b236c",
        "cursor": {
          "ref": "aa9aa7b8-b54c-4c6b-8d5c-85efea7fd88f",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "25491c0b-5873-4460-a856-95d47593772e"
        },
        "item": {
          "id": "a710e535-8539-40fe-8488-b0d0169b236c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6a794644-7ddf-4574-8ca9-49780a7c8164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0546ca-6d83-4228-9d0a-cb9295f54b22",
        "cursor": {
          "ref": "69eb33f0-12c6-461b-a383-ea8ab3dd73b4",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "46d4f298-d8ab-47db-8148-cbaca8a8ff4b"
        },
        "item": {
          "id": "ee0546ca-6d83-4228-9d0a-cb9295f54b22",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d6fa01ac-d60e-4635-946a-c4f8dd3fc1f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59ce607-8ef2-4cdb-b0b0-f047556f2c2c",
        "cursor": {
          "ref": "46dfcaaa-fae2-490a-bb5d-30cecb2a9b2c",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "92c60681-e1e7-4f31-9fff-25fe67352d65"
        },
        "item": {
          "id": "a59ce607-8ef2-4cdb-b0b0-f047556f2c2c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f2b183a2-c904-4d12-949e-4c2f4b72aec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ec6a37-f06c-4be2-80c8-976e6160cb80",
        "cursor": {
          "ref": "96680744-87cf-4160-984b-fb527c5b03b2",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d202d1e9-7124-4d65-bb89-de9a1429263d"
        },
        "item": {
          "id": "08ec6a37-f06c-4be2-80c8-976e6160cb80",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "64f09b4c-81e7-4679-a2f0-b582c45a08f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b24db4-77ab-497c-bd0e-8ff94cb85b53",
        "cursor": {
          "ref": "74fc8233-2e73-4b2c-9140-b20f0e42c493",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a9290d47-71b9-4838-aa08-37b9b7320e99"
        },
        "item": {
          "id": "99b24db4-77ab-497c-bd0e-8ff94cb85b53",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "396b8563-e4e4-4902-8a8e-91d908fcb797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a739d4-66de-43b6-b420-fd83cd7b8500",
        "cursor": {
          "ref": "f926f3a3-2309-430b-95ef-93a0d234f7d0",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "18c1d55c-ad62-4926-802e-06d22ce1cdfa"
        },
        "item": {
          "id": "78a739d4-66de-43b6-b420-fd83cd7b8500",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0420e306-7cfc-471e-b55c-c56203acb983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5c3308-16de-4f7a-a295-1d4609c568e3",
        "cursor": {
          "ref": "59eabcfe-6e9c-4ab7-a22c-a5fbb6b30e5e",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7882e23c-cb4d-45f7-9abe-cf0b03c24817"
        },
        "item": {
          "id": "1d5c3308-16de-4f7a-a295-1d4609c568e3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7668d691-defa-4c5f-86bc-efdce91e52ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6333cd-7c83-4339-89d6-05fdff221818",
        "cursor": {
          "ref": "cd8262d2-9eeb-4edb-96fe-4e4d64096ad5",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d3d37dee-2bb5-49b2-b44a-a3fff0da42af"
        },
        "item": {
          "id": "4d6333cd-7c83-4339-89d6-05fdff221818",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b90dc783-94a4-47c6-882a-c5eb07063014",
          "status": "Created",
          "code": 201,
          "responseTime": 541,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "77dc9dd2-475b-4e66-8080-d3bb3b793ed0",
        "cursor": {
          "ref": "00ee5da6-20d8-470c-9fd0-1068c9ce7989",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6275d771-78bf-44ed-a9a0-b310fa6c5265"
        },
        "item": {
          "id": "77dc9dd2-475b-4e66-8080-d3bb3b793ed0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e63f9135-b683-46ce-94e0-470521d24b89",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "5c0740a1-77d9-4950-a532-2be41b5dde3b",
        "cursor": {
          "ref": "c88b45fd-6cfd-4d70-86ed-aebe466a2214",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "da9efa23-33dc-4a00-9071-8e10b35d88cb"
        },
        "item": {
          "id": "5c0740a1-77d9-4950-a532-2be41b5dde3b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ebbc2069-ea80-4dbe-8882-f5c9f24de9bd",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "eb428255-d21e-4a6e-8a51-1190ee1eb2af",
        "cursor": {
          "ref": "24529431-9065-455e-a8d0-ef1d56f9eb15",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9aa591c7-9e52-48e0-a09c-431cdcda0c1e"
        },
        "item": {
          "id": "eb428255-d21e-4a6e-8a51-1190ee1eb2af",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8c290b98-f01b-4fd0-895b-0ba03a71ab1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84ad733-92c7-4841-b98e-d25e30e1b9d6",
        "cursor": {
          "ref": "f0d9276f-aeed-4a30-8a13-a73b4b72637f",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1b98e602-ec86-4c80-bb03-d08d351e76dc"
        },
        "item": {
          "id": "f84ad733-92c7-4841-b98e-d25e30e1b9d6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4774e921-dd3b-496c-83c3-54bb6e134652",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "ddd1c1c5-cc36-4a8e-8a6b-56b2170d324e",
        "cursor": {
          "ref": "0c18b7c7-7a42-449f-b06e-9f781c240d5e",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5ff0d443-aa5b-40ee-9cb9-d2aeb8c7bb72"
        },
        "item": {
          "id": "ddd1c1c5-cc36-4a8e-8a6b-56b2170d324e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2a89eaa1-7e71-460f-852b-f93e252743f9",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1adced6b-ac43-4388-8b6f-116f8667c8b1",
        "cursor": {
          "ref": "b6923a9b-eb68-4bbd-899a-ebfb598e1f8b",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "edcb7533-2c11-48d8-8142-5e5e6438ce19"
        },
        "item": {
          "id": "1adced6b-ac43-4388-8b6f-116f8667c8b1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a84fabb7-6462-4fef-97a2-fdd84d868b5e",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c71f874e-5f6f-4a99-b45a-9cdcd3b96a87",
        "cursor": {
          "ref": "6c1cc5b2-e14a-4f7a-8e8c-c683bba23773",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ce9434e4-ddc1-486f-aa47-c5b74bb1ef83"
        },
        "item": {
          "id": "c71f874e-5f6f-4a99-b45a-9cdcd3b96a87",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "670a00f9-1618-41b0-a7ad-7bd0566b612c",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "739e9c4e-d961-45c4-aff9-736de3714204",
        "cursor": {
          "ref": "4a3608bb-c3a8-4f84-a85e-d3e9d3f47eda",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "47521694-07a5-4929-be2d-20181782f807"
        },
        "item": {
          "id": "739e9c4e-d961-45c4-aff9-736de3714204",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "31ab7df6-e826-4594-b72b-4cc7252ceedc",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "713bece2-058d-4310-a3e8-261e0199fbc7",
        "cursor": {
          "ref": "97b1fa46-5598-44a0-a363-6284e5bceb1f",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f4b9f08b-38ea-48fd-80a5-d4b6f440030e"
        },
        "item": {
          "id": "713bece2-058d-4310-a3e8-261e0199fbc7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2d25a470-a51d-491a-8e1a-c146dc770db7",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "61284f39-822d-40fa-a188-41e6ed58c7ee",
        "cursor": {
          "ref": "dbe7e394-5940-49d0-b64a-ac1764bf3904",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "92aaea3e-6b46-43d4-b45d-e138bbb09d8a"
        },
        "item": {
          "id": "61284f39-822d-40fa-a188-41e6ed58c7ee",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e0189add-232e-4704-b1c6-4194dbe556ab",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0593dc53-591c-4a4c-860c-21f968d7e278",
        "cursor": {
          "ref": "2bf5698f-e3a2-4d01-824c-9b7df48e9abf",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8a01072e-c652-4c84-8edd-a653e0a2b0d9"
        },
        "item": {
          "id": "0593dc53-591c-4a4c-860c-21f968d7e278",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "99d759aa-f4b3-48da-8f1d-b1727f482959",
          "status": "Created",
          "code": 201,
          "responseTime": 454,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4a060756-c1fc-4af9-82ba-03d1caf02b03",
        "cursor": {
          "ref": "ead2eea4-8f7f-433d-99e9-39a4858af959",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4e533df3-163c-4967-845c-3d4f405f27a3"
        },
        "item": {
          "id": "4a060756-c1fc-4af9-82ba-03d1caf02b03",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3969982e-794b-4576-8827-4691ec2f8356",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e541c7ed-b192-4415-975f-0edbad956c04",
        "cursor": {
          "ref": "9fe9c51c-7a8c-462d-9831-db3c69de73a7",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bb644e77-daa6-4af6-b1a5-f1ed073c8179"
        },
        "item": {
          "id": "e541c7ed-b192-4415-975f-0edbad956c04",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "420ce200-4116-48a8-b764-0a20662bb42d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ced61e1-66fb-4a68-b891-07932ff1c792",
        "cursor": {
          "ref": "4bb667a8-7446-45a5-aadf-e30208c3aac7",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8dbedaff-3701-4643-b1b9-27fab80745e1"
        },
        "item": {
          "id": "5ced61e1-66fb-4a68-b891-07932ff1c792",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f0c2adaa-7897-4e78-9743-b88f58b2aed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e12705-602c-40cb-96d8-d5290536e9a0",
        "cursor": {
          "ref": "6bd6948c-a5d7-4286-a0e4-7e2c1e9e41ae",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "70e76c15-aefc-4d4e-bd61-65074f4a607a"
        },
        "item": {
          "id": "53e12705-602c-40cb-96d8-d5290536e9a0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5da66e30-abd7-456a-9662-3d51f0091de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a9c801-77b3-493b-a4f8-f360654af9f3",
        "cursor": {
          "ref": "61fcd1a3-4d10-4049-af9a-2a65039f03e9",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bdd66b46-730d-42af-8595-5afa35fe9cfe"
        },
        "item": {
          "id": "a4a9c801-77b3-493b-a4f8-f360654af9f3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f859de14-f55c-453d-9ce9-c99856730ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abf5982-aae2-477f-8ead-34fd3b34c764",
        "cursor": {
          "ref": "561d1d2a-2787-43ee-8af0-6843688370f6",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "51f63385-f98c-4762-9c10-529f60c3c908"
        },
        "item": {
          "id": "5abf5982-aae2-477f-8ead-34fd3b34c764",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cc7b53d2-6096-4ef3-aedd-b95459cb8864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9564ccf-7e2d-4236-8f4a-3e2e49a8f779",
        "cursor": {
          "ref": "00f23dec-af6f-48f6-81bb-6bb47e94a914",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "032b4001-74a8-4eb2-9a56-44b9a5de0e8e"
        },
        "item": {
          "id": "f9564ccf-7e2d-4236-8f4a-3e2e49a8f779",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "06e2a929-95f2-4777-9e07-fc6323bfb8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd16bfe5-8b0d-4c45-85b8-b1dbaef0f3e0",
        "cursor": {
          "ref": "d1bf8076-60d3-415c-a688-cc093e0378ce",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2a1e7224-d9a2-4f76-b423-9d453019ceee"
        },
        "item": {
          "id": "bd16bfe5-8b0d-4c45-85b8-b1dbaef0f3e0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "450ee51b-16c7-4628-971d-7d5ce7320917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ff329b-c754-41b2-9081-ea14815a240c",
        "cursor": {
          "ref": "7859fa77-88ee-4f69-ae11-dc74462cf39a",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3359e74c-e363-4c29-bb70-ea893849a55d"
        },
        "item": {
          "id": "83ff329b-c754-41b2-9081-ea14815a240c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5de1bf34-a94a-4d46-86e6-e2750a6ac26b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b6020d-7aea-4865-82ac-a9d915f1e816",
        "cursor": {
          "ref": "92e9947f-411d-445c-a341-d15d431032f7",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f9cb87fe-d0cc-4d1d-bbf4-890647450002"
        },
        "item": {
          "id": "32b6020d-7aea-4865-82ac-a9d915f1e816",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "87bffed9-b0c9-4b2b-92cf-73b08fb3a549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320f8645-a64c-4814-9337-b65fde0a0d6e",
        "cursor": {
          "ref": "a1a5e746-5e33-4d77-8b22-665fdc64eaa8",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "057ec1aa-bcdb-4a90-9829-640f44aa509d"
        },
        "item": {
          "id": "320f8645-a64c-4814-9337-b65fde0a0d6e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4037c84f-4e0b-4034-9cb2-64a305823f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48466c07-8ae6-4948-8642-32da6d5ede96",
        "cursor": {
          "ref": "8608c0cc-b675-4076-9754-78a632355bc3",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "436f49f3-31f4-4c1c-b376-45226afb2ef8"
        },
        "item": {
          "id": "48466c07-8ae6-4948-8642-32da6d5ede96",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1bc79a7a-9ba8-4302-8bc9-ce914f8f47c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c40a7f-e9e6-40d8-9185-8ba7be2fce6e",
        "cursor": {
          "ref": "9f2d64f6-457f-4e59-8312-1774f29461ab",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1e6d3382-e31e-454a-83af-4292c540a50e"
        },
        "item": {
          "id": "f5c40a7f-e9e6-40d8-9185-8ba7be2fce6e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0d5d85dd-2eb9-4d17-a864-e6b2b980dde7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f12c71-049b-4b8e-9c38-49873044d376",
        "cursor": {
          "ref": "f8915f2b-a012-4298-a47d-d73e3288dcee",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "08d8026a-3257-4ad4-b781-1f3089d56903"
        },
        "item": {
          "id": "06f12c71-049b-4b8e-9c38-49873044d376",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e1d7584b-69f4-4747-986c-afe76fdc7b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e06b4c-b52f-409a-a0b1-7abed56ab5e1",
        "cursor": {
          "ref": "ee464256-7284-44d7-af8d-1c42c97a7114",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "cd26917e-9b50-4f0c-82a5-f19b2da036f7"
        },
        "item": {
          "id": "90e06b4c-b52f-409a-a0b1-7abed56ab5e1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9394c8a3-ca7d-49ce-b070-dc7382eae8b1",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "92b52324-1d78-4bcd-ad12-70048ec991fd",
        "cursor": {
          "ref": "c1ed8369-2133-4234-af17-08a90eb4b439",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2f2aa148-cb37-4746-aa55-56b8a7a5591e"
        },
        "item": {
          "id": "92b52324-1d78-4bcd-ad12-70048ec991fd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "edb39d35-b3d2-4a14-8045-33957935eb7c",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d13e9251-d612-47e9-95b0-a587bfa2dd86",
        "cursor": {
          "ref": "6e53753a-70a2-424b-b11b-8849211a47e3",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "054bd530-2f1b-482e-af79-e883012c72c3"
        },
        "item": {
          "id": "d13e9251-d612-47e9-95b0-a587bfa2dd86",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1b810764-ebaf-4a55-bb52-61891ee062fa",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "41b3e0bb-12e0-4326-bd6d-73cefcbfef06",
        "cursor": {
          "ref": "8f1fb5ed-dea6-43d9-9e57-393338589cb9",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "38156e8f-4286-4133-a601-2f2dab43ca32"
        },
        "item": {
          "id": "41b3e0bb-12e0-4326-bd6d-73cefcbfef06",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1c09bda8-f497-453a-b733-4c9232292a44",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "733d1810-dc57-4624-9fc6-5cb562d3ff07",
        "cursor": {
          "ref": "574e91d1-9c9c-49cc-81ff-dcf1a360d141",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "581bdb91-ee12-45b8-8a94-e1f4b1849b0e"
        },
        "item": {
          "id": "733d1810-dc57-4624-9fc6-5cb562d3ff07",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ab9a4c96-a4de-4718-8f3e-462c997304e8",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e3440782-bf30-44b9-b73e-3b34754860ef",
        "cursor": {
          "ref": "87eb862e-36aa-4dcd-8073-57f784db96fc",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c5cc7193-89d7-40f9-a471-1842107bc74d"
        },
        "item": {
          "id": "e3440782-bf30-44b9-b73e-3b34754860ef",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bbc924b0-16fd-4521-bcfa-86dd78f135fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23049855-89c0-41b3-9007-ffb8812ac32f",
        "cursor": {
          "ref": "940e6205-c25a-4967-8075-7b903d508524",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "780ea596-deb5-46c3-9aef-0a0f3ae73cb1"
        },
        "item": {
          "id": "23049855-89c0-41b3-9007-ffb8812ac32f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fb76fead-7462-42c7-850b-11da6aa27bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08b9967-a0e8-4df1-83f3-ee8f8913d8da",
        "cursor": {
          "ref": "231c337c-fcb4-46b2-832f-f4399f8a880b",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e52876d3-327c-4f57-a11e-c45bc1f87fec"
        },
        "item": {
          "id": "b08b9967-a0e8-4df1-83f3-ee8f8913d8da",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "22224a68-67b2-4cb7-8569-d88e307025df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98915b54-a75a-415c-a8a6-3d51d98c1a99",
        "cursor": {
          "ref": "787cab08-3d90-4b25-8b87-422b649c38a9",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f14320d1-f5d9-49d9-83aa-55e060e52608"
        },
        "item": {
          "id": "98915b54-a75a-415c-a8a6-3d51d98c1a99",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "10a4e938-b37b-4da4-a0cf-99866637ffe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5659e8ef-74de-4719-bccb-20af19da0fd4",
        "cursor": {
          "ref": "3cf4d676-cb86-448c-ba8e-8db44a41135c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cbb41c42-8f53-42f1-b19d-f550c9fafcba"
        },
        "item": {
          "id": "5659e8ef-74de-4719-bccb-20af19da0fd4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "baccc944-90f8-4461-8d20-f918c31e41e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96cf678-6bcc-4929-8719-ac4894d582ec",
        "cursor": {
          "ref": "ed0499b8-6706-4351-82c2-5f0056f825ae",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3b8ba96f-573c-4175-92d5-254a62f42e2e"
        },
        "item": {
          "id": "c96cf678-6bcc-4929-8719-ac4894d582ec",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "53b8ad53-7e97-41a9-a1fa-649e58766c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469535dd-0524-4dd8-9d9a-02f0e6af399a",
        "cursor": {
          "ref": "7bb099f9-bc1a-4d96-a709-affb866b576a",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5662b379-dc0a-48f6-9ccb-aa60652a3917"
        },
        "item": {
          "id": "469535dd-0524-4dd8-9d9a-02f0e6af399a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c35125b6-47f1-4cf7-bcf9-2d9e043e588b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2927ca9e-c6f0-4c2a-be19-5eff5c9356ad",
        "cursor": {
          "ref": "40428047-7c44-4929-a469-3ca249b55c50",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "571079f0-23d2-4fdf-8384-703903d5b7bf"
        },
        "item": {
          "id": "2927ca9e-c6f0-4c2a-be19-5eff5c9356ad",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "40c9716a-9485-4b7d-9938-f8b2dda589aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69d35cc-4f99-4ce4-980d-0c84e95eab55",
        "cursor": {
          "ref": "182fea6f-42e7-4d90-9672-99a3d4e36c11",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0778199f-7f06-40b7-8c50-876af9013532"
        },
        "item": {
          "id": "a69d35cc-4f99-4ce4-980d-0c84e95eab55",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "51d8cbc6-cc0a-49f9-856a-502871671608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee72d09-54a3-4c74-9dfc-516494c8f6a1",
        "cursor": {
          "ref": "ee417565-f4f9-4a5e-8877-d5d951ac3373",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "df658193-5564-4e86-8fbb-97efe5bd24d3"
        },
        "item": {
          "id": "6ee72d09-54a3-4c74-9dfc-516494c8f6a1",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f8924842-5df8-4681-9767-e5a8332771d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ec75da-f694-4fc1-9d2e-e55a04b62152",
        "cursor": {
          "ref": "06359ceb-4363-4602-a5d5-86c268bbae62",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d619c5d9-b145-4c76-83b7-d08e384aef4b"
        },
        "item": {
          "id": "40ec75da-f694-4fc1-9d2e-e55a04b62152",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e1aa5d37-de30-465f-a583-f1e6373fc0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661c5ed9-59ab-43ee-917f-ec1514a1b5cb",
        "cursor": {
          "ref": "daeacf25-767e-4c35-9e88-167fa288d01e",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "88f974e8-eb2b-451e-ae1b-1d0dc7c4bdb3"
        },
        "item": {
          "id": "661c5ed9-59ab-43ee-917f-ec1514a1b5cb",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "294c621c-9f2e-4c41-8c36-c6395a2a6b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9cc72d-df3c-4c35-a6d5-d29af36444ae",
        "cursor": {
          "ref": "c8e6af88-de29-4543-adbe-56fa8d4401e4",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "27fdf468-c622-4f81-8bdd-186b97b2a582"
        },
        "item": {
          "id": "1d9cc72d-df3c-4c35-a6d5-d29af36444ae",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a5efa56a-72f7-447a-aefc-f1db914a1b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a6e0a6-89bb-49b5-8c20-a289b3f81511",
        "cursor": {
          "ref": "2df77261-fa48-46ef-8efb-dc5be43ecba3",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1eb6e0c7-13ba-40d2-ad42-336a4cc49230"
        },
        "item": {
          "id": "f7a6e0a6-89bb-49b5-8c20-a289b3f81511",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8428f5a5-00fa-4e15-9332-7524a9648298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75b35f7-7864-47ab-8bc9-55c8c591ad7b",
        "cursor": {
          "ref": "94eb6ae5-20ab-4e34-bc57-57e0016c6c05",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "569dac45-c2a3-4172-a856-b546c8340264"
        },
        "item": {
          "id": "d75b35f7-7864-47ab-8bc9-55c8c591ad7b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9857ccbe-e246-49d4-b379-11add6ac8e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6042d212-ed7a-4ef0-a2b9-2add5cc368ff",
        "cursor": {
          "ref": "7bdd96aa-99a9-403f-a98e-320113a40e11",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5a40acf1-8772-4147-a14b-7685f9d35661"
        },
        "item": {
          "id": "6042d212-ed7a-4ef0-a2b9-2add5cc368ff",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "469b56dd-776b-45e5-a2cb-a95a0739b4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5ca91f-1f22-42fc-b87c-cf4c44e1bd6b",
        "cursor": {
          "ref": "18b94c45-9e8c-463c-98f4-9549fd7e0cfe",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0bd8e964-8f71-4093-910e-337752bbed42"
        },
        "item": {
          "id": "5b5ca91f-1f22-42fc-b87c-cf4c44e1bd6b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6bdbe836-a076-4d60-bc77-1d6abeb8a052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b258fd-80f2-4ef7-a09b-c49429e3359f",
        "cursor": {
          "ref": "e94bb416-3c1c-4b26-82e5-7a4bdfc0a1c1",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ebd05a1a-6b4b-4546-ad0f-b02f5ab487d1"
        },
        "item": {
          "id": "a4b258fd-80f2-4ef7-a09b-c49429e3359f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1fb2426c-7408-42ad-ac8e-76d3ed7bce7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5423ee2-2e33-49dc-a84f-3b18a5ee4f8b",
        "cursor": {
          "ref": "f39a846d-b71b-4af5-947e-27db40db1006",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "738aa19c-ce1c-4c65-8a64-6e369f1fe83f"
        },
        "item": {
          "id": "c5423ee2-2e33-49dc-a84f-3b18a5ee4f8b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6a59686a-20be-4dbb-824d-d14d1f9b84f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26cb48a-7a50-4fce-8b25-88a9e51ace8f",
        "cursor": {
          "ref": "c10d86e3-346d-41da-8943-8992b6379ac4",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "83e31648-7aef-4faa-9c9c-b475763ba97a"
        },
        "item": {
          "id": "c26cb48a-7a50-4fce-8b25-88a9e51ace8f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c7d4eba4-92a8-46d6-8f39-62512385de73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2ef114-4f5b-4c59-8a9f-79547c74a4ce",
        "cursor": {
          "ref": "e8ab93d9-ff29-43bc-b174-e4c796f44f37",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "725291d0-64da-4835-b21a-32991f5f996a"
        },
        "item": {
          "id": "5a2ef114-4f5b-4c59-8a9f-79547c74a4ce",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b2a3c94d-726d-43c7-b52f-52583d6d167a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8adf9215-8c98-4a04-830d-861a6b1ee3b7",
        "cursor": {
          "ref": "e39821ee-225c-4c74-9dbb-32de9f503bfe",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d0fee3e4-0fda-40e3-9b13-5d04f88ec5d5"
        },
        "item": {
          "id": "8adf9215-8c98-4a04-830d-861a6b1ee3b7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d10fd911-f1a0-45b0-8336-ef7f1561780f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff0bf28-6afe-43d4-a936-e5cef34f0dd5",
        "cursor": {
          "ref": "eba890c5-d57b-40ed-b0b2-5b89d7ddfb98",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6f53b5a8-49b0-4077-8293-0a26cddf86d6"
        },
        "item": {
          "id": "cff0bf28-6afe-43d4-a936-e5cef34f0dd5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "bb60d16a-d2bb-40bf-b9cb-3623c2a80560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8920e916-4369-4a85-b72d-2be397e687e0",
        "cursor": {
          "ref": "a1355ed1-d90a-4e7e-a653-de31cb65b66c",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "256f8a35-27ec-4be8-9852-0fd0241e3f90"
        },
        "item": {
          "id": "8920e916-4369-4a85-b72d-2be397e687e0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3e4d3ff8-8957-493f-b6fe-54f148764e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5178c0-9aa9-4890-8f20-fd2df7c8f5aa",
        "cursor": {
          "ref": "61e8fbe7-b804-4d94-a62d-033c411ec04e",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4b8970cf-6309-4052-912b-4ed888498e37"
        },
        "item": {
          "id": "ff5178c0-9aa9-4890-8f20-fd2df7c8f5aa",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e9abe9d6-81aa-4e53-960a-e290c903c296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d426d30f-832c-4104-996e-66893e00e3a2",
        "cursor": {
          "ref": "c5044ca4-9bae-4876-8976-4c9e1b8a89c5",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "67a04b60-4794-4cac-8161-3829c0d5c079"
        },
        "item": {
          "id": "d426d30f-832c-4104-996e-66893e00e3a2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b567beec-b411-4c48-93a8-6360124fc38e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd7aefd-b274-43f6-8fc0-8e9ac1938a95",
        "cursor": {
          "ref": "af1cb4c0-0bc5-40be-bfee-436b4f53e01b",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "17b1b554-1ae8-46f2-85c2-89a1f4e4dd31"
        },
        "item": {
          "id": "2bd7aefd-b274-43f6-8fc0-8e9ac1938a95",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "45e591de-0036-48c3-95dd-d9951a68a368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29843732-fcad-4ab9-a9fa-e284801a2b24",
        "cursor": {
          "ref": "a8caa046-9203-443d-ad3d-823d7a2252c8",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "04a250ff-7b91-4098-9f77-4c1c9ee82694"
        },
        "item": {
          "id": "29843732-fcad-4ab9-a9fa-e284801a2b24",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "394cc9a9-7284-4aad-bb4f-3f858e4bcd99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb5a51b-5b2f-433f-b5ca-9c91ac3c9374",
        "cursor": {
          "ref": "7ab3740f-e92f-486d-8288-1badd32c7a81",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "802def3f-2df3-4577-9c37-bdf08539cf22"
        },
        "item": {
          "id": "acb5a51b-5b2f-433f-b5ca-9c91ac3c9374",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7d39f9c3-4cf4-4146-924a-9f0d4f9aee3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd0069e-a847-4ff8-b04f-de4431a431bb",
        "cursor": {
          "ref": "930dcc62-9de7-42f3-a783-9d0e0aa2dff7",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e199d000-ffcc-41fa-b569-738c88d6ce1c"
        },
        "item": {
          "id": "4fd0069e-a847-4ff8-b04f-de4431a431bb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "39fca0b4-bcd6-4d09-8f21-b8f04dfcf2a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb070fc-fd75-4b95-a478-91d6606fc370",
        "cursor": {
          "ref": "73cb3699-cb00-4d4d-9344-f99ca77995b7",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5723d48d-bf0d-4675-ac0c-98995a73a906"
        },
        "item": {
          "id": "9cb070fc-fd75-4b95-a478-91d6606fc370",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b8ea4052-a4bc-44a1-ba7f-c16a9ddcaa95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6ad43b-4619-47b5-9c65-d31fbf2e8805",
        "cursor": {
          "ref": "2471ce7c-a53c-4b71-887f-324df51e1f9a",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e66d2e1a-0f6d-4a43-8373-5c73fb574ed5"
        },
        "item": {
          "id": "5b6ad43b-4619-47b5-9c65-d31fbf2e8805",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3b1a8403-e1be-4a9e-a1b2-bad096c7b5d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3e29d6-d597-4fa3-bc51-5286f8d80f76",
        "cursor": {
          "ref": "09a18863-6c72-4684-a7d1-58a8fa434415",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "45abf1fe-fb60-4d41-ad85-a8894062d83f"
        },
        "item": {
          "id": "eb3e29d6-d597-4fa3-bc51-5286f8d80f76",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "7d2c3855-72ad-468b-b490-d952ba9541c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c0d183dd-adfb-4f7b-84ee-30ec0ccc9cd3",
        "cursor": {
          "ref": "7d4aad06-312b-4626-8a10-ac1daf59891a",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ffab1aa6-dd98-4d3d-b3ca-033431e23646"
        },
        "item": {
          "id": "c0d183dd-adfb-4f7b-84ee-30ec0ccc9cd3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0a732868-1757-4a91-a62b-2c4c141d488e",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ecd3be-273b-45e9-a983-7fc67628a796",
        "cursor": {
          "ref": "49ea9c02-0cc8-4139-b6c4-827df3c7c8f3",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e91f726a-2c2b-4ecb-9af6-51a417413180"
        },
        "item": {
          "id": "39ecd3be-273b-45e9-a983-7fc67628a796",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b6579c04-b9c1-4540-913f-8548bb5e737f",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e7fe73-2252-44c8-b225-3792169733e8",
        "cursor": {
          "ref": "d6efdfaa-8cce-40b2-9f2e-604fe72e55ef",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "31aa81d6-51b5-4a34-95c1-c5929d3326b1"
        },
        "item": {
          "id": "24e7fe73-2252-44c8-b225-3792169733e8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "afda5d66-03eb-406b-963b-17e33834be1b",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f485d6-f8d3-4952-b3ae-7f615c747134",
        "cursor": {
          "ref": "2bd824ed-cde1-4a29-aeea-78a9a06d842e",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c0656fcf-8e1e-4281-a7de-cef84cfc71c5"
        },
        "item": {
          "id": "80f485d6-f8d3-4952-b3ae-7f615c747134",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "712dc7c9-9a9f-4776-a97a-73b4aa6d408d",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d80563f-5874-451a-9eb6-e17d4e62fdcb",
        "cursor": {
          "ref": "b3b797d0-4660-4024-a9d9-8c927777debe",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0d9adc1b-d8cb-4318-99d9-d1def18f0695"
        },
        "item": {
          "id": "0d80563f-5874-451a-9eb6-e17d4e62fdcb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fa25e050-6a9d-4772-876d-93b6cba3b049",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-21T00:34:18.837Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-21T00:34:18.837Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "6a4194a5-4257-4643-9145-b0cf96d6845f",
        "cursor": {
          "ref": "f21b3019-ec85-421d-b555-1850770ca522",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d6933523-b2db-40b6-a74f-e3149cb12fec"
        },
        "item": {
          "id": "6a4194a5-4257-4643-9145-b0cf96d6845f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "db5d9ebd-66f6-409d-aa3f-da4100ed1d26",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd48c07-7dfc-4532-8326-b298d9d74cb6",
        "cursor": {
          "ref": "e208a7c6-8fd9-433d-a074-a82bd3e52cd7",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1a43a8c2-62e5-4908-9cc2-e1e83b3b59d8"
        },
        "item": {
          "id": "4fd48c07-7dfc-4532-8326-b298d9d74cb6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6eea914b-cf4d-4757-a057-32de0ac5c903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39929d9d-55a5-4f54-862c-54e29fd46359",
        "cursor": {
          "ref": "f6e72476-4705-45e2-9b51-c9f377ceabc4",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "56d4d650-bb00-4dbc-8b32-aa8021ecc066"
        },
        "item": {
          "id": "39929d9d-55a5-4f54-862c-54e29fd46359",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d41cdc5f-c846-4853-9733-6f8dad9a8464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d7cc09-a05c-48bc-b59d-2ce20f93ff94",
        "cursor": {
          "ref": "91122788-3eca-46e4-bc99-b69444308c7b",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "10c5217a-b092-40b9-b745-5e7dbdcfa7f1"
        },
        "item": {
          "id": "89d7cc09-a05c-48bc-b59d-2ce20f93ff94",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a4c5e7c8-8c3e-4f8c-9725-d5becc4b9fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686972f0-beda-4c7b-875f-f762c81b303f",
        "cursor": {
          "ref": "814b60d7-b7cc-4f38-bcdb-50a99cabfae5",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "593d4f23-981f-4e73-a102-563dd1ed09a6"
        },
        "item": {
          "id": "686972f0-beda-4c7b-875f-f762c81b303f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3d17096e-34e4-4ad0-90f6-b8edc9c97277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a8ac9c1-fae5-4a1b-8d82-52f9117ef390",
        "cursor": {
          "ref": "95d8d31d-0170-4637-a625-682a123a3b8e",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2e4a2cd8-caef-460c-82bc-e33009478cdf"
        },
        "item": {
          "id": "7a8ac9c1-fae5-4a1b-8d82-52f9117ef390",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a1efbe92-5aa9-40df-b5bd-7ba66d01e10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11b93a5-425f-47a8-b7e6-cb1fa9d77c73",
        "cursor": {
          "ref": "aaecb704-7196-469e-89e6-572c75a44ac9",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5aa09368-d961-4f85-8e22-d0b83a91efbb"
        },
        "item": {
          "id": "e11b93a5-425f-47a8-b7e6-cb1fa9d77c73",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "88c2a05c-86ff-4dd5-91d1-57df793177f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ed5ba2-776b-4241-ae1e-88d1ce77a7a5",
        "cursor": {
          "ref": "00a40e59-9d2e-432f-af37-e2b9a3b03bef",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b1b388b9-ad95-4bcd-b9db-2bb8a50f428f"
        },
        "item": {
          "id": "78ed5ba2-776b-4241-ae1e-88d1ce77a7a5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0c41402a-9d90-4a78-8819-415cfc2bc150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518b1707-027d-44ad-adb6-86943b7fcbaa",
        "cursor": {
          "ref": "cb8e67f6-34e5-459c-b38e-01637d6ba6af",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "dd9c8fa8-8a81-45ef-a92e-428acec0f3d0"
        },
        "item": {
          "id": "518b1707-027d-44ad-adb6-86943b7fcbaa",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b4637bd0-4a0b-4753-a67a-2bb99a1d8d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751db8ee-c74d-44a0-b484-7e8e99ce10ec",
        "cursor": {
          "ref": "e39649cc-8ad8-4022-82c8-b211be3480e2",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f9081f82-1fd2-4e42-9da2-865f2595ff82"
        },
        "item": {
          "id": "751db8ee-c74d-44a0-b484-7e8e99ce10ec",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "55175e63-c3ae-47ab-be46-faa708cb5a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f5ed83-8212-4392-9ba5-cf305979a01c",
        "cursor": {
          "ref": "ffc10382-2d9a-4b31-b6b7-fb6db9bdb814",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "86c19c7d-bb8f-44dd-a9c6-edca7be44124"
        },
        "item": {
          "id": "28f5ed83-8212-4392-9ba5-cf305979a01c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "dd758d43-468c-48bf-b238-80abf4c2c5b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258bccfa-f895-44b4-ad0f-2773539f1691",
        "cursor": {
          "ref": "f7b61cf0-16ed-425a-8025-0bca27564316",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "758193d3-66be-4da8-8522-093a6f4e66c6"
        },
        "item": {
          "id": "258bccfa-f895-44b4-ad0f-2773539f1691",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a21a4fa9-f17e-4b1e-82cb-27e044e69dba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf5bb55-ad3a-485e-9d49-45f18d29236b",
        "cursor": {
          "ref": "adc09bb6-755a-44d6-984a-b58f37177e2c",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f088d414-8bff-4760-8ed0-4ba380bbaf81"
        },
        "item": {
          "id": "aaf5bb55-ad3a-485e-9d49-45f18d29236b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4fc4fada-df5c-466a-a962-7fb5d9368893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15407e1a-314e-444d-9bc0-1ec79dfe3b59",
        "cursor": {
          "ref": "e1e16182-98da-4bee-84b5-99e7b2f97a3e",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "645f4a13-56b2-4d10-b733-bcb0135ed544"
        },
        "item": {
          "id": "15407e1a-314e-444d-9bc0-1ec79dfe3b59",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9ed2d23a-a300-41fb-993f-8e86bf5261f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "456e8b07-f507-4efc-ac3a-021130612b02",
        "cursor": {
          "ref": "af471942-47d9-4bc8-9bbe-238ede9c5d73",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "864145e7-3700-4703-a2ea-39bbe0d23b2e"
        },
        "item": {
          "id": "456e8b07-f507-4efc-ac3a-021130612b02",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8e955957-8d93-4382-bf2b-8fecd7590237",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9361d57c-d528-4bf0-9122-56406fc34a0f",
        "cursor": {
          "ref": "b227ad0d-46a1-4060-ba09-22ecc3b53780",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "95623909-9094-4b26-afec-82a9836bbee6"
        },
        "item": {
          "id": "9361d57c-d528-4bf0-9122-56406fc34a0f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "639703fe-890d-4292-9f76-30269e830e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea456f7-5690-4442-b4f7-17927dca907d",
        "cursor": {
          "ref": "45114afc-701b-4bbd-9581-320eb60a8a64",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b47845d3-26d3-4a1e-a54e-1bc1a8affac2"
        },
        "item": {
          "id": "0ea456f7-5690-4442-b4f7-17927dca907d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "074cf24f-8c0a-4f90-971d-e9c1e87234e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada8b339-832d-4dee-b002-f2114cc054ce",
        "cursor": {
          "ref": "d54b5d10-e9f8-46a1-a5dd-8367f9f422ec",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8d95b0f6-4455-4355-867e-4ce01d6223a9"
        },
        "item": {
          "id": "ada8b339-832d-4dee-b002-f2114cc054ce",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "45e8aea4-c4d6-4988-a648-4fd368a2def1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4de42e-18f7-4578-9d26-5352a8677898",
        "cursor": {
          "ref": "e4486d5c-45fc-4c6a-aa5b-6c9339a44b3f",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "97fd2335-9e9f-434f-91ef-30519f6e8bd6"
        },
        "item": {
          "id": "ed4de42e-18f7-4578-9d26-5352a8677898",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d6a554ff-af28-4e7a-8897-3f45f1a9801c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769a7f6f-22ef-447c-a13c-06872728ef74",
        "cursor": {
          "ref": "cb71caa6-730d-4e6e-b3df-ae0e511340fe",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8991d397-8e2f-464b-a510-4af8c01364e9"
        },
        "item": {
          "id": "769a7f6f-22ef-447c-a13c-06872728ef74",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b439598c-0d13-4705-a22c-9fb277e9aee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6bbdfb-5362-441f-80df-5fed08bf7aa0",
        "cursor": {
          "ref": "7b380a6b-fa37-4fcc-9819-875851f00dcb",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "df08ab3d-a0ad-4dc4-b669-d28b217a8fe3"
        },
        "item": {
          "id": "2f6bbdfb-5362-441f-80df-5fed08bf7aa0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cdc6a79d-7a89-44e2-985c-fc06a57cd97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618ef036-627f-4e99-afbe-5d2ca8caab4b",
        "cursor": {
          "ref": "77475d1c-705e-46bc-9b57-8539903037c7",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "35f0c149-aaea-42a4-90cf-032e08035079"
        },
        "item": {
          "id": "618ef036-627f-4e99-afbe-5d2ca8caab4b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d8e5e027-a566-44f3-bf09-465906e305e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5949e8d4-a431-4c13-9e7b-32c9603375b7",
        "cursor": {
          "ref": "f0555d89-e8ba-4466-8da9-e2bd14b47926",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "40d8fdb1-7995-4a97-bd4d-255849969adf"
        },
        "item": {
          "id": "5949e8d4-a431-4c13-9e7b-32c9603375b7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1bbdaffd-32bc-41f4-9620-62fc14fb6d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0bb013-3b71-4e9e-a749-07ab0cba7f07",
        "cursor": {
          "ref": "14562f32-29ed-492d-8016-da01656901ea",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "af75a405-4948-4638-ae10-dbc7071a6abc"
        },
        "item": {
          "id": "af0bb013-3b71-4e9e-a749-07ab0cba7f07",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d57bf03f-7143-47a6-8e7c-08c5bc4457b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee185a71-1b43-4c21-90d0-953bfe74de91",
        "cursor": {
          "ref": "75d40760-56c4-4086-bdfb-3c95e81b635e",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f7ad3ad0-37a6-4513-bae3-b2bc34dcb0c1"
        },
        "item": {
          "id": "ee185a71-1b43-4c21-90d0-953bfe74de91",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5ef571ea-c788-4837-be60-daf085873536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be021be9-3872-4413-9e34-92c1814c326a",
        "cursor": {
          "ref": "60f7e2eb-3e57-458c-9301-1171f994f313",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "dfa9291e-105c-41b5-89d3-e1ae041dca6f"
        },
        "item": {
          "id": "be021be9-3872-4413-9e34-92c1814c326a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1c72b19d-4ab8-4656-9fd7-1545532deeb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ce2095-a1bd-45a3-8d82-0d401195a255",
        "cursor": {
          "ref": "5505d8f3-8098-434f-bfb8-379dbb98f122",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ef50fd42-a3f9-416c-99c6-5712e3eb14d7"
        },
        "item": {
          "id": "a3ce2095-a1bd-45a3-8d82-0d401195a255",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "16bb892a-a4cc-4c33-abc1-d8cb5d1fe703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6aa8bd-5892-4cc7-9e2b-b00e8ca113e0",
        "cursor": {
          "ref": "d799f661-687b-4334-ace2-5921681aeafa",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e5eb4106-f022-41ca-a5b9-ffe250c1bf94"
        },
        "item": {
          "id": "9b6aa8bd-5892-4cc7-9e2b-b00e8ca113e0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ff655122-e5ac-4ab8-a652-06b01804950c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3a2257-3f08-432f-94a8-3752d31f069f",
        "cursor": {
          "ref": "336235c8-9a78-4cf4-b275-cd46a0efb550",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d6487948-738f-486e-a2ee-c1f718d2ff2b"
        },
        "item": {
          "id": "ed3a2257-3f08-432f-94a8-3752d31f069f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a3c16bf9-e473-4c7d-a236-6f58b88c462c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f4a9b21-039c-4ef6-9bd3-b3904f9c7d43",
        "cursor": {
          "ref": "ff476c1e-b403-4e3f-a822-3b6efbfd1567",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0f6e0947-8299-4b79-80a6-00c85aa26fda"
        },
        "item": {
          "id": "2f4a9b21-039c-4ef6-9bd3-b3904f9c7d43",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a3fe5f77-2113-4e28-a8ce-afe7dcd98911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c49f8ae-2ac4-4b4c-ad09-1e35c2cd2da2",
        "cursor": {
          "ref": "572e337a-f0b7-49b5-886f-1235a20b3b92",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "029cc169-5f48-49b9-aeb0-827c170a6d67"
        },
        "item": {
          "id": "1c49f8ae-2ac4-4b4c-ad09-1e35c2cd2da2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "80de2e17-0a10-4962-b3c1-d0112c352dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782785ab-5a87-4bd8-8c42-b10da49682d4",
        "cursor": {
          "ref": "15fef600-69bf-42aa-a878-d9fd73051ba9",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b038059a-7e25-4700-bf98-8f106130098a"
        },
        "item": {
          "id": "782785ab-5a87-4bd8-8c42-b10da49682d4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f6bcbcd9-f4d2-48ec-9650-94355035acaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c771c110-ed64-40f8-b4d8-1e2f59a5eb41",
        "cursor": {
          "ref": "b2207eae-3db2-4fe6-84b0-70a7d9f14baa",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "28b4958c-2cce-4fdf-9b3d-426d1c2704a5"
        },
        "item": {
          "id": "c771c110-ed64-40f8-b4d8-1e2f59a5eb41",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "30fa640f-fdec-430b-a855-0ec03411cb1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "0028e944-c734-46f0-bb33-a7736a618898",
        "cursor": {
          "ref": "5f33c3a7-1d60-489e-be96-0161fd9a43cf",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "67479d6c-cdcd-4224-a8a3-7c7f26694c9f"
        },
        "item": {
          "id": "0028e944-c734-46f0-bb33-a7736a618898",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "42428f2f-3558-4d87-815b-249db238fff1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76dfe1d7-2c72-4288-b134-1f3f19515624",
        "cursor": {
          "ref": "026d745e-e913-45d8-95aa-6f931f7a4a63",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "cec8cf9b-752c-4ead-b97c-bc23eb69cf5b"
        },
        "item": {
          "id": "76dfe1d7-2c72-4288-b134-1f3f19515624",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6542d235-4a53-4147-b4e5-112b46659be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7919c6e-7ad3-4658-a9ee-77e169746f0a",
        "cursor": {
          "ref": "b7698248-1445-4379-8ab3-376e610b6361",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ab78e6d9-17ba-450b-9e2b-5fab978cdcc5"
        },
        "item": {
          "id": "d7919c6e-7ad3-4658-a9ee-77e169746f0a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f5087042-3ef8-484e-8ed8-ee98bbccddd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8ac55b-e450-4ed7-9f09-74568272f55b",
        "cursor": {
          "ref": "1d7a0b1d-7aa3-4d0f-8322-715cc496df3f",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6fe9f1d8-07f7-4df7-a3bd-1895b9ec8045"
        },
        "item": {
          "id": "eb8ac55b-e450-4ed7-9f09-74568272f55b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "794efe68-a3f3-462d-b7fa-d07cdbf77779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898b42b6-d773-48a6-9ff9-2c6229e794d8",
        "cursor": {
          "ref": "2dcbe182-e113-425d-8026-f1df25dc7ee3",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c4130d03-520b-48bb-a1c5-e495bd1a741f"
        },
        "item": {
          "id": "898b42b6-d773-48a6-9ff9-2c6229e794d8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "fbc02eba-2f30-4a52-b51f-4480ef98848d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31dbb7d0-e5f7-41b3-9ad0-1fcc6787a948",
        "cursor": {
          "ref": "d28ce3d6-14cf-4040-9c06-9cd491cdc0f3",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "00be5435-9bc9-4a20-8921-c5e5d3dc7578"
        },
        "item": {
          "id": "31dbb7d0-e5f7-41b3-9ad0-1fcc6787a948",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cbf637fc-aa13-4f58-80b2-b4413ec6427b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36883b94-b171-444e-9a29-fe2e46e325f9",
        "cursor": {
          "ref": "87e8ce2e-6766-48fc-b68b-3e3401a76055",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a623173d-b263-4730-b992-284518bb5c82"
        },
        "item": {
          "id": "36883b94-b171-444e-9a29-fe2e46e325f9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f5146e5b-21be-45a2-93f6-1b79d9d4f80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca307b1e-3057-4868-987f-a4f125b22600",
        "cursor": {
          "ref": "2b5c6b44-0b32-44b7-924b-48ab7a06b8ad",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8b125777-35e0-4d93-9085-fc7de83f1b01"
        },
        "item": {
          "id": "ca307b1e-3057-4868-987f-a4f125b22600",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e8d75561-d4ea-4f52-b8cc-4b00447fec7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114e8a57-3ec0-44e8-9bfd-a9f0f72a47de",
        "cursor": {
          "ref": "71caaee5-438a-4394-8c5d-9a60daf2b892",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ffc23b91-e324-491f-8561-8a62e0f36072"
        },
        "item": {
          "id": "114e8a57-3ec0-44e8-9bfd-a9f0f72a47de",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a6679ced-f0d8-4006-99af-7592f4f97614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240c751f-8d37-4327-b24b-b4eeadfc0c86",
        "cursor": {
          "ref": "9b434e92-c36b-488a-8343-56d63c378bf6",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "18b69b72-776a-4648-977b-a37856f5f21c"
        },
        "item": {
          "id": "240c751f-8d37-4327-b24b-b4eeadfc0c86",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "cf894623-5f72-4975-b3b5-a38f8695894e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4c4f8b-4931-474b-b7f1-d00f7bef9542",
        "cursor": {
          "ref": "889677fb-fd3b-4359-b11d-72c3c0bafbe9",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d7b9a807-5fa2-4790-a7fb-cc4b167e5fe9"
        },
        "item": {
          "id": "ee4c4f8b-4931-474b-b7f1-d00f7bef9542",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "82513be1-b5c2-48be-9a14-fc5185c63c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9525492d-0106-4791-a2e5-702eedb23dd2",
        "cursor": {
          "ref": "1b940b10-22a8-4f73-93e2-278db1b4bcd6",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ccaec433-d9b4-464d-9454-2d56768d3776"
        },
        "item": {
          "id": "9525492d-0106-4791-a2e5-702eedb23dd2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0f868fce-80e6-4b0d-bd8f-58ff19e9719c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6757bb94-4e0f-4053-8edd-b1760bf36b7a",
        "cursor": {
          "ref": "84077095-95c4-45c3-8c1d-6cb57032a0c4",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ae271d5e-ffb8-4217-a8d2-6fb046199285"
        },
        "item": {
          "id": "6757bb94-4e0f-4053-8edd-b1760bf36b7a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "662c4109-4ba6-4da3-9329-448e092cb09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deba12a1-56f2-4b37-b5d2-2d4089f46181",
        "cursor": {
          "ref": "f431c48c-8281-46f9-a310-ef6fea7c264e",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "18803c12-1c4d-49a2-81f5-7630f6b06d90"
        },
        "item": {
          "id": "deba12a1-56f2-4b37-b5d2-2d4089f46181",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5adbec9d-8b09-4d65-bc37-fdf0e64ed462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ea9eeb-8b75-4e74-a53c-7902cb12e449",
        "cursor": {
          "ref": "cd5f9c15-fa77-43e4-ab2a-dc79ec3cd98e",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "aa33d662-9dc5-49f5-b53b-bb988b8d0ff7"
        },
        "item": {
          "id": "c6ea9eeb-8b75-4e74-a53c-7902cb12e449",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d29fcb6c-b610-4f95-a554-1da24165f05f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "51b0af85-8584-458f-8507-df871deb0fe2",
        "cursor": {
          "ref": "ea0017bc-d128-43e5-a6af-46aee616a28c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "191b9f08-aea9-45e9-beb8-14aeb19f4939"
        },
        "item": {
          "id": "51b0af85-8584-458f-8507-df871deb0fe2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0cf12b34-c538-4c49-ac05-b560d12144d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a405013-ae46-492b-9ae3-9635dccf506c",
        "cursor": {
          "ref": "662c9a73-093c-49f5-99e2-0938f14264a6",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e19cc42d-6539-4442-9889-8afb307b452d"
        },
        "item": {
          "id": "4a405013-ae46-492b-9ae3-9635dccf506c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "398d9269-4da2-491f-bdaf-6151bee7d7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179f245b-0cd3-4c88-a870-2e6f2e6298bd",
        "cursor": {
          "ref": "35d3fb70-c705-40f8-b805-d116403d83bf",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "49267671-172e-41b5-af91-1c57ff8d2807"
        },
        "item": {
          "id": "179f245b-0cd3-4c88-a870-2e6f2e6298bd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "55e8fc69-e4bf-4738-9cd5-98b824560056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877a94a9-2e3a-4438-9869-8f01894533df",
        "cursor": {
          "ref": "ee860ff4-adb4-4a9f-b6eb-b057ca3619cb",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9e22a4bc-3aa8-4ca2-a48d-9fe8feb8a74d"
        },
        "item": {
          "id": "877a94a9-2e3a-4438-9869-8f01894533df",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9bb5629f-077a-494b-ae67-918d5a443b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfe0575-a9ce-46da-9929-4c2faef0e76f",
        "cursor": {
          "ref": "a340d7ba-eb9c-4b9b-85c0-141ef2a48b15",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7ce11ad3-85d7-487a-a8bb-0ef79cae2242"
        },
        "item": {
          "id": "fcfe0575-a9ce-46da-9929-4c2faef0e76f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9f78bee5-fffa-4c15-8a77-2ec3c81af784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a12883-c22f-4d2b-9d41-85a8b99a9f9b",
        "cursor": {
          "ref": "634f9261-dcb9-47e1-8a90-803cabe0a5e9",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9eda65ff-dc07-4890-8060-5fb4907fd27d"
        },
        "item": {
          "id": "f7a12883-c22f-4d2b-9d41-85a8b99a9f9b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "591f93c2-bd82-4a1b-935c-1ae4c5d1a2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029e2174-7452-4650-b0d5-e74b9fcac7ee",
        "cursor": {
          "ref": "0e262d80-da9f-4f80-96ef-07611c9be658",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f47e5ae5-dae5-4dc1-bf80-1ffa3c5761fb"
        },
        "item": {
          "id": "029e2174-7452-4650-b0d5-e74b9fcac7ee",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4eab177d-0ad1-48d7-b53b-9733347db95c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f4f272-9d3d-40b4-84da-7a23e315413e",
        "cursor": {
          "ref": "6acb4e6a-3c52-44f1-8cc4-5eecbe783965",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "929556f6-0aac-4a50-8355-593187fa3312"
        },
        "item": {
          "id": "82f4f272-9d3d-40b4-84da-7a23e315413e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3b362ef7-7c6c-4e90-a314-9bf4323791ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24ac5a0-d29b-4b0a-8965-f6c651a509c4",
        "cursor": {
          "ref": "945bf54d-1c47-47aa-af23-af4085201a06",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cd452a20-f25a-4aab-a1b8-6a4b10b57966"
        },
        "item": {
          "id": "b24ac5a0-d29b-4b0a-8965-f6c651a509c4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5c5c7354-fea2-4ead-9f7b-152158037aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b669f0fb-b320-4cfe-a1f0-9cb4db368f9f",
        "cursor": {
          "ref": "65e04d4e-b992-49d2-8583-edd3e4c1b437",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4311d1c7-50e4-4470-8726-323e17ff667b"
        },
        "item": {
          "id": "b669f0fb-b320-4cfe-a1f0-9cb4db368f9f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6e581bdd-9c97-4020-b174-7c31ddd5f8a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7153656-b868-464d-867b-d818423fa739",
        "cursor": {
          "ref": "149f8805-e7df-4094-8211-0bb07dedec03",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "111fe72d-fe1e-4f6f-b57c-c188306c9c5b"
        },
        "item": {
          "id": "b7153656-b868-464d-867b-d818423fa739",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f2a566b9-6d92-4b53-a2b1-c6532841dd38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d437211a-b18f-4603-a40e-b1bfd652be4c",
        "cursor": {
          "ref": "37f2cddb-e460-4f5c-9224-5c0f2df4c448",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f25b3abb-c58c-45ea-86f3-dc5cdf5a748d"
        },
        "item": {
          "id": "d437211a-b18f-4603-a40e-b1bfd652be4c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "df1e4f51-3e3e-4811-a5d4-4134207eec2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e28d6ae-a56f-4623-85c0-8803a0db9051",
        "cursor": {
          "ref": "db24b80b-4669-46ec-a1a3-2f0812f13dff",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "dbbfa0bd-0e14-4ed7-aad8-8698fd597819"
        },
        "item": {
          "id": "9e28d6ae-a56f-4623-85c0-8803a0db9051",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8a0084b2-e1d4-4921-928f-412a800cd614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11d1b81-e365-4345-b954-6b6b20b5ddd6",
        "cursor": {
          "ref": "3ac40d5d-2fc1-4bed-a66d-20d8ed008372",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7cab8892-ce5a-43f0-8e5f-69540bd3e81c"
        },
        "item": {
          "id": "f11d1b81-e365-4345-b954-6b6b20b5ddd6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1f8933a3-7de4-4261-a4f4-c57399c8ffa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed94e256-bcef-4db2-b17a-bf24f675de95",
        "cursor": {
          "ref": "9531b1f6-f0ce-46f5-afa0-b5baef26d621",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e50027a4-5843-4d2d-bb25-0968f9d77dc9"
        },
        "item": {
          "id": "ed94e256-bcef-4db2-b17a-bf24f675de95",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "82bee439-7cab-4a89-9943-8b4df94d52e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680fbc5c-5fee-4542-a09b-d0a0b84e3766",
        "cursor": {
          "ref": "f80f56a2-cd44-42ba-b5d9-d690d053b4da",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "270d34d5-626b-4339-94a5-135331fbfa73"
        },
        "item": {
          "id": "680fbc5c-5fee-4542-a09b-d0a0b84e3766",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "94b87a1d-117c-47b1-ada1-538281fdc644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d2633f-2039-4839-9f8c-543c6bb3171a",
        "cursor": {
          "ref": "1716f6fe-7553-426f-8323-3a75b0359940",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5549b3b3-5c1d-44b5-9c68-41340beef516"
        },
        "item": {
          "id": "61d2633f-2039-4839-9f8c-543c6bb3171a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b60719ca-9b87-494b-b0bd-3bd0e582963e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7036534f-914a-4478-a879-4a0fd3f02bf0",
        "cursor": {
          "ref": "7ede5aac-5738-4847-84af-36fd663d8cca",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "fead91b7-6155-406d-a5de-2b92c5d95d90"
        },
        "item": {
          "id": "7036534f-914a-4478-a879-4a0fd3f02bf0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "94b938c2-069f-4b75-9cb8-086e54e6bedb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3143f9c-9b14-42de-811d-31bd4426c369",
        "cursor": {
          "ref": "4d784bbd-1200-40f6-acb0-475a55ede3f3",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "945143dd-7b47-43a5-82e5-c185d532c4fa"
        },
        "item": {
          "id": "c3143f9c-9b14-42de-811d-31bd4426c369",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2b3f5eca-a87b-41da-ab48-dd281707b5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46b21ac-82d7-4d86-8661-eb3c47464aa1",
        "cursor": {
          "ref": "c73d509c-c12e-4ea9-af4a-7993088ae28e",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "adbf9fe4-20b0-4e5e-8dc5-b889d2b967ec"
        },
        "item": {
          "id": "b46b21ac-82d7-4d86-8661-eb3c47464aa1",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "256eee77-acfb-4ca7-8805-200d97a968eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bd5075-81f2-45f5-80af-7ef06ac3abf9",
        "cursor": {
          "ref": "2c1833a0-9ab5-43db-8833-f5db81f7fe14",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6f5e34be-5a9c-456c-88f6-316ac366d9fa"
        },
        "item": {
          "id": "59bd5075-81f2-45f5-80af-7ef06ac3abf9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8d5691eb-6394-4105-8d08-342653c97763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8f45039-212b-4aed-8ac6-be5ee31f58d2",
        "cursor": {
          "ref": "f49ac407-a955-4e9a-8727-6beb7d22ca56",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "dc4cf145-da3b-4a1a-b0d5-40365bae2a61"
        },
        "item": {
          "id": "c8f45039-212b-4aed-8ac6-be5ee31f58d2",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "e2416114-fe06-4c77-9c69-5e13db1f732e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98367100-7d57-48fe-9b1e-4c20123afbbb",
        "cursor": {
          "ref": "640c56b8-b082-4c1f-ae29-8fc21df2281e",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e17211c0-a454-46cb-8fa9-9e8fb88a00fe"
        },
        "item": {
          "id": "98367100-7d57-48fe-9b1e-4c20123afbbb",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0a2799eb-9db2-49ed-be17-9bff92a56fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62681832-0ec5-43b4-bc50-6fed31c32216",
        "cursor": {
          "ref": "30a021c7-8d97-4770-a030-3eafa683288b",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e2ae3790-4764-49ba-b7d9-56a068ffe615"
        },
        "item": {
          "id": "62681832-0ec5-43b4-bc50-6fed31c32216",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d85f6db7-cf7d-43b4-9127-3541472b4410",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d917b69-6c07-41fe-ab8d-e9b986a5c217",
        "cursor": {
          "ref": "fc96b29c-a217-4ff3-9b18-cad0240d4246",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "69d51c85-d11c-476b-b472-4634d8c4ae43"
        },
        "item": {
          "id": "1d917b69-6c07-41fe-ab8d-e9b986a5c217",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fbc925c7-ffbb-4f47-a37f-4f55ae876f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ddb13c6-ead2-454f-b3f1-69bf13c27a98",
        "cursor": {
          "ref": "62694d7f-6ac0-434d-91c8-000f8181d879",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f2b15c46-574c-4ec2-a1b9-c598ad2919f7"
        },
        "item": {
          "id": "8ddb13c6-ead2-454f-b3f1-69bf13c27a98",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "58508dc9-4315-4178-9412-b1b5c0b8bf73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d8c7e4-7274-4bf0-934b-9959c9ce4bd3",
        "cursor": {
          "ref": "86b10711-0996-4859-9b78-5e5514e64071",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "882bdeaf-df11-4093-91f7-b18cda70407d"
        },
        "item": {
          "id": "c0d8c7e4-7274-4bf0-934b-9959c9ce4bd3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1fff8d95-766d-46ec-8994-639ce1ba9cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2347cc-4ba6-4413-a71d-f6e041882ec7",
        "cursor": {
          "ref": "aa256d40-809f-4f3c-9ddc-dae62e7f3510",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5bbdba83-4616-4a99-a657-d8343750fd4a"
        },
        "item": {
          "id": "4a2347cc-4ba6-4413-a71d-f6e041882ec7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "048f6168-d1a3-44c9-8e7e-bb6dfff01365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1beac6a3-f27b-4fd7-907c-0954b2bd1f24",
        "cursor": {
          "ref": "00d926aa-b82e-4e77-a2ea-b01d5835a56a",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6b65a5cf-5ebf-4181-84ee-d195366780f1"
        },
        "item": {
          "id": "1beac6a3-f27b-4fd7-907c-0954b2bd1f24",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "076d1985-6d28-4cc0-b6a3-2df7d8c9f15e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15f90b4-7622-4ba3-b072-5fb396a8085a",
        "cursor": {
          "ref": "219cbdff-a95b-49c0-95a8-c1a7e3148663",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8a2e5607-c62e-47a2-b67e-8f1a207afd09"
        },
        "item": {
          "id": "c15f90b4-7622-4ba3-b072-5fb396a8085a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a8718b9b-81f9-402a-8ee9-c63fb9703570",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "88044bed-da93-4437-9519-bab0e05ac07f",
        "cursor": {
          "ref": "89028189-bc25-49c5-8729-a9a30e6f5d05",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a30501a1-cbad-42b8-aac6-43a8fa59ef3c"
        },
        "item": {
          "id": "88044bed-da93-4437-9519-bab0e05ac07f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "cce7598e-2702-4dd9-b53c-d37996465e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae678e4c-a795-4de0-adce-040cfe021632",
        "cursor": {
          "ref": "f041456d-6536-4597-92a8-d0d93d8092a2",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "46182414-b410-40bd-9246-d52d7cd556a4"
        },
        "item": {
          "id": "ae678e4c-a795-4de0-adce-040cfe021632",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "dc193549-a9d7-43ff-b2ac-5feac9b254eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45a6350-0362-435c-a071-eccf7079d942",
        "cursor": {
          "ref": "c2239ada-3f54-4a1a-a53f-f6f7de756ed1",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "aa6ef3a7-4375-4e79-a564-2d352a89f113"
        },
        "item": {
          "id": "c45a6350-0362-435c-a071-eccf7079d942",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b0f0a050-24e3-4276-b1c5-63aaad2df023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bea5422-71f6-4933-93d0-17e06b4c8430",
        "cursor": {
          "ref": "ec4dcf1c-f661-457e-b5d8-61d98c50d454",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cafea0f7-2f3b-4ee2-86cd-ce3a8e0b6e6f"
        },
        "item": {
          "id": "5bea5422-71f6-4933-93d0-17e06b4c8430",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5754f087-0e1b-4cfc-b050-1575a7a57ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f450a29a-1598-40ff-aedd-0f08fb369124",
        "cursor": {
          "ref": "8e5acf77-56e4-4a75-8502-e10cf3ac19e9",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e0257aae-49ab-4a81-b3c1-a8c0ed8ccf60"
        },
        "item": {
          "id": "f450a29a-1598-40ff-aedd-0f08fb369124",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a084376b-4e56-40f0-b07e-50e07e556758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2db8548-cfa4-480d-b4fc-17bda0b30443",
        "cursor": {
          "ref": "24ca7e5c-cd27-4464-9fe2-142efd025274",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8617ba06-b0e2-4df3-bb60-5b9ec8c1cb31"
        },
        "item": {
          "id": "c2db8548-cfa4-480d-b4fc-17bda0b30443",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "193c95e2-0d92-460d-82d0-45c01f63ada2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105149cf-080a-4b50-ba54-13cba6f09c1b",
        "cursor": {
          "ref": "bb7d6579-db31-4018-87b0-2d994d6f6871",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "45abf0a8-5aa0-48a6-9060-5f6ae54114b9"
        },
        "item": {
          "id": "105149cf-080a-4b50-ba54-13cba6f09c1b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "844d0c21-670a-4a3c-b6eb-98f115234a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d46b48df-388d-490a-80c3-c6797dd9d920",
        "cursor": {
          "ref": "2f935663-c6a5-4ac9-9f46-3ff62b4ef039",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "21be02bb-361e-417c-b6b1-d0d2951eb0ed"
        },
        "item": {
          "id": "d46b48df-388d-490a-80c3-c6797dd9d920",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2f6b7f0d-f9e0-4c95-86cd-25255764a343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7dc3764-200e-4b5c-a9e9-97a40166da72",
        "cursor": {
          "ref": "d088c235-9df8-43cf-858c-6c6c5a22b7e4",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4ddbdcfc-1daa-4317-85d8-78e26d6b37bd"
        },
        "item": {
          "id": "a7dc3764-200e-4b5c-a9e9-97a40166da72",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "44040fed-66df-48d3-8109-1967a60aee82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5374d7f3-99b7-4c97-97ef-064757fd69ca",
        "cursor": {
          "ref": "5cd33d87-4da2-412f-b948-3fa693d8ed20",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6bb09b7a-60d0-4219-a88b-22773b547fb9"
        },
        "item": {
          "id": "5374d7f3-99b7-4c97-97ef-064757fd69ca",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "66533da6-4638-4795-878f-ce1193ecfd3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e5ccc3-b224-4b20-adca-ffa4b54effce",
        "cursor": {
          "ref": "4f59f304-22c0-4c41-ac63-f396d4f70955",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f18bdf66-9334-4392-bcfb-659b39882460"
        },
        "item": {
          "id": "c6e5ccc3-b224-4b20-adca-ffa4b54effce",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "63548570-0f7a-4751-b0f5-a5ed18033474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68384a9-cd0d-45b0-9127-9ec7b389dee7",
        "cursor": {
          "ref": "e2bf0f0e-bee0-41d7-943b-a02296278e0b",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c05e5b5f-866a-4f13-8ba2-0c4d70eb8e85"
        },
        "item": {
          "id": "a68384a9-cd0d-45b0-9127-9ec7b389dee7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "76944241-405b-47f1-9596-ad27fd1dc860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a492031-1a46-410e-a9db-bceb04aeb262",
        "cursor": {
          "ref": "0799ee3d-0d0b-425e-af62-f0a2a9d5fc46",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "63359e19-6962-4167-a638-3a3b9f212f00"
        },
        "item": {
          "id": "5a492031-1a46-410e-a9db-bceb04aeb262",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "137ca469-f713-4f75-a507-23d9d338ff32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d0949f-1c31-41ef-8470-d1ce1faa7920",
        "cursor": {
          "ref": "67403ff9-7b73-4daf-b0db-6a0bf49ac946",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9c40e529-e28a-4b7e-b0ff-96113ba2e7ea"
        },
        "item": {
          "id": "00d0949f-1c31-41ef-8470-d1ce1faa7920",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "70489f67-44ba-441b-9209-1ef8583aeca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e430f1f-7d6e-4cca-9e74-686b5a77285b",
        "cursor": {
          "ref": "695b8eda-039e-4218-93ed-37e94a631bc7",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9ceedf0a-eab3-4b9a-8126-b423f53b2ae1"
        },
        "item": {
          "id": "2e430f1f-7d6e-4cca-9e74-686b5a77285b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c7bf0713-a158-44c7-84b4-bd2107fcfee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73295cac-6b6a-42f9-be61-953e61ed2be0",
        "cursor": {
          "ref": "cd66329c-823a-4332-84c9-66363f132c9d",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4895eb87-dc37-4314-9638-aebba2718baa"
        },
        "item": {
          "id": "73295cac-6b6a-42f9-be61-953e61ed2be0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f79e29cd-55cf-4a95-80fe-a5603f154f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d45757e-46d1-468a-ae1b-792361e18869",
        "cursor": {
          "ref": "5108799e-2ce3-4dd7-aae6-fd1f32348d2d",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "70e402d5-be88-44d3-acca-1cfd5dc02418"
        },
        "item": {
          "id": "9d45757e-46d1-468a-ae1b-792361e18869",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6ecb8ac2-d3e3-4d9f-8e01-47d91225597a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea22af28-c25f-4721-a7ff-352bea083e62",
        "cursor": {
          "ref": "55aa2333-4e10-47fa-b798-80d75fcd4176",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f98c6021-8156-45ba-9335-b75cd110a5f1"
        },
        "item": {
          "id": "ea22af28-c25f-4721-a7ff-352bea083e62",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9a77b807-577b-404c-8a0a-aa857e62cada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84eb6f88-88a4-49fc-823e-dcfee15ac631",
        "cursor": {
          "ref": "8aeb9f28-d805-46c6-9f09-fe4df347ab4d",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "85113359-933d-4b21-b2f9-b0ac34b45d25"
        },
        "item": {
          "id": "84eb6f88-88a4-49fc-823e-dcfee15ac631",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9905e30b-4ea4-46c1-879a-5967a574104f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933f634e-7ffd-4f59-bff9-bad982c6bb75",
        "cursor": {
          "ref": "34683099-cb05-4b9d-8721-162dc727b5f8",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9436cb10-5f4d-407a-8874-ec0ab490ef0c"
        },
        "item": {
          "id": "933f634e-7ffd-4f59-bff9-bad982c6bb75",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e86eaa19-9f00-434a-afe7-9ba9c16aa762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8de20c-f6e2-48c3-83a3-d2149fb6be4d",
        "cursor": {
          "ref": "4b10c772-f4f1-4889-85bc-76c881ffc216",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b5a5bac0-2aee-40fc-aaf1-09e4903b18c4"
        },
        "item": {
          "id": "7f8de20c-f6e2-48c3-83a3-d2149fb6be4d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "45814452-e9c3-4a7f-aff8-5e8f1a5e0465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ede774-4046-4b74-820b-8409904f5a2e",
        "cursor": {
          "ref": "f9b09bd7-0296-4bd2-87c3-84edda61d6f0",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3b793649-eafc-4be7-980f-da4d8be8f0d1"
        },
        "item": {
          "id": "d6ede774-4046-4b74-820b-8409904f5a2e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3ef8ed0e-9494-4b00-85f1-f5562e4bb10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e954f3-9b81-464b-a4a1-f2701e837d59",
        "cursor": {
          "ref": "14b82bba-9429-40b9-b27f-31f159e8632a",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "43a0ea1b-18a7-48ea-a17a-c0c2da04d2a8"
        },
        "item": {
          "id": "04e954f3-9b81-464b-a4a1-f2701e837d59",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8cada3cf-ee20-43e2-bca7-f5c4a7d246a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745c95db-89c6-420d-83e7-49f296e9782e",
        "cursor": {
          "ref": "f6495f72-d593-46da-b446-f171124fb93e",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "26854541-4066-4d13-ae47-a02c7b671ecc"
        },
        "item": {
          "id": "745c95db-89c6-420d-83e7-49f296e9782e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b85c71a8-a5ea-4997-b3f5-be0a78d2763a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a035ce-d0d7-4ef5-afb4-bd0a022b8cbe",
        "cursor": {
          "ref": "d065f114-5825-4bf3-8386-948dc4ef9d4f",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cf10b72f-49eb-4d4b-a469-af86c61ed273"
        },
        "item": {
          "id": "76a035ce-d0d7-4ef5-afb4-bd0a022b8cbe",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fce1b13e-bc6e-4f3b-9340-bc8b60549e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2965c05-149a-4e7d-a3ad-2fc134e754d9",
        "cursor": {
          "ref": "5a97b8ae-c65d-4ba0-b72e-193cce7fe7fe",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4467919e-5629-4e26-a084-ba464088e045"
        },
        "item": {
          "id": "f2965c05-149a-4e7d-a3ad-2fc134e754d9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "36aaf408-798d-4a10-a2d4-b4fde4eadb0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a25637e-4859-47fe-b775-9713b46587d1",
        "cursor": {
          "ref": "bf89d67a-2569-4cf9-88c8-ecd5536847d4",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b55ce81b-e935-4da4-9f5d-cdabb03fa313"
        },
        "item": {
          "id": "6a25637e-4859-47fe-b775-9713b46587d1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7c6b5ef7-4032-4553-9d71-5d3b5c33d523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be24bbd-d1cd-44d3-8bc5-28ce00a6371d",
        "cursor": {
          "ref": "6390019c-9275-45a0-baa8-ec85ae0f9505",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e2f82d3c-75f0-43c1-bd6e-7796d1298376"
        },
        "item": {
          "id": "1be24bbd-d1cd-44d3-8bc5-28ce00a6371d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6d35afe8-3941-455e-974d-1b2bc02e39de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6fa0c5-bfcd-42ed-ba5d-988852e993ca",
        "cursor": {
          "ref": "5bd0c2d8-8f00-434a-90c2-9630ccc0d44f",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6cc52e07-c5c3-4b2e-bf50-6643502be8cf"
        },
        "item": {
          "id": "3f6fa0c5-bfcd-42ed-ba5d-988852e993ca",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "72be023c-82b1-454d-b8ee-6e916599c9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824e2f77-e08d-48a1-98a7-64387f51ef22",
        "cursor": {
          "ref": "a2594397-7efa-4880-8d97-8b356224e24b",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "74700871-13f3-4eee-930f-9e84e51306c7"
        },
        "item": {
          "id": "824e2f77-e08d-48a1-98a7-64387f51ef22",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9faffd7f-909f-4125-8b36-66038fab86cd",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "06f742ca-897d-48f3-87fa-d1b810313b2d",
        "cursor": {
          "ref": "3ad2885f-a9f7-4b43-b0d1-de95abe71e75",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bd97a2ba-0087-44d8-8eaa-0226f55c4a4f"
        },
        "item": {
          "id": "06f742ca-897d-48f3-87fa-d1b810313b2d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "03457012-a549-48e5-94ce-8c288e95326c",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "db134cc0-ab05-48f6-9dc8-cb7a76a89a13",
        "cursor": {
          "ref": "085ba798-8ed8-46d7-a1d0-9ffb0c323316",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c4ad9e8b-b24a-422e-9ab3-4fd02fb4fbe0"
        },
        "item": {
          "id": "db134cc0-ab05-48f6-9dc8-cb7a76a89a13",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1d08db26-295f-45ea-b5ff-87d424508b2a",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8b5ef0df-195b-40d8-8a42-11b82d9fda3e",
        "cursor": {
          "ref": "d06655d0-2a4e-4c2f-b31d-f0fe893c1065",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ad5ecf0e-2ba7-4f8d-a34f-35a08c088718"
        },
        "item": {
          "id": "8b5ef0df-195b-40d8-8a42-11b82d9fda3e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3696aad2-1ddc-4823-83d6-0e8ad25eccd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b45574f-c9b7-4bd2-b6b5-1d6dbb142555",
        "cursor": {
          "ref": "1a49abf9-24c0-40db-ba92-5ab3fb2ea313",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "335cffaf-cd22-4a7c-a140-0787a1635ca3"
        },
        "item": {
          "id": "4b45574f-c9b7-4bd2-b6b5-1d6dbb142555",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6c6a509e-d9b6-4bd6-93e4-e3031eb67c7a",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "3752cd66-6b83-4333-bc5d-67c136679128",
        "cursor": {
          "ref": "88d1d60b-f121-488a-b03d-151257bf87c0",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8ff7bb37-eef6-47ec-9c97-2c58aae20120"
        },
        "item": {
          "id": "3752cd66-6b83-4333-bc5d-67c136679128",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "24d25bb8-d9a1-4b82-8731-d68b92a4d5e6",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4e26fa49-693b-4bf6-9fe6-e5d8fa1a5318",
        "cursor": {
          "ref": "fbfc3626-3451-4f90-b7fd-9d976e43f022",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4a5b4fe9-be16-4ff3-adde-f1ea5f3cb315"
        },
        "item": {
          "id": "4e26fa49-693b-4bf6-9fe6-e5d8fa1a5318",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "47980b90-38de-4469-9c29-ea21e43ac173",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a9f957df-72c7-4101-8069-ba0b69f76175",
        "cursor": {
          "ref": "76772e88-9427-43e4-a1a7-6839978011d0",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6fa3dd80-61ca-48f4-ab64-6d5ad548fdc1"
        },
        "item": {
          "id": "a9f957df-72c7-4101-8069-ba0b69f76175",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c64ca857-4cef-4427-89e2-387e352fa390",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b6ccbbfd-bda8-47a7-98bd-e0630892f7e5",
        "cursor": {
          "ref": "a407b595-9866-4bd9-aa37-09f078ad46e1",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fe86c5c1-e39d-492f-af1b-ef857e206e30"
        },
        "item": {
          "id": "b6ccbbfd-bda8-47a7-98bd-e0630892f7e5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e073c2ce-aa40-4b2b-a2ae-502b2589a3bb",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6dabddc1-4f9b-4501-bf09-5fd109bbc41e",
        "cursor": {
          "ref": "17471ea5-8e13-4970-be72-ce8196587782",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "081e0208-c6a0-4b36-b79a-69f35e14cd8b"
        },
        "item": {
          "id": "6dabddc1-4f9b-4501-bf09-5fd109bbc41e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c27a4123-5dd6-490e-99b0-9e8b8a98ab68",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "e1f2f2df-2bee-416b-aad5-d3d359bef9a1",
        "cursor": {
          "ref": "c545782b-24b7-4212-afcc-9eab56c44bcb",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d5258535-00ad-4c23-8047-363bb663c30d"
        },
        "item": {
          "id": "e1f2f2df-2bee-416b-aad5-d3d359bef9a1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ad12a07c-7c99-4a01-ae71-af0d0f7444a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4b9c41-931f-443d-9f10-a98b082e97ae",
        "cursor": {
          "ref": "6a0c3085-5240-4107-88eb-35a392efde0a",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1efb8ffb-b892-4aa2-a81a-ba9e200e421b"
        },
        "item": {
          "id": "ea4b9c41-931f-443d-9f10-a98b082e97ae",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "818b143a-947f-402d-b0d8-e5e0c1380524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7252b94-b9fc-46cf-bc25-02071fcd0c10",
        "cursor": {
          "ref": "b2ef207f-0010-4029-8852-fdb2bbf1977c",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "60469ad8-0c55-4226-9fc2-f7916f8a3bd2"
        },
        "item": {
          "id": "a7252b94-b9fc-46cf-bc25-02071fcd0c10",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4eeeac56-67f7-4946-9fb3-93e6ad1e76c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6bf843e-5afa-4826-892b-eccd75bfa5b5",
        "cursor": {
          "ref": "db1f6054-aa3f-49f0-b242-b5ddcc52530d",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "fb43c015-7a86-46ca-8ac0-7cce4bf4fc92"
        },
        "item": {
          "id": "e6bf843e-5afa-4826-892b-eccd75bfa5b5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "aef202dc-9651-4f50-bfcb-490417341bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ddfb01-1034-4f4b-99be-3d84717c7f85",
        "cursor": {
          "ref": "1008827e-0c48-451b-b062-aa2e522e05b8",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b5add441-44c4-4553-af36-b41f95f78a05"
        },
        "item": {
          "id": "30ddfb01-1034-4f4b-99be-3d84717c7f85",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "366acf91-f6ee-496c-a1c5-3c9e785eb4bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2210ea1a-be87-45c4-9a25-ecf154454369",
        "cursor": {
          "ref": "32eb46f6-52b4-46d4-bca5-83a38f8d19ad",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "209c7b3e-a5c6-4ad1-9e54-91d03a6e0de0"
        },
        "item": {
          "id": "2210ea1a-be87-45c4-9a25-ecf154454369",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "23fe7da3-e0bd-4b77-a326-da7a21e8a379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f25523-7a88-432d-9c29-5a15770f9de3",
        "cursor": {
          "ref": "e4677cb2-8222-4eb9-a614-1d78fd4f9503",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c2e6d824-1943-4ce4-bae4-2eb8b8af7539"
        },
        "item": {
          "id": "61f25523-7a88-432d-9c29-5a15770f9de3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6186891e-2897-40ea-aece-ffbd10fdbf9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53927a0-3c92-41cf-b679-a2208904c028",
        "cursor": {
          "ref": "94649d3b-d03e-4d9e-9695-bb887150f034",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4a7858d8-b8c7-4a7e-867c-0f4c63f5d3c6"
        },
        "item": {
          "id": "a53927a0-3c92-41cf-b679-a2208904c028",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b4f799db-3e3e-450b-8830-0a159e113be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4fda64-b163-4621-a893-cfa2f5c24dec",
        "cursor": {
          "ref": "42fca3c5-af79-4e63-847d-081e813fae98",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c6e8bb7c-1a4c-409e-82a2-03e74dcd0ec6"
        },
        "item": {
          "id": "fa4fda64-b163-4621-a893-cfa2f5c24dec",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2fe68d90-eecc-4b4b-9ea1-5a8436239303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2932c627-a1a1-41a1-9fe5-025164ab61f7",
        "cursor": {
          "ref": "01a820b4-67b6-42ae-9ab6-2a64d6c113a4",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9d87b696-add0-429e-a5ec-bb20dd025b73"
        },
        "item": {
          "id": "2932c627-a1a1-41a1-9fe5-025164ab61f7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "27660437-a3c0-4305-b1ed-c3be310eb7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3d0f6b-23b1-46ec-9072-692b37618f65",
        "cursor": {
          "ref": "1d5f0163-dea9-4a72-b15a-c1d28f0733e5",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e598c48c-f471-4f68-b16d-626c0e6a90c5"
        },
        "item": {
          "id": "bd3d0f6b-23b1-46ec-9072-692b37618f65",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6a08fe6a-c288-4ae8-af92-1fd30d435985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01aa9028-ec6f-4a2c-8986-c763176a8aeb",
        "cursor": {
          "ref": "f433ed5a-ec7f-40d6-bcdc-47d112e0bae1",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f00f2dd1-e53e-4710-9f34-0f83607cfafe"
        },
        "item": {
          "id": "01aa9028-ec6f-4a2c-8986-c763176a8aeb",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a985637e-6623-4593-990a-38fe7f9e6909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfcdff4-9b25-4d04-923f-ab975caf5e83",
        "cursor": {
          "ref": "85c9dda5-ba84-44b6-816c-4e540ecdcab4",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e179ee8d-0325-44f3-a148-88c8798fb352"
        },
        "item": {
          "id": "fcfcdff4-9b25-4d04-923f-ab975caf5e83",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8e7db35d-3afd-45c4-b1e5-97f8c7746389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19fe125c-069d-4e4b-814e-88ae190fb2af",
        "cursor": {
          "ref": "36d45ecc-c33b-4de2-afa4-3fbac4019766",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "90f9f5f6-efce-4e33-8580-d4c57eed227c"
        },
        "item": {
          "id": "19fe125c-069d-4e4b-814e-88ae190fb2af",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3878006a-802d-4291-b3b0-ec2e87e2bbdb",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "fa3e8198-ab6c-4c8a-84cb-470f40662376",
        "cursor": {
          "ref": "93d31e60-fd6c-4d1a-9445-b44919f96e1e",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2af29059-263b-4943-8c94-c34fc9988b68"
        },
        "item": {
          "id": "fa3e8198-ab6c-4c8a-84cb-470f40662376",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c4830709-eb7a-4320-a3af-088f6f657315",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "0890ec22-e89d-406f-b037-0b7fe88d47d6",
        "cursor": {
          "ref": "b8e3473d-917c-4e85-896c-63b851cdb7d4",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4c14e9ed-e454-415a-9231-a69ffee6f33c"
        },
        "item": {
          "id": "0890ec22-e89d-406f-b037-0b7fe88d47d6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8ba41a21-f6c9-41a8-9d73-9143cec1650f",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "567d236a-0fd2-45f4-98b1-e0ae431786af",
        "cursor": {
          "ref": "a8b2115b-fd0e-4a08-811a-d052d07a0ce5",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ffb34b2f-2cb1-4e26-ac26-166dc9febf2e"
        },
        "item": {
          "id": "567d236a-0fd2-45f4-98b1-e0ae431786af",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3523387d-dad9-4f7b-91f8-c34607f91835",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "cce362fa-7d8e-4534-92b1-f39030a4d767",
        "cursor": {
          "ref": "b3dce72f-9aa0-4e6d-90ef-dd3be0fe8d82",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "25119544-5eb2-4ccf-b6f4-c82263604304"
        },
        "item": {
          "id": "cce362fa-7d8e-4534-92b1-f39030a4d767",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5f653c36-0f6d-466e-baea-40d8a6fef20f",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9238f281-66fb-41f1-b7c9-aded14b5c08d",
        "cursor": {
          "ref": "e2a202aa-d8a7-469f-8a90-6a45499a4d7d",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "95968cd7-119f-42c4-bad9-682a4fd7e8b2"
        },
        "item": {
          "id": "9238f281-66fb-41f1-b7c9-aded14b5c08d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "cddf59c8-2f0d-4f3e-8e75-078b8b8d098a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8962520e-e1dd-47ce-a86d-70629968de88",
        "cursor": {
          "ref": "c744b7f0-a47d-415b-a00a-2a14a20fb5b5",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "aa254f1e-f28a-4cf5-8d73-a6e02f995815"
        },
        "item": {
          "id": "8962520e-e1dd-47ce-a86d-70629968de88",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cd3206f3-f6a7-4f69-b612-0cdc738fe102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8300761e-0e23-4cda-83c7-857eeea690ad",
        "cursor": {
          "ref": "4772c9c9-329c-45af-8560-dc0ae8b8ade2",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f06f9aa7-b213-47a5-aeb9-135222123638"
        },
        "item": {
          "id": "8300761e-0e23-4cda-83c7-857eeea690ad",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "78258e42-1f91-46c2-a2ff-6b5e530aa534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec606b1-90df-4d8d-a823-dd015fa9bf46",
        "cursor": {
          "ref": "cfab9f70-1b6b-43a3-8783-fbd71d3a45d6",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "89f3b0a0-e633-4797-ab5e-350b836f6171"
        },
        "item": {
          "id": "8ec606b1-90df-4d8d-a823-dd015fa9bf46",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4741eec0-cf64-46cf-8e08-fa92ffb85e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79910a27-8ed9-496c-9166-a8176165ccef",
        "cursor": {
          "ref": "b8ced092-1eb6-4adf-9ac6-0bad4f66361c",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b1fe64a7-0dbc-4b39-b962-c249c492227f"
        },
        "item": {
          "id": "79910a27-8ed9-496c-9166-a8176165ccef",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7345d18c-84c3-4291-a2f2-f0881341d22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168877e8-46e5-4772-a3e0-a95728e049ba",
        "cursor": {
          "ref": "e89e40cc-ce3b-4ccd-b07f-c37f3094a50b",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ac48bcee-4b1e-414b-936d-545749a3d146"
        },
        "item": {
          "id": "168877e8-46e5-4772-a3e0-a95728e049ba",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1f45394f-6906-4807-b132-459443affdbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526c19ab-6ed2-4ab6-a332-87152d14cc15",
        "cursor": {
          "ref": "5ed93f50-f3ea-45f8-998f-8344f2fde584",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4b5e441f-d610-4a7e-a197-03670a4878ec"
        },
        "item": {
          "id": "526c19ab-6ed2-4ab6-a332-87152d14cc15",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8586b605-15af-43c9-a1be-b34af3887b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f518ea2d-bf4d-42d7-98a8-5a15fabd21e9",
        "cursor": {
          "ref": "c0275b3b-11cc-4737-93f8-e152846b6474",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0e26a125-9b95-4c29-bb0c-dce438745e91"
        },
        "item": {
          "id": "f518ea2d-bf4d-42d7-98a8-5a15fabd21e9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9da12059-e162-4544-b6f0-a4ce06204c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b48d09-0e34-4ca9-bbcd-2a5c12e33e88",
        "cursor": {
          "ref": "b2939968-e692-4a38-acb5-f43f73081f12",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "cb24a58f-06c1-432c-a244-e10d651b2d26"
        },
        "item": {
          "id": "e5b48d09-0e34-4ca9-bbcd-2a5c12e33e88",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b4fb69c2-2912-401b-93ed-c471860a28e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133cdbc0-9e52-4ab2-ac4f-a23310857b83",
        "cursor": {
          "ref": "ede6361a-af40-4714-8622-db4c3e0093c2",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "905c9396-509c-4734-8c9c-eff31d1dfbcf"
        },
        "item": {
          "id": "133cdbc0-9e52-4ab2-ac4f-a23310857b83",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "175f5b3b-b6c2-49ad-96b7-b44f1471cfe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af84c07-a12c-4529-929b-d6979bbb62fd",
        "cursor": {
          "ref": "6ab6fb54-dd34-4521-9908-14267a958d36",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "b0773eff-5f1e-4b0d-b82a-c48ff54fa9e3"
        },
        "item": {
          "id": "8af84c07-a12c-4529-929b-d6979bbb62fd",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "742d4180-fb08-4400-b0cb-d7bae08b4945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3331c9c-ac91-41a7-a1a4-004cda048040",
        "cursor": {
          "ref": "4a9ed9d0-5fa5-4fd7-8c00-448f33af3741",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "90b30a21-d9a0-47fe-81a2-b9b71ef18fb6"
        },
        "item": {
          "id": "f3331c9c-ac91-41a7-a1a4-004cda048040",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7f0348cc-107a-41f3-b8ec-f7f5b583e087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21061b2d-bbf4-438c-92d9-e37c7c4b5e16",
        "cursor": {
          "ref": "c66d9366-5139-4ab7-9071-1b1236aa7995",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "be6a8bb0-2631-4574-b050-71fc361f9028"
        },
        "item": {
          "id": "21061b2d-bbf4-438c-92d9-e37c7c4b5e16",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c35360df-c66d-49b5-a984-4df6b346918d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841d3f0c-32e2-47f5-a6ec-a491ef7a8865",
        "cursor": {
          "ref": "e5c090b1-fd3e-47bf-b928-523a2a811152",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "cdcd138e-5a3e-4be2-8bae-ca0ba6ef628f"
        },
        "item": {
          "id": "841d3f0c-32e2-47f5-a6ec-a491ef7a8865",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "011b7155-9518-4be2-9876-6dae62bc9735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bdb846e-4e1e-4c8c-b426-4839b2819e2b",
        "cursor": {
          "ref": "331f2dbe-4caa-4fc4-a108-7ec8913099e3",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "663a3e25-a46e-4bd4-a727-aae7e78b40b4"
        },
        "item": {
          "id": "7bdb846e-4e1e-4c8c-b426-4839b2819e2b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8f8415fc-7ea5-4145-8684-db5bee7861af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b435ec5-2908-4489-8900-4a73f70813c4",
        "cursor": {
          "ref": "19375ba2-89da-4d1f-975f-00c3f04853e1",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2a8dcab6-8a84-4579-bbe5-41177a93b893"
        },
        "item": {
          "id": "9b435ec5-2908-4489-8900-4a73f70813c4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7aff01f0-fa52-43f1-88db-9631fe3d9518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aec22dd-0fae-4454-a53e-dd2d6aef51ca",
        "cursor": {
          "ref": "3f3df3a4-3ed7-44bb-a617-41180c78aaa0",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "4dafcc32-6d9f-4dac-a75c-04df9422aeb3"
        },
        "item": {
          "id": "3aec22dd-0fae-4454-a53e-dd2d6aef51ca",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "10b07148-1356-4469-8ab0-10dcb8de8159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b2144d-a568-40c9-8501-6d5a34f5dcdd",
        "cursor": {
          "ref": "fc35f647-c40c-46d9-acb3-29afeb1851f2",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3aede8ec-f45c-4f28-92b5-b6935e53eb83"
        },
        "item": {
          "id": "e5b2144d-a568-40c9-8501-6d5a34f5dcdd",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7619fce8-7bbe-4292-b62f-3b7b9462c649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117017aa-65db-438b-bfd0-55fbdb019f85",
        "cursor": {
          "ref": "f9fb73ab-4608-4af3-bbfb-31ef30bb6612",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b3cacf20-28b7-4bff-93ab-c7cc7a95a6c0"
        },
        "item": {
          "id": "117017aa-65db-438b-bfd0-55fbdb019f85",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a5c9d792-2c35-4b5f-874e-df186f59018c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9be529-bff2-4b37-9388-1431cdcd9fc0",
        "cursor": {
          "ref": "da9ec302-f6d1-4ec8-aff0-d860a250ef28",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "4a3b4115-4297-4cd0-ae7a-82db4f5c1a95"
        },
        "item": {
          "id": "4f9be529-bff2-4b37-9388-1431cdcd9fc0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "26b8af19-605c-429d-a67c-bf99a83dd45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb7bac4-6902-46aa-83bd-545539f59139",
        "cursor": {
          "ref": "a5d00b3a-38e2-4d66-9c5d-7710a616bee1",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b9103080-c028-484c-a12a-53451b23137a"
        },
        "item": {
          "id": "1eb7bac4-6902-46aa-83bd-545539f59139",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a333d9c8-d976-4ed6-98e9-1b87ea6d9fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9bed814-6a42-40ed-a206-9cf4614d51c4",
        "cursor": {
          "ref": "ed8374e0-bf50-4838-b9d4-f62ed5eb9970",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "23e05bc6-66e3-4957-a679-56648c0c4895"
        },
        "item": {
          "id": "c9bed814-6a42-40ed-a206-9cf4614d51c4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "293b9692-951e-4bb2-8674-cc349833c0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7f6e16-d875-429a-8662-1b8c593daa9b",
        "cursor": {
          "ref": "f2cde63a-aa15-4a7c-b5da-0a1b13d70302",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ed3396ec-290d-4c94-8d68-63d9ce25d26d"
        },
        "item": {
          "id": "aa7f6e16-d875-429a-8662-1b8c593daa9b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "89c4d72f-4b92-48c3-afcc-bef921f93d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa63487f-e44c-4f6a-a697-923b7531331d",
        "cursor": {
          "ref": "997ce921-73e6-4034-a8ea-92508f6668e6",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "c725088e-6889-4f5c-b15d-1806affd198f"
        },
        "item": {
          "id": "aa63487f-e44c-4f6a-a697-923b7531331d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ef657030-b85f-43ac-b09b-70d6e66c84d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4b79fc-ea83-43b7-983d-fbc4be08f927",
        "cursor": {
          "ref": "40cbc003-44be-40c6-891f-78fd22624d1c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b50560c6-2fad-4b08-a2ab-35883df84779"
        },
        "item": {
          "id": "3d4b79fc-ea83-43b7-983d-fbc4be08f927",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "107eccb2-695e-47bd-9c46-7e925514dc34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa5ce5b-e1a1-49d7-910a-775b15a4c9ff",
        "cursor": {
          "ref": "6262e0ec-cf75-4121-a40a-cdb4dff9b1b8",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "defd86d4-2241-4313-9aa0-5256531d994c"
        },
        "item": {
          "id": "daa5ce5b-e1a1-49d7-910a-775b15a4c9ff",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fbb3995d-dfe1-416f-8640-00dabbc41ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7105c53a-53d4-4227-9939-5bd6b0f7b4d5",
        "cursor": {
          "ref": "f4ee7cb7-d981-4441-9d98-95e7d06d1bcb",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "7365b88d-0e65-45aa-bbcc-1c25e28713fc"
        },
        "item": {
          "id": "7105c53a-53d4-4227-9939-5bd6b0f7b4d5",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1edbd9ca-e848-47fe-8db2-1d4d859a1f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6fd755-d4b1-4244-98ce-ef92dfd3feba",
        "cursor": {
          "ref": "e69e4dac-8f4b-4604-9b1d-6047cc2530e2",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "718785d9-7fb4-48b1-b491-2a5319b5e720"
        },
        "item": {
          "id": "8f6fd755-d4b1-4244-98ce-ef92dfd3feba",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "16ed4b17-b6ac-4c28-ac51-4707949dc0ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e108575c-414e-4560-b0ea-541a0e9f762b",
        "cursor": {
          "ref": "56db6476-b2e7-446b-a9ce-05e5ceed6c10",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "a51b06b5-39d8-4cf5-8fed-37f61d11694b"
        },
        "item": {
          "id": "e108575c-414e-4560-b0ea-541a0e9f762b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5ade2dda-8752-415b-8a01-71241cf9a74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39daba1e-696f-421b-9013-f866cf91fbc3",
        "cursor": {
          "ref": "d6d962d4-b555-4384-a413-99a56832af5f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "69d921bf-bf4a-421d-bd56-a108a9282eba"
        },
        "item": {
          "id": "39daba1e-696f-421b-9013-f866cf91fbc3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3f0499fb-d73c-4151-8c7e-3c0ba9e728b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6021e1-8e4d-4d43-9ac7-2cfa4643c9f5",
        "cursor": {
          "ref": "2c01034a-1596-4af7-acc6-7171f614d596",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ad49e0e1-b9d7-4375-a98a-d94efac680db"
        },
        "item": {
          "id": "dd6021e1-8e4d-4d43-9ac7-2cfa4643c9f5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3add3dbc-a722-43ce-9318-0545a55fc333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaacb1ea-74ad-4a06-9c73-62ddd26bdd18",
        "cursor": {
          "ref": "e216df1c-e8f1-4a8b-8734-5e095f5aed03",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "e342250f-019d-4c71-9303-446a9dfcee7f"
        },
        "item": {
          "id": "aaacb1ea-74ad-4a06-9c73-62ddd26bdd18",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "780073dc-3a70-4d29-8936-74b38c064e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2fca26-b38e-4060-bed1-1a00e63b228b",
        "cursor": {
          "ref": "a42ecf01-a25c-4643-9d31-4c55ad95b8b6",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d83b580d-df75-4f09-97e7-c05d12208e69"
        },
        "item": {
          "id": "af2fca26-b38e-4060-bed1-1a00e63b228b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ef244bd8-01c3-49a2-bf5d-e0fd9b25fb2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ecaf884-5979-40d2-adf8-991129ca36ae",
        "cursor": {
          "ref": "7bacff1e-ea1f-4706-b83a-3971c742a736",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a7175e78-31e2-4542-b151-e02a4112d448"
        },
        "item": {
          "id": "4ecaf884-5979-40d2-adf8-991129ca36ae",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c7b30e99-3351-478d-ac42-53ef54d752ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1a27aa-b4ff-4fae-bc2e-b21abf7d9139",
        "cursor": {
          "ref": "ee7e0980-a1fa-4a2a-9b74-a468b1449c36",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c7c5127f-7a95-437a-9966-6320befc6450"
        },
        "item": {
          "id": "7a1a27aa-b4ff-4fae-bc2e-b21abf7d9139",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "09659e03-878b-49f5-b633-65a9d181fc79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d37b3c-71b3-4401-a018-34dddb788599",
        "cursor": {
          "ref": "cc02bc73-3bd5-4a39-92c1-b38e012924d5",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "7b68b688-885d-42a7-8835-b1bb37cfc290"
        },
        "item": {
          "id": "68d37b3c-71b3-4401-a018-34dddb788599",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "21ff45b6-ef3c-4497-b5b6-30922ed04fc9",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "d0fb8fb0-893f-4e7f-8e46-dc8c15fe355e",
        "cursor": {
          "ref": "babffda1-d0d6-4803-bba5-866d967f6d32",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "11554142-e150-436a-ab12-89647e33c791"
        },
        "item": {
          "id": "d0fb8fb0-893f-4e7f-8e46-dc8c15fe355e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7e936cd2-5a22-4f3f-97a9-06b90178f959",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aad9fbb-7c0d-41df-a513-d291dff14ec3",
        "cursor": {
          "ref": "8a4bac98-8c54-4301-a42f-d9c4379adafd",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "29c49e55-2502-4b7d-8019-ae1450d7e066"
        },
        "item": {
          "id": "6aad9fbb-7c0d-41df-a513-d291dff14ec3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5ead15bc-456f-4106-9f04-786164cc3e2f",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be29696-524f-4105-b56b-c3e71a9020c6",
        "cursor": {
          "ref": "07a79a01-81e2-442a-a041-eea554f06c33",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "32928c2d-1bd1-419b-b703-9524bb40a277"
        },
        "item": {
          "id": "6be29696-524f-4105-b56b-c3e71a9020c6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "624c7e90-d2cd-4627-a12e-30e6f9458e63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be29696-524f-4105-b56b-c3e71a9020c6",
        "cursor": {
          "ref": "07a79a01-81e2-442a-a041-eea554f06c33",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "32928c2d-1bd1-419b-b703-9524bb40a277"
        },
        "item": {
          "id": "6be29696-524f-4105-b56b-c3e71a9020c6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "624c7e90-d2cd-4627-a12e-30e6f9458e63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a9fa27-b95f-4489-9ea5-11afd822bf72",
        "cursor": {
          "ref": "5216c0aa-f1ce-430d-8fca-733121ef7d00",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "29ee0496-c019-4615-a002-dfe809bc3955"
        },
        "item": {
          "id": "a5a9fa27-b95f-4489-9ea5-11afd822bf72",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2eaf8314-0aba-4adf-b994-a7e05db988f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7568cdbe-851f-41d1-b6b4-0405a5adc3a1",
        "cursor": {
          "ref": "46052932-1000-48ef-a968-8e94a981d6b8",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "d23c474e-56d9-4bdc-940d-683551abb4e2"
        },
        "item": {
          "id": "7568cdbe-851f-41d1-b6b4-0405a5adc3a1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2c7cfde5-02f8-46b7-a165-f47cfa2817a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}