{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b30a2213-33a7-42a9-9b78-15a62f67d4c0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a6780d60-897a-48ae-b80b-494d087a96d0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ea3e0bc7-d376-4905-a137-95bdb321468c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c972e4b5-437c-4e69-9d39-01bcd590062c"
                }
              }
            ]
          },
          {
            "id": "04032190-9c34-4b85-9b5b-f56d4ea7b11f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cc7760db-817e-4e04-8c27-4529c3b833db",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "546b607a-fba7-45e0-af14-69b2c6a72d53"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3f956ccb-fdcc-49cb-8e83-9484e1d4d2a1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "22706a72-d787-4710-bb97-813c3c81fd2f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7ea867c9-4169-4670-8741-e598da897f03",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe402f88-377d-42c2-a8aa-04dfe463dc68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cec732e8-c948-4644-8e1f-a19d13346a5d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5d064094-c28d-42fb-9d33-e9ec3d80a126",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9965960d-ad20-4ae8-b4a8-683507679938"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "db12e664-fdcb-4001-bb88-f010f101d53a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "77487c70-49e3-48e3-a00d-8c5e9c9fbd4b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c98ac978-593c-49fd-8c62-76ec1d798e86",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5e6ca0cc-ec41-40ee-909a-938bd48155e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80751e14-ef28-4d7f-86fd-51df239451c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "524911c7-baa2-45f0-be4c-b39fe2a41e60"
            }
          }
        ]
      },
      {
        "id": "5ce58339-dff1-4010-81ed-9110f5ccfaff",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "933d2a53-b6a3-4a93-9e18-5ceb26978189",
            "name": "Negative Testing",
            "item": [
              {
                "id": "976561b9-4288-4a05-b43c-bbe9e193fbcd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4266d655-7587-48f4-9114-e809b624349b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8041fca4-dcbb-4304-9566-ab7bc4c4b3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2809d5f-c41d-4c91-82d8-47e436e84c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6744aa-5a32-42bd-b33e-3a4b25e9af6d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b14af4c-e158-48ac-af4b-4ebbe6a0c802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2dfb03b8-f1c3-4ef8-b80a-2370fc0989d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743a1ae6-362e-444d-84ca-5311e65b7ca0",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67eb37f-5987-475b-a7c0-4290207afef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11e31c97-a849-48a7-a328-52988c2a81fe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "69b345ea-0022-4a36-afe2-1653c6fd42c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0224aa3b-62f6-4a97-9368-c45881479732",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9c6d89-012c-43bf-8452-cb642fab98d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1c28dab-390f-487a-a202-61b4b174f2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f436f2d8-400e-4ba8-86ba-ed757730b975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d34b9b-d931-4195-ae7d-89f05328b18c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e3a77cce-df03-4167-94d4-cceeeeac31d9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "40fb432a-01a1-4154-bea5-6a2e67bf79e3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f5df02a-1f97-494b-9669-251275238cd2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d350c4fe-91cf-474d-8768-b0e4d024b1f5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f91816a0-365c-4a41-8fb4-ad958456cc55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "6b930c52-ab78-44b5-a06c-9f19e805f1d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4e51f77-2bae-463f-9a85-1e108c25f0ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23a4199e-d975-43ce-b04a-e52354642660"
            }
          }
        ]
      },
      {
        "id": "b255a8b1-ca63-479f-bddc-28f3d2c53615",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4698daeb-5195-4a77-b43c-c7777f278c13",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6dbfb009-4d46-4f8c-9a42-22856f906d09",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5cd95184-d1e1-4f32-ab57-2111e25075d8",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8ac1e4-3ea9-41d7-a17c-bfe9bb6b8686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd249c4-94c9-47f9-a00a-338bb1124a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140cdb0c-96df-400e-9527-e83e7d708e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30b38092-275d-4a4a-8d26-f84e72c0232e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cec25d0-47a6-4db5-a5db-224b7b019adf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70dc0cfd-41de-4abc-86b2-b2d689a0634d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26cce5e4-80d6-4b4a-ac1a-f5a4d44da568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da3100e-343d-4529-afac-1131c6fac8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aba6e033-baf2-491b-96ed-0141d20f032a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d468aea2-a2d3-4196-b580-fa7705897d1f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18c5a3d-3ade-4081-a001-2d56431b4fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2bdfd7a-f4e4-4627-b3bd-24f113b291fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5a4e9a-f9b8-4dd6-9288-4db92f1cab4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7255c716-ba52-4e1c-8cef-c3e26a9aa567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c167aa-945f-4c75-a9b9-7c6b29bb39d6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a1a9ad-bc93-40cb-8d6b-ab75a9fcdc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "329ed796-b80b-4127-a9a0-5da592ee8b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb8cda7-80af-4427-bc13-ddf88c5f56a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c1105e9-b97a-4fbf-b236-19fc36791242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4d7d8c-3474-4fd8-8c23-a63aa6bb7c41",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74213d96-318a-4fb5-af42-4b9e836b9fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2ad9ee-e29d-4177-95c3-df8b7c4949f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d2ac07-0d12-4182-8b0a-3c77d6877cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f486311-3432-4a74-8d8d-3714d3bce080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3292b01-c56d-45db-8d62-c925595816bc",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4b408d-4224-4f3a-ad88-5983bb30f11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f3de50c-0ffc-4b03-ade8-cbc83b042128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9663483c-15ca-4e80-9f22-a44123ec80e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "217eb6f1-ed95-4b61-b160-3694b940fb60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8348324b-b046-4324-ad0a-d0aca7f58302",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcb7859-ec7c-4da4-97f9-2bdc089ff8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a02a7c49-d38a-4bc7-aaa8-d70f6028353a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932da1d4-27ce-4fef-a4b8-734d32d2972e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6d7abb9-fab7-4ab7-b130-18b114037dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578c2ef9-c407-4726-a288-152c010cee1d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbd2c9a-affd-4ccd-98a4-d064a27d404f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72f8b7be-b517-4e8b-ba7e-f4d79b3dec3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c272a025-24ec-4868-b21a-6031fff2155a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "724d135f-2fe2-42bd-9f91-68c6774688cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b1d3ce-1bb2-419e-91e0-f1cce64e7af6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3bc5f6-bce7-47f3-a75d-b65388df67e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f16e49e1-1dab-434c-9d01-c0a30193525a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773aaced-8257-4823-a048-510520d1df94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30fc3328-f596-49bb-8872-931d097ad849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b1d159-c502-48a0-93d0-e10d088c44b0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c944c25-1aa0-486d-97d8-4d64883f2e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87bfd9e9-01f9-4767-a04b-c35396d32773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac413264-7017-4e82-9bf2-0cb08ef09ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0af53696-e288-4e85-abbc-e6f0fdd85524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57526bda-863e-4d2f-a3f9-66f6a57effc4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca9455a-a2de-4419-ba78-d9e10a83c625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c007333c-a967-4e87-9232-1ac0446bd5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15005c96-9765-444c-bccd-bc80598e5970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a56af5e-eacc-4705-ba68-0f83c140f521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c46f5b-de1f-4f2e-bfb4-db0d4d4485f9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17cde56-830a-493b-8af5-0778409ae477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e650ef99-c4bb-4aa7-8ccd-993b3ec145bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd3ad96-9665-4bf8-98d1-73ed26f63675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f6ac757-567d-40ab-beb0-1d9ae6d9054c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b4edf7-be28-49a1-8465-3d6537b47a48",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d2ee72-dc0a-4eea-b404-5ac58c8716bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "398d27e0-21f2-42b2-b163-7acb025ba551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ceec3a2-5822-411a-bbed-dee899d56a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29516355-1ac0-48bc-a8b8-b831911172f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f7fe64-f11b-4443-9331-c5587c52d36f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08fff6b4-cc6a-41b1-8c64-a8a5268ef23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23434d18-0fbd-407a-bfef-fd3bed2d7092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6f5d17-bd5f-454e-9a7c-db3ef93a3a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43b40653-ecc3-43d8-901f-e3511e060d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf65364e-334c-411b-b134-8586d8353a43",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468de9d7-8751-49de-87c3-1395c1929742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c13d15-9aa4-49d8-81a9-ed464def24d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0319168a-e07c-43f6-80ef-9415e2c77e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c547c4c-60c6-40e7-a19b-b6848b8292cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79eb4c29-f21d-4c3e-bbc2-45ae3ade8bff",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af154f5a-fb74-49c0-b6d5-911e9c791c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78e5487-3836-4b7e-aaa7-a1a65829a5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b70b778-e622-4b59-b86b-5f45c899a687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5fdf3070-f712-4d2f-bd9a-ef2fc001dc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c846be-8aaa-4665-98a4-00e56a55960d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6529d9-073c-424d-b79a-fb794559a0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d64a95-6123-4ec8-9d50-1c8aa14e3ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7410cafb-7794-4684-89d3-60f02ef743e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47e27864-2232-4927-9b46-90c0f16aca73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fefa0f0-e1ca-4c3d-8e09-431b92bd5fa5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf6150c-4b77-4273-aa36-d1f4c9c7ef10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a15323aa-d691-456f-810e-6776a167cd00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768637d2-fc64-4918-be16-9e0cc6e9e466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "afbf24b6-810b-4945-98e0-b2cb0d53ee14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3568801e-94b5-483c-a81f-a297816dd9e1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5100f53-9acf-4417-8baf-309ad72fcba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95d7110-a4a7-4cfd-a41f-6538a18bfb2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d5bd9e-f827-416c-8c3d-805414017d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d488c0c3-b62b-4120-83ea-3a9d1b5d4638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9a7817-7a06-4cba-a731-dde1a39e8f0f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8559f10e-b5e2-49ae-b249-a634cf024e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509eb090-d15e-440e-b287-9ddb2c5e7a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bc90fd-5dd2-43f1-8ae3-de3014aa1daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af08bfbf-942b-47ce-9df8-ded7d5600a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8254d26d-ddc1-4628-88dc-a2ba6ab42e70",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84b9952-d61d-4726-b3f0-9f39876db3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea486cbf-abac-443e-adbf-57ad3d33f32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eecc62b-c22f-4827-b9a8-08342e023b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b7f14e9-2b91-4ae8-86ef-7d9e4d8b0a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee1d81e-a4d5-445f-a393-8ac0a60dc97e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3c9fa4-ef9a-4082-a7c8-a7144cc54c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9bcee52-ec71-4cfd-bbb2-de03e46e73f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e544cc7-7358-44fd-8807-b2b14472bb05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d2bcc1c-5bf9-4bd1-bc27-fd1fa3ade8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6850ccdf-1941-4a01-b558-55afc1026033",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff07cef-ddc4-4f0c-ac65-5c1200d56fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "091825b8-db48-436f-8e2c-60aabdef34b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42badb4e-a0a8-4daf-9474-690e4da2d220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "480946b4-778f-420d-91df-6d410e353b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4470f9e8-5376-46f4-86b6-fd41466dc976",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c11f31-82ac-4f01-9a6b-b0620fbde6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e268f1e-88c1-4f5d-a589-686df3227a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07338da-6abc-453a-94fd-72ac4faf1ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd661bc-9451-41a0-82f6-463e642686b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62cec8fd-c8e2-479b-a793-3992c0faeeae",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "927d989f-8a22-481e-a3c6-d59dc656e550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cad00ad2-29d2-4e89-80ca-b3da6415c78e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7822b85-3992-4330-932d-0571d1a5e2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ebf746d-b287-4d3a-8b7d-f1cdc18ec0fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03da49e-4dbc-44e2-b6d4-2d9194fcb2b4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa67185-d792-48db-9cc4-a3007d0a2b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f568ea-4f93-4b9a-9db2-21a55ce2b29e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1649f48-b5fd-4cea-a15d-0ee1802298c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dcb7122-a11c-4ae4-906a-b9e3438e3681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461ab652-29b4-4ea4-8d34-56aad9c35d60",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3543ed8f-c447-4c0b-afec-877a2475aa10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4453a954-3d01-4346-bdf8-0b413f619d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d87376e-4d50-497b-a647-fb557f007dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e363ea55-d9ab-40db-85bf-627f08a9866f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4da1a8-216f-4780-8367-c30ba36c9d57",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cafa177-0c79-4232-bff8-146deb2e257a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9b8905-e8e6-46d5-a1fe-918c88d581c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1135a0d-5ab4-4dec-9930-957ff4033489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b072ef04-c36f-4791-a2f6-916480a0ed92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bf0189-db7f-476d-8013-81097a93b6b0",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb6e799-2c87-4d20-9ed1-7ee71201cc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d58fea2-ebe1-48b5-a459-bc1ea7276f05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2e8380-d9bd-4396-96fd-84e18f036412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebde264b-616f-499b-883e-e9a587c294a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ead418-5077-4f47-b580-d176cde46952",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438267b6-1fd3-44e5-8d19-62209825100c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811718cc-125d-48bf-8dc2-d840878fe169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879a8c51-78fc-4303-be35-87d36d8e71b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1943416f-ed67-499a-83ed-b0365d47e47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68b1032-cde1-48a3-951e-2f74ec3bde1b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e46384-1424-4a55-a4a2-afc9d8e5b1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35f1bac-cdd7-4ba8-92ed-6fa4bf2ecf64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf5faee-65c8-4dc4-bc6d-ec4d4d3a52f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa9e98d4-5893-4c54-9261-3796cfd8cfc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da747cc5-5d2a-48f7-9365-382e6acc2622",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470e69cf-2eba-4221-a319-4da9cd6603e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca00ff4-8b52-4299-b7af-aaf73fcdf697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc673b0-eaff-4386-9b4d-86f6e22fad98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b70ca468-2703-4f80-b525-20f840552553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65661bc-c4f3-48c1-98e9-72e56dcb92d4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b83218-5b77-4e32-ad43-12134b9ab529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed67a95a-6eae-4048-8a2e-cb28b909f555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a808f35b-d028-4ef8-800e-ed5f053dc4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f3bd416-10dc-40b5-9c8f-c2c39aea9a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729a2d34-c1aa-4e42-bd33-4e6e9e86c239",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaaa1f53-5a44-4b52-8880-720654a8555e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "784515f7-e04f-465c-b2f6-5ca967c3b3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b4c983-e2af-491f-ae75-f75dbbe38752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33bd7598-5581-4273-b899-5b5a4ff2eef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9195b353-8acb-41dc-8c8a-ec5a4f6b396d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276a92af-2963-493b-9569-067bb94f083d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "199d2440-6a5a-434d-8ed0-84aa20bc8c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95eb624-611f-443b-aa0d-4926406105d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "46efdcdf-018e-4148-aa59-4633a8078ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7587bf1-e2da-475a-bd1b-2d4099e02337",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25daf73-5ad2-414b-b12c-8e91bc6da97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efb848a6-cf3e-435a-bff5-ed8ce951f864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de4f202-a0d5-476a-ae26-670171150106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "682476b5-8bed-44a0-9870-236c3cd05bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe537c49-b43e-4c09-9951-3fd74a9e713e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4cfa46a-e576-40cc-93dd-3adf14dd199f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8821b982-55b1-4b05-9238-db5b9e5bd428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfc7b59-05a5-4e75-95fe-4d3836770233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d36e753e-006f-4167-bbb1-46155f4b6417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f236dfb-72a9-4358-b96b-4b6fcfbb1d15",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e754db24-15a2-40dc-ab93-e1475412c175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21402494-09d2-4f7d-99c7-dd3e4ae699df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69df854e-3d8e-41fb-b79a-0c2ed3826f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c341eb0f-af5c-4f36-968c-2e606ae07ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86754614-ec90-4762-b6f2-233fc94f575e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de49ec6c-934e-4f0e-9de7-8def60aa95a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd8bb70-f847-4244-b0b8-7f26ac039e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00b96ba-e0d0-4411-b6c1-1af397171163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1bdc20b-ad07-4819-acd4-341babe51bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4f457b-d3f4-4c3e-a83c-428b44ca9e10",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad4fd6a-16a3-4f14-a3bd-893cc638c895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f4688c-d6c4-420e-871e-ad3cf6843772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa362e22-cbc5-45a7-b54c-2ba423f01440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "28617350-b0d2-44f6-a91e-6830979f7d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1138fb6-d16d-41d6-b930-c78a0044f689",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31167ed-d210-4013-ad03-32538ef47bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "982f0ef1-6ba7-4cf2-8510-47943840e90b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1373799-7c86-4b02-b03b-9b4db537ad30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd885d73-7716-4ca8-ad93-c9f29c06e083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6c3299-c3f2-40a6-96c5-b2837a8d72d1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ad7edc-b9c9-4634-8ac2-6529cd48e987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4c8e8c-8ce6-4bc4-b491-a67f84df1510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af6ca94-38f4-449c-a6a9-9fae900018cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "676de900-fb83-43d3-88e5-a91f303fa7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ac0490-b81e-4d58-80bc-201b3fdb1849",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5527d50a-c103-42f4-a86f-6046658df5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d490c42a-71f5-4c40-a3f4-d505460d8f45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b6e293-c219-4795-8298-37e523cdbe4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "31518271-4b42-4af2-8cc3-e5fdb54e3fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df17076-3f25-4177-80fd-948862e1fee7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14658795-0ced-4579-996e-b8d927a8980b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2545cac7-c0ba-4d0b-8370-3a15d7286fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7bc3d49-b7db-4358-9af0-f90d5d301ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d916dbd-9c28-4cf2-9998-262da32f8c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c626e1c8-1057-4eee-a067-8f49142ba542",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b5cae2-9632-4108-a03d-ba9cef01b45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acffb1e8-a1ca-4875-88e8-f560fd4f00bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f27240c-f688-46f8-86db-8911cf41a3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "da2fd611-be9d-48b5-8ada-4d1f97c74278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02274b00-ae3e-44fb-82bb-fc678b27ab29",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1faf94b9-1d2a-4fb0-a09c-53c4c55691f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba0b4ae-f05f-4585-88c3-6aacbd7ae674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cf0346-d62d-493b-8184-c04090e20b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb4b3eca-b6d7-44bf-a9a7-112fc453ca09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399f83aa-9fc8-4921-bd2c-c463bf2e7d90",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0eba85-9f0f-4d8d-aae5-ce93de2d7ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eace22ec-a2df-41cc-906d-8b919e42ec50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba6c495-616f-4568-826e-e142494dc33b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6bbfc07-fb01-4e6a-975d-46e011848056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace02b62-f4f0-4851-a3aa-82e139290286",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6060ffc-d99e-473a-8aac-9cc7ad8aa30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19bb59f7-ad60-4bf7-829a-1b94f3123133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8952f8-9938-4b2b-9d74-cc39745ecf79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06e0ca45-a62b-49af-99ae-235c7a95bd0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade6380c-4d26-4c9e-bbcf-0ab8245400c1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763a8133-8b6e-427e-b85e-e8317f384dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e70cfde-263b-40c2-80dc-c7002aeec30c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e219846f-92c3-4b13-b925-ec53c7e8ace4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "efc00b78-f012-4234-b3d6-31090c262786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c6f780-4898-45c4-be44-58c1705dcddf",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c5b2db-a943-49ca-88b6-7ded01dbb1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd88a6b-e837-4c8d-80af-13a00a41d165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38badc0d-ba71-4056-bd7a-b10f8702e8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "648fbb91-3a16-4fe5-912b-3915c61c0aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e08847-52e4-40fb-aa42-e10c77df4142",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aed74c9-4198-42c7-a181-c288e245ac82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc12b74-d26a-48f6-bd8c-184abaaca8f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc881c21-2b89-4686-aae2-78f05ccdd1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "df926279-0021-4d6e-9912-f1922ef2ab51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390cffa5-6a62-47e6-a5f7-226c199f7c7e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042b9152-5a67-4627-8a7c-3b5c0d9172b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b9f8a48-29ed-4444-811e-c64d60488d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863ad6d0-7646-4940-ac1a-c44a23911668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cc05a3d-37e5-4e8d-ad39-778915d00d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7751acb2-5cdb-4826-a7f4-27558a97bd2c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a5391d-c998-4f07-9374-26186b968bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c12c8a-b1f7-40ad-8af5-732ebb61d016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8bf950-320d-4bd8-8414-04c3c9fb8dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05bd3156-ca70-4291-acaf-704f6ba6cc04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a73d14-c003-4f7d-bf9b-4b21dfb465e1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4db7a8e-9434-40ff-92c2-99ec83f579a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f8477b1-8e45-407c-aad1-709d1460b358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df599169-f053-4097-a955-f11da25edc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5067e7b2-042e-4516-96cc-78ed80a27c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581cc75e-cebf-4b11-8b50-68475e2e5c71",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2eb3a57-6c80-4b48-91b2-05c695b09e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93828f10-d558-4455-9d44-0163efaca3d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221a557c-f034-44a4-8942-19a1d740b441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffbdcfbe-4e38-46d7-9c58-b7e1c1000015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2fdc80-87fe-48fc-88ab-1f8679ef93f5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13c0abb-9aba-4b96-822e-421fd9cdd5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e9930d-9f07-4517-aae1-7519728ab85e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fb5c67-77f9-4a57-9ca5-1b6a361eadeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5f43a8-c1f1-483b-89be-bdbd454a232a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5014b1d-a154-423f-95dd-d982b0f6136a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1300b9-6672-4281-be03-141511f027e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b33f89-bf04-405e-b38e-15c520c9643d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de36b4ea-8df2-4a59-8f38-b4ed4197b338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "896727b0-4d33-4978-8292-afb0d62c4c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72dd140-6e64-447f-9cb2-fc54d8705d6d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "699a269a-9884-4b9e-b22e-da1dfdfeae97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77355bc9-e435-4452-8c46-869df55ed243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100d67fc-c181-470e-a9b1-0b8a2a65d5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6cf0dd5-b7f5-4f1c-af5e-329083887517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c89883-f4d5-46e0-ba6a-469c04201357",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f3e5b3-528b-4fd0-9aa1-ffa4cb501fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c05952-0017-44b4-b70e-1319b9b62a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13c59fb-824d-42e8-be12-2fec4eeec9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc4c789-8e36-4f54-a81b-49418ed42f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca4246d-0b9e-4f2d-acbb-e037589cc98f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504a163d-6b06-4280-bbab-1cfa660e85c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68614ab4-c7e7-4fb4-bbe2-96f18354a4bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811f2a8f-ea61-4b8b-8641-48ae2c023fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "100eade2-4000-49e4-aa66-64b3b89da75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c658d8-c52c-4dfb-8316-4d598f1c77f3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2497b71-366b-45cc-b14a-29f063647815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2efd8328-9186-4a67-8efa-be0792fd9a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038969ee-8984-4283-a95f-f4a9e6fe597d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff27f50f-ffd1-416f-9e09-b2fc1a2c92c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5a8ef5-64e8-4a2d-8547-61496d732a71",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b15e1f-fdbe-4f98-8412-9bbf077b4aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57fe50e9-4945-472c-aaab-8008c99d55d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0508f1ac-5bb9-43bf-9d33-f7ccc740043b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1839ca12-0c99-47d6-822b-70b6a7027091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204a4d0e-9ee1-499f-bc60-e0a35faec2b9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6149a559-dfd7-47f0-8908-6623388d171c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6630714b-8400-4afe-bb48-6d64e0196b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254fcb5e-ca27-44dc-be99-97ab0b8cec38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bb6efbd-b644-4e1e-be0e-3a3b188788f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea457fb0-0f2c-4dc6-8b1e-d6d575fb1aa0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66880795-9ddc-4dec-afc6-e7884618db28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c04acf09-5b0d-4fea-8bc2-12f50a6730c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c6ad68-a6c3-4e59-b1c8-3ea1bd5e2ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24438df3-89e1-409d-9897-0bd226239835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200d1582-0c9c-4015-8c0f-ea298353b140",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8446ad47-b6bb-44fe-a7bf-f808e2f2c8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2fe6a0b-21a2-455c-8e5f-d1363b63b5f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a57b7f-6cf6-48c1-90d3-499e73766bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f19cd4f9-8fd2-48f3-a97a-def85e5f24ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee8a608-e770-4c3f-9217-812f5f9bbe85",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c22a69-cbac-4e05-9443-1804d77cff8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e21174-404e-41f6-8b38-ad21167cbada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35d8ab5-4fa7-4043-ab1e-07d8ae37bb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5548cff4-23ba-4d9b-96bf-3eb9b63ae1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57801686-16aa-4530-975c-62ed826273fc",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6270b094-3b07-47cc-aedf-04eb3c3bb1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31dfb2e0-eac3-4d50-ab2f-5d1cc98d2f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbead21b-e6f2-45f2-ba21-caae100f350d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a23df7e-a666-4278-a4c4-ad535d7923fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e487ea-eb1b-45b0-ad3b-10e5e42f2a14",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db59d2f-88b1-458c-ba1f-c9f4c71456e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d3e5df-0af6-468f-9173-4cb420c1a137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c29ee3-1e56-4297-8913-1b0026433bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e5c78e1-998b-44f0-a316-b0ff186b131e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c78cecc-4a8f-4d90-aa00-4203a30f83b3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1dd0e24-b196-49d2-ab12-6032326a54ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032ffa6b-ece6-442d-b566-2473238865e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e604b3-1825-4be0-a3f8-62f6f461e593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "28f58cac-3336-45da-8b3e-f2f2a7b5abcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7059c06e-f36b-4934-88ec-07735deda7fc",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea88de3-e11b-431e-a7d5-84ef3e5b0035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f7d20a-7866-41d9-83e7-cca25877f1c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6340fef-d54e-4a71-9fa6-b1146fb6867e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b605705d-64d7-49ef-b223-97ecc069882b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32adf6de-43fe-4125-9dd4-e0270a220e22",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52d5f4d-8f9b-4989-9f30-78102dfc2787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769c1be7-5dca-4034-8e87-2fd17865226a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3997eb3-78c2-4a01-b67c-1d4f8062d599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba224fe6-fc13-4474-9bed-cdc5a1e37bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ff7959-eaec-4926-b95f-ad7425804f9d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f76d6c-fdec-4984-a6d2-e23e39a002bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a21d068-7d75-4702-8655-876a30b2e223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d970c81-2fd1-45c1-b083-f67ffb86f599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7875d1f-897e-4452-a071-404af228b3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c384741-660a-4c91-ba18-089a987d7f4e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad69e49-5d94-404b-9de5-4c29b262c79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd8ca71-8536-4b12-a7b8-d71cdcb68564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1701c087-0190-43dc-823c-3b09f21ccfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b06cf677-e661-4b1f-befb-95585d6e3473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1f8d33-8f81-4f4e-ad53-5c8311ac9097",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "432c77ca-30a3-4f0e-a278-7a2030f45f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292b3c1b-b1ac-48b8-a549-5fb6eb317447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d6836d-2999-485e-a87b-5c525eb6bc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e7ec84-6e4f-477f-bda4-59a496afea3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c44a29-92af-4995-82a9-3861876c1caf",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "923c9080-49be-4ab4-aa78-15700a3b0850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233e3fc9-152e-4101-8840-d44c50632f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7f141c-39a2-43fa-a647-b1b5618ab7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d56fb8d6-7d9e-4c80-81c5-531fb16c0304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863af929-0f33-4657-b600-4f248288954c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ba4d79-95af-41b5-8a12-6f304df24f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5738b1c2-fd78-4f1f-98f3-0640013755cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864b53d2-6b47-4d83-8687-cf407047a87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3777f0ec-4e80-4cf6-931c-187a93e16528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83139bdf-88a7-47a2-af37-ead6b5cdd431",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799ce3ed-7e36-4a58-98ba-41392afda85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac9ce8e0-8a94-4394-af92-c438c78cc79e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789e9a87-f227-4f8e-9b2e-cdf6814f15d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94310517-c5e7-43ab-8e48-07cc4093c42a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835fcd5f-7123-454e-87dd-9dee3d34f9ec",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ec59fd-adf7-4bcb-8486-4718d136804f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb43ab7a-672e-4386-95a3-d8314f67c23e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af4737e-a223-48af-b8f1-1bea31240dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e658efd9-f4c6-4c35-bd3e-caca412fc9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd76aef-8334-4bb2-82d0-04da1de2c14d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e04748c-fa49-43a7-ba58-9e5db586213d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2ae44b-f0c8-480f-83f2-5769d4bac7d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1479a918-f648-44af-91f5-377d90d73ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "25fa68d8-bc0f-45cd-ac51-712c5217cb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdab38b4-aaef-4a12-8ccc-935a4d8726bf",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0c9963-1708-4e6a-bcc8-9ab12a28f530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd15422-5dc8-462c-b92c-9ac8a92e9ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8946ef75-dc10-4c5d-8198-ee1eddf73dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9446bd05-a294-4c7c-a651-0df85ca8b332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fd2d2b-53e5-4d0e-a7a7-1704c45b4c2b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "101b84ef-46d7-497c-abb8-09a41d1c004a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa6d0a7-0da2-4826-ac63-37dd55bf2e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c97d39-602b-4ab4-b29c-57bdad825a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7b7006-4b6d-4199-82ea-90e26acec2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a0018b-3d4c-4859-ad9a-80a2cc9ab354",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c708d28-df2b-47d7-9bd4-23f0ebf78e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b438acf-5a1b-4b10-ac30-4b2dae65d5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33885a16-21e5-4e1e-8971-58116c95aa34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb463181-8e4d-4b60-8756-5ab0cab0dfc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9ac28e-3efb-49b2-a755-d03990981751",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34873a3-ed47-4574-8803-281a6cb789cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b20789-71c0-4aba-8467-5d417118c42f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2f5bbd-8c41-4580-a7a9-315a401bc9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81b15b80-3769-4e97-9f06-51b634ef9614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e037712-fa2a-462a-a2fa-6195cededaf0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad56ae7-2671-4512-aa6d-d9b4960b5f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d454aa0c-940a-42bc-bb02-bc336d195384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85921d9b-49a8-4256-8708-09e04aca1cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e0eb4f-8a43-4bed-8c5e-1988c5b3071c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc4b7a3-4bf6-48e2-a325-28b2ab1ffb2b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed5ab51-271c-4f43-8d5e-797c8b7fba5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983c361d-6109-48cf-b0df-bb3df93d404c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac6fc69-02ed-49d3-88e9-5b4a664b6661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d6cb1977-084f-4d08-8fc3-46fa582b40d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9902165c-72f1-4ddd-86c4-d14708bc7f5a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18c9a9e-de29-47db-babb-f5b94a24b060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08317db8-2b66-4835-90b8-d04ee8ce76e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4840a368-5e79-4ec0-832c-83b334ae099f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "98b4e575-8937-4c1f-8b71-96f62948ec5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16419fe8-bd70-407d-b5a5-3fe030b17ef7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbca023-ab47-4e2a-84e7-48057f8b59de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91b16437-3529-4a1e-aa9a-dfb86ce28cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ccdcfc-9046-4c37-a8f7-efc8d96e61d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "38727f5e-d562-47a5-97da-aa90cd64c228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7447cd6d-9a10-42b4-ba91-8ca8999d0b6f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5502533-c427-4d1d-95e1-dac1012b051f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b7c09a-054a-4803-a5a6-2e35d8332b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2164377e-929e-4d4c-8fed-7ae54fd9db96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c060c35f-ceab-40a3-8682-53d11679bb18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a35910-4993-4f75-a57d-d0fe5d456f2c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c07c6b5-1ce6-4734-b44b-a43063f0ec8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1441908-53fb-42ab-9c4f-b736b4802ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8671595-7d82-45b8-b7bd-6543dea35e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "17acdabc-a0aa-4608-8226-52d4f24835d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edd358a-0c78-4def-8ed2-7064ae5832d2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8360b071-98fa-42af-ad69-f39c19ef921d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b0d13d5-2f1e-49ab-9414-16db02f989fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e404c52-bed5-4d68-be60-fe4f0067d168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c160511d-5a24-46e2-9b4f-5b2dcba8b295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ca9ee7-9817-4ce5-bf6e-ae475b3bf43a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54317263-5f30-43ac-9fdd-712de5415759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8730e61-346d-4c15-8658-3b9fe0771941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab61ea4-d45e-4063-a6ed-7725d5ee588e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "918bdec3-efbd-4940-8b67-525740feb6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f3721e-40a7-436f-87ef-622313597db6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0305433-39b2-422e-9eba-7ced66547273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9c36595c-e25a-4b39-9ec3-fd52cdfdd076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3925af-838e-48e2-8343-21f165a4c677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "601e582a-53cd-45d8-8c3e-652130c799b2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b9367be4-cd1a-4a57-b438-4e3d2c31d927",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b66c7a2c-ab3a-49cf-b783-dbe24d980844",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4c2ab4-d43d-4cfb-91a4-436f4e1df541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60e23651-ae04-41c4-b9ba-3a7f5ecf284a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2daa4fec-7a09-49d3-8679-8e18c0a7de4c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "020b774d-1c69-4284-8d31-7b99d493e428"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d3ac4a6-dfec-4b40-bb46-57d044761d8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d393a1ce-01e3-49bb-8260-9fc2cf344d34"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "67b41a18-72fd-4415-9fb5-42d224b9b913",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97b909fc-9ff2-439e-baa3-ee5ce3472408"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2efc7dc7-1b5d-4899-a63d-6b2993cd3d20",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b908f902-78e0-485e-9f1f-db428015fe42"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6e16bee3-780f-436d-b085-12c98447bb72",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "be4b7df7-8c13-43ff-bfba-7c098a30b22d"
                }
              }
            ]
          },
          {
            "id": "67838a14-2203-447b-ab1e-d2e4f3eb65ec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d8173e9d-940d-41e1-adf0-e5c0f9da49f2",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b1203bc3-5256-4d63-adc6-19256d286524",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a04d565-b29e-4168-a7d6-92e0be65f8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "946c33b5-3614-4062-b753-56fa92a3b727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468c8688-1a7e-4749-8fce-0c9564021422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf7cfb4-d5d1-45d6-9ba5-0a1782b20dcc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2db51b4a-5c1b-4378-a521-eb03bd33dc34",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f323cac1-8370-415f-9242-4a019a35c723",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "43cc2cbd-c96a-4790-9499-d3f4852eb23b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ea2eb8b-b660-4a85-ac05-2b6ca89fac79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d3a24f77-8078-4fb6-aedb-6878bccf6de6"
                    }
                  }
                ]
              },
              {
                "id": "ad21c5c3-7190-48a5-8683-1158d2c70196",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "628f7610-eb09-40bc-86ca-e322e9711ea7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "99396583-ea5e-4603-b02d-e50b52b2e9f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbb6f15e-2ff2-48a8-9c19-028f4739b223",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "39eba3f3-ded2-4aa0-88e3-109d61e9b5fe"
                    }
                  }
                ]
              },
              {
                "id": "441c9ce5-75b1-453a-af3b-b3a0bf0d6381",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7172439-9e2c-4896-a4bc-84efaa9e6e7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0015f60e-b818-414e-8d28-f22c9a61a954"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccd075f5-417c-4b1b-b3b7-02060e845068",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c3ec7617-d26a-44c7-810b-d84a0f608c16"
                    }
                  }
                ]
              },
              {
                "id": "ca7c57a4-dffc-42fa-a4f5-95c319f1db3f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "413d2c79-edc8-407e-837d-f01e6242a0ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d05b734-b9dd-468c-b180-9f30f05e4aff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89dec6b8-0a78-4c08-b239-37fdee272c67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4ee66d69-d478-4931-838a-18fcc062a756"
                    }
                  }
                ]
              },
              {
                "id": "147d3eac-da22-496d-b268-7fcd0f2f9b5a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa180984-c8d6-4045-b385-9cb95b4c9349",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "80291fc7-74d5-47da-934f-e3ad3397b89b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc00ec11-6465-4235-b1aa-e70dbf0e215a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6815626d-016f-4a19-aa48-258b6dc0264c"
                    }
                  }
                ]
              },
              {
                "id": "1b0a02f4-0a9f-43f0-99bd-3def17a9ffab",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a007931-986e-4123-944e-2cc39cdb25ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b4f3b9b-ee8e-4917-a373-2215e2002146"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b469946-7b00-4a72-84a2-8a6be0c9272d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "df6cec45-559e-421d-b03b-bf89bb38abc3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "48b0ba8d-d849-41bb-8bdc-12869d2f7ba4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4aa8accd-5f34-4d83-b4d7-58dcb5be8ed6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dce907e6-165c-45ce-8961-65ae216c7804",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "973028e6-ecbe-4191-b335-8a06718a95ed"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bddc852f-8e6d-4441-92bb-b26c4d0c7005",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8aa352ab-30ed-491c-b108-67cffb26a525"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d9ca84c-7a03-43c0-9d6c-3cb5135fdc93",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "28b7e45d-f120-494d-a2fe-93bffaa85b7f"
            }
          }
        ]
      },
      {
        "id": "80dbb8a3-51c2-4f82-bcab-1c335f687b5b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "daa08189-693b-42fc-a407-6b5966f99453",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5af2cfad-8d36-4542-93db-bcb16746ddea",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1709e25a-3ca4-4670-aa76-93629a3201d6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6ceeb7-c125-4015-969d-ce9568984794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20208154-8817-47d5-b8eb-5a4eead3f5fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63fd387f-896e-4ecf-a6a6-111b2ec696e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "011557d4-682d-4c1a-bc06-144cbd4b3744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b194f0-9437-4194-b394-b09b145e3092",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0075a0b-10f1-4d59-b96e-d9a9c7264c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "597ca647-fab9-4246-952e-d7ac243ea080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ae69f1-3fab-4c00-98df-e0e7a2b4de92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccefa31e-4518-48f7-ae38-015907cd44cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9aefaf-d547-4dbc-a686-627e97f42856",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba89124-99e8-42e1-93a5-b3f8824b5412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2440674b-129a-4b88-bf1e-ccb720f7efb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae3b315-5986-40d2-9460-959ea9083a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4d320d2-38ee-42f1-8a6b-8192770263d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77a7411-9767-4b21-93cd-697fa736c23a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a33fd47-7fac-4b31-a6f1-233807d3588d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d7d5397-1987-42a6-8e09-62b0004e63af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8e6255-da69-4435-b01d-b9455ae70c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddd7a0cb-eb35-4b50-8516-71df1a1492c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d829382c-c61d-4d4e-a504-a0201c3b6a0a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7339545b-e568-4e1b-9135-dce7bb7e456e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc84c37-2ea7-465a-a39d-aac87bebf3fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635734c9-541a-43af-a90b-84f1a1eae715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e599c4c-4216-4aa8-a7c9-c697b1c9e31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92103be1-851a-41a3-be5c-9949dd492479",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766a0904-30bd-4f0b-9450-ffbcbc82d495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e67e554-6c6d-40bb-b628-d0dbd39d317a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b523fec-d150-468c-acd7-18948bbabfb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8fd051-922e-43c2-85f3-16928a3c4b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1be29de-e7c2-4ea5-9b85-831ea0349866",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbece4e5-ad4b-4e8a-b695-214ee8fe3c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4669f288-99d4-4f77-8eb1-b41f163715c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a20483-27f4-473e-a523-cef61119dba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbeda65f-59d2-464d-94aa-3015dce90b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67329aac-1d64-462a-bbf5-30312edbfecd",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "173dcd80-77ed-4894-8eec-6853dd2e9820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f22ac836-9458-478b-89c4-0049e627a2e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1955e54d-d23f-4204-9b2c-7ab3b27f47b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd85e47-7e0b-4201-a8db-cbc2c3b2adfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bcf227-6c09-4908-adbf-b5f1cc703e39",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec0e705-4b7d-4c9d-ac83-71c87e138fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "583a5217-dcd8-4f8e-9803-3f215ad9e39c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798d5851-8c44-4b70-ae8c-51930ce4f036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bc7845e-359a-4a9d-aa54-999f1bee0514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba972ba-18ef-4b29-9ef3-ffe0314dc7b3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3af023d-f3fe-4256-a536-12ad4b9df1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133c9dfe-0b78-4b04-9b89-9ec3160a96d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f841c7e-66aa-4bf3-a1d0-1ec0a73510b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51372fd8-1ce7-4db3-a58b-b1e9d87ce0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733ee0be-13e4-4071-afc0-9253adaad0d5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750147b1-e6d3-413f-be17-4bafc8ec8331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41930974-92e3-417c-9853-d172059bb9a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714e7f51-b192-4a18-866e-e07a9cbade60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "dae161e2-aca3-4cd1-8656-4d4cd77c2420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b243fa75-28d2-44d1-b659-ddb7d7611e08",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16f7007-6084-4e23-8bac-b84a4ebc9d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab446a71-f1d2-4ce4-918a-39aca514f8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81315cda-5dfa-4fef-9880-08250478ac80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9c94ae9c-69e7-4c9e-a592-1dc4ae8ab67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7345392e-d31b-4a4c-859b-cff9baea9f24",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ebab2f-7f64-4dc6-8093-f0a0ebc283f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e32ef2-6922-4735-82fd-f4292018f317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8c4b73-930e-42dc-ac88-f23da37184a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fac7d894-a87b-47a0-8396-07408294e545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a17298a-9c38-4766-b45c-e62845569418",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf31b92-69ba-45ce-8e95-d6e4cc0ecab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d73a1c3-61e8-4596-9d07-dd4c8530a3ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabef727-bad5-4a4e-b663-da0e3b00f247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c533891-1d94-4fe9-9d6a-ebc216a5f02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dbdb31-e983-4c7f-9142-66a886729247",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9130704-dd51-4a08-a53e-b9e649a39f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f435f5d0-eae9-4e4a-a35f-847e535bf26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046ef037-9e24-4b7a-89de-c7f308bb1dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d9b593-e4c3-4268-a0a4-8dcaa4756761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d384a4-3c7d-4047-a945-a66dc85bad4b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f71a7c-cd6e-4edb-9c8e-c2350405a4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0da6a85-a2a3-4ae9-afb3-8d1b00e43b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10658db7-cd59-4904-8606-940c366769d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "55f72655-d2a0-483c-aa63-9b3a9ce54239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56884a0-fe7a-490a-8b5f-821e7fa82606",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75dd002a-79c9-49f0-835f-36bb11112964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d671ac2-f9ff-4cfa-8d2d-0d7a66856cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad53a0c1-1f8e-4b11-8b71-b5f5939d4c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ee93f5-9fba-4cfe-abd3-78cb5d4a16f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1feddddf-41be-4fd6-80b9-ea627d0e315f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf29144-f6dc-4921-b04f-d0fbcffe25c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83233e1a-feba-4f03-9d57-ff77e97eacd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05346ff-4001-4b6a-bb69-c117ecedd976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "adcc159b-117a-4443-a005-3b77072af088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415bff80-a70f-42c2-a5c2-f13b649413c1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc474d6f-fd6c-4e17-83b5-4da9b4dce5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9455684a-ceee-4272-8791-be147cfe189a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894984af-c728-446b-bf7e-8a807bdb9605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72ebbb94-4532-4f86-ad8a-bba26843b87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a91fe92-7d65-4e6a-9b7c-5fb63bbc0ef7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc90088-8d1d-498d-9920-c017ea34b0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd14437-6849-4634-9365-1ab93cc5e4de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c707d76a-87fc-4a8d-b436-e292cded0deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0edcd141-f4d6-4464-8709-e34133d5bff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d984fb2-6989-496e-9b26-f2e31cf921a6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38e0112-f4b7-4112-9fb4-f105eaad3fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3995365-664c-45b6-a1a6-0598ab9985ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee79a6a9-29b6-4ac8-a384-7d939d438a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e964b11e-6cad-4a4b-bd25-0d2308a176c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d786ddb2-245b-4054-a1f3-8a6bfb17e101",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6087fcb2-15fe-4a7d-a9d8-cee2f00e9d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac5df54-4a50-4d6d-a2af-6ccae66371f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82755bb-e2ef-4d34-a438-73768ee13d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d191f98-5e35-4607-ae00-c9cea910c4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b3f249-a801-4c57-a79b-549dbec7bb36",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2d2cc3-2704-4fa6-8f88-f4bf10f9cf6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb497c46-a58d-4154-aa8c-610144483cf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e787d3-a7db-4ba6-b46f-8df98b1fc88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38c67641-0f1c-4040-90a1-8414bbd1af82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca03100e-e2a7-4760-b8c7-33fd1ec070ff",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3a9a87-430a-4f3a-8c45-5fef387c942d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52675afc-bd0e-4ed3-bbd8-136cc8257337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68026ac6-1a33-4709-9ee9-eff3ec6734c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc33d1ce-ca31-44d7-b9e9-fe2215881c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5866201-c206-45ad-aaa0-00649e4b1218",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "555b0d09-057c-42fe-b730-e02669591e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91dc85c5-24b1-40b7-9d66-d91cb2ebcd23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5ab86c-371d-44f0-9960-2c0a990ff416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad5dd67-7e93-41c0-b28b-f1d41267bcec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e29d917-ad6d-4c11-9071-ead2a643893c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2695b28f-4333-4f7c-a72d-37ce75a0c4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a14cf6-8d71-4125-9ada-94a647e84f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f46660e-767b-4c6f-bc92-035a126a09a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c273e86a-5ed0-4958-b176-f7b2f112973d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca47fa8-c3f8-4b7a-89c1-6ffed5c4bb6a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85021cda-2f3f-4101-a7cf-64d39610e46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9caebf4c-68e0-4566-98bc-4c019110b312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064ad2b6-372e-4687-ab18-3acfe6241500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42c12157-e80b-4445-b3b8-0ad2f18f2921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db5e6b3-b29f-4cfb-b905-d0240e7fe82c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e98db3b-22a1-4fb2-bba6-5184068fa506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "510014b3-977a-43d7-9213-8182013d4122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46aeb5ec-e078-472a-90b0-d30a791a692e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "965d7f90-cab4-4602-b25b-292921bc40e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b535f94-636c-4285-abdf-bc0beff07cbe",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdd8d40-8cbc-45b0-8f81-818251851c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97e2264-006f-4082-8d99-e9fbffbd8bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b012c95-012f-4198-ac93-74d6c7e59fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b45bae4e-9701-4a78-8298-a57b8fb0a647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0db682-f1cc-4116-b97d-9150e4f1286b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e0babc-a835-4b71-b717-4debc2aa894b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d427ca6-0744-47ec-8714-89036c60aae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ca37a8-a65a-4ff4-9863-7e3ac3541e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd06c38d-e68b-4bd6-a7ff-ef30126914d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300391b5-8470-4ba7-8799-752fe5a872e9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73071a98-15a6-4a61-a020-47b9a07ebb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e23710d-bd36-48af-a7da-dda2db9f0bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89bda4a0-11c5-4e4b-a80d-1b37a186dd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b092704-6db2-47ef-b1fa-07bfa56edbc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d466620-9c6c-4e6b-832c-3c3858b49596",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b9d1d5-ec44-4a8e-80a9-6e2affbe1943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9583a88e-f298-4569-b9e0-9ff35dcd0c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55a41a0-fbf5-4e77-a4d5-7398694e7c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea497f89-0251-4e83-91d2-0d5bce07d1d5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "98891be5-21e9-4f8f-a70c-ee953b8f9fdf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3b7f7b01-0b1b-4aff-8d28-59908d593f1f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377e3443-7067-4f73-8476-59ed77900912",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6b72b315-2b5b-48b7-9c0e-f96d94a070db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf17c33-95d8-4766-b294-5964d2c89490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76660114-06fc-48a9-a4c6-8a49c365f15e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6fe8d67-7b10-4524-a9fc-39b48a0ce0f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97ffcc0e-8fba-452f-94e4-4180e3dc4467"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e63e962-b3c4-41ec-9c43-d84cba6e266b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3506470e-8bd3-45c1-90e4-790d52b21410"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da94f4ee-6205-4aa8-8640-afa838da9535",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3c3be118-1913-437e-a0a6-cd9b157dfbd5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "971837d7-6f45-412f-8d7f-a7506a79cae9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6190b31e-c900-4fa0-9461-7e581b544f03"
            }
          }
        ]
      },
      {
        "id": "e166d8ae-46ce-4c03-8ead-1517f4976c3d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "11bb7374-5f27-4b0a-8449-49a2a8405969",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fff6f7bf-7efd-4368-8e20-a93f205d6531",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "db8c2530-4ca3-47ad-a9bb-0c243544a61b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4f1e60-d998-4f3b-8967-d46eaaf9d020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858cbe0f-b7c4-4525-bf4b-b1b1d9d62bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132fabc4-50eb-4e06-9b1d-6b622799adfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa20489-71f8-4490-982b-9a89f41b8a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818f9bff-6d0e-476a-8fc4-fc89837396d1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc27115-7576-43c6-baa9-67190fc685e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a1c7f24-868d-43f7-b262-7c46b0690c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d17c4b2-ccf6-4038-9c4d-da5767dc1a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "59df1f8e-5ce0-4c9c-abcb-e1e4f6cea28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f870361-b23d-472c-864e-55ea40f9edfb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba865903-a4f9-452d-9265-833574f110ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2427ae-652a-4faf-9610-1f63605fdf02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70f0db3-276e-4a54-867e-597de18038cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffcbf56b-7f34-4ab7-8f55-8e3a00fcbc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be93d574-a58d-4988-a0dc-48f30e5a5372",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b5847f-1d09-490e-86d6-2467fb7b8d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4bb0362-8f77-4972-9948-fd6d2db06f34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f276bc6a-6605-468a-9969-57f51ba4708d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3839b303-ef40-406f-ac72-30eba6fdd9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce27c390-be10-4acf-b7d0-ac5585bad0b7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb2cabe-c9de-46d8-9283-15f2856d529e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb638a14-2d52-444c-ad7a-0f7564582935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef0413b-fd9d-48b6-bccf-32855a9c5927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75b62caa-2b1d-4b83-8e2a-e4a7b32c9865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7801f5-4d44-4d16-a4b1-42f9e753a72f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd757902-8b96-497c-827c-ec5987d45530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853e4f47-f78e-4f2f-a2da-cf8a719343ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cfa928d-bdf4-41c5-b09e-05ac891b6bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dbd2cf9-2a36-47b2-a13f-e3709b10cde4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948bb073-209d-4789-b86a-bfa7841dd950",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "843092d1-4c5f-453a-89a1-3588cd09f441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7426d797-58ea-4538-9be9-b8dd9baa2f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff69dbc-f1fb-45da-ac6b-27b06ac0304c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f6912d-d121-4b6a-a6ea-abd2b5a60631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba7f4d8-0e6b-463d-9a5d-da754c344ba0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf868a9-fdec-4353-99dc-2eff5a98a233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8427772c-e49e-4b33-ab1a-177a18fdaba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d70fe5d-4890-4d3f-b76a-86c3a535607d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb646a7-7911-4bcd-a3e9-51b85cc0b84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771118e0-99c9-4666-b7ac-0b548f4e06fc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf53116f-ce0a-49d8-af0b-ecab479abdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1850e29-3f9e-48ab-8bbe-5376587b24a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4d864c-3dea-4cfd-bc4f-58a782e59129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36e8dab7-4ed0-4fa8-9033-660e3ca7bddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "865962ec-9d0d-434e-abc6-e6a2b68b2485",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac37cf39-71ad-4920-8725-3a953c0ff23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fce1e1a8-c79a-4cb9-a8b5-6b596c7e1bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d42255-e915-42ef-8d98-3f0f3492ebf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b9858aa-8e15-4f5a-a9ec-d136682c2e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf928c44-c5d7-430c-96f9-6defad2366f0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "936c017c-50f0-4a21-9c9b-4b1c0145636c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd45a47d-6d60-426a-ae45-13b37d159ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37877cb-4c9c-45f2-829e-d2070a07ebfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "05c82158-48a2-43b2-99d4-9d2f725cdef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9bad72-5711-43c7-835d-15c1d8ac5065",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7bb551-f4e0-43d3-8608-4119cf57136a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e15aefd-48ee-4b89-ae40-f61e5921abf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25072f87-d9ee-4a53-8b9d-12658da770ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "30acf738-930c-4b20-9774-1e01f85c2972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8486e1de-9e5b-4bcd-9117-95e41e51c377",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8118b985-e88d-403e-ab7a-e99e151ea903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3763dda8-bc01-4cd9-9ae9-e26b09ff236a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43b811b-afcc-4678-bf04-87cb6e4f7e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "24983041-ac91-4f6c-9846-eadd95dc47a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cccc357-ecd9-43a5-a705-efabb19f470f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ec2bbb-14da-4dc4-8a44-9c1c2dd87f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e7b56d3-5c61-499b-b012-baf4d3ee0b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac59e49-18fa-434e-a3b4-7c799170c3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c546207-5664-4bd6-8d41-1aae3c418906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3134c9c3-4f72-4cf1-ac6c-4ad078de1522",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc885ca-2ba4-41dc-a29b-30ea4b1bf658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0763e5fd-ce59-4bed-acdd-1aa7e0e9b9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac2479a-930f-4d71-8d41-1296d7a1bc79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "eac19d83-efa7-461c-b3cb-28356bf0b6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69402a12-fd4c-4d8e-9fba-c45966b780c9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc1f101-8796-43ac-bdc2-b79160f485d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e75e0d-dd5b-47d5-a52b-a51ffeee9ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac87f16d-f59f-4cb5-815e-46121b0c9022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e79b238-cf9e-4fa2-9099-26442ae6a6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd1026f-8901-4f79-ae1e-57f62b3e7388",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24793b57-2787-4ad5-a6f4-77dd045f7677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8847b713-0c24-4d68-917e-d9977599197c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4ce38b-2f98-4cb3-a424-1745e2cdccc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5907b7cd-70b9-421a-8792-21ee08a62467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5302a4be-dc3d-42bd-98ad-6dedf9b8daa7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7581ce-9999-493c-8356-499201b3bf2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d5e4fc-e52d-4765-8a9a-7d373f53c46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47818dda-99e2-4e8a-8453-50a8739c5550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb74f135-64a0-46b3-81c6-30be80be9831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9caabb92-aae0-46db-af73-8efa2c9915cf",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4740409-a80c-4df0-ad9c-975d0a62df8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ff8695-d48f-4140-a4e7-e93cfdeed320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c48ec9b-9aa4-4f04-a899-4011e312cc80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "759af355-911b-4cbd-bd59-57a200539419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa97fb29-50c4-49b0-9acc-614e8e30fcf6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c865a93d-5f36-4957-8df3-9e4e36736085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22bf2b0-498a-4c26-bb96-b9eb0a442bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cd87a2-c008-4e21-84e8-5bcf5c239f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c0a880a-5da8-437d-8e49-32cb52f3b3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b5dfab-fd83-4652-ab11-18f79b757d45",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1871f6c-d2e2-44c9-8167-8a145475657e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541d80c9-8f00-4e83-91ef-582d14a37d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16580175-a546-4912-9576-d40f33496725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e20c8653-0016-42cb-b9db-b83d9a898fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc7370b-c453-41ef-9270-30e2b3e26d90",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b893c437-aaa5-4722-b550-3415cdd24f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87047de0-7a59-47ec-b90b-7cedc60855be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a21656-3d42-4002-8758-4ac6d227e928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cc54437-d943-4f7e-adb9-bb0111fc89fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82651ab-887b-4b7d-ae3c-ccb171525f89",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b247c351-7d84-4bfd-b481-57caf184c202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a382711-9e7f-4db9-a35c-42011f4b26d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c2849e-06a8-4ea2-ad17-944e3c8af26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "406187a0-4d9e-4667-a40e-4e6d89b9c000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b2c508-de2f-4583-96e3-464113b11597",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662c49c1-f4ef-449d-8f8c-33eef9995cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d15315b-0cda-42e9-97c5-2a39663b3e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94da4dad-5054-44fb-9d72-7d62c21d7efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a9443b-12ed-4e3d-bae1-d8a7b7176ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f2e7b6-856c-46f7-8402-ab259c28ecfe",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbc2401-af32-4e47-a569-b86dd7230d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6af805d-2d02-4078-9a60-0473ab2e67a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b0fafe-ad2d-45f6-8e88-30c7c6c7e86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e402291-f86f-4c2e-86ca-fa9128fc4daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8048ff8-c372-4a9d-bd4e-d9fb80ccd46d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b55fa02-cff8-48f4-a79b-ab69197aebed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbaa89b1-b8e2-495d-9bc9-cb9a6415fa3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29711eab-5e42-4f6c-99bc-9e95b46b4b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8bfd0a1-76d2-485d-8b26-7a7d156be9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f802552-5662-44ab-99c6-6fa8a5a49488",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85904bfd-caa1-4e13-ac96-0241482dcf36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863ad8b6-f521-4c7f-95db-3976a8105c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7ef779-1603-4013-836a-221548b3fe7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd5778c-9bdb-4958-a677-8b3eb915df1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08067464-2e9c-439d-945e-db725446db6a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfd24bd-1fdd-40d7-984f-fd7c90c266d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf5304f7-ca3e-41be-86e9-d0f0303f78dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1700820-109c-470b-a7f4-88b0142c23bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f88655c-2b6b-48bc-afce-eb5b9b15e2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f605e603-b7e0-45e9-bd1e-cea7ecfcd463",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "354fff60-1ca2-4b80-ae7b-56cc566b3600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b242e9-7d2b-481e-a573-b09acdd9e7d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468ddc4a-ab30-46d0-beab-1fd8ecc4e226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "578b84de-5fd9-4b2d-a4f2-d4e53d61abf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793e6235-2ad4-44e1-acc6-1c685eecbbcb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfbd6db-55d5-42b8-8191-70f068a96084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ed07b0-a76e-4ab3-a65c-097a1c41973d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffbf003-b0cb-471f-a44c-0202a94bddbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ceafafa-25fc-4e8e-9d46-5efc152db72f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dacf60b-1560-4d92-9bcd-1882008039d9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0e5f63-2b3e-442a-a8f7-99ab9ad50753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68014b51-b55d-415d-a49d-1de139041537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e6628d-f515-4923-a068-aee585b1b213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "248d8d20-02fa-4761-ac89-7334ff4d849b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6f0bb2-bedf-48e9-820f-168bdf9c04a4",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8370502c-e095-4787-9484-ed578e87a495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7cd3b9e-34c5-4199-a236-8b70b27063db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab16b37-3cb9-4877-ab50-0bbff711b379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aef87895-89ae-4ad9-bd95-f2d580c579c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609b69e2-ee45-44b6-88a4-8df5f0dc329d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf773922-9f24-41bf-a8ff-40c34108d34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75fe25b2-7bf7-49ad-8f03-bd1d59089ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bead03c-b05f-4640-baff-71ffdd48d578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f106e9b0-2c17-448b-8bf5-ce81cc5cc72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00205ae0-ad02-478c-ba14-53cf52e2ba98",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2f57b1-568b-4b51-b764-2879e936f397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997e5ad4-43e6-4efa-ba7f-f54193c7e3fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6e7ed2-94fa-46f2-949e-158ad98d08d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b563c804-8cd7-48fe-b755-097feb7d09b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffffc4d-9a9d-400f-864e-46ca13ba2f8b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0200e346-3024-48dc-8a1e-575766bc05a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb4abf0e-14bc-482f-a99e-9c4ec9c9a87e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2552052-a91e-4b09-8e06-44cb82af159e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "355f3b5b-d4ef-4c6d-9af7-a04841cee7cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60016495-670e-42af-8be1-74ec4f48d55f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b640131-6354-4800-80c0-6b10edf03013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d5c6f1-4385-41d3-97db-1413396b214a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f0c13a-1475-49db-a651-7dba2d463418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8839d78a-984a-4cae-8c22-9b6a07b4971c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cbd889-086b-4c42-94d1-d216516a3dd0",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce45c506-ba61-4618-a245-55319b1360cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf97453-78ee-4d8b-af40-bc5bbad49189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c0c0a6-199b-4d43-9872-fbbd8c05da6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "404df520-9603-4896-9d36-5f0379bdaafe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9ad5c8de-3d3d-46e4-b399-1c5c57c6d0fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9628d664-a43e-4754-9f8d-f2700951dbc2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b65fdc-609a-42aa-902a-d4c095b48dd3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0498ea80-d5f4-42d3-b86d-dc288dc4d3a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63925a7-7139-4f59-bc29-b949916d45bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "603ff58d-c1dc-4d18-933d-83bbcceb4ca5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53da5bdb-8014-4195-a3b8-fc37dc19a9d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fad0d123-f4bd-40be-8fde-ab94ab9bddcb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53b7f935-89c9-4d21-ad40-6ac28b98aea4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea9b8e87-9666-463c-b24d-817ef351a9c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "957e8e32-b809-4e63-8fe7-c346104a5e78",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "48dbea81-b3eb-45e8-ae67-dd958f1c52a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fcc5bfc6-9238-4736-bbe9-a54ef2146984",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3d33aa20-e812-48e6-9912-9ebf4745cf11"
            }
          }
        ]
      },
      {
        "id": "3e244755-7e5d-4bce-ac8f-5fdd5aaa4fc6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "27bb7fe9-2ab1-41a8-9359-c075d7ae1b8f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1d900271-a855-4e19-a683-f8199589a4a1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c087e18a-c116-4a49-b92e-91d8173a0733",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11550a85-8d4e-4f8e-a5ad-1eb27921d9e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "048a7ea6-e36e-44eb-a271-6a8189d56cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24ebfb5-fb57-4127-844d-edff07913138",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eeaf6e9-3e26-4d7f-9eab-f0188c34648a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20c386b-ada0-4054-871d-5f3f778e1397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97bb8126-4d54-4a32-ad90-521dd5fa396f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070375d4-1997-4576-8791-1de9324ed736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f1e625-ca29-4e48-8605-4b8767ac5a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83cd0fe-937a-44a6-b9c5-a1397d516b8a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ce232f-6484-45e7-afca-ecfa7081156a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143ba10c-b2cc-4cea-8f1b-963854f5af57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46656589-d35c-47ef-93b7-c891f0e0aa5a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd3850c-57ef-4f1a-8dec-5c2c4dce662a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4031760-4a3c-4333-a1ce-aeaac0ff8011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9d2e75-e0a3-41af-9bca-57070bd506f5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaed91ab-06f0-44fe-875e-98e8c566e1cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6687aa46-da0e-4202-9dd7-736c6b623d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80d0362-7d4d-4479-963a-bbf8c77842f0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feaf3a76-198d-4611-b501-3519ecf32c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42170229-8ea5-4d13-b9bf-571192c6f34c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "524c9c34-2acd-4072-a440-1e78c5111f94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c891e27-186a-4586-a872-23471eb40313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c729e304-b6d2-4b57-ad8c-9efb1e0a37a3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f696b1e-c72c-4d24-b685-4039210d71d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f57cd484-9f34-4845-ba37-340e6285e17d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb90aeb1-ab5d-41ed-94f7-3596ed92a973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b31215-6ade-4e82-aa94-0e848b4ea80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33c7d6a-5f2e-4c01-8453-dabb2677b4a5",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33578b5-4162-46f6-bef8-3ee08343326c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c980e50-ba37-440e-8a39-43856b5cd821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa424ab-23b0-404a-aea5-5687d0aabe3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a657ef61-8c79-4e21-9dd6-395cdcae967b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4aadb7-56d9-44d9-9d41-6068d8d459c4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc7af65-5a60-4249-893e-6dadb8bf8102",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65f690be-c7a1-481f-b454-2f07b5018b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec186c9-e061-4078-99e7-6848d80274e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da2ad66-cae7-42b2-8ed4-9696646dcb16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21bb4370-ff07-4c45-b689-d532d077bb0a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337e6299-abd6-47a7-9c8d-f0d8d4f242ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c673e5cf-1b40-439a-8928-0314be37a25e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1577a6-b1ca-4c8e-8f8d-2a5de27e845a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2011ec-eaa4-40e5-94ec-20b35ccbf6f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd9b6fb-7e24-4682-aaa2-c0a06020bdc0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bba22c-dde0-4fea-9d1d-1f6db6e911b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "024eefdb-28d2-4903-8bd1-63b86fe65378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a41188-94ef-498a-8368-8e2a5a0d4bfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "598ff9a4-27f5-4b75-aa02-07283080bf09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fbf2a4-4390-4a7a-8822-dccc9ba0ed7d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92205e2f-96f3-4a02-8ec5-43c10f3489fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f0366b7-2da6-447c-90a4-ca41b1cdc89b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b2a244-3565-4ec0-96da-ac6074909f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f0facb-4a87-40b1-9f48-26a2e73bbb90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86107551-fe45-44f8-8c0a-fcd53c8a1274",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b687a661-585f-46df-a342-d53726c16ec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b56b05e5-48c8-4eaa-a102-22c8136f6949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "276377a3-4b5c-4ad8-bbae-068d76f6b23b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf011e0-328d-4680-bc9f-76832c269d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38b2258-9d9f-401a-89d9-32cb831d0507",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02a07a6-4adb-43d7-a9a8-014aa1a901bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ab0c9f4-06be-4826-8b86-dad4b1ad1a35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e0440d-1ac9-449f-8e11-38a408afad60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a212b302-db5b-465a-9edd-5540934adff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2329ed69-e687-4b2c-90ed-3770f6f52caa",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702eed5f-959c-4de9-b372-862eb396ef84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f5487e7-3b0b-45ca-b07b-cbc738e7fa6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0fb5aa-cc05-4141-b677-6c4010db19ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43fc11fe-d74a-4969-a443-e76f8c589d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec05b9a-7c00-4e28-934f-23e04dbf4c62",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fb604c-d999-4d62-8938-ecc1f0b42c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1005125-b1ca-4307-b127-6572fb2f7806"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50dbe2fc-a6c1-4a6a-a27e-d1a63bf44ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "534af1c9-a1e4-414a-94a8-e5c1244a2264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2c95dd-4db3-4017-9f27-1bba75483da6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8591a5e9-3bfe-4153-8b4b-fa10d63a5c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08b74a72-8f4a-4d3a-ab28-581b57bfefed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc988aa-a04a-41cf-b617-7433863974bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe70d17-1dfb-4156-91f2-29e1d41d8073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f7f806-dc4c-44ae-970d-0d4c524db4bc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711e83a9-1a72-4d37-983e-d7cf8af22ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6abceb8c-4e39-4762-b9b0-a9388c626c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbb2397-d8a7-4e86-81d9-82a1682b6b43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95114927-2edb-49a0-a75c-821cede97683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df94d6ea-5b09-4423-9466-373e3421a111",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29581b5-0812-4349-9f39-36899f566c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdb360af-55b6-4d78-94a0-b2bd796a1a7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c07b16-ea95-4828-bede-cd433c969b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0001bf4c-6ca6-4d18-9fa8-8c9ec7f70dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182887d2-dde6-4f46-be17-3f20d15024ed",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08fc6cdb-5dde-4232-a455-97986691af45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf59816-4f0d-45f7-919b-cc7de7b2741c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "850476f6-28a8-49ff-a4e0-729d90958e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa01873e-bd65-4621-82bb-9046138f932d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6e0eb9-c767-45f6-b644-372c26f50fb4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb2dddb-1987-4fe9-8b40-e744c4e9cd00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513949bb-0794-47ce-a2d3-1b1a3f859e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09101c19-1f17-420c-b941-c10b2f128696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "686fc8e5-ac95-4923-968a-92d1c245f7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916df990-eac4-48b5-9e33-ecc1e5afc38d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d23319a-0490-486e-a29c-a137eb2b0e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e08c7151-b0eb-4a75-8302-9216c8679304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d25bb5-1138-4cac-b6c2-29fc4850cc64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e542045-cb86-4531-a464-4eb2bc2b61de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4867f8b3-d6eb-435e-bfe2-314dfea4a2a3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4620f0d-d350-40dd-b01e-e3d43813e157",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f97f4586-7115-4597-bba9-e3e07f05fe68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe2cbe6-c28b-4081-adea-311eed9fe630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6cfb586-4329-4bc1-bec0-71db2cf6a880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5eb9b1-8eb3-45a2-8453-3ed7101c3ebf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c3f148-14a5-4079-a459-9b0dc206f0eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffb71f75-c8c0-409b-ae8a-13a3d6ace17f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2bedde3-a968-465c-931a-994a949e89a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f26653b-9d42-48fe-85c9-e1c7f2b5563c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9de08fb-8937-4a70-bc34-fa79a8f28619",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a25ce6e-bc6c-4cf7-8d6d-175c900ebfd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf9e8594-040d-4db7-a430-d0150a3c52e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e929fc0-5c4c-4de0-9ef3-7d591615fc0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c89db949-c581-4861-a5fa-924d2464991f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c188e3-a994-4928-aea9-5b6fc509fcba",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79568375-9f29-4a43-820b-1aeec51b0d15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3e02e44-3820-4287-9b1f-50c10e40188e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01598804-5076-43d0-ae8f-07cd4e20f261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9ca565-b6da-4fab-aff5-ac7a5ff58819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94fa810-c7b0-4f8c-8a8e-c36f2f93bd7c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d12253e-f445-4be1-b555-c0979bb0a748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9cf85ba-06aa-428f-a914-ad5eb9095757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e718cd4e-1553-4976-b9e9-b81056f62f7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6eb2fab-7d67-451c-9641-ed9f0c1b8b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30773d34-f1bc-4fe4-b933-fef7b985fba7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a397a3-f3cb-491b-8542-805d195805e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d4f876c-5115-4740-b175-dc79d766caf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f41da0-3e8c-402f-ba91-d7c3b197dadd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca65787c-d143-462b-a844-f1499be4f7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425c5f12-f40d-4428-b1da-20294846d0df",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873a1bb8-6b71-4a0a-a9cb-c1154e7ee36c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "504f058f-6b10-41fd-bdad-def14c6cfeb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8628838-340b-4ada-87ae-62eb095daa38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c0cfbde-7189-4d1c-a544-0945cacb22f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9fcbd6-2043-47ea-955b-34ed8680b11c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5471f67-7f1b-4d17-a5d2-da79ba87836c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e2d7230-e779-40f6-8f35-ce36f7a5afa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb14be84-53ca-49ac-a776-7ffea35e76b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6630b2c3-5970-40d3-9c05-5e38ad1f7047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67032bd7-dc8f-4b85-a033-a663cb2f3220",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc18fd2-9ead-42f7-b9bd-0e404c6fc85b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8a73621-017a-4e5a-946a-48d3bbad5ba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03d87ca-1642-40e1-b81e-e52ef9f4eb84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e97ba4-3a86-4ddd-96e0-7de372a1c351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160da95d-f0f4-4126-a133-abe7b75c0d6c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d657afc9-d74d-4c3c-b335-06bcad0c28ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dc73bda-7910-4df6-be70-24da0c91f7a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b91b1f8-8bc4-4275-a87e-d24ba640eba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b846df-9935-40b8-bb6f-b6ccc10d2d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46fc0b0-1c5d-4153-a9c2-df3411689779",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065ad437-0007-4a40-a252-0a6edf7f0bf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a8ba3e5-1b7c-4ff2-b5ce-4f707905478f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea9a86a-0d59-4962-b58a-92567a1dc588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4809769e-6e62-4e4a-8e4f-9b92fc5e295e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a1e012-5aac-4d89-bab4-af066cd2557d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3f32b0-433f-4f36-803f-d0ad20dddb0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b2ec1e4-142e-4125-aa13-fba208303f8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6458ac6c-6231-4806-a937-63c40ab34dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04886c29-f7dd-4411-80d6-726d55e18cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa18f24-b11f-4334-87e2-4891dc5a3e1b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40bc62ae-0fc0-44b8-abb5-839e867b6865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63bc50d7-53f2-4d48-9481-8e4ea2bc8764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a320849-5e63-4197-9813-7d9bfbdfc993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f1b33b-2666-42fb-a3a2-f94bc5bfdab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d92987-6007-4c8c-980f-f19d81f29511",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9495fb3-9367-4051-a3b8-fd4ab2c1b94c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca90be3d-f658-42c2-8837-bfe19537fe48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a481431-bf75-4d75-acf6-0562f0db16ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b79e78a-d445-41cb-b98d-b0fdb9a37cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5aca6f-5591-4939-9b5e-f01f382ad9b4",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365461e3-a810-4241-8d25-f15cd4a45f4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87148a94-0da7-4636-832e-459a2f2ffbad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64377b9a-ec17-477f-9e6e-083b6fedbade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec55960-1c62-40e5-940f-4bb796aba3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a79c8a1-210f-478a-bf64-886346c9d68c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587e80c1-f141-4f55-b6a2-349ed640b6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d80b035-8303-4052-a130-3bc23490b984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd571957-b73c-455d-810b-4e31f2bfe534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864b98c5-c437-477f-a1ab-94d7ad73123a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3215307-5b3d-494f-bbef-bb7729c2cfef",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f47b090-c7a3-44fb-b088-09d201f053ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c07a5b33-7f08-44f7-abb9-9ccf32654797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73dc579-925b-4cbf-a413-c105fec6a8ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3bebeb-67d9-4703-9014-2c2db8092ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabbc107-3814-4f32-94d2-62fdd5584de7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a71971d-6a33-4c86-9b74-2094748edbcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6043dff-399d-4dd8-9f5c-493e74f6083f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e217d6-244a-4ec1-8722-1161591c4411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad75cef1-6a4a-4b5a-9b5f-1bbc75dd0e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a2708f-2699-4dc2-8ca6-8a5007574a33",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8699802-53f5-4f6a-8757-7476cd0824ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75555ba8-2c28-42ff-94b5-f4018bd968e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22732a4-db9e-4ac0-b8f1-d2e6d308c98e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0bd0c7-dc4d-4b57-bd9b-ca05629ab01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34fa862-9c45-457d-85e1-f042c03c4189",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b51a86b-22a3-4196-b3ed-01ab075e72e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea785ef-ade4-4945-81fb-391f686c59bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d585c6e2-f187-4beb-9149-efe7ee115332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def4cb64-7366-4569-9c1b-6bcf663e6456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68434429-2b1b-4031-85fa-adcd3748e674",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82a52e7-61d9-4305-bc55-b6f49f659725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461c60a6-ff41-4273-aaed-ac95e7dc7d3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ec3f16-0031-4505-b144-4dc75bff3457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0332a07-99e0-4979-851d-b7edee7d7275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f146eab6-b77d-4b1c-9a34-796b2ae80455",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e4dae6-f52d-480a-8827-a70af0348a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3140e283-299b-44bb-a8ac-7d06e3a16694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "595f46f0-8866-4819-8d72-95916ee4d174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "735eee9d-e4af-460d-bf87-1eb4576b3205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f4fcaa-2c04-474b-a5af-d02d38d544bf",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3cafb0-4e8a-4448-9be2-df6fe8f8e40e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecdf722e-c014-4416-b540-02b802ff0c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01c5a6b-9c84-4e2f-ba6b-0e779062692e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0acf7b2d-0dfa-4eab-8c1d-e2b3e580765a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6851d0-d713-4310-bd07-f228adf52e0d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca5135b-4aaf-401b-9fb3-101c55b474bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844f6e29-bdd4-4649-93f4-a4d5c2f523a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd19a8f1-cd2a-4e0b-962b-1206567847bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a339cd69-a1b1-44a3-b75a-53144fbf6220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf67d460-94c4-4645-a335-38fc32687028",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc8d55d-a616-4341-9959-a2b44a7c6481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c36f2a-0ee8-461d-9d89-7f7bb3510532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd81af4e-05a8-44f5-9b07-9cd8917b0eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "980b2141-8d03-4637-9e78-84b2415648fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ffb777-1fd1-4e84-b463-570ba71366c3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6108b817-59f3-41c8-9cc0-5bcab779e56b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d931632-a154-4934-ae4d-e9c046fd6f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21969392-259a-4cf3-b53a-a81f04aa78ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d749f7-5b8b-49bb-9a47-930f0e9997fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4175ca0f-db88-4c90-9bb7-95b71baff92c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78eb5d5-3210-4b65-8749-0f639ca379d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc89edbc-431c-4406-9c4c-72513cc2733f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc3c677-13f7-42df-a304-0fb0c80b2af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f68f59-8013-46c8-9c3c-5281dde5f8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf76ef7d-f7ac-4e71-a957-ea38972fc25b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38468c2-b487-4710-bcf7-263060fce776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20177d13-89a8-4d3a-895b-1b51bb327646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbedc67d-a0be-4f07-9ad4-0c0ff7787018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f323c383-ee25-4c9a-a7c5-c447793b2159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d45ef63-e80d-410e-b402-5dd551fd908b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fa6371-73fa-444f-96dc-6d1d017e880f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baae8f1d-d73d-4530-b858-2e94740c5b38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "317af15a-8c50-4971-aca5-410456df0a54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb170c9d-ed3f-4128-ad9e-b01bcf269b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ef9fea-4355-4449-b1f2-e360615dbd3d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73532fb-54a5-4ab7-aaf0-8a8e05bdb6f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faa1a150-1975-404a-b221-6abeb4bd21d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c3b31a-d50a-4e8e-980b-9ca696bba448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eba15cb-7b97-4f1f-9c9a-f548fbfddbe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f343fc-29a0-48a8-8c2f-b5bc14fbc711",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f317e37-c38a-4460-8251-62244806d52e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763fd856-316b-440e-93b3-fd75ade9ad86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b57759a-2eab-431c-898c-70cd631c846f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b61614b-c9fc-481c-bfa2-ee5464620637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c952b31a-f534-45de-ad50-3ddd9e8e0852",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da04d27e-aaff-45bb-ad1d-7d3dbac4cc53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e443482a-57a9-4551-a263-b569bf5f41e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6ff150-9ec9-40dc-be37-7a67629b8222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f82db32-dbf5-483e-b408-7a83aa3fff5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c72e4f-dfdc-4b26-bc73-15a67f5adc61",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf3b2fe-4440-4228-a652-44eb3ec02b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3895ae85-1e1e-4d1e-b838-cb54742b32dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8680d7-fe44-4143-a749-d5b791bbcf0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b10f573-d4ce-48c5-a670-93f884a7cdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3fa9fd-bf43-41a2-a875-80d9b584c6bd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c982e36-7af0-4c0f-a5bf-4b492e1f66d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c85277-4b29-4c11-a9fa-d2db391fbe60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f86aec-baa5-48a8-b615-b32af1b9accf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d400e4-ff76-4d86-9916-071885871972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09b4d00-cf50-4880-b614-ac7a7f22e763",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa78c2e-987e-4453-a260-72318df04a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13bcaea-2b63-4fd4-bd3d-b17cce140c37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea30d64f-5e8b-4558-97a3-a04837bcebc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87094ef8-26e7-42ca-aa68-6c092006fdeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2066013-a26c-44f4-9357-b25c5d3fb468",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b58791-71cd-4504-9d14-b74bd3bc2095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a0ecf2-355c-49b9-9f12-91d1dd534a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af57c559-8644-46b1-a999-4c586cff3042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b259aeb7-8591-4702-a484-da81e7e68ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19301187-5a07-44c9-b287-28a3f10675de",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93030f5-030f-408c-a28e-3eb3034850dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b104dc-f3ca-4997-93fc-c4c04d4c6d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3456d3c4-79db-4244-864c-54c9d97bcdd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "882c1e78-cb3a-42a9-9b8c-a744df4cb7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84571dab-676e-4df2-bac3-561488ac6d3a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2268d1-d29d-4b04-9a9c-8dec51644ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f30e83bb-8b93-44c3-8106-d923c00c9f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbbaf83-8306-4502-9fa2-5e6540609600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99eae4a0-50b0-49dc-af61-de3df5f9e817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b52e7a-55f6-4894-baec-e3f8b850bf5b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe14cae-dc62-4426-af53-c91f9e47c027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f74410b-f6fc-430b-80b9-3f55bb82dfff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "678870cc-4261-4dee-adc4-6f7d84306d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce97d13-8afd-436f-ab2c-6ac960cbf8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673b2452-6757-4a08-b5f7-74c91a3ecb40",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48bbeabc-7bd3-47aa-80bd-7a500042859c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37cf2d42-c04a-41cd-8860-145069a24cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad480bb-058a-4cda-8375-ed00f4973591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f30604-b8c4-48a9-8709-2445d5fbd13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ced8f9-184d-46eb-9cef-1b752574295a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f51eda7-5303-412b-a904-548958ec540c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89411ea8-0335-4236-8fa9-630a1fe268f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15949509-7c55-452b-9c35-afbea3de174b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bdbc652-fa03-4ce1-8fb1-8c7859782123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a63a41-9ac2-432b-a61b-2562878700ec",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71340672-229c-4d55-a262-250a64574f69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a526689-4f1e-42a6-9aa7-338af06fb6e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccc7343-463f-4f3c-a355-6952bb2a8bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67633851-b014-44ae-bacb-8fc5b6525f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d3857f-3789-4e6c-8176-92b9dd094354",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e1e8c1-a671-4f99-949e-45caf53cb5c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f08bc400-d554-4625-8ce6-a62baac7b44d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c08a5a-90a5-468b-a148-af7772c5df90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "106ed614-9583-456a-b206-a9082849ca28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914ec395-2cb4-4cd4-bc9d-bd83dbf2d5fd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eae78c0-a74b-42fe-8bdc-3e0883533de8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "073e3dbe-c3c0-4c28-a721-fc30395986d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42292f40-b386-4531-b3fe-06898863bf31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c990dec0-35b0-4819-810b-446683ad5e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412f2f85-5860-417d-a436-17cc1b7761dd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7dabe9-3d7e-4cbe-a252-8614e38365d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d02e6a7-aea2-47a9-bf50-a295e91fb9cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "982d9528-8d7c-4841-af81-8033bdac32f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa497b4-29ea-4ce0-aaf8-4c54f501ecf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d9abb6-0dcd-42a8-8989-21f4a9271e15",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ab6694-ac04-4902-9a42-b11984fe6ecd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f74cb1c9-3273-4720-868f-2c6fdad27049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c3bc24-3f40-4c4e-bcd3-25a50d61f9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab935406-0d36-4e5e-81ca-0aae4b1f792e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6244bc84-2620-4feb-b10a-c6f0405564fe",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4696ab27-fecc-474d-aae7-fd59b43af7c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4798af0-2b1b-4946-9995-2dfc7c71f86b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7948dee1-6ce0-4c1c-b038-027628c7d54e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "671058ae-9b2a-49b7-a982-ed6c1578fbdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37298ace-424f-4803-af56-7331fe0d02c3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3666c0c6-7019-4950-9379-b8832c6199f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a54c7cd7-08d4-4862-8ad7-60bbe2402c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8388290b-a4b3-4bfc-83f7-5a3b59ccbc1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7f0137c-735c-4ed1-9cbe-f312755c31e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0da1eb6-cc7f-4874-b8a8-7ffb71d54b10",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb79170-bbd1-402f-a90c-3b7ceb50962e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39cd8488-81d5-4cf6-80f4-e37833ed9d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe8c4e7-7e7f-4a7e-9c21-caa967f7026e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc06c897-26b9-4d90-a05f-d7cc6f558b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef983046-b86b-4f9b-acf8-4b7aa6ed3f16",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510b5a9e-7be1-4947-9ae0-fc671d505e40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50fff8d2-f0ec-4968-91e9-0315a623fba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f7cd50-65b7-49f1-b23f-e4bf145f335e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22eb35a0-546a-4135-a63f-ac10ecaa1f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b247818-8b3f-474c-844c-bd29ae4eca1a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d65a3c-620c-4021-b2ab-e995c373f9c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3bcd539-4b19-468f-99b2-c1178575553d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8025d56b-cd14-4199-86e9-598ca1409ad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb5c709-4a19-4cd0-a651-59edde07e7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8393481-aade-4bad-aa97-822d3f64a327",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb485d0-4407-4d71-9ebb-5e2ecbf9923f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00d03ee8-360b-40ff-927e-b044c5dfaa0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f54e7c-069d-4dc0-a223-d63f68811160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484c2cc0-eb0b-4ac7-b767-4aa6a4204d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414d00ff-ec06-4a1a-8deb-71f894bdf994",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eae8cab-a386-4e2c-872a-6f2bb09a39bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b222f3f3-89ed-44bf-8585-ebc449b2cad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cf3f3b-4511-4e40-9588-ca9c1b4f1304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99fae7c3-79e8-4f49-a670-e6083c3bed08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56924746-6efb-4a4f-b07c-218e4f56b347",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f739734-0ba0-4cd6-a072-8b5a2bd0371f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f357f550-2b01-4a07-9fc0-54af8aaa4162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c6f08e-32cd-4091-85e8-86677ffbb06b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83cf0cf-4590-4de7-8023-27eedb7aae82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1074b430-258b-42f1-94a3-c017bd2b1ec3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3730fb-6fd5-4a01-ada2-d550ca2877b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55871ec6-359a-4fd9-bcba-eb2923e10b4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "590d101f-134c-4845-9ab9-aae02372f878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3511de-6477-4c39-a94a-e77939fac63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba62393-d25f-4b1f-b9b0-1d2aec96342c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d71ce9-8964-49aa-936d-3314b90c5b3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "331909b8-1636-47ac-ac16-7843a7e57027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4731c986-c95d-4465-8d84-bff72c3bad52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c5bc1f-3124-40d2-a943-19f3c74464c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34687a1c-4335-4c32-bc29-c6f90925208f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da30068-f026-44d5-bd98-bccc0d6e640b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97fc2488-5aff-4c12-b6c4-eea52bea4394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4332d07d-0ad5-49d2-a390-67b14183c2b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d86e14-b9c5-4b1d-a6fd-035ace475ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6718cdde-aae8-42fa-bb9f-89b1176834b5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2108c81-2c2d-4daa-9853-4f6a063ae3ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c30dcb0-a4a3-4afb-b99b-e7fe50e0a2c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e34eaf-914b-4f93-9e3c-811a820e3cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a722028-3049-4032-ac19-ac86557e5900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f67ce83-e366-40cb-ae06-9eacec06a163",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5c2945-e4a2-4eee-bfc9-1b18dc8864cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f567c2e-87fe-4370-8730-b9a9d0ecc2c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39019f7-89ee-4d01-9dbb-593bb74f91d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce58032a-8dfe-4fd5-afb1-b633af464d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7dd4cd-4b7c-403b-8d05-b2e8e8deb010",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e3a63e-3a78-4ae7-a420-549390e9aa77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad364f63-2ecf-4848-bf62-52e7eb204be7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56de00bb-36d0-44d1-be72-06e1dccbaf09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f3bf5d-e607-41d9-a5da-9846619aa034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df78ade7-cb8f-433e-a414-b6ea3462b26d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b815dcd-5f37-425f-b5ff-f44ae17a7205",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8ddfe11-c087-46b8-96f4-ef82e5440664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5fa818-1bd7-49c8-902f-a1201e8d2de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe38394-53fb-4725-95e0-660788e3171b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c004c536-2940-48a8-8e5e-58416a3bcf42",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c97337-b654-4b96-8863-7e169fa85de6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b857784-3e4b-4e2f-b389-51550d76eff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cd57a5-b41e-4976-9c02-da179d4c383e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee1ebb38-0a80-406b-968c-2b8161084167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff5c532-55da-4b91-828c-58f070c7bb1e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f499ebf6-ea81-4da5-864a-658611ca4657",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0f47f79-c078-46c4-8b12-f4eaf5fc2154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e970bab6-d192-42dd-93a3-ff8f21c06825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef93e1e-4637-4366-8c4e-17c4875156cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4e97f1-57f8-4887-9a2f-a3c7afd12119",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ee2679-a557-4a23-b7df-416a3b6eeb3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23a0f902-9a17-49ad-a498-a9e944011db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67a025b-375e-4a17-b710-3d50cc8b43bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28896aa2-abe2-4109-b488-1130932920a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ec97ce-a9f9-4539-9892-563634ade43f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2e5aba-427d-4745-8ce0-bd41df0ee5f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d595fcfd-0c14-4bc3-bd5a-1d31d877bc9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6483272-956e-4821-91a6-ec2f74ff9547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02822001-9100-45dc-b945-b8d4dc0508f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b613c27e-cb5c-46dd-aaa3-a0bcc5f7aae9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30a49cd-55cb-44ec-8b20-0fbbb5981b27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "178ae923-7a81-4730-aac1-37df37f6d284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "172e9d2c-3d94-46ad-bb1c-6f43ecf0bcc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "602d10fa-c729-4c4b-bce1-2e92e7e9d4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2613cf1-398d-4fe5-a5ed-e54e97d8bf9f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47383f46-1a76-4776-9989-8871194578e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3871d726-5cdd-41d3-b2eb-1c819a71c152"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7d7db5-d893-445f-a76b-9a33e2ff7c16",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e720e4e5-a6bc-4fcf-a621-1b72e4fb7b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e684a751-5b6b-4306-ada9-3ae9acbfc184",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c470c1-f7a6-4952-b4ea-ab74718a737a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17f7d647-875e-484b-a573-b93bef8cad6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b76bfc-fb8b-4dc7-8d31-a6a7f1f88a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2bae385-0246-4a28-b98c-52154b2bd8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ec15ec-6599-43f3-abbb-90c26ab70b4d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56a21a3-e464-41a7-b930-32fa551799d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b10fccbe-c48d-46e2-8665-c722a1076baa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b105648d-73e1-4873-931c-4b8ac8749bec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "badf358d-c098-4b23-94e9-481ba1afe76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c52e3f-c328-4d84-841e-5d54e626da07",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b318ab29-65f7-421e-883b-43857a40762a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf920aeb-fdab-4548-a3b3-c1cf10f0b25c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf8bf42-3a4d-4e65-ae0a-4b2d742fbdcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d499af-a552-469c-a3e5-aad4ad436b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cae2c83-c6ee-40cb-80a4-4238f2c49c8f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d48169-8fec-4f8c-b282-45fe132e995f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a873a68b-c3da-40dd-bb3c-3f47211c4752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d4c309-bcb0-48ea-962d-f8f6a40a5538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0e1063-1149-4fad-888e-992c00d34f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cecfdc64-0374-474e-acb8-107004a976a4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449e4429-50f9-4b68-85d3-4c1dfce756dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dce364cd-44cf-4cee-aaf9-3e38d1e50032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6124712-5ca2-4e78-a20d-4e01a0d25e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c49d112-04cd-45b4-a322-55b9fd787452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c004f5-aa8e-4174-b1e6-4b32985a8e7a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb5698e-57bd-4e89-9855-4228ee3d56be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faad04a1-00e8-4b1b-9d95-79d5e8a2067b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c3ad11-3d87-491b-b282-23c8330a8826",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77711592-d42a-4c63-93a7-ff58f4fd8f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b655b29-186e-49f9-a68a-c83423914aba",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d630d85-d70c-4750-ade7-a59634d9665c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d59528e-4f4f-417c-b333-884543fc7f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9533899f-c4a1-4039-9c68-450e3c4597f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10e1698-feb0-4ed9-9f96-80adb74d7487"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c92b422c-3764-4161-b035-fcfdf16bc5be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28975463-0bcd-4a1a-8fbd-eed852353d60"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6009a311-7feb-435b-9614-26d31ee43ecd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6323c2f7-d1c3-4724-9683-a5c220c9172e"
                    }
                  }
                ]
              },
              {
                "id": "90a97f46-762b-4ff7-922f-c20b1c245679",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "41d39ad2-752a-4e05-ad79-19222c3d920a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73367c46-4dc9-4f90-8c3f-2368811239d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5866b1f9-7f2d-435f-be75-48778774c096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "787df756-1413-4210-a5f3-c82af4ebfdfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fbaed85-8180-4b51-aa62-06af17fa1152"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ce441e0-ee01-4746-bd5c-60cc745d7c5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e67d35a0-ea2b-40d6-9352-22201a5fc4e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4383dea-ab87-4ae4-bc7a-72653176a50d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7bd1ba58-2422-4eff-9aa9-d8b13470d584"
                    }
                  }
                ]
              },
              {
                "id": "42da1526-e09e-41f0-9748-6039677df0f0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0ed03632-a1d0-4d4e-8065-3ecbbe5b67c9",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b34d24-3123-4905-b5fa-a6defe4aa1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "39e581b6-eb43-4115-b371-37fcf100ae14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46b2afe-4f37-4f64-a309-cd9248b29b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d8ff970-87fd-4bf5-baae-622e008b4e54"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7374900c-5b84-4eb0-a814-5f8701cc6613",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c84142af-a991-43fa-b67d-ec2026baaa43",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2dc4b522-cfdf-4a76-a981-d8d4896adde5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2d90784c-66d2-4084-9106-0d86c98a3bcf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7cf53a48-a9e4-4ba8-8185-b60cf2a1185e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65d1f614-dd2f-422e-aecf-26b0ff8348fb"
                    }
                  }
                ]
              },
              {
                "id": "2e12b274-9c0e-455c-9eb1-7b7736dce6b3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e7611ee-3a2b-4ac4-a0ab-5b8acdc4123d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2bc58b1c-bf77-4f36-b24c-2cdc02dbeea6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdc1e0f9-70ba-42e6-b391-95a499f690fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "498ec721-d868-4825-93f7-1f0a50949125"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "997fe9d3-55d9-4c22-8fa6-12f548bf3385",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e67eb120-372a-4d28-8e53-9fd612ad46f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64e676a5-c8f2-49c2-873e-ed95947fa08b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ef9bcc7-0ba5-4980-97c7-65ddf3850d78"
            }
          }
        ]
      },
      {
        "id": "897a621c-5595-425c-9a6e-3430dd93e01a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ee659765-c604-4012-bbf4-14ba4b5fee01",
            "name": "Negative Testing",
            "item": [
              {
                "id": "30476491-c863-4346-bd1e-ba319846d69a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d1d936f1-ed19-46ca-9b0c-56dc6df3219a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c63649-fdc2-4e66-9205-96a1a2243d6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4c333d80-9970-432b-b90c-35934b02accd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71281bb7-8d00-4e0e-9e31-2348505b88f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07bc94f0-d3bc-4900-802b-63789c5b3cfa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db85762e-e472-4e8c-b9b8-783689a219e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68f4e700-ffd6-431a-ad2f-4e339992122e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74b1f31a-3a18-4fe2-9dc0-a826d4c28aca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d659670-53e1-44ad-b7f1-7ce11baca395"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de76fca6-ba06-48b1-a24b-4cd8ff0d64b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "332b3494-07b1-447a-a8d4-32edff6476f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7656c929-bb72-4d0b-bcd2-59fc13ccf8aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2d21c30-9b59-44f5-ada4-6c6077b6b6dd"
            }
          }
        ]
      },
      {
        "id": "220b11ab-ffc3-4419-82e1-2983c0059adb",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ed846437-499d-4269-9da7-30b4b6405a50",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5fc86167-f98b-48c4-93b1-45a5674769bd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d18ddc34-26b3-479f-8e97-cdd895ca2b5c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18eadeab-df8b-4734-aafb-835c9b89e112",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c74a21e0-8120-4781-a408-9048e54b997b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0892c55a-67c0-4728-bf55-51d678c07117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14a9ba71-0442-40ca-b5b4-b4e7518199f9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfadbb30-ec47-4fa6-ba3f-4997e38f4586",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35bb9341-0ff0-4526-936b-75a15073035b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5716b97b-742d-4a8d-ad3b-70d7e74122a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5524051-fe4f-468f-93af-701907eccd1a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b62f2a06-cc0b-4d09-8be4-e26b0bcf5b0c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d88b336c-6ef0-4336-927b-0d6206aba720"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f371427-2c73-48c9-a6a4-aa80e87c4173",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7863d386-b8fa-4ea1-918c-152cc5f5204a"
            }
          }
        ]
      },
      {
        "id": "3e3aa75b-912c-409d-8324-1568644dd83a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ff5b3a57-bf05-4beb-983b-b0bdb533cbb0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf6bfffc-12d0-4652-a80c-822e31c1c993",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51cd9da4-d53a-4dc1-bb67-d6f038a0875f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2fba497-1c53-4cfc-a1bb-f523407d5871",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b309add7-be0c-4dc1-ad32-4a8204a77259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "523116a8-48c7-47be-9c36-c218649bdf8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bfeb898-7525-4226-88de-c67d48cb0e03"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0824c538-ac09-4f30-b494-a2f096197773",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f442ed4d-8c41-41e8-857c-9297e97e2fde"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9cdb59e-9344-4360-920f-c876bbbe4553",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4aa23def-4663-4176-a620-b58836f39a9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a40c9606-4eaa-461e-84c5-3df16aca1f9f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6eb1e669-8ad1-4ca2-833f-d3c661be5862"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77e30690-bd67-4e5e-b49c-71953ba31ebc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3611db05-e107-4ea0-9cf4-61f74ea80e19"
            }
          }
        ]
      },
      {
        "id": "4418a3d9-1543-4a04-8e4a-becd9c296d48",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7577938a-f0a9-41cf-b267-d4fdce04130a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "44dad2d8-0aae-46bd-9d65-9f1bcdbb2878",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d6fbeba8-82ca-4b8c-aa6f-a71ce95d1faa",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4e79fff-28ae-4d10-b381-272833937f90",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2bb7d29f-c9da-498e-b919-db6e2b38e481",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 56.86170212765957,
      "responseMin": 6,
      "responseMax": 550,
      "responseSd": 27.061697722566958,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707007024115,
      "completed": 1707007065962
    },
    "executions": [
      {
        "id": "a6780d60-897a-48ae-b80b-494d087a96d0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3ae55b97-c13b-4f17-9a1d-383bee81fda6",
          "httpRequestId": "c08f8ef5-1bac-4f54-9b18-91bdbed9de3b"
        },
        "item": {
          "id": "a6780d60-897a-48ae-b80b-494d087a96d0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ebe3da00-a825-47e3-8d49-31db12cff5b6",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 0
        }
      },
      {
        "id": "04032190-9c34-4b85-9b5b-f56d4ea7b11f",
        "cursor": {
          "ref": "a56e04bd-4e32-42bf-9e3b-bc303e952a08",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6fc5f899-6b92-451e-90f9-d2a1698ddc4b"
        },
        "item": {
          "id": "04032190-9c34-4b85-9b5b-f56d4ea7b11f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "283023c1-31ce-4ee2-a515-63ecd8e53345",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "7ea867c9-4169-4670-8741-e598da897f03",
        "cursor": {
          "ref": "08430e7b-4d0a-4b7c-a6fe-6821c19f8913",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f72894e2-0520-49d6-8a4a-f886a494aa7a"
        },
        "item": {
          "id": "7ea867c9-4169-4670-8741-e598da897f03",
          "name": "did_json"
        },
        "response": {
          "id": "267c4c8a-9e84-48a9-b318-3889436bdbdf",
          "status": "OK",
          "code": 200,
          "responseTime": 550,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4266d655-7587-48f4-9114-e809b624349b",
        "cursor": {
          "ref": "413941b9-f5f5-4746-b1be-a754036f395e",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e840f255-089a-4662-92f2-22508c4031bc"
        },
        "item": {
          "id": "4266d655-7587-48f4-9114-e809b624349b",
          "name": "did:invalid"
        },
        "response": {
          "id": "7bcdf726-5e5d-4a1a-83d4-4104cf3fd98d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4266d655-7587-48f4-9114-e809b624349b",
        "cursor": {
          "ref": "413941b9-f5f5-4746-b1be-a754036f395e",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e840f255-089a-4662-92f2-22508c4031bc"
        },
        "item": {
          "id": "4266d655-7587-48f4-9114-e809b624349b",
          "name": "did:invalid"
        },
        "response": {
          "id": "7bcdf726-5e5d-4a1a-83d4-4104cf3fd98d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6744aa-5a32-42bd-b33e-3a4b25e9af6d",
        "cursor": {
          "ref": "14d3693e-1f98-43bf-b0a5-06a7ea5aefad",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e2c452c0-4df4-4366-a2a6-7c83b99b2a20"
        },
        "item": {
          "id": "4a6744aa-5a32-42bd-b33e-3a4b25e9af6d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f60ea155-ded1-4ca5-b164-3cff666fd0fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6744aa-5a32-42bd-b33e-3a4b25e9af6d",
        "cursor": {
          "ref": "14d3693e-1f98-43bf-b0a5-06a7ea5aefad",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e2c452c0-4df4-4366-a2a6-7c83b99b2a20"
        },
        "item": {
          "id": "4a6744aa-5a32-42bd-b33e-3a4b25e9af6d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f60ea155-ded1-4ca5-b164-3cff666fd0fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743a1ae6-362e-444d-84ca-5311e65b7ca0",
        "cursor": {
          "ref": "83e3bbc3-4ee1-40af-bc3f-4da9ed9906d7",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e5b333e2-80ae-4765-8ef4-6815b95a0bee"
        },
        "item": {
          "id": "743a1ae6-362e-444d-84ca-5311e65b7ca0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9b4eaccd-d569-4aa1-a889-f23090ebe762",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743a1ae6-362e-444d-84ca-5311e65b7ca0",
        "cursor": {
          "ref": "83e3bbc3-4ee1-40af-bc3f-4da9ed9906d7",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e5b333e2-80ae-4765-8ef4-6815b95a0bee"
        },
        "item": {
          "id": "743a1ae6-362e-444d-84ca-5311e65b7ca0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9b4eaccd-d569-4aa1-a889-f23090ebe762",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0224aa3b-62f6-4a97-9368-c45881479732",
        "cursor": {
          "ref": "19d27293-e777-40ad-a869-e6049f57db0d",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8ec19f05-6cb6-4036-a578-05139dbd2359"
        },
        "item": {
          "id": "0224aa3b-62f6-4a97-9368-c45881479732",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b85c7404-4efa-47b0-8a57-3d662a7ed0af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0224aa3b-62f6-4a97-9368-c45881479732",
        "cursor": {
          "ref": "19d27293-e777-40ad-a869-e6049f57db0d",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8ec19f05-6cb6-4036-a578-05139dbd2359"
        },
        "item": {
          "id": "0224aa3b-62f6-4a97-9368-c45881479732",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b85c7404-4efa-47b0-8a57-3d662a7ed0af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fb432a-01a1-4154-bea5-6a2e67bf79e3",
        "cursor": {
          "ref": "06261706-4004-4075-8c47-53b809d2197f",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7d7ce048-347c-4ada-a534-e3f72c92fbd3"
        },
        "item": {
          "id": "40fb432a-01a1-4154-bea5-6a2e67bf79e3",
          "name": "identifiers"
        },
        "response": {
          "id": "e5ae0d8e-196d-4a1b-86e1-c2ad3c836530",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "40fb432a-01a1-4154-bea5-6a2e67bf79e3",
        "cursor": {
          "ref": "06261706-4004-4075-8c47-53b809d2197f",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7d7ce048-347c-4ada-a534-e3f72c92fbd3"
        },
        "item": {
          "id": "40fb432a-01a1-4154-bea5-6a2e67bf79e3",
          "name": "identifiers"
        },
        "response": {
          "id": "e5ae0d8e-196d-4a1b-86e1-c2ad3c836530",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5cd95184-d1e1-4f32-ab57-2111e25075d8",
        "cursor": {
          "ref": "10731b1d-9e42-4a10-ad7c-b10dbfa3eda4",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "49732863-7261-46a8-852f-918c182099ee"
        },
        "item": {
          "id": "5cd95184-d1e1-4f32-ab57-2111e25075d8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bde59d10-3cc0-4749-9eeb-aa9395f8279c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd95184-d1e1-4f32-ab57-2111e25075d8",
        "cursor": {
          "ref": "10731b1d-9e42-4a10-ad7c-b10dbfa3eda4",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "49732863-7261-46a8-852f-918c182099ee"
        },
        "item": {
          "id": "5cd95184-d1e1-4f32-ab57-2111e25075d8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bde59d10-3cc0-4749-9eeb-aa9395f8279c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cec25d0-47a6-4db5-a5db-224b7b019adf",
        "cursor": {
          "ref": "b5a21c59-09ce-47cb-bb10-8c1efacd8ef9",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7213d851-8f22-49ec-b382-bca307014fc4"
        },
        "item": {
          "id": "0cec25d0-47a6-4db5-a5db-224b7b019adf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d13d6af5-6b66-4564-9a5c-ebe021ef7a2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cec25d0-47a6-4db5-a5db-224b7b019adf",
        "cursor": {
          "ref": "b5a21c59-09ce-47cb-bb10-8c1efacd8ef9",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7213d851-8f22-49ec-b382-bca307014fc4"
        },
        "item": {
          "id": "0cec25d0-47a6-4db5-a5db-224b7b019adf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d13d6af5-6b66-4564-9a5c-ebe021ef7a2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d468aea2-a2d3-4196-b580-fa7705897d1f",
        "cursor": {
          "ref": "4f73308f-7a5e-4fa6-ad6e-cd84c352f91f",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ee1f7a78-bfe0-4931-bc93-7829a7896382"
        },
        "item": {
          "id": "d468aea2-a2d3-4196-b580-fa7705897d1f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "876785e7-d821-4555-9c11-dda259f4cea8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d468aea2-a2d3-4196-b580-fa7705897d1f",
        "cursor": {
          "ref": "4f73308f-7a5e-4fa6-ad6e-cd84c352f91f",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ee1f7a78-bfe0-4931-bc93-7829a7896382"
        },
        "item": {
          "id": "d468aea2-a2d3-4196-b580-fa7705897d1f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "876785e7-d821-4555-9c11-dda259f4cea8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c167aa-945f-4c75-a9b9-7c6b29bb39d6",
        "cursor": {
          "ref": "688eefca-8463-40cc-9db4-a989996c10c6",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "66023d53-7a01-4e5b-9f73-132bd9aefe68"
        },
        "item": {
          "id": "f7c167aa-945f-4c75-a9b9-7c6b29bb39d6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "54af6a6c-6032-4109-b598-2d3f3bcca213",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c167aa-945f-4c75-a9b9-7c6b29bb39d6",
        "cursor": {
          "ref": "688eefca-8463-40cc-9db4-a989996c10c6",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "66023d53-7a01-4e5b-9f73-132bd9aefe68"
        },
        "item": {
          "id": "f7c167aa-945f-4c75-a9b9-7c6b29bb39d6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "54af6a6c-6032-4109-b598-2d3f3bcca213",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4d7d8c-3474-4fd8-8c23-a63aa6bb7c41",
        "cursor": {
          "ref": "00b1f126-bec0-4878-b0cb-fe0b43e2b0cd",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1b9248ed-5683-4910-b1d0-27dc14238c6b"
        },
        "item": {
          "id": "dd4d7d8c-3474-4fd8-8c23-a63aa6bb7c41",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "34ff5707-20dd-439b-8cf7-55581ba8bf75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4d7d8c-3474-4fd8-8c23-a63aa6bb7c41",
        "cursor": {
          "ref": "00b1f126-bec0-4878-b0cb-fe0b43e2b0cd",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1b9248ed-5683-4910-b1d0-27dc14238c6b"
        },
        "item": {
          "id": "dd4d7d8c-3474-4fd8-8c23-a63aa6bb7c41",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "34ff5707-20dd-439b-8cf7-55581ba8bf75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3292b01-c56d-45db-8d62-c925595816bc",
        "cursor": {
          "ref": "d5dbe84e-0d7e-41d1-a274-ee6710db13ca",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3b9e7c64-6fcf-4690-807a-aab58f988f4b"
        },
        "item": {
          "id": "d3292b01-c56d-45db-8d62-c925595816bc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "96dba8a6-ea25-4c3d-8f79-3ba350088dd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3292b01-c56d-45db-8d62-c925595816bc",
        "cursor": {
          "ref": "d5dbe84e-0d7e-41d1-a274-ee6710db13ca",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3b9e7c64-6fcf-4690-807a-aab58f988f4b"
        },
        "item": {
          "id": "d3292b01-c56d-45db-8d62-c925595816bc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "96dba8a6-ea25-4c3d-8f79-3ba350088dd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8348324b-b046-4324-ad0a-d0aca7f58302",
        "cursor": {
          "ref": "5a06fd3e-4f1b-480a-b488-8c75445502e7",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d7d77261-5b2c-42f4-98da-c0249c743842"
        },
        "item": {
          "id": "8348324b-b046-4324-ad0a-d0aca7f58302",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "639cec8d-f079-4fab-9244-2375b8ff49e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8348324b-b046-4324-ad0a-d0aca7f58302",
        "cursor": {
          "ref": "5a06fd3e-4f1b-480a-b488-8c75445502e7",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d7d77261-5b2c-42f4-98da-c0249c743842"
        },
        "item": {
          "id": "8348324b-b046-4324-ad0a-d0aca7f58302",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "639cec8d-f079-4fab-9244-2375b8ff49e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578c2ef9-c407-4726-a288-152c010cee1d",
        "cursor": {
          "ref": "945d0347-47d5-4222-a76d-d13613bd501d",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ad983d05-6206-48dc-9bde-75d838d77d79"
        },
        "item": {
          "id": "578c2ef9-c407-4726-a288-152c010cee1d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d16d8208-9645-49a9-b1db-2f1547f26a5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578c2ef9-c407-4726-a288-152c010cee1d",
        "cursor": {
          "ref": "945d0347-47d5-4222-a76d-d13613bd501d",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ad983d05-6206-48dc-9bde-75d838d77d79"
        },
        "item": {
          "id": "578c2ef9-c407-4726-a288-152c010cee1d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d16d8208-9645-49a9-b1db-2f1547f26a5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b1d3ce-1bb2-419e-91e0-f1cce64e7af6",
        "cursor": {
          "ref": "e2634a4f-92b5-4838-8bdb-536712bbfe89",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4f80e013-cdb1-4c87-a9af-113c8b3a827a"
        },
        "item": {
          "id": "c6b1d3ce-1bb2-419e-91e0-f1cce64e7af6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5abab17d-d46a-4586-8aed-4970f2e40323",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b1d3ce-1bb2-419e-91e0-f1cce64e7af6",
        "cursor": {
          "ref": "e2634a4f-92b5-4838-8bdb-536712bbfe89",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4f80e013-cdb1-4c87-a9af-113c8b3a827a"
        },
        "item": {
          "id": "c6b1d3ce-1bb2-419e-91e0-f1cce64e7af6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5abab17d-d46a-4586-8aed-4970f2e40323",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b1d159-c502-48a0-93d0-e10d088c44b0",
        "cursor": {
          "ref": "199909da-2a6c-424f-b51f-760ecaf7b4d7",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8ded1c2e-7aa6-411a-8efa-7dabfe8faf13"
        },
        "item": {
          "id": "95b1d159-c502-48a0-93d0-e10d088c44b0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4b223eb1-be7d-4bfe-9a68-671b3aa539a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b1d159-c502-48a0-93d0-e10d088c44b0",
        "cursor": {
          "ref": "199909da-2a6c-424f-b51f-760ecaf7b4d7",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8ded1c2e-7aa6-411a-8efa-7dabfe8faf13"
        },
        "item": {
          "id": "95b1d159-c502-48a0-93d0-e10d088c44b0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4b223eb1-be7d-4bfe-9a68-671b3aa539a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57526bda-863e-4d2f-a3f9-66f6a57effc4",
        "cursor": {
          "ref": "5f1087eb-1712-48d2-8753-d77fa3078d92",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "946e4619-155f-4be2-b5d4-bac61e57ac79"
        },
        "item": {
          "id": "57526bda-863e-4d2f-a3f9-66f6a57effc4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "bca94c99-a758-405b-b350-826ca25dbbeb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57526bda-863e-4d2f-a3f9-66f6a57effc4",
        "cursor": {
          "ref": "5f1087eb-1712-48d2-8753-d77fa3078d92",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "946e4619-155f-4be2-b5d4-bac61e57ac79"
        },
        "item": {
          "id": "57526bda-863e-4d2f-a3f9-66f6a57effc4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "bca94c99-a758-405b-b350-826ca25dbbeb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c46f5b-de1f-4f2e-bfb4-db0d4d4485f9",
        "cursor": {
          "ref": "b65da9b8-69ca-415f-9459-19e714c136c1",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4afd72c4-3724-43ab-9b6d-dfe7cf714033"
        },
        "item": {
          "id": "60c46f5b-de1f-4f2e-bfb4-db0d4d4485f9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "904efac7-13ca-4365-a512-550aeab2464e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c46f5b-de1f-4f2e-bfb4-db0d4d4485f9",
        "cursor": {
          "ref": "b65da9b8-69ca-415f-9459-19e714c136c1",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4afd72c4-3724-43ab-9b6d-dfe7cf714033"
        },
        "item": {
          "id": "60c46f5b-de1f-4f2e-bfb4-db0d4d4485f9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "904efac7-13ca-4365-a512-550aeab2464e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b4edf7-be28-49a1-8465-3d6537b47a48",
        "cursor": {
          "ref": "b810c2fb-dffe-4ee7-a88c-b161dcac61e0",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6da44b6f-fc60-4bda-b072-d00596a40525"
        },
        "item": {
          "id": "f5b4edf7-be28-49a1-8465-3d6537b47a48",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c0f0ab3d-a6e0-433e-bc80-8ca3ef7151b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b4edf7-be28-49a1-8465-3d6537b47a48",
        "cursor": {
          "ref": "b810c2fb-dffe-4ee7-a88c-b161dcac61e0",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6da44b6f-fc60-4bda-b072-d00596a40525"
        },
        "item": {
          "id": "f5b4edf7-be28-49a1-8465-3d6537b47a48",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c0f0ab3d-a6e0-433e-bc80-8ca3ef7151b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f7fe64-f11b-4443-9331-c5587c52d36f",
        "cursor": {
          "ref": "a1e93bd3-fba2-4a71-a8fa-fb97fd62fa2f",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1f0d54f4-ebea-45f4-925d-d2fa0ff0cf1f"
        },
        "item": {
          "id": "c1f7fe64-f11b-4443-9331-c5587c52d36f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3dd06984-7b69-41cb-87d6-d295a378d211",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f7fe64-f11b-4443-9331-c5587c52d36f",
        "cursor": {
          "ref": "a1e93bd3-fba2-4a71-a8fa-fb97fd62fa2f",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1f0d54f4-ebea-45f4-925d-d2fa0ff0cf1f"
        },
        "item": {
          "id": "c1f7fe64-f11b-4443-9331-c5587c52d36f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3dd06984-7b69-41cb-87d6-d295a378d211",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf65364e-334c-411b-b134-8586d8353a43",
        "cursor": {
          "ref": "8fb9ec50-eb09-4841-833c-21dc3c69b97d",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d4ea74be-e8a6-48d5-b53a-a4fe8198400a"
        },
        "item": {
          "id": "bf65364e-334c-411b-b134-8586d8353a43",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e4f84bee-93d9-46c5-9fb6-497cfd9d2711",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf65364e-334c-411b-b134-8586d8353a43",
        "cursor": {
          "ref": "8fb9ec50-eb09-4841-833c-21dc3c69b97d",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d4ea74be-e8a6-48d5-b53a-a4fe8198400a"
        },
        "item": {
          "id": "bf65364e-334c-411b-b134-8586d8353a43",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e4f84bee-93d9-46c5-9fb6-497cfd9d2711",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79eb4c29-f21d-4c3e-bbc2-45ae3ade8bff",
        "cursor": {
          "ref": "f1a7e4db-8283-4cf8-9ad5-45861d2f0ab1",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d888dc18-5042-45b9-9bb2-b06f4f3e2032"
        },
        "item": {
          "id": "79eb4c29-f21d-4c3e-bbc2-45ae3ade8bff",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7db3a8ec-310e-4245-9faf-e93d78743a27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79eb4c29-f21d-4c3e-bbc2-45ae3ade8bff",
        "cursor": {
          "ref": "f1a7e4db-8283-4cf8-9ad5-45861d2f0ab1",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d888dc18-5042-45b9-9bb2-b06f4f3e2032"
        },
        "item": {
          "id": "79eb4c29-f21d-4c3e-bbc2-45ae3ade8bff",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7db3a8ec-310e-4245-9faf-e93d78743a27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c846be-8aaa-4665-98a4-00e56a55960d",
        "cursor": {
          "ref": "d579c449-418c-43c7-b97e-3533b7fefb45",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "03af0425-26d0-43d7-a1f9-db9e0877deb5"
        },
        "item": {
          "id": "d1c846be-8aaa-4665-98a4-00e56a55960d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "26f25a24-0af5-4c28-b587-ff72e7d314d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c846be-8aaa-4665-98a4-00e56a55960d",
        "cursor": {
          "ref": "d579c449-418c-43c7-b97e-3533b7fefb45",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "03af0425-26d0-43d7-a1f9-db9e0877deb5"
        },
        "item": {
          "id": "d1c846be-8aaa-4665-98a4-00e56a55960d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "26f25a24-0af5-4c28-b587-ff72e7d314d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fefa0f0-e1ca-4c3d-8e09-431b92bd5fa5",
        "cursor": {
          "ref": "3e99b0f8-bd39-4d1d-9804-d2e62463d11a",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4c96db15-c261-410b-9162-6b436c740eb0"
        },
        "item": {
          "id": "3fefa0f0-e1ca-4c3d-8e09-431b92bd5fa5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bc7ed7b6-bd5c-4c66-91f9-047a368e5bdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fefa0f0-e1ca-4c3d-8e09-431b92bd5fa5",
        "cursor": {
          "ref": "3e99b0f8-bd39-4d1d-9804-d2e62463d11a",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4c96db15-c261-410b-9162-6b436c740eb0"
        },
        "item": {
          "id": "3fefa0f0-e1ca-4c3d-8e09-431b92bd5fa5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bc7ed7b6-bd5c-4c66-91f9-047a368e5bdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3568801e-94b5-483c-a81f-a297816dd9e1",
        "cursor": {
          "ref": "dfca8123-0403-464b-9145-8656fa1a16c6",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "62f0e317-e53d-440b-96be-bb880b2710e0"
        },
        "item": {
          "id": "3568801e-94b5-483c-a81f-a297816dd9e1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "276f60f9-0d39-497f-b215-9bdad6985326",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3568801e-94b5-483c-a81f-a297816dd9e1",
        "cursor": {
          "ref": "dfca8123-0403-464b-9145-8656fa1a16c6",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "62f0e317-e53d-440b-96be-bb880b2710e0"
        },
        "item": {
          "id": "3568801e-94b5-483c-a81f-a297816dd9e1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "276f60f9-0d39-497f-b215-9bdad6985326",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9a7817-7a06-4cba-a731-dde1a39e8f0f",
        "cursor": {
          "ref": "734fd352-427c-41f6-8b33-bddd1b4b44cc",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "70da34fc-4ba3-4a42-9410-9b372680b382"
        },
        "item": {
          "id": "5e9a7817-7a06-4cba-a731-dde1a39e8f0f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "86b25d21-5331-454e-ba60-570b2672ae7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9a7817-7a06-4cba-a731-dde1a39e8f0f",
        "cursor": {
          "ref": "734fd352-427c-41f6-8b33-bddd1b4b44cc",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "70da34fc-4ba3-4a42-9410-9b372680b382"
        },
        "item": {
          "id": "5e9a7817-7a06-4cba-a731-dde1a39e8f0f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "86b25d21-5331-454e-ba60-570b2672ae7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8254d26d-ddc1-4628-88dc-a2ba6ab42e70",
        "cursor": {
          "ref": "a0c98224-a559-4018-afe8-cecbd252524f",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "83e9cab8-4081-4f6e-adfc-b376d8486463"
        },
        "item": {
          "id": "8254d26d-ddc1-4628-88dc-a2ba6ab42e70",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "030a1d6b-6054-47c9-b917-bfe16ce77025",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8254d26d-ddc1-4628-88dc-a2ba6ab42e70",
        "cursor": {
          "ref": "a0c98224-a559-4018-afe8-cecbd252524f",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "83e9cab8-4081-4f6e-adfc-b376d8486463"
        },
        "item": {
          "id": "8254d26d-ddc1-4628-88dc-a2ba6ab42e70",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "030a1d6b-6054-47c9-b917-bfe16ce77025",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee1d81e-a4d5-445f-a393-8ac0a60dc97e",
        "cursor": {
          "ref": "48b731c0-4874-498e-af15-db74d686c175",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2c34e622-1561-4753-b0b1-4c13d1e25f27"
        },
        "item": {
          "id": "bee1d81e-a4d5-445f-a393-8ac0a60dc97e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "41c44514-51b8-4e7c-93a3-90470c1c7673",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee1d81e-a4d5-445f-a393-8ac0a60dc97e",
        "cursor": {
          "ref": "48b731c0-4874-498e-af15-db74d686c175",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2c34e622-1561-4753-b0b1-4c13d1e25f27"
        },
        "item": {
          "id": "bee1d81e-a4d5-445f-a393-8ac0a60dc97e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "41c44514-51b8-4e7c-93a3-90470c1c7673",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6850ccdf-1941-4a01-b558-55afc1026033",
        "cursor": {
          "ref": "d6e6ef36-6d69-43b2-8edb-fef4ec60962f",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4e00676b-b880-4ec5-a6e3-98b95b16c6d1"
        },
        "item": {
          "id": "6850ccdf-1941-4a01-b558-55afc1026033",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "848c0989-2dc8-49e3-95e7-af7406df0b20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6850ccdf-1941-4a01-b558-55afc1026033",
        "cursor": {
          "ref": "d6e6ef36-6d69-43b2-8edb-fef4ec60962f",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4e00676b-b880-4ec5-a6e3-98b95b16c6d1"
        },
        "item": {
          "id": "6850ccdf-1941-4a01-b558-55afc1026033",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "848c0989-2dc8-49e3-95e7-af7406df0b20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4470f9e8-5376-46f4-86b6-fd41466dc976",
        "cursor": {
          "ref": "7da54208-2487-48f0-9db1-3cd6dd142522",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d8b99e8b-c36e-4121-970c-8ef0fd34d599"
        },
        "item": {
          "id": "4470f9e8-5376-46f4-86b6-fd41466dc976",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7a182f6f-f203-4f68-a785-f54cf9f85361",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4470f9e8-5376-46f4-86b6-fd41466dc976",
        "cursor": {
          "ref": "7da54208-2487-48f0-9db1-3cd6dd142522",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d8b99e8b-c36e-4121-970c-8ef0fd34d599"
        },
        "item": {
          "id": "4470f9e8-5376-46f4-86b6-fd41466dc976",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7a182f6f-f203-4f68-a785-f54cf9f85361",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cec8fd-c8e2-479b-a793-3992c0faeeae",
        "cursor": {
          "ref": "a2c20e22-3935-4e41-a72b-f9168e227316",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3fccfaf6-0ae9-4daa-953d-b24fb2b5eaa1"
        },
        "item": {
          "id": "62cec8fd-c8e2-479b-a793-3992c0faeeae",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "278b21dd-af3d-4e8c-8748-c1447717700e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cec8fd-c8e2-479b-a793-3992c0faeeae",
        "cursor": {
          "ref": "a2c20e22-3935-4e41-a72b-f9168e227316",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3fccfaf6-0ae9-4daa-953d-b24fb2b5eaa1"
        },
        "item": {
          "id": "62cec8fd-c8e2-479b-a793-3992c0faeeae",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "278b21dd-af3d-4e8c-8748-c1447717700e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03da49e-4dbc-44e2-b6d4-2d9194fcb2b4",
        "cursor": {
          "ref": "50305535-4fc8-4c4b-b316-ba09cd33d1d9",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "088586b6-cf4f-41b3-a795-9bcad56d6d87"
        },
        "item": {
          "id": "b03da49e-4dbc-44e2-b6d4-2d9194fcb2b4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0a88a301-2c84-4214-a1e5-dc3a6e5fa7d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03da49e-4dbc-44e2-b6d4-2d9194fcb2b4",
        "cursor": {
          "ref": "50305535-4fc8-4c4b-b316-ba09cd33d1d9",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "088586b6-cf4f-41b3-a795-9bcad56d6d87"
        },
        "item": {
          "id": "b03da49e-4dbc-44e2-b6d4-2d9194fcb2b4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0a88a301-2c84-4214-a1e5-dc3a6e5fa7d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461ab652-29b4-4ea4-8d34-56aad9c35d60",
        "cursor": {
          "ref": "d080e362-d1cf-4031-91cc-9895dbf96b2e",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "336e70ce-8f1e-434a-a922-a635f005eb8d"
        },
        "item": {
          "id": "461ab652-29b4-4ea4-8d34-56aad9c35d60",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8d116597-b843-436d-a088-7a2da1d50973",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461ab652-29b4-4ea4-8d34-56aad9c35d60",
        "cursor": {
          "ref": "d080e362-d1cf-4031-91cc-9895dbf96b2e",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "336e70ce-8f1e-434a-a922-a635f005eb8d"
        },
        "item": {
          "id": "461ab652-29b4-4ea4-8d34-56aad9c35d60",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8d116597-b843-436d-a088-7a2da1d50973",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4da1a8-216f-4780-8367-c30ba36c9d57",
        "cursor": {
          "ref": "9662a6e1-95de-4141-95f9-0e5b5b0430da",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "958a70df-4e6e-462d-81e4-f744992603ad"
        },
        "item": {
          "id": "cd4da1a8-216f-4780-8367-c30ba36c9d57",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "aeb15719-7c26-4c46-a54a-4ee724963266",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4da1a8-216f-4780-8367-c30ba36c9d57",
        "cursor": {
          "ref": "9662a6e1-95de-4141-95f9-0e5b5b0430da",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "958a70df-4e6e-462d-81e4-f744992603ad"
        },
        "item": {
          "id": "cd4da1a8-216f-4780-8367-c30ba36c9d57",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "aeb15719-7c26-4c46-a54a-4ee724963266",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bf0189-db7f-476d-8013-81097a93b6b0",
        "cursor": {
          "ref": "4d817f0b-a96f-44af-ad21-708e3ff30891",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b9be1930-e4ee-4215-b796-b37b772b5430"
        },
        "item": {
          "id": "d6bf0189-db7f-476d-8013-81097a93b6b0",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7d827a84-14a9-4bdf-8f86-acc9d1724db6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bf0189-db7f-476d-8013-81097a93b6b0",
        "cursor": {
          "ref": "4d817f0b-a96f-44af-ad21-708e3ff30891",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b9be1930-e4ee-4215-b796-b37b772b5430"
        },
        "item": {
          "id": "d6bf0189-db7f-476d-8013-81097a93b6b0",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7d827a84-14a9-4bdf-8f86-acc9d1724db6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ead418-5077-4f47-b580-d176cde46952",
        "cursor": {
          "ref": "f4bc0ef9-6ab7-4e80-a695-c68ce3760627",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "032c0173-2c3f-4f7e-865e-9b15809c50e3"
        },
        "item": {
          "id": "84ead418-5077-4f47-b580-d176cde46952",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4a99b173-feb2-43e9-875a-6f3a40716ec5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ead418-5077-4f47-b580-d176cde46952",
        "cursor": {
          "ref": "f4bc0ef9-6ab7-4e80-a695-c68ce3760627",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "032c0173-2c3f-4f7e-865e-9b15809c50e3"
        },
        "item": {
          "id": "84ead418-5077-4f47-b580-d176cde46952",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4a99b173-feb2-43e9-875a-6f3a40716ec5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68b1032-cde1-48a3-951e-2f74ec3bde1b",
        "cursor": {
          "ref": "3ad92bc5-c2b6-4411-8206-888bcf7ef9ce",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2f4b077b-0b1f-42b2-ba3e-1b24dbf2c383"
        },
        "item": {
          "id": "a68b1032-cde1-48a3-951e-2f74ec3bde1b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9a7dd5b0-cc24-45e6-9050-30c427ec0730",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68b1032-cde1-48a3-951e-2f74ec3bde1b",
        "cursor": {
          "ref": "3ad92bc5-c2b6-4411-8206-888bcf7ef9ce",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2f4b077b-0b1f-42b2-ba3e-1b24dbf2c383"
        },
        "item": {
          "id": "a68b1032-cde1-48a3-951e-2f74ec3bde1b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9a7dd5b0-cc24-45e6-9050-30c427ec0730",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da747cc5-5d2a-48f7-9365-382e6acc2622",
        "cursor": {
          "ref": "110c8204-7453-46d9-8ea8-ed8271ef50e5",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0a963a67-bf8d-40c5-9bf1-bfde1a74f221"
        },
        "item": {
          "id": "da747cc5-5d2a-48f7-9365-382e6acc2622",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d46abc82-0eb9-4b6e-92bb-e2d7b0ac8b0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da747cc5-5d2a-48f7-9365-382e6acc2622",
        "cursor": {
          "ref": "110c8204-7453-46d9-8ea8-ed8271ef50e5",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0a963a67-bf8d-40c5-9bf1-bfde1a74f221"
        },
        "item": {
          "id": "da747cc5-5d2a-48f7-9365-382e6acc2622",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d46abc82-0eb9-4b6e-92bb-e2d7b0ac8b0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65661bc-c4f3-48c1-98e9-72e56dcb92d4",
        "cursor": {
          "ref": "86c7f93c-8bb3-4669-aa78-28aadcec0a49",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "20848291-f863-47dc-b04d-14e4c37ec16f"
        },
        "item": {
          "id": "e65661bc-c4f3-48c1-98e9-72e56dcb92d4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "03ee80be-614d-4f35-b59b-f7266d55dc9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65661bc-c4f3-48c1-98e9-72e56dcb92d4",
        "cursor": {
          "ref": "86c7f93c-8bb3-4669-aa78-28aadcec0a49",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "20848291-f863-47dc-b04d-14e4c37ec16f"
        },
        "item": {
          "id": "e65661bc-c4f3-48c1-98e9-72e56dcb92d4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "03ee80be-614d-4f35-b59b-f7266d55dc9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729a2d34-c1aa-4e42-bd33-4e6e9e86c239",
        "cursor": {
          "ref": "cc3e421e-074d-41b8-9102-9c3770693ad6",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f1faf148-5b56-42bf-b3a9-a8deba3a0cf1"
        },
        "item": {
          "id": "729a2d34-c1aa-4e42-bd33-4e6e9e86c239",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f030acae-0147-4394-ad18-cc5faecdbfd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729a2d34-c1aa-4e42-bd33-4e6e9e86c239",
        "cursor": {
          "ref": "cc3e421e-074d-41b8-9102-9c3770693ad6",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f1faf148-5b56-42bf-b3a9-a8deba3a0cf1"
        },
        "item": {
          "id": "729a2d34-c1aa-4e42-bd33-4e6e9e86c239",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f030acae-0147-4394-ad18-cc5faecdbfd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9195b353-8acb-41dc-8c8a-ec5a4f6b396d",
        "cursor": {
          "ref": "d4ff7df3-1f2a-4b61-bfc8-6a4f9cf1f65b",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "49a1eff6-b6ca-4472-91f1-a372edcdc1f5"
        },
        "item": {
          "id": "9195b353-8acb-41dc-8c8a-ec5a4f6b396d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "812126e6-3115-414e-8731-9cfb676b53ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9195b353-8acb-41dc-8c8a-ec5a4f6b396d",
        "cursor": {
          "ref": "d4ff7df3-1f2a-4b61-bfc8-6a4f9cf1f65b",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "49a1eff6-b6ca-4472-91f1-a372edcdc1f5"
        },
        "item": {
          "id": "9195b353-8acb-41dc-8c8a-ec5a4f6b396d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "812126e6-3115-414e-8731-9cfb676b53ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7587bf1-e2da-475a-bd1b-2d4099e02337",
        "cursor": {
          "ref": "7c636b25-ba60-474c-b694-9b97bb05f60b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "90b14e9c-0a76-43c2-98f9-420f53b69d21"
        },
        "item": {
          "id": "d7587bf1-e2da-475a-bd1b-2d4099e02337",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0d2bf80b-cbac-4ec1-93b5-bed22a3c1ae3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7587bf1-e2da-475a-bd1b-2d4099e02337",
        "cursor": {
          "ref": "7c636b25-ba60-474c-b694-9b97bb05f60b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "90b14e9c-0a76-43c2-98f9-420f53b69d21"
        },
        "item": {
          "id": "d7587bf1-e2da-475a-bd1b-2d4099e02337",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0d2bf80b-cbac-4ec1-93b5-bed22a3c1ae3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe537c49-b43e-4c09-9951-3fd74a9e713e",
        "cursor": {
          "ref": "6a248666-0493-44cd-8584-ad3007867a7c",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "667957bb-ac64-4d16-9ced-f329f2140c06"
        },
        "item": {
          "id": "fe537c49-b43e-4c09-9951-3fd74a9e713e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fa43edd6-8371-4737-9eb8-4bd0c0769fb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe537c49-b43e-4c09-9951-3fd74a9e713e",
        "cursor": {
          "ref": "6a248666-0493-44cd-8584-ad3007867a7c",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "667957bb-ac64-4d16-9ced-f329f2140c06"
        },
        "item": {
          "id": "fe537c49-b43e-4c09-9951-3fd74a9e713e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fa43edd6-8371-4737-9eb8-4bd0c0769fb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f236dfb-72a9-4358-b96b-4b6fcfbb1d15",
        "cursor": {
          "ref": "98990580-06b3-4197-b344-46190f5e5483",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6b858b96-79f2-4076-93a2-cc3d5fbeb2b6"
        },
        "item": {
          "id": "7f236dfb-72a9-4358-b96b-4b6fcfbb1d15",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3d482405-b0ee-4679-a314-7348303467ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f236dfb-72a9-4358-b96b-4b6fcfbb1d15",
        "cursor": {
          "ref": "98990580-06b3-4197-b344-46190f5e5483",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6b858b96-79f2-4076-93a2-cc3d5fbeb2b6"
        },
        "item": {
          "id": "7f236dfb-72a9-4358-b96b-4b6fcfbb1d15",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3d482405-b0ee-4679-a314-7348303467ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86754614-ec90-4762-b6f2-233fc94f575e",
        "cursor": {
          "ref": "59d7d8b7-3160-446a-92a4-cd1ca2cec25f",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a4dc7c8f-73d0-440b-979b-31c2237660fb"
        },
        "item": {
          "id": "86754614-ec90-4762-b6f2-233fc94f575e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "929df3a0-d84c-4112-aa9f-d39c36073b3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86754614-ec90-4762-b6f2-233fc94f575e",
        "cursor": {
          "ref": "59d7d8b7-3160-446a-92a4-cd1ca2cec25f",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a4dc7c8f-73d0-440b-979b-31c2237660fb"
        },
        "item": {
          "id": "86754614-ec90-4762-b6f2-233fc94f575e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "929df3a0-d84c-4112-aa9f-d39c36073b3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4f457b-d3f4-4c3e-a83c-428b44ca9e10",
        "cursor": {
          "ref": "f0c4e2f4-dc65-4e59-ba20-f630dbe82c07",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "59d32807-a0e8-42e8-bb93-475e2ef61ecf"
        },
        "item": {
          "id": "9c4f457b-d3f4-4c3e-a83c-428b44ca9e10",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fea9abec-d94b-4d1d-b64a-f00e4cf31281",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4f457b-d3f4-4c3e-a83c-428b44ca9e10",
        "cursor": {
          "ref": "f0c4e2f4-dc65-4e59-ba20-f630dbe82c07",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "59d32807-a0e8-42e8-bb93-475e2ef61ecf"
        },
        "item": {
          "id": "9c4f457b-d3f4-4c3e-a83c-428b44ca9e10",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fea9abec-d94b-4d1d-b64a-f00e4cf31281",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1138fb6-d16d-41d6-b930-c78a0044f689",
        "cursor": {
          "ref": "98d474ad-c9da-4e7f-8edf-5fa1d10fef6d",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "43982312-b86d-48f9-a8e3-ce8530eb0e74"
        },
        "item": {
          "id": "f1138fb6-d16d-41d6-b930-c78a0044f689",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "629847c6-b92e-4f27-8a3d-08362b3b92d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1138fb6-d16d-41d6-b930-c78a0044f689",
        "cursor": {
          "ref": "98d474ad-c9da-4e7f-8edf-5fa1d10fef6d",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "43982312-b86d-48f9-a8e3-ce8530eb0e74"
        },
        "item": {
          "id": "f1138fb6-d16d-41d6-b930-c78a0044f689",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "629847c6-b92e-4f27-8a3d-08362b3b92d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6c3299-c3f2-40a6-96c5-b2837a8d72d1",
        "cursor": {
          "ref": "b305af14-b4bc-4ed7-b680-dc8c276eb2ce",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "016a8db3-289e-4602-9926-8cf2c6001123"
        },
        "item": {
          "id": "0e6c3299-c3f2-40a6-96c5-b2837a8d72d1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ed33dde1-aa58-4884-b912-04f2211f40c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6c3299-c3f2-40a6-96c5-b2837a8d72d1",
        "cursor": {
          "ref": "b305af14-b4bc-4ed7-b680-dc8c276eb2ce",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "016a8db3-289e-4602-9926-8cf2c6001123"
        },
        "item": {
          "id": "0e6c3299-c3f2-40a6-96c5-b2837a8d72d1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ed33dde1-aa58-4884-b912-04f2211f40c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ac0490-b81e-4d58-80bc-201b3fdb1849",
        "cursor": {
          "ref": "3d4ae25d-9692-44b0-aa59-f81b83dc24b5",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f9ddd256-3b16-43fd-aa28-27e42a2d8d71"
        },
        "item": {
          "id": "36ac0490-b81e-4d58-80bc-201b3fdb1849",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2b704e84-3f38-4e1d-bafa-88c2d735bf9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ac0490-b81e-4d58-80bc-201b3fdb1849",
        "cursor": {
          "ref": "3d4ae25d-9692-44b0-aa59-f81b83dc24b5",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f9ddd256-3b16-43fd-aa28-27e42a2d8d71"
        },
        "item": {
          "id": "36ac0490-b81e-4d58-80bc-201b3fdb1849",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2b704e84-3f38-4e1d-bafa-88c2d735bf9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df17076-3f25-4177-80fd-948862e1fee7",
        "cursor": {
          "ref": "c0685b52-b5ec-4fff-bc9a-defe49a2a567",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2438b0e3-c88b-4c3d-b709-b5e0df1112b5"
        },
        "item": {
          "id": "8df17076-3f25-4177-80fd-948862e1fee7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fbc663a0-41f6-4ce5-83af-5e7fe8f2ce5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df17076-3f25-4177-80fd-948862e1fee7",
        "cursor": {
          "ref": "c0685b52-b5ec-4fff-bc9a-defe49a2a567",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2438b0e3-c88b-4c3d-b709-b5e0df1112b5"
        },
        "item": {
          "id": "8df17076-3f25-4177-80fd-948862e1fee7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fbc663a0-41f6-4ce5-83af-5e7fe8f2ce5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c626e1c8-1057-4eee-a067-8f49142ba542",
        "cursor": {
          "ref": "f769bb81-6f17-4925-87ac-56b1578c5d05",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ca2c65bc-6e80-4eee-a35a-5f4c216d1fd7"
        },
        "item": {
          "id": "c626e1c8-1057-4eee-a067-8f49142ba542",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fdfc5a87-108a-4535-9612-98683dd9d88d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c626e1c8-1057-4eee-a067-8f49142ba542",
        "cursor": {
          "ref": "f769bb81-6f17-4925-87ac-56b1578c5d05",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ca2c65bc-6e80-4eee-a35a-5f4c216d1fd7"
        },
        "item": {
          "id": "c626e1c8-1057-4eee-a067-8f49142ba542",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fdfc5a87-108a-4535-9612-98683dd9d88d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02274b00-ae3e-44fb-82bb-fc678b27ab29",
        "cursor": {
          "ref": "1c6410b7-fbec-4353-a37e-9fff609192ad",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b165ce86-f697-46f2-bcd2-0c6182b2721c"
        },
        "item": {
          "id": "02274b00-ae3e-44fb-82bb-fc678b27ab29",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4aa4be73-8902-4571-9611-9b5d337f15d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02274b00-ae3e-44fb-82bb-fc678b27ab29",
        "cursor": {
          "ref": "1c6410b7-fbec-4353-a37e-9fff609192ad",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b165ce86-f697-46f2-bcd2-0c6182b2721c"
        },
        "item": {
          "id": "02274b00-ae3e-44fb-82bb-fc678b27ab29",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4aa4be73-8902-4571-9611-9b5d337f15d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399f83aa-9fc8-4921-bd2c-c463bf2e7d90",
        "cursor": {
          "ref": "4c8a4373-680f-4cfd-90e1-66dd23373065",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "052433ff-3eed-4231-8e0f-37ca56d2cb4b"
        },
        "item": {
          "id": "399f83aa-9fc8-4921-bd2c-c463bf2e7d90",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "48c95c56-9599-4365-aee5-95a0b8216564",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399f83aa-9fc8-4921-bd2c-c463bf2e7d90",
        "cursor": {
          "ref": "4c8a4373-680f-4cfd-90e1-66dd23373065",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "052433ff-3eed-4231-8e0f-37ca56d2cb4b"
        },
        "item": {
          "id": "399f83aa-9fc8-4921-bd2c-c463bf2e7d90",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "48c95c56-9599-4365-aee5-95a0b8216564",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace02b62-f4f0-4851-a3aa-82e139290286",
        "cursor": {
          "ref": "25135846-9891-4387-8dd3-1b14274f8958",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ed06390a-d7b0-4c72-a300-458d76640a5a"
        },
        "item": {
          "id": "ace02b62-f4f0-4851-a3aa-82e139290286",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "da0af14e-ec4e-41c6-a0c5-ee03e0a3a2bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace02b62-f4f0-4851-a3aa-82e139290286",
        "cursor": {
          "ref": "25135846-9891-4387-8dd3-1b14274f8958",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ed06390a-d7b0-4c72-a300-458d76640a5a"
        },
        "item": {
          "id": "ace02b62-f4f0-4851-a3aa-82e139290286",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "da0af14e-ec4e-41c6-a0c5-ee03e0a3a2bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade6380c-4d26-4c9e-bbcf-0ab8245400c1",
        "cursor": {
          "ref": "3d2bd335-b02c-487c-8b07-0693c8e223b9",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "624a1835-359c-456c-9290-177501206662"
        },
        "item": {
          "id": "ade6380c-4d26-4c9e-bbcf-0ab8245400c1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1d74f9f2-5afb-4605-b157-74b6e6ae117d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade6380c-4d26-4c9e-bbcf-0ab8245400c1",
        "cursor": {
          "ref": "3d2bd335-b02c-487c-8b07-0693c8e223b9",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "624a1835-359c-456c-9290-177501206662"
        },
        "item": {
          "id": "ade6380c-4d26-4c9e-bbcf-0ab8245400c1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1d74f9f2-5afb-4605-b157-74b6e6ae117d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c6f780-4898-45c4-be44-58c1705dcddf",
        "cursor": {
          "ref": "23e8e08f-6de9-479a-af8f-985a231c083c",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c4e42b16-6d20-4c30-a645-7dd995149773"
        },
        "item": {
          "id": "10c6f780-4898-45c4-be44-58c1705dcddf",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e45ea60e-337c-4ebf-9525-03cd12a4a8be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c6f780-4898-45c4-be44-58c1705dcddf",
        "cursor": {
          "ref": "23e8e08f-6de9-479a-af8f-985a231c083c",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c4e42b16-6d20-4c30-a645-7dd995149773"
        },
        "item": {
          "id": "10c6f780-4898-45c4-be44-58c1705dcddf",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e45ea60e-337c-4ebf-9525-03cd12a4a8be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e08847-52e4-40fb-aa42-e10c77df4142",
        "cursor": {
          "ref": "32fe34b0-a391-4da3-aaae-bc5f546f1ba4",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "47694bef-7ad6-466a-b625-5a94c9607d43"
        },
        "item": {
          "id": "48e08847-52e4-40fb-aa42-e10c77df4142",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e95fc827-4382-44fe-a753-a05b36743464",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e08847-52e4-40fb-aa42-e10c77df4142",
        "cursor": {
          "ref": "32fe34b0-a391-4da3-aaae-bc5f546f1ba4",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "47694bef-7ad6-466a-b625-5a94c9607d43"
        },
        "item": {
          "id": "48e08847-52e4-40fb-aa42-e10c77df4142",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e95fc827-4382-44fe-a753-a05b36743464",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390cffa5-6a62-47e6-a5f7-226c199f7c7e",
        "cursor": {
          "ref": "3c2c29dd-91dd-4031-8d30-72e7b25de2bd",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d087673d-0784-4787-a1d3-73d8e082d40c"
        },
        "item": {
          "id": "390cffa5-6a62-47e6-a5f7-226c199f7c7e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bff42a2d-cc98-45fd-822c-edb7c7593471",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390cffa5-6a62-47e6-a5f7-226c199f7c7e",
        "cursor": {
          "ref": "3c2c29dd-91dd-4031-8d30-72e7b25de2bd",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d087673d-0784-4787-a1d3-73d8e082d40c"
        },
        "item": {
          "id": "390cffa5-6a62-47e6-a5f7-226c199f7c7e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bff42a2d-cc98-45fd-822c-edb7c7593471",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7751acb2-5cdb-4826-a7f4-27558a97bd2c",
        "cursor": {
          "ref": "37b1ef48-4df7-4dbd-ada7-c6a4ebcb3751",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1f550bbd-a6d4-4b69-99e2-14f57f93b079"
        },
        "item": {
          "id": "7751acb2-5cdb-4826-a7f4-27558a97bd2c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a08fd172-8e04-4e52-8d1d-5e0e9ea0cf2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7751acb2-5cdb-4826-a7f4-27558a97bd2c",
        "cursor": {
          "ref": "37b1ef48-4df7-4dbd-ada7-c6a4ebcb3751",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1f550bbd-a6d4-4b69-99e2-14f57f93b079"
        },
        "item": {
          "id": "7751acb2-5cdb-4826-a7f4-27558a97bd2c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a08fd172-8e04-4e52-8d1d-5e0e9ea0cf2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a73d14-c003-4f7d-bf9b-4b21dfb465e1",
        "cursor": {
          "ref": "e1ba865f-5b5c-4d26-a036-f38fba82171c",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b6e0f212-0bab-4f88-9242-7a4dcb734835"
        },
        "item": {
          "id": "c4a73d14-c003-4f7d-bf9b-4b21dfb465e1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "508ede61-d977-4aef-b686-e841f1744a13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a73d14-c003-4f7d-bf9b-4b21dfb465e1",
        "cursor": {
          "ref": "e1ba865f-5b5c-4d26-a036-f38fba82171c",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b6e0f212-0bab-4f88-9242-7a4dcb734835"
        },
        "item": {
          "id": "c4a73d14-c003-4f7d-bf9b-4b21dfb465e1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "508ede61-d977-4aef-b686-e841f1744a13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581cc75e-cebf-4b11-8b50-68475e2e5c71",
        "cursor": {
          "ref": "758b31b0-ac45-4c36-9875-5234a5728a2d",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4b7a4956-fa73-4bd2-a2a7-0b4f511802bc"
        },
        "item": {
          "id": "581cc75e-cebf-4b11-8b50-68475e2e5c71",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ade010ef-9223-4c7b-9748-0b7003ef2dac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581cc75e-cebf-4b11-8b50-68475e2e5c71",
        "cursor": {
          "ref": "758b31b0-ac45-4c36-9875-5234a5728a2d",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4b7a4956-fa73-4bd2-a2a7-0b4f511802bc"
        },
        "item": {
          "id": "581cc75e-cebf-4b11-8b50-68475e2e5c71",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ade010ef-9223-4c7b-9748-0b7003ef2dac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2fdc80-87fe-48fc-88ab-1f8679ef93f5",
        "cursor": {
          "ref": "b65b503e-0d2a-4f84-adf7-662042fb6fe9",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cd8a01e1-8f80-4210-930b-84a28bc5867f"
        },
        "item": {
          "id": "ed2fdc80-87fe-48fc-88ab-1f8679ef93f5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5206c5b3-0560-4389-8de4-8df7fd9ecdcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2fdc80-87fe-48fc-88ab-1f8679ef93f5",
        "cursor": {
          "ref": "b65b503e-0d2a-4f84-adf7-662042fb6fe9",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cd8a01e1-8f80-4210-930b-84a28bc5867f"
        },
        "item": {
          "id": "ed2fdc80-87fe-48fc-88ab-1f8679ef93f5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5206c5b3-0560-4389-8de4-8df7fd9ecdcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5014b1d-a154-423f-95dd-d982b0f6136a",
        "cursor": {
          "ref": "4412c80d-567f-4eb9-a58a-0d1f95b03a2a",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "402715ce-b0bd-4730-becc-238d7d80b652"
        },
        "item": {
          "id": "c5014b1d-a154-423f-95dd-d982b0f6136a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e19845e2-3a3d-4be8-b225-da3ef981b8b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5014b1d-a154-423f-95dd-d982b0f6136a",
        "cursor": {
          "ref": "4412c80d-567f-4eb9-a58a-0d1f95b03a2a",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "402715ce-b0bd-4730-becc-238d7d80b652"
        },
        "item": {
          "id": "c5014b1d-a154-423f-95dd-d982b0f6136a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e19845e2-3a3d-4be8-b225-da3ef981b8b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72dd140-6e64-447f-9cb2-fc54d8705d6d",
        "cursor": {
          "ref": "315a5f7e-140d-4917-9979-437b7b8514dd",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "24a02631-9056-4eaa-851f-8a5bb31d4465"
        },
        "item": {
          "id": "a72dd140-6e64-447f-9cb2-fc54d8705d6d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b4b1771b-00aa-4739-8aa2-610ec0ed54bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72dd140-6e64-447f-9cb2-fc54d8705d6d",
        "cursor": {
          "ref": "315a5f7e-140d-4917-9979-437b7b8514dd",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "24a02631-9056-4eaa-851f-8a5bb31d4465"
        },
        "item": {
          "id": "a72dd140-6e64-447f-9cb2-fc54d8705d6d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b4b1771b-00aa-4739-8aa2-610ec0ed54bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c89883-f4d5-46e0-ba6a-469c04201357",
        "cursor": {
          "ref": "f3ea0836-a726-4a12-af10-563e502740e2",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "17b64679-a242-41e9-83ed-f9fe2e64f0d1"
        },
        "item": {
          "id": "b0c89883-f4d5-46e0-ba6a-469c04201357",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "22addf17-8a08-4a94-a689-aaf1f691153d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c89883-f4d5-46e0-ba6a-469c04201357",
        "cursor": {
          "ref": "f3ea0836-a726-4a12-af10-563e502740e2",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "17b64679-a242-41e9-83ed-f9fe2e64f0d1"
        },
        "item": {
          "id": "b0c89883-f4d5-46e0-ba6a-469c04201357",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "22addf17-8a08-4a94-a689-aaf1f691153d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca4246d-0b9e-4f2d-acbb-e037589cc98f",
        "cursor": {
          "ref": "15bddfcc-f6a5-44c6-982e-ad797110f472",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ff74dbbe-7d8f-4c19-820b-efc62ba3f3b9"
        },
        "item": {
          "id": "7ca4246d-0b9e-4f2d-acbb-e037589cc98f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d0560702-ffb2-4a74-87a7-dc07e0ee9434",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca4246d-0b9e-4f2d-acbb-e037589cc98f",
        "cursor": {
          "ref": "15bddfcc-f6a5-44c6-982e-ad797110f472",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ff74dbbe-7d8f-4c19-820b-efc62ba3f3b9"
        },
        "item": {
          "id": "7ca4246d-0b9e-4f2d-acbb-e037589cc98f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d0560702-ffb2-4a74-87a7-dc07e0ee9434",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c658d8-c52c-4dfb-8316-4d598f1c77f3",
        "cursor": {
          "ref": "a5b58c25-8396-4888-80c2-0cdcd00fbf8b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d1d37d7c-a01e-4db6-b5b3-c69f5ac6c89a"
        },
        "item": {
          "id": "27c658d8-c52c-4dfb-8316-4d598f1c77f3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "479063c9-f931-4291-ade3-0ef2f8d5e2a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c658d8-c52c-4dfb-8316-4d598f1c77f3",
        "cursor": {
          "ref": "a5b58c25-8396-4888-80c2-0cdcd00fbf8b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d1d37d7c-a01e-4db6-b5b3-c69f5ac6c89a"
        },
        "item": {
          "id": "27c658d8-c52c-4dfb-8316-4d598f1c77f3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "479063c9-f931-4291-ade3-0ef2f8d5e2a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5a8ef5-64e8-4a2d-8547-61496d732a71",
        "cursor": {
          "ref": "f7e3bed7-ac61-4431-9758-3a03f1193ed0",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "85c78db2-8245-4919-9c09-fa52d42c6414"
        },
        "item": {
          "id": "eb5a8ef5-64e8-4a2d-8547-61496d732a71",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "78e6e342-7b9f-48c2-8e11-3921ca163c64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5a8ef5-64e8-4a2d-8547-61496d732a71",
        "cursor": {
          "ref": "f7e3bed7-ac61-4431-9758-3a03f1193ed0",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "85c78db2-8245-4919-9c09-fa52d42c6414"
        },
        "item": {
          "id": "eb5a8ef5-64e8-4a2d-8547-61496d732a71",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "78e6e342-7b9f-48c2-8e11-3921ca163c64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204a4d0e-9ee1-499f-bc60-e0a35faec2b9",
        "cursor": {
          "ref": "b4a0d6a0-73a7-48ee-b4a2-e39bdc238df8",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b55a0a22-1697-411c-a359-198e8589f00d"
        },
        "item": {
          "id": "204a4d0e-9ee1-499f-bc60-e0a35faec2b9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6f99168d-bb04-4a51-a67a-196c5e14d657",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204a4d0e-9ee1-499f-bc60-e0a35faec2b9",
        "cursor": {
          "ref": "b4a0d6a0-73a7-48ee-b4a2-e39bdc238df8",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b55a0a22-1697-411c-a359-198e8589f00d"
        },
        "item": {
          "id": "204a4d0e-9ee1-499f-bc60-e0a35faec2b9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6f99168d-bb04-4a51-a67a-196c5e14d657",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea457fb0-0f2c-4dc6-8b1e-d6d575fb1aa0",
        "cursor": {
          "ref": "648d896f-5e7a-472c-b69a-02b3137fb947",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bc8c6ded-4c79-4861-9c9b-75329933d81a"
        },
        "item": {
          "id": "ea457fb0-0f2c-4dc6-8b1e-d6d575fb1aa0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3e2d2c67-647f-4167-a76c-09ac0f1eb671",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea457fb0-0f2c-4dc6-8b1e-d6d575fb1aa0",
        "cursor": {
          "ref": "648d896f-5e7a-472c-b69a-02b3137fb947",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bc8c6ded-4c79-4861-9c9b-75329933d81a"
        },
        "item": {
          "id": "ea457fb0-0f2c-4dc6-8b1e-d6d575fb1aa0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3e2d2c67-647f-4167-a76c-09ac0f1eb671",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200d1582-0c9c-4015-8c0f-ea298353b140",
        "cursor": {
          "ref": "3fd19998-878f-4842-a954-ef4e8bdb359e",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "51cc6177-ed5f-4a6d-b8da-0f8757ba7177"
        },
        "item": {
          "id": "200d1582-0c9c-4015-8c0f-ea298353b140",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "56696161-e2eb-4007-8e2e-f070fa0959bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200d1582-0c9c-4015-8c0f-ea298353b140",
        "cursor": {
          "ref": "3fd19998-878f-4842-a954-ef4e8bdb359e",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "51cc6177-ed5f-4a6d-b8da-0f8757ba7177"
        },
        "item": {
          "id": "200d1582-0c9c-4015-8c0f-ea298353b140",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "56696161-e2eb-4007-8e2e-f070fa0959bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee8a608-e770-4c3f-9217-812f5f9bbe85",
        "cursor": {
          "ref": "5b4c7aec-0642-4797-b661-bc79b22aa492",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "be2dcd3f-d914-48f1-9e59-96d80868a614"
        },
        "item": {
          "id": "7ee8a608-e770-4c3f-9217-812f5f9bbe85",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d40c823b-f180-4298-9836-a5d4de63d7d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee8a608-e770-4c3f-9217-812f5f9bbe85",
        "cursor": {
          "ref": "5b4c7aec-0642-4797-b661-bc79b22aa492",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "be2dcd3f-d914-48f1-9e59-96d80868a614"
        },
        "item": {
          "id": "7ee8a608-e770-4c3f-9217-812f5f9bbe85",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d40c823b-f180-4298-9836-a5d4de63d7d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57801686-16aa-4530-975c-62ed826273fc",
        "cursor": {
          "ref": "3c4d2b88-16a7-40fe-8ef8-66426b260fb1",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c30c29a6-9d00-4e57-b790-9b60ca240912"
        },
        "item": {
          "id": "57801686-16aa-4530-975c-62ed826273fc",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "40290fcb-b70b-43db-8c0b-763136bc58a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57801686-16aa-4530-975c-62ed826273fc",
        "cursor": {
          "ref": "3c4d2b88-16a7-40fe-8ef8-66426b260fb1",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c30c29a6-9d00-4e57-b790-9b60ca240912"
        },
        "item": {
          "id": "57801686-16aa-4530-975c-62ed826273fc",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "40290fcb-b70b-43db-8c0b-763136bc58a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e487ea-eb1b-45b0-ad3b-10e5e42f2a14",
        "cursor": {
          "ref": "c919c78d-7d25-42cc-ac21-a0196af7218a",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "31dd8138-77a8-4ec5-a0e3-a0307bfe0dd5"
        },
        "item": {
          "id": "37e487ea-eb1b-45b0-ad3b-10e5e42f2a14",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0223de26-4c4d-4c44-98ef-177eb516e0cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e487ea-eb1b-45b0-ad3b-10e5e42f2a14",
        "cursor": {
          "ref": "c919c78d-7d25-42cc-ac21-a0196af7218a",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "31dd8138-77a8-4ec5-a0e3-a0307bfe0dd5"
        },
        "item": {
          "id": "37e487ea-eb1b-45b0-ad3b-10e5e42f2a14",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0223de26-4c4d-4c44-98ef-177eb516e0cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c78cecc-4a8f-4d90-aa00-4203a30f83b3",
        "cursor": {
          "ref": "0d359c25-baca-4570-a74c-aa3f21bc4b7c",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "34f37bf4-469b-4acc-895b-2afd8c82cbcb"
        },
        "item": {
          "id": "5c78cecc-4a8f-4d90-aa00-4203a30f83b3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5f0dd0ff-896f-411e-a3d8-98519800f7ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c78cecc-4a8f-4d90-aa00-4203a30f83b3",
        "cursor": {
          "ref": "0d359c25-baca-4570-a74c-aa3f21bc4b7c",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "34f37bf4-469b-4acc-895b-2afd8c82cbcb"
        },
        "item": {
          "id": "5c78cecc-4a8f-4d90-aa00-4203a30f83b3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5f0dd0ff-896f-411e-a3d8-98519800f7ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7059c06e-f36b-4934-88ec-07735deda7fc",
        "cursor": {
          "ref": "57a2be8b-db2b-41ac-9b4e-ad902bde42e5",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "14048249-da0b-4215-8c3e-9b24cba7b74c"
        },
        "item": {
          "id": "7059c06e-f36b-4934-88ec-07735deda7fc",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d8901027-74d1-4cc8-9aa8-835025b1386d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7059c06e-f36b-4934-88ec-07735deda7fc",
        "cursor": {
          "ref": "57a2be8b-db2b-41ac-9b4e-ad902bde42e5",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "14048249-da0b-4215-8c3e-9b24cba7b74c"
        },
        "item": {
          "id": "7059c06e-f36b-4934-88ec-07735deda7fc",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d8901027-74d1-4cc8-9aa8-835025b1386d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32adf6de-43fe-4125-9dd4-e0270a220e22",
        "cursor": {
          "ref": "0229c4eb-a7a6-499a-addc-332164e5b20f",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f2207163-0442-4567-ae7e-7f2a0f1b50ca"
        },
        "item": {
          "id": "32adf6de-43fe-4125-9dd4-e0270a220e22",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "60a23444-6c8b-49ee-ab9d-2fca6ccac2cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32adf6de-43fe-4125-9dd4-e0270a220e22",
        "cursor": {
          "ref": "0229c4eb-a7a6-499a-addc-332164e5b20f",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f2207163-0442-4567-ae7e-7f2a0f1b50ca"
        },
        "item": {
          "id": "32adf6de-43fe-4125-9dd4-e0270a220e22",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "60a23444-6c8b-49ee-ab9d-2fca6ccac2cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ff7959-eaec-4926-b95f-ad7425804f9d",
        "cursor": {
          "ref": "61b88546-4730-4780-93ef-bac09e3719e6",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d583e4fc-26f4-4768-9e6b-c3a646196348"
        },
        "item": {
          "id": "23ff7959-eaec-4926-b95f-ad7425804f9d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "16112ac6-5551-4ff0-a4bc-8682bd455737",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ff7959-eaec-4926-b95f-ad7425804f9d",
        "cursor": {
          "ref": "61b88546-4730-4780-93ef-bac09e3719e6",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d583e4fc-26f4-4768-9e6b-c3a646196348"
        },
        "item": {
          "id": "23ff7959-eaec-4926-b95f-ad7425804f9d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "16112ac6-5551-4ff0-a4bc-8682bd455737",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c384741-660a-4c91-ba18-089a987d7f4e",
        "cursor": {
          "ref": "8737587f-a067-4659-bbfe-3dd04dc1086d",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "cd76b785-eb81-43a0-ab59-f296b669b078"
        },
        "item": {
          "id": "0c384741-660a-4c91-ba18-089a987d7f4e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d4ad97fa-14df-436a-8cf6-5c92d01b9575",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c384741-660a-4c91-ba18-089a987d7f4e",
        "cursor": {
          "ref": "8737587f-a067-4659-bbfe-3dd04dc1086d",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "cd76b785-eb81-43a0-ab59-f296b669b078"
        },
        "item": {
          "id": "0c384741-660a-4c91-ba18-089a987d7f4e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d4ad97fa-14df-436a-8cf6-5c92d01b9575",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1f8d33-8f81-4f4e-ad53-5c8311ac9097",
        "cursor": {
          "ref": "c5b538b7-0dec-4f79-aba2-da79ef3ba02c",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "31ca7d9f-5162-4ad6-a4ef-6dd24bf0efbb"
        },
        "item": {
          "id": "0d1f8d33-8f81-4f4e-ad53-5c8311ac9097",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "56d6777e-9dfa-4a75-bea6-b1250458728f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1f8d33-8f81-4f4e-ad53-5c8311ac9097",
        "cursor": {
          "ref": "c5b538b7-0dec-4f79-aba2-da79ef3ba02c",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "31ca7d9f-5162-4ad6-a4ef-6dd24bf0efbb"
        },
        "item": {
          "id": "0d1f8d33-8f81-4f4e-ad53-5c8311ac9097",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "56d6777e-9dfa-4a75-bea6-b1250458728f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c44a29-92af-4995-82a9-3861876c1caf",
        "cursor": {
          "ref": "fb7e10c0-8814-48b1-b2e5-85d6a2574bcc",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a7c377b3-8b45-4f97-a426-2b24d1d10520"
        },
        "item": {
          "id": "30c44a29-92af-4995-82a9-3861876c1caf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5908a47c-7da5-4627-89b9-8de46d3017ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c44a29-92af-4995-82a9-3861876c1caf",
        "cursor": {
          "ref": "fb7e10c0-8814-48b1-b2e5-85d6a2574bcc",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a7c377b3-8b45-4f97-a426-2b24d1d10520"
        },
        "item": {
          "id": "30c44a29-92af-4995-82a9-3861876c1caf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5908a47c-7da5-4627-89b9-8de46d3017ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863af929-0f33-4657-b600-4f248288954c",
        "cursor": {
          "ref": "f08a1360-3e7b-4f6a-973a-f990facf562d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fc6e2197-fbf6-4f46-8d08-9ad615ae613c"
        },
        "item": {
          "id": "863af929-0f33-4657-b600-4f248288954c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a7de43d7-ad5b-4dfd-81ba-1a5f692b3741",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863af929-0f33-4657-b600-4f248288954c",
        "cursor": {
          "ref": "f08a1360-3e7b-4f6a-973a-f990facf562d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fc6e2197-fbf6-4f46-8d08-9ad615ae613c"
        },
        "item": {
          "id": "863af929-0f33-4657-b600-4f248288954c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a7de43d7-ad5b-4dfd-81ba-1a5f692b3741",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83139bdf-88a7-47a2-af37-ead6b5cdd431",
        "cursor": {
          "ref": "8aaea239-99d1-4168-ad96-dddcfaf68cd9",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "21d0b8b8-080e-42a1-84bb-56f821ef8a68"
        },
        "item": {
          "id": "83139bdf-88a7-47a2-af37-ead6b5cdd431",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "11a43459-c587-4927-818a-6033179e8746",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83139bdf-88a7-47a2-af37-ead6b5cdd431",
        "cursor": {
          "ref": "8aaea239-99d1-4168-ad96-dddcfaf68cd9",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "21d0b8b8-080e-42a1-84bb-56f821ef8a68"
        },
        "item": {
          "id": "83139bdf-88a7-47a2-af37-ead6b5cdd431",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "11a43459-c587-4927-818a-6033179e8746",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835fcd5f-7123-454e-87dd-9dee3d34f9ec",
        "cursor": {
          "ref": "dfae5523-868c-457a-9957-821f7f5f05dc",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "80007737-d081-4cd1-984d-fdead16d153a"
        },
        "item": {
          "id": "835fcd5f-7123-454e-87dd-9dee3d34f9ec",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9245fded-32b3-4275-bfd3-296e9df6d4bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835fcd5f-7123-454e-87dd-9dee3d34f9ec",
        "cursor": {
          "ref": "dfae5523-868c-457a-9957-821f7f5f05dc",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "80007737-d081-4cd1-984d-fdead16d153a"
        },
        "item": {
          "id": "835fcd5f-7123-454e-87dd-9dee3d34f9ec",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9245fded-32b3-4275-bfd3-296e9df6d4bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd76aef-8334-4bb2-82d0-04da1de2c14d",
        "cursor": {
          "ref": "e70bba4e-7547-4987-b82c-e5598fcf8b43",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ae90151a-5478-4091-a877-cca88b23dd91"
        },
        "item": {
          "id": "3bd76aef-8334-4bb2-82d0-04da1de2c14d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a11fa383-2d4c-4347-9693-4659432c373e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd76aef-8334-4bb2-82d0-04da1de2c14d",
        "cursor": {
          "ref": "e70bba4e-7547-4987-b82c-e5598fcf8b43",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ae90151a-5478-4091-a877-cca88b23dd91"
        },
        "item": {
          "id": "3bd76aef-8334-4bb2-82d0-04da1de2c14d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a11fa383-2d4c-4347-9693-4659432c373e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdab38b4-aaef-4a12-8ccc-935a4d8726bf",
        "cursor": {
          "ref": "327d5c2e-5cb3-4f56-9fd2-30242a429a79",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8bb8f961-ab03-42b2-b8d1-8bd7fee2f01d"
        },
        "item": {
          "id": "fdab38b4-aaef-4a12-8ccc-935a4d8726bf",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "91b12c41-2de1-4e35-aa6f-7a14c4e3d187",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdab38b4-aaef-4a12-8ccc-935a4d8726bf",
        "cursor": {
          "ref": "327d5c2e-5cb3-4f56-9fd2-30242a429a79",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8bb8f961-ab03-42b2-b8d1-8bd7fee2f01d"
        },
        "item": {
          "id": "fdab38b4-aaef-4a12-8ccc-935a4d8726bf",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "91b12c41-2de1-4e35-aa6f-7a14c4e3d187",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fd2d2b-53e5-4d0e-a7a7-1704c45b4c2b",
        "cursor": {
          "ref": "0726d684-f975-4003-b54d-f34661bbe3b1",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c69502f1-64ab-4357-b22e-1c2f93c01337"
        },
        "item": {
          "id": "25fd2d2b-53e5-4d0e-a7a7-1704c45b4c2b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f60e60da-9e05-4623-8007-46564b3abfe2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fd2d2b-53e5-4d0e-a7a7-1704c45b4c2b",
        "cursor": {
          "ref": "0726d684-f975-4003-b54d-f34661bbe3b1",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c69502f1-64ab-4357-b22e-1c2f93c01337"
        },
        "item": {
          "id": "25fd2d2b-53e5-4d0e-a7a7-1704c45b4c2b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f60e60da-9e05-4623-8007-46564b3abfe2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a0018b-3d4c-4859-ad9a-80a2cc9ab354",
        "cursor": {
          "ref": "aca57eac-b2c0-4a5e-9cd8-124d3f723369",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a8bc559d-c587-40ec-bcc5-e3865d3b4d5b"
        },
        "item": {
          "id": "b2a0018b-3d4c-4859-ad9a-80a2cc9ab354",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2b4610ae-7408-4c04-ac04-35ca57507914",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a0018b-3d4c-4859-ad9a-80a2cc9ab354",
        "cursor": {
          "ref": "aca57eac-b2c0-4a5e-9cd8-124d3f723369",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a8bc559d-c587-40ec-bcc5-e3865d3b4d5b"
        },
        "item": {
          "id": "b2a0018b-3d4c-4859-ad9a-80a2cc9ab354",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2b4610ae-7408-4c04-ac04-35ca57507914",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9ac28e-3efb-49b2-a755-d03990981751",
        "cursor": {
          "ref": "3683dc48-0632-45fe-91db-75665af5a258",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "aaae67a9-a231-46cc-962d-2cbe5d24eb1e"
        },
        "item": {
          "id": "8f9ac28e-3efb-49b2-a755-d03990981751",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "17acd28b-d527-4559-a74f-d2eaf3251585",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9ac28e-3efb-49b2-a755-d03990981751",
        "cursor": {
          "ref": "3683dc48-0632-45fe-91db-75665af5a258",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "aaae67a9-a231-46cc-962d-2cbe5d24eb1e"
        },
        "item": {
          "id": "8f9ac28e-3efb-49b2-a755-d03990981751",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "17acd28b-d527-4559-a74f-d2eaf3251585",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e037712-fa2a-462a-a2fa-6195cededaf0",
        "cursor": {
          "ref": "94818c21-e50d-4627-820a-1cda30fe565a",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9691c581-580d-4b06-b4d6-ca02cf119129"
        },
        "item": {
          "id": "8e037712-fa2a-462a-a2fa-6195cededaf0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1ffdba16-d955-4c0e-a6b6-2f57616449dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e037712-fa2a-462a-a2fa-6195cededaf0",
        "cursor": {
          "ref": "94818c21-e50d-4627-820a-1cda30fe565a",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9691c581-580d-4b06-b4d6-ca02cf119129"
        },
        "item": {
          "id": "8e037712-fa2a-462a-a2fa-6195cededaf0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1ffdba16-d955-4c0e-a6b6-2f57616449dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc4b7a3-4bf6-48e2-a325-28b2ab1ffb2b",
        "cursor": {
          "ref": "9199dc48-fba1-4654-8633-25eff29a1865",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d66fdde0-be07-47c0-88bb-d66e16613389"
        },
        "item": {
          "id": "ccc4b7a3-4bf6-48e2-a325-28b2ab1ffb2b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9d966eab-b11c-4fa5-bbc5-8f6d57f5ac9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc4b7a3-4bf6-48e2-a325-28b2ab1ffb2b",
        "cursor": {
          "ref": "9199dc48-fba1-4654-8633-25eff29a1865",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d66fdde0-be07-47c0-88bb-d66e16613389"
        },
        "item": {
          "id": "ccc4b7a3-4bf6-48e2-a325-28b2ab1ffb2b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9d966eab-b11c-4fa5-bbc5-8f6d57f5ac9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9902165c-72f1-4ddd-86c4-d14708bc7f5a",
        "cursor": {
          "ref": "c630499c-0856-40c9-b0ca-c7d39b1a2d6f",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3c18bab6-2726-4e26-80de-da75644915cc"
        },
        "item": {
          "id": "9902165c-72f1-4ddd-86c4-d14708bc7f5a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "72858dfe-0699-44fe-b9b0-74e75cc2827b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9902165c-72f1-4ddd-86c4-d14708bc7f5a",
        "cursor": {
          "ref": "c630499c-0856-40c9-b0ca-c7d39b1a2d6f",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3c18bab6-2726-4e26-80de-da75644915cc"
        },
        "item": {
          "id": "9902165c-72f1-4ddd-86c4-d14708bc7f5a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "72858dfe-0699-44fe-b9b0-74e75cc2827b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16419fe8-bd70-407d-b5a5-3fe030b17ef7",
        "cursor": {
          "ref": "e66c3d96-a857-44f5-a97f-3ae6f5d59b33",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "474e83a3-57af-4d8f-a59f-0128118a2456"
        },
        "item": {
          "id": "16419fe8-bd70-407d-b5a5-3fe030b17ef7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2980145a-dbfd-477a-966f-8bdd31b5c14d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16419fe8-bd70-407d-b5a5-3fe030b17ef7",
        "cursor": {
          "ref": "e66c3d96-a857-44f5-a97f-3ae6f5d59b33",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "474e83a3-57af-4d8f-a59f-0128118a2456"
        },
        "item": {
          "id": "16419fe8-bd70-407d-b5a5-3fe030b17ef7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2980145a-dbfd-477a-966f-8bdd31b5c14d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7447cd6d-9a10-42b4-ba91-8ca8999d0b6f",
        "cursor": {
          "ref": "07a746ff-c1c9-44d6-8acb-bdc83894e926",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "64b2f718-2338-40de-b774-e1789aea1047"
        },
        "item": {
          "id": "7447cd6d-9a10-42b4-ba91-8ca8999d0b6f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a7d744d2-fb36-4127-8caf-cc608e74f8a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7447cd6d-9a10-42b4-ba91-8ca8999d0b6f",
        "cursor": {
          "ref": "07a746ff-c1c9-44d6-8acb-bdc83894e926",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "64b2f718-2338-40de-b774-e1789aea1047"
        },
        "item": {
          "id": "7447cd6d-9a10-42b4-ba91-8ca8999d0b6f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a7d744d2-fb36-4127-8caf-cc608e74f8a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a35910-4993-4f75-a57d-d0fe5d456f2c",
        "cursor": {
          "ref": "da1ab57b-41b5-4cbc-a253-b8f4bdd71844",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6a26d4b1-3495-4c38-bc59-c99020b7b16f"
        },
        "item": {
          "id": "46a35910-4993-4f75-a57d-d0fe5d456f2c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7741eb4a-5c19-428a-b369-94d19665277e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a35910-4993-4f75-a57d-d0fe5d456f2c",
        "cursor": {
          "ref": "da1ab57b-41b5-4cbc-a253-b8f4bdd71844",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6a26d4b1-3495-4c38-bc59-c99020b7b16f"
        },
        "item": {
          "id": "46a35910-4993-4f75-a57d-d0fe5d456f2c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7741eb4a-5c19-428a-b369-94d19665277e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edd358a-0c78-4def-8ed2-7064ae5832d2",
        "cursor": {
          "ref": "144466c5-58e1-4961-9aac-4cac6e0e0846",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ff36dc1b-93c1-443e-8d2d-cd1bae4ecfb0"
        },
        "item": {
          "id": "5edd358a-0c78-4def-8ed2-7064ae5832d2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bc1db8b5-7942-4863-b589-4260a0647e86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edd358a-0c78-4def-8ed2-7064ae5832d2",
        "cursor": {
          "ref": "144466c5-58e1-4961-9aac-4cac6e0e0846",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ff36dc1b-93c1-443e-8d2d-cd1bae4ecfb0"
        },
        "item": {
          "id": "5edd358a-0c78-4def-8ed2-7064ae5832d2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bc1db8b5-7942-4863-b589-4260a0647e86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ca9ee7-9817-4ce5-bf6e-ae475b3bf43a",
        "cursor": {
          "ref": "7398989e-7790-4409-86a0-0cf020caa28a",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "71e1916d-d65c-467f-8c90-3921ced8e305"
        },
        "item": {
          "id": "62ca9ee7-9817-4ce5-bf6e-ae475b3bf43a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "193d72b8-a76a-41d0-a0d9-c94f021c231c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ca9ee7-9817-4ce5-bf6e-ae475b3bf43a",
        "cursor": {
          "ref": "7398989e-7790-4409-86a0-0cf020caa28a",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "71e1916d-d65c-467f-8c90-3921ced8e305"
        },
        "item": {
          "id": "62ca9ee7-9817-4ce5-bf6e-ae475b3bf43a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "193d72b8-a76a-41d0-a0d9-c94f021c231c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f3721e-40a7-436f-87ef-622313597db6",
        "cursor": {
          "ref": "fc65797c-1a13-45eb-9893-47954160a321",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3105b584-6e26-4732-a6ef-64cd638087bf"
        },
        "item": {
          "id": "81f3721e-40a7-436f-87ef-622313597db6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "902c2c4c-b0ad-49a3-80d5-72a577f52342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f3721e-40a7-436f-87ef-622313597db6",
        "cursor": {
          "ref": "fc65797c-1a13-45eb-9893-47954160a321",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3105b584-6e26-4732-a6ef-64cd638087bf"
        },
        "item": {
          "id": "81f3721e-40a7-436f-87ef-622313597db6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "902c2c4c-b0ad-49a3-80d5-72a577f52342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66c7a2c-ab3a-49cf-b783-dbe24d980844",
        "cursor": {
          "ref": "5ed6d6ff-adb7-4c59-8c82-3c4cd630995d",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d1c25a34-4f16-4c2b-a05f-8d6ebb56b09b"
        },
        "item": {
          "id": "b66c7a2c-ab3a-49cf-b783-dbe24d980844",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8695fe1d-f318-4ee2-84e0-08443f4b04f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66c7a2c-ab3a-49cf-b783-dbe24d980844",
        "cursor": {
          "ref": "5ed6d6ff-adb7-4c59-8c82-3c4cd630995d",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d1c25a34-4f16-4c2b-a05f-8d6ebb56b09b"
        },
        "item": {
          "id": "b66c7a2c-ab3a-49cf-b783-dbe24d980844",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8695fe1d-f318-4ee2-84e0-08443f4b04f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1203bc3-5256-4d63-adc6-19256d286524",
        "cursor": {
          "ref": "0bb4a04d-8a3a-4530-9ec2-35f26b43497c",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b78438ed-d766-4949-a893-22d26f04bec5"
        },
        "item": {
          "id": "b1203bc3-5256-4d63-adc6-19256d286524",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "5f5f8d0e-d176-4f65-a4bb-ed9760ca5e13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "b1203bc3-5256-4d63-adc6-19256d286524",
        "cursor": {
          "ref": "0bb4a04d-8a3a-4530-9ec2-35f26b43497c",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b78438ed-d766-4949-a893-22d26f04bec5"
        },
        "item": {
          "id": "b1203bc3-5256-4d63-adc6-19256d286524",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "5f5f8d0e-d176-4f65-a4bb-ed9760ca5e13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "2db51b4a-5c1b-4378-a521-eb03bd33dc34",
        "cursor": {
          "ref": "79574737-342b-4a05-9093-a578a0ca554e",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5a1079a8-b9fe-458e-a029-001c0bc74ad2"
        },
        "item": {
          "id": "2db51b4a-5c1b-4378-a521-eb03bd33dc34",
          "name": "credentials_issue"
        },
        "response": {
          "id": "59f6535b-74fd-4a42-8ca2-ee961a39a785",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "2db51b4a-5c1b-4378-a521-eb03bd33dc34",
        "cursor": {
          "ref": "79574737-342b-4a05-9093-a578a0ca554e",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5a1079a8-b9fe-458e-a029-001c0bc74ad2"
        },
        "item": {
          "id": "2db51b4a-5c1b-4378-a521-eb03bd33dc34",
          "name": "credentials_issue"
        },
        "response": {
          "id": "59f6535b-74fd-4a42-8ca2-ee961a39a785",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "ad21c5c3-7190-48a5-8683-1158d2c70196",
        "cursor": {
          "ref": "89d61305-a0e1-4d1f-9a4c-60ac37e398b6",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "edb8fe80-7361-42cb-8dee-661c114fdd56"
        },
        "item": {
          "id": "ad21c5c3-7190-48a5-8683-1158d2c70196",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "25c15345-c064-4d1f-81e3-ac2cae79f081",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "ad21c5c3-7190-48a5-8683-1158d2c70196",
        "cursor": {
          "ref": "89d61305-a0e1-4d1f-9a4c-60ac37e398b6",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "edb8fe80-7361-42cb-8dee-661c114fdd56"
        },
        "item": {
          "id": "ad21c5c3-7190-48a5-8683-1158d2c70196",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "25c15345-c064-4d1f-81e3-ac2cae79f081",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "441c9ce5-75b1-453a-af3b-b3a0bf0d6381",
        "cursor": {
          "ref": "fbb1460d-952e-4b29-ae13-b30036e0b3d6",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "22b55c34-ff48-4f3a-a85d-01b4b410d691"
        },
        "item": {
          "id": "441c9ce5-75b1-453a-af3b-b3a0bf0d6381",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b41a3d45-6f0e-418a-8fda-3ead39736fb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "441c9ce5-75b1-453a-af3b-b3a0bf0d6381",
        "cursor": {
          "ref": "fbb1460d-952e-4b29-ae13-b30036e0b3d6",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "22b55c34-ff48-4f3a-a85d-01b4b410d691"
        },
        "item": {
          "id": "441c9ce5-75b1-453a-af3b-b3a0bf0d6381",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b41a3d45-6f0e-418a-8fda-3ead39736fb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "ca7c57a4-dffc-42fa-a4f5-95c319f1db3f",
        "cursor": {
          "ref": "b881d1ba-c783-414a-abf3-0dc56499b8f4",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9d1632b8-52a3-4844-a217-da04fc2000c3"
        },
        "item": {
          "id": "ca7c57a4-dffc-42fa-a4f5-95c319f1db3f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b8655cb4-34a9-4c76-9609-8c1581191566",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "ca7c57a4-dffc-42fa-a4f5-95c319f1db3f",
        "cursor": {
          "ref": "b881d1ba-c783-414a-abf3-0dc56499b8f4",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9d1632b8-52a3-4844-a217-da04fc2000c3"
        },
        "item": {
          "id": "ca7c57a4-dffc-42fa-a4f5-95c319f1db3f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b8655cb4-34a9-4c76-9609-8c1581191566",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "147d3eac-da22-496d-b268-7fcd0f2f9b5a",
        "cursor": {
          "ref": "1f0ce585-fa0f-400c-b534-72ec0ce8c0d6",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "65fd5b84-ebe0-4b03-8ba5-04e9cbc43eea"
        },
        "item": {
          "id": "147d3eac-da22-496d-b268-7fcd0f2f9b5a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "77c16b36-92ab-4bac-8535-10dfecb3279a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "147d3eac-da22-496d-b268-7fcd0f2f9b5a",
        "cursor": {
          "ref": "1f0ce585-fa0f-400c-b534-72ec0ce8c0d6",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "65fd5b84-ebe0-4b03-8ba5-04e9cbc43eea"
        },
        "item": {
          "id": "147d3eac-da22-496d-b268-7fcd0f2f9b5a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "77c16b36-92ab-4bac-8535-10dfecb3279a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "1b0a02f4-0a9f-43f0-99bd-3def17a9ffab",
        "cursor": {
          "ref": "b3553674-fd9b-4b5c-a0ee-a2e418488cec",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2fe88360-2ebd-4f02-acf0-511de68340c8"
        },
        "item": {
          "id": "1b0a02f4-0a9f-43f0-99bd-3def17a9ffab",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c339adf0-a30d-4a44-a4f0-13099d79cd54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "1b0a02f4-0a9f-43f0-99bd-3def17a9ffab",
        "cursor": {
          "ref": "b3553674-fd9b-4b5c-a0ee-a2e418488cec",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2fe88360-2ebd-4f02-acf0-511de68340c8"
        },
        "item": {
          "id": "1b0a02f4-0a9f-43f0-99bd-3def17a9ffab",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c339adf0-a30d-4a44-a4f0-13099d79cd54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "1709e25a-3ca4-4670-aa76-93629a3201d6",
        "cursor": {
          "ref": "ef0b6909-c0ab-48ed-ba7b-b7e58c1c29a0",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e25c0090-3cb9-4fea-aaa9-63b5e4ed0126"
        },
        "item": {
          "id": "1709e25a-3ca4-4670-aa76-93629a3201d6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "34008c6f-3112-4804-ba47-270a8b1b9b28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1709e25a-3ca4-4670-aa76-93629a3201d6",
        "cursor": {
          "ref": "ef0b6909-c0ab-48ed-ba7b-b7e58c1c29a0",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e25c0090-3cb9-4fea-aaa9-63b5e4ed0126"
        },
        "item": {
          "id": "1709e25a-3ca4-4670-aa76-93629a3201d6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "34008c6f-3112-4804-ba47-270a8b1b9b28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b194f0-9437-4194-b394-b09b145e3092",
        "cursor": {
          "ref": "d55a141d-1cc7-47db-bc70-34f0426e985d",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1cb29b2c-85b0-4cbc-95d3-f02cd07063a2"
        },
        "item": {
          "id": "d8b194f0-9437-4194-b394-b09b145e3092",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d5e615a9-b75c-4ea9-b92f-de700308df26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b194f0-9437-4194-b394-b09b145e3092",
        "cursor": {
          "ref": "d55a141d-1cc7-47db-bc70-34f0426e985d",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1cb29b2c-85b0-4cbc-95d3-f02cd07063a2"
        },
        "item": {
          "id": "d8b194f0-9437-4194-b394-b09b145e3092",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d5e615a9-b75c-4ea9-b92f-de700308df26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9aefaf-d547-4dbc-a686-627e97f42856",
        "cursor": {
          "ref": "a19af339-a279-42cc-9390-d9f2f24e2600",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "525343e2-3ed7-434e-9bf8-f915c4bc0f92"
        },
        "item": {
          "id": "4c9aefaf-d547-4dbc-a686-627e97f42856",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7baa1763-d226-4d96-9fce-25a90e86c0be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9aefaf-d547-4dbc-a686-627e97f42856",
        "cursor": {
          "ref": "a19af339-a279-42cc-9390-d9f2f24e2600",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "525343e2-3ed7-434e-9bf8-f915c4bc0f92"
        },
        "item": {
          "id": "4c9aefaf-d547-4dbc-a686-627e97f42856",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7baa1763-d226-4d96-9fce-25a90e86c0be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77a7411-9767-4b21-93cd-697fa736c23a",
        "cursor": {
          "ref": "2aab7314-5bdc-49a0-8058-d8a5da033ba4",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "152a2325-b173-4860-801a-aac80a4117c0"
        },
        "item": {
          "id": "a77a7411-9767-4b21-93cd-697fa736c23a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e33e479a-7bf8-402c-b1a0-35ee669b2658",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77a7411-9767-4b21-93cd-697fa736c23a",
        "cursor": {
          "ref": "2aab7314-5bdc-49a0-8058-d8a5da033ba4",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "152a2325-b173-4860-801a-aac80a4117c0"
        },
        "item": {
          "id": "a77a7411-9767-4b21-93cd-697fa736c23a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e33e479a-7bf8-402c-b1a0-35ee669b2658",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d829382c-c61d-4d4e-a504-a0201c3b6a0a",
        "cursor": {
          "ref": "ae80e14f-5169-4b81-a3e5-450a4a22d034",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fff1711d-16ae-4fa9-a078-749e4ff7d3f0"
        },
        "item": {
          "id": "d829382c-c61d-4d4e-a504-a0201c3b6a0a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2834a60e-7a92-47f9-843b-0f14a509d2db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d829382c-c61d-4d4e-a504-a0201c3b6a0a",
        "cursor": {
          "ref": "ae80e14f-5169-4b81-a3e5-450a4a22d034",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fff1711d-16ae-4fa9-a078-749e4ff7d3f0"
        },
        "item": {
          "id": "d829382c-c61d-4d4e-a504-a0201c3b6a0a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2834a60e-7a92-47f9-843b-0f14a509d2db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92103be1-851a-41a3-be5c-9949dd492479",
        "cursor": {
          "ref": "96b58e69-9e86-45d7-bce2-274122b5835c",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c6548565-357f-4d4c-b545-ab14420f642e"
        },
        "item": {
          "id": "92103be1-851a-41a3-be5c-9949dd492479",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0940f309-7fc9-4392-a59f-97f604d2e4e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92103be1-851a-41a3-be5c-9949dd492479",
        "cursor": {
          "ref": "96b58e69-9e86-45d7-bce2-274122b5835c",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c6548565-357f-4d4c-b545-ab14420f642e"
        },
        "item": {
          "id": "92103be1-851a-41a3-be5c-9949dd492479",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0940f309-7fc9-4392-a59f-97f604d2e4e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1be29de-e7c2-4ea5-9b85-831ea0349866",
        "cursor": {
          "ref": "4fa9a320-f490-4716-848b-051dd6174928",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e5a77c7d-d887-461d-8c5d-634a8e93a951"
        },
        "item": {
          "id": "b1be29de-e7c2-4ea5-9b85-831ea0349866",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cc5f8367-46c8-4188-b067-12f2bdf6cc07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1be29de-e7c2-4ea5-9b85-831ea0349866",
        "cursor": {
          "ref": "4fa9a320-f490-4716-848b-051dd6174928",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e5a77c7d-d887-461d-8c5d-634a8e93a951"
        },
        "item": {
          "id": "b1be29de-e7c2-4ea5-9b85-831ea0349866",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cc5f8367-46c8-4188-b067-12f2bdf6cc07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67329aac-1d64-462a-bbf5-30312edbfecd",
        "cursor": {
          "ref": "95789e7d-58ae-4d33-8457-70d40567e477",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6854b342-9845-4aae-84b6-d9e1d4f27daf"
        },
        "item": {
          "id": "67329aac-1d64-462a-bbf5-30312edbfecd",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "73df1b93-7e4e-4512-8e49-5dad1b407f58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67329aac-1d64-462a-bbf5-30312edbfecd",
        "cursor": {
          "ref": "95789e7d-58ae-4d33-8457-70d40567e477",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6854b342-9845-4aae-84b6-d9e1d4f27daf"
        },
        "item": {
          "id": "67329aac-1d64-462a-bbf5-30312edbfecd",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "73df1b93-7e4e-4512-8e49-5dad1b407f58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bcf227-6c09-4908-adbf-b5f1cc703e39",
        "cursor": {
          "ref": "07aa847e-e6b0-4360-8840-ee05cae2c312",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0e5bc1e9-2c09-4b74-ab2c-669390989bea"
        },
        "item": {
          "id": "d3bcf227-6c09-4908-adbf-b5f1cc703e39",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3b548e65-40b8-4011-b430-e220120bc5ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bcf227-6c09-4908-adbf-b5f1cc703e39",
        "cursor": {
          "ref": "07aa847e-e6b0-4360-8840-ee05cae2c312",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0e5bc1e9-2c09-4b74-ab2c-669390989bea"
        },
        "item": {
          "id": "d3bcf227-6c09-4908-adbf-b5f1cc703e39",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3b548e65-40b8-4011-b430-e220120bc5ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba972ba-18ef-4b29-9ef3-ffe0314dc7b3",
        "cursor": {
          "ref": "f18fcad1-81e0-4c6d-944b-f52a4fac8c97",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d1d13a28-cf06-4955-bd30-638c4a4482a6"
        },
        "item": {
          "id": "3ba972ba-18ef-4b29-9ef3-ffe0314dc7b3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4625d896-8250-4c32-98d3-60d670f7530d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba972ba-18ef-4b29-9ef3-ffe0314dc7b3",
        "cursor": {
          "ref": "f18fcad1-81e0-4c6d-944b-f52a4fac8c97",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d1d13a28-cf06-4955-bd30-638c4a4482a6"
        },
        "item": {
          "id": "3ba972ba-18ef-4b29-9ef3-ffe0314dc7b3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4625d896-8250-4c32-98d3-60d670f7530d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733ee0be-13e4-4071-afc0-9253adaad0d5",
        "cursor": {
          "ref": "1b4ee1ef-7d76-4522-ac3c-064bfe4f033d",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "31f13381-fecd-42a2-80e6-05b447b6268e"
        },
        "item": {
          "id": "733ee0be-13e4-4071-afc0-9253adaad0d5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "080972b1-8b7c-411a-952d-e60f2162d02a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733ee0be-13e4-4071-afc0-9253adaad0d5",
        "cursor": {
          "ref": "1b4ee1ef-7d76-4522-ac3c-064bfe4f033d",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "31f13381-fecd-42a2-80e6-05b447b6268e"
        },
        "item": {
          "id": "733ee0be-13e4-4071-afc0-9253adaad0d5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "080972b1-8b7c-411a-952d-e60f2162d02a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b243fa75-28d2-44d1-b659-ddb7d7611e08",
        "cursor": {
          "ref": "d9a22b2f-3a13-4b41-a8e2-7a1e865bdb3e",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a73dad12-50d5-46ad-8c13-16bd2bde6342"
        },
        "item": {
          "id": "b243fa75-28d2-44d1-b659-ddb7d7611e08",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "14ba2b40-6f05-48b6-9489-2ffdc55f2f1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 179,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b243fa75-28d2-44d1-b659-ddb7d7611e08",
        "cursor": {
          "ref": "d9a22b2f-3a13-4b41-a8e2-7a1e865bdb3e",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a73dad12-50d5-46ad-8c13-16bd2bde6342"
        },
        "item": {
          "id": "b243fa75-28d2-44d1-b659-ddb7d7611e08",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "14ba2b40-6f05-48b6-9489-2ffdc55f2f1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 179,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7345392e-d31b-4a4c-859b-cff9baea9f24",
        "cursor": {
          "ref": "f73d771c-d9de-47f6-8fec-3ec5c89df65d",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a7bb1596-179a-4fda-b21c-1f6c0c04c1b9"
        },
        "item": {
          "id": "7345392e-d31b-4a4c-859b-cff9baea9f24",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0db82d8e-536b-4d2b-9a26-e46f7d28cd14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7345392e-d31b-4a4c-859b-cff9baea9f24",
        "cursor": {
          "ref": "f73d771c-d9de-47f6-8fec-3ec5c89df65d",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a7bb1596-179a-4fda-b21c-1f6c0c04c1b9"
        },
        "item": {
          "id": "7345392e-d31b-4a4c-859b-cff9baea9f24",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0db82d8e-536b-4d2b-9a26-e46f7d28cd14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a17298a-9c38-4766-b45c-e62845569418",
        "cursor": {
          "ref": "80d70161-5ffe-483e-aa98-09e1e729d561",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6f6ab579-e6cf-447a-a9de-d80d65f111ac"
        },
        "item": {
          "id": "1a17298a-9c38-4766-b45c-e62845569418",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7149176b-80c3-4eb5-8939-c4b73929eb4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a17298a-9c38-4766-b45c-e62845569418",
        "cursor": {
          "ref": "80d70161-5ffe-483e-aa98-09e1e729d561",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6f6ab579-e6cf-447a-a9de-d80d65f111ac"
        },
        "item": {
          "id": "1a17298a-9c38-4766-b45c-e62845569418",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7149176b-80c3-4eb5-8939-c4b73929eb4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17dbdb31-e983-4c7f-9142-66a886729247",
        "cursor": {
          "ref": "492de050-138f-44ae-84e9-a663d6dc1a7b",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "09c76637-091c-4287-8bda-318bd7269d01"
        },
        "item": {
          "id": "17dbdb31-e983-4c7f-9142-66a886729247",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f0f834e4-b1a1-4d01-8eb4-bbae6083f342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17dbdb31-e983-4c7f-9142-66a886729247",
        "cursor": {
          "ref": "492de050-138f-44ae-84e9-a663d6dc1a7b",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "09c76637-091c-4287-8bda-318bd7269d01"
        },
        "item": {
          "id": "17dbdb31-e983-4c7f-9142-66a886729247",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f0f834e4-b1a1-4d01-8eb4-bbae6083f342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d384a4-3c7d-4047-a945-a66dc85bad4b",
        "cursor": {
          "ref": "f63f7c35-fa81-413f-a47d-14455e92aaad",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e8c830a3-0c42-4fcd-8473-2f813367c4f6"
        },
        "item": {
          "id": "b6d384a4-3c7d-4047-a945-a66dc85bad4b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a8edd2cf-254b-4b3f-81cd-e8148f29d89b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d384a4-3c7d-4047-a945-a66dc85bad4b",
        "cursor": {
          "ref": "f63f7c35-fa81-413f-a47d-14455e92aaad",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e8c830a3-0c42-4fcd-8473-2f813367c4f6"
        },
        "item": {
          "id": "b6d384a4-3c7d-4047-a945-a66dc85bad4b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a8edd2cf-254b-4b3f-81cd-e8148f29d89b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56884a0-fe7a-490a-8b5f-821e7fa82606",
        "cursor": {
          "ref": "d68e9117-2d02-41ea-a995-9e31183fe749",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "773f9b93-1a67-4384-ad69-aa17ea19a454"
        },
        "item": {
          "id": "d56884a0-fe7a-490a-8b5f-821e7fa82606",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "07aa34ef-e459-4023-a320-01e8fef23aff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56884a0-fe7a-490a-8b5f-821e7fa82606",
        "cursor": {
          "ref": "d68e9117-2d02-41ea-a995-9e31183fe749",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "773f9b93-1a67-4384-ad69-aa17ea19a454"
        },
        "item": {
          "id": "d56884a0-fe7a-490a-8b5f-821e7fa82606",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "07aa34ef-e459-4023-a320-01e8fef23aff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1feddddf-41be-4fd6-80b9-ea627d0e315f",
        "cursor": {
          "ref": "9c911fb3-d896-42b8-9b58-90670bae369e",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "12137f15-243e-447d-b428-210de4d76c0f"
        },
        "item": {
          "id": "1feddddf-41be-4fd6-80b9-ea627d0e315f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ff2b7f7f-fd72-4085-8556-106b03141480",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1feddddf-41be-4fd6-80b9-ea627d0e315f",
        "cursor": {
          "ref": "9c911fb3-d896-42b8-9b58-90670bae369e",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "12137f15-243e-447d-b428-210de4d76c0f"
        },
        "item": {
          "id": "1feddddf-41be-4fd6-80b9-ea627d0e315f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ff2b7f7f-fd72-4085-8556-106b03141480",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415bff80-a70f-42c2-a5c2-f13b649413c1",
        "cursor": {
          "ref": "255a294e-1cb9-424a-b4db-8cd592fe5ebc",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "842d920c-2b8b-4c38-9100-59fc94a39c63"
        },
        "item": {
          "id": "415bff80-a70f-42c2-a5c2-f13b649413c1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e40a3b16-0059-4d4b-ab12-431d22f63556",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415bff80-a70f-42c2-a5c2-f13b649413c1",
        "cursor": {
          "ref": "255a294e-1cb9-424a-b4db-8cd592fe5ebc",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "842d920c-2b8b-4c38-9100-59fc94a39c63"
        },
        "item": {
          "id": "415bff80-a70f-42c2-a5c2-f13b649413c1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e40a3b16-0059-4d4b-ab12-431d22f63556",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a91fe92-7d65-4e6a-9b7c-5fb63bbc0ef7",
        "cursor": {
          "ref": "489f0f8f-76ce-4be9-9653-d96555225831",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "42c8739d-3ab3-4a07-8c67-8d6a685debf1"
        },
        "item": {
          "id": "5a91fe92-7d65-4e6a-9b7c-5fb63bbc0ef7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1f2beb4c-87fa-429c-8631-4eca966c10f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a91fe92-7d65-4e6a-9b7c-5fb63bbc0ef7",
        "cursor": {
          "ref": "489f0f8f-76ce-4be9-9653-d96555225831",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "42c8739d-3ab3-4a07-8c67-8d6a685debf1"
        },
        "item": {
          "id": "5a91fe92-7d65-4e6a-9b7c-5fb63bbc0ef7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1f2beb4c-87fa-429c-8631-4eca966c10f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d984fb2-6989-496e-9b26-f2e31cf921a6",
        "cursor": {
          "ref": "ab015052-caf3-4c42-acb0-7667dbd1e0bb",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0c8c59db-cff6-46cf-8473-f7784c9f64f9"
        },
        "item": {
          "id": "9d984fb2-6989-496e-9b26-f2e31cf921a6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9eef89e9-bcce-4301-8460-7d714f6543a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d984fb2-6989-496e-9b26-f2e31cf921a6",
        "cursor": {
          "ref": "ab015052-caf3-4c42-acb0-7667dbd1e0bb",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0c8c59db-cff6-46cf-8473-f7784c9f64f9"
        },
        "item": {
          "id": "9d984fb2-6989-496e-9b26-f2e31cf921a6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9eef89e9-bcce-4301-8460-7d714f6543a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d786ddb2-245b-4054-a1f3-8a6bfb17e101",
        "cursor": {
          "ref": "c59c2695-fade-4fac-b0ba-a634138115d7",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bc591238-744c-41a0-80d6-18f45fdbead9"
        },
        "item": {
          "id": "d786ddb2-245b-4054-a1f3-8a6bfb17e101",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d56fc6f0-56cc-4c69-8de4-acef453185ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d786ddb2-245b-4054-a1f3-8a6bfb17e101",
        "cursor": {
          "ref": "c59c2695-fade-4fac-b0ba-a634138115d7",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bc591238-744c-41a0-80d6-18f45fdbead9"
        },
        "item": {
          "id": "d786ddb2-245b-4054-a1f3-8a6bfb17e101",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d56fc6f0-56cc-4c69-8de4-acef453185ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b3f249-a801-4c57-a79b-549dbec7bb36",
        "cursor": {
          "ref": "30099973-3b01-4b06-8a79-89e952c862c8",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ad8bb03e-cfac-4f99-8307-7d41d7eb22a4"
        },
        "item": {
          "id": "a7b3f249-a801-4c57-a79b-549dbec7bb36",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6771193f-fb90-4bb3-8008-5c877272d0f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b3f249-a801-4c57-a79b-549dbec7bb36",
        "cursor": {
          "ref": "30099973-3b01-4b06-8a79-89e952c862c8",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ad8bb03e-cfac-4f99-8307-7d41d7eb22a4"
        },
        "item": {
          "id": "a7b3f249-a801-4c57-a79b-549dbec7bb36",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6771193f-fb90-4bb3-8008-5c877272d0f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca03100e-e2a7-4760-b8c7-33fd1ec070ff",
        "cursor": {
          "ref": "1a1b88bd-d9b6-4411-ad0e-66e74abf0dbc",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "62e72ba6-613c-4ee9-a575-c07b954e7271"
        },
        "item": {
          "id": "ca03100e-e2a7-4760-b8c7-33fd1ec070ff",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6947b02a-38f0-40da-914c-26ff1888c3e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca03100e-e2a7-4760-b8c7-33fd1ec070ff",
        "cursor": {
          "ref": "1a1b88bd-d9b6-4411-ad0e-66e74abf0dbc",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "62e72ba6-613c-4ee9-a575-c07b954e7271"
        },
        "item": {
          "id": "ca03100e-e2a7-4760-b8c7-33fd1ec070ff",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6947b02a-38f0-40da-914c-26ff1888c3e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5866201-c206-45ad-aaa0-00649e4b1218",
        "cursor": {
          "ref": "cbc22cf0-cf22-4468-8629-bc0026480243",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2101a7e0-00fb-47a3-9f1e-f0d048a63959"
        },
        "item": {
          "id": "b5866201-c206-45ad-aaa0-00649e4b1218",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cb7a998b-e420-4be2-8878-64e28cfc7fb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5866201-c206-45ad-aaa0-00649e4b1218",
        "cursor": {
          "ref": "cbc22cf0-cf22-4468-8629-bc0026480243",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2101a7e0-00fb-47a3-9f1e-f0d048a63959"
        },
        "item": {
          "id": "b5866201-c206-45ad-aaa0-00649e4b1218",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cb7a998b-e420-4be2-8878-64e28cfc7fb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e29d917-ad6d-4c11-9071-ead2a643893c",
        "cursor": {
          "ref": "cfcb58d1-e5a0-4e63-8dac-d797a3d8b7ca",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d85b4c67-f9a4-474b-a79c-75ce54a244f2"
        },
        "item": {
          "id": "2e29d917-ad6d-4c11-9071-ead2a643893c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ee201546-8af9-4e77-bbbb-c0f6f835aa28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e29d917-ad6d-4c11-9071-ead2a643893c",
        "cursor": {
          "ref": "cfcb58d1-e5a0-4e63-8dac-d797a3d8b7ca",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d85b4c67-f9a4-474b-a79c-75ce54a244f2"
        },
        "item": {
          "id": "2e29d917-ad6d-4c11-9071-ead2a643893c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ee201546-8af9-4e77-bbbb-c0f6f835aa28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca47fa8-c3f8-4b7a-89c1-6ffed5c4bb6a",
        "cursor": {
          "ref": "80d9d824-3135-4c1f-aa28-84e4477c9abc",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "edc582da-94f7-41fb-94fe-3c3dbe2a6e98"
        },
        "item": {
          "id": "1ca47fa8-c3f8-4b7a-89c1-6ffed5c4bb6a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7b2082e0-4315-4aeb-a1f4-c422e73639c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca47fa8-c3f8-4b7a-89c1-6ffed5c4bb6a",
        "cursor": {
          "ref": "80d9d824-3135-4c1f-aa28-84e4477c9abc",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "edc582da-94f7-41fb-94fe-3c3dbe2a6e98"
        },
        "item": {
          "id": "1ca47fa8-c3f8-4b7a-89c1-6ffed5c4bb6a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7b2082e0-4315-4aeb-a1f4-c422e73639c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db5e6b3-b29f-4cfb-b905-d0240e7fe82c",
        "cursor": {
          "ref": "17d474e7-e3f6-44a5-85a8-ef8a7edf5113",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7cb2c46b-b72a-40e8-957f-a0b8a0706e9b"
        },
        "item": {
          "id": "0db5e6b3-b29f-4cfb-b905-d0240e7fe82c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "184b6009-5fed-4716-a59a-5ff589811587",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db5e6b3-b29f-4cfb-b905-d0240e7fe82c",
        "cursor": {
          "ref": "17d474e7-e3f6-44a5-85a8-ef8a7edf5113",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7cb2c46b-b72a-40e8-957f-a0b8a0706e9b"
        },
        "item": {
          "id": "0db5e6b3-b29f-4cfb-b905-d0240e7fe82c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "184b6009-5fed-4716-a59a-5ff589811587",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b535f94-636c-4285-abdf-bc0beff07cbe",
        "cursor": {
          "ref": "d6552e4b-1709-4915-9fa7-1525d017cc68",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d71d7a52-2fa4-4f35-b316-e75660b7b979"
        },
        "item": {
          "id": "1b535f94-636c-4285-abdf-bc0beff07cbe",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ebd7186a-318f-4bf9-8430-3c36a5b8d8b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b535f94-636c-4285-abdf-bc0beff07cbe",
        "cursor": {
          "ref": "d6552e4b-1709-4915-9fa7-1525d017cc68",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d71d7a52-2fa4-4f35-b316-e75660b7b979"
        },
        "item": {
          "id": "1b535f94-636c-4285-abdf-bc0beff07cbe",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ebd7186a-318f-4bf9-8430-3c36a5b8d8b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0db682-f1cc-4116-b97d-9150e4f1286b",
        "cursor": {
          "ref": "82afc34f-cf5b-4ffb-97bd-6993146578a5",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a1760de5-d167-461d-ae45-23327ab6c186"
        },
        "item": {
          "id": "fb0db682-f1cc-4116-b97d-9150e4f1286b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "40af2d12-f481-4fb7-ab2f-be3eb5cd81aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0db682-f1cc-4116-b97d-9150e4f1286b",
        "cursor": {
          "ref": "82afc34f-cf5b-4ffb-97bd-6993146578a5",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a1760de5-d167-461d-ae45-23327ab6c186"
        },
        "item": {
          "id": "fb0db682-f1cc-4116-b97d-9150e4f1286b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "40af2d12-f481-4fb7-ab2f-be3eb5cd81aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300391b5-8470-4ba7-8799-752fe5a872e9",
        "cursor": {
          "ref": "7df9ee2d-3867-4194-8743-73f4a0c33d1c",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c0b7178a-753f-495e-9aca-2c7e6683954a"
        },
        "item": {
          "id": "300391b5-8470-4ba7-8799-752fe5a872e9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ab1b851c-2ad1-44c9-b4cf-2c8332d52bb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300391b5-8470-4ba7-8799-752fe5a872e9",
        "cursor": {
          "ref": "7df9ee2d-3867-4194-8743-73f4a0c33d1c",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c0b7178a-753f-495e-9aca-2c7e6683954a"
        },
        "item": {
          "id": "300391b5-8470-4ba7-8799-752fe5a872e9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ab1b851c-2ad1-44c9-b4cf-2c8332d52bb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d466620-9c6c-4e6b-832c-3c3858b49596",
        "cursor": {
          "ref": "55e487a7-5710-4f4c-8bc8-09f8a3e55ed8",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "feecfdb6-0e13-4722-a68a-8c6a43c7721a"
        },
        "item": {
          "id": "6d466620-9c6c-4e6b-832c-3c3858b49596",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8646c3bf-f68a-4ed7-bb6c-ca02bec3481d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d466620-9c6c-4e6b-832c-3c3858b49596",
        "cursor": {
          "ref": "55e487a7-5710-4f4c-8bc8-09f8a3e55ed8",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "feecfdb6-0e13-4722-a68a-8c6a43c7721a"
        },
        "item": {
          "id": "6d466620-9c6c-4e6b-832c-3c3858b49596",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8646c3bf-f68a-4ed7-bb6c-ca02bec3481d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7f7b01-0b1b-4aff-8d28-59908d593f1f",
        "cursor": {
          "ref": "874c22e7-07d8-4d5e-8a44-0c70eafda976",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3018a263-bcc5-4aa8-afac-918a097f6827"
        },
        "item": {
          "id": "3b7f7b01-0b1b-4aff-8d28-59908d593f1f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "398a1117-fb79-409c-89e2-8c4191694c76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7f7b01-0b1b-4aff-8d28-59908d593f1f",
        "cursor": {
          "ref": "874c22e7-07d8-4d5e-8a44-0c70eafda976",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3018a263-bcc5-4aa8-afac-918a097f6827"
        },
        "item": {
          "id": "3b7f7b01-0b1b-4aff-8d28-59908d593f1f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "398a1117-fb79-409c-89e2-8c4191694c76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8c2530-4ca3-47ad-a9bb-0c243544a61b",
        "cursor": {
          "ref": "91b7bf85-ae94-4371-abfc-b6062a201add",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d7f376ee-cfea-4128-bd87-54f59138cf03"
        },
        "item": {
          "id": "db8c2530-4ca3-47ad-a9bb-0c243544a61b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0dfeb759-6cc6-4fac-8774-f73a0cc6c2d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8c2530-4ca3-47ad-a9bb-0c243544a61b",
        "cursor": {
          "ref": "91b7bf85-ae94-4371-abfc-b6062a201add",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d7f376ee-cfea-4128-bd87-54f59138cf03"
        },
        "item": {
          "id": "db8c2530-4ca3-47ad-a9bb-0c243544a61b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0dfeb759-6cc6-4fac-8774-f73a0cc6c2d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818f9bff-6d0e-476a-8fc4-fc89837396d1",
        "cursor": {
          "ref": "57939701-9303-4d52-a2b4-423575c71f3e",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6f5c58e9-9269-4aab-8d34-8da234e4baf8"
        },
        "item": {
          "id": "818f9bff-6d0e-476a-8fc4-fc89837396d1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9b506717-e2e8-44dc-ad5f-4fc092478177",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818f9bff-6d0e-476a-8fc4-fc89837396d1",
        "cursor": {
          "ref": "57939701-9303-4d52-a2b4-423575c71f3e",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6f5c58e9-9269-4aab-8d34-8da234e4baf8"
        },
        "item": {
          "id": "818f9bff-6d0e-476a-8fc4-fc89837396d1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9b506717-e2e8-44dc-ad5f-4fc092478177",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f870361-b23d-472c-864e-55ea40f9edfb",
        "cursor": {
          "ref": "78768732-c63c-40db-8a41-f27e530a5a25",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c19cdc2b-be08-4c50-a9b6-f4f90adee57c"
        },
        "item": {
          "id": "2f870361-b23d-472c-864e-55ea40f9edfb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5050e7cb-aff1-4af0-b0d8-46f992024079",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f870361-b23d-472c-864e-55ea40f9edfb",
        "cursor": {
          "ref": "78768732-c63c-40db-8a41-f27e530a5a25",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c19cdc2b-be08-4c50-a9b6-f4f90adee57c"
        },
        "item": {
          "id": "2f870361-b23d-472c-864e-55ea40f9edfb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5050e7cb-aff1-4af0-b0d8-46f992024079",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be93d574-a58d-4988-a0dc-48f30e5a5372",
        "cursor": {
          "ref": "4d47555d-7544-464b-8e95-3ef991ac0c1a",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b95e57f7-7eff-4bab-9380-fb82a3afeaa1"
        },
        "item": {
          "id": "be93d574-a58d-4988-a0dc-48f30e5a5372",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d70ec0d9-a224-4ea3-a1d1-adfce336827e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be93d574-a58d-4988-a0dc-48f30e5a5372",
        "cursor": {
          "ref": "4d47555d-7544-464b-8e95-3ef991ac0c1a",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b95e57f7-7eff-4bab-9380-fb82a3afeaa1"
        },
        "item": {
          "id": "be93d574-a58d-4988-a0dc-48f30e5a5372",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d70ec0d9-a224-4ea3-a1d1-adfce336827e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce27c390-be10-4acf-b7d0-ac5585bad0b7",
        "cursor": {
          "ref": "213a09fd-41cc-4f97-922f-33654f2dfec3",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "400d7360-5caa-4c00-a508-f53ef9585f20"
        },
        "item": {
          "id": "ce27c390-be10-4acf-b7d0-ac5585bad0b7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8f98c7f9-7f63-4f9e-b393-b5f5cdeb340e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce27c390-be10-4acf-b7d0-ac5585bad0b7",
        "cursor": {
          "ref": "213a09fd-41cc-4f97-922f-33654f2dfec3",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "400d7360-5caa-4c00-a508-f53ef9585f20"
        },
        "item": {
          "id": "ce27c390-be10-4acf-b7d0-ac5585bad0b7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8f98c7f9-7f63-4f9e-b393-b5f5cdeb340e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7801f5-4d44-4d16-a4b1-42f9e753a72f",
        "cursor": {
          "ref": "7d656112-2292-4f05-8d1e-832f99383378",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2bf53035-c13e-48b4-8ea0-fd50e4ec043b"
        },
        "item": {
          "id": "fd7801f5-4d44-4d16-a4b1-42f9e753a72f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c0a6d8c6-5682-47fe-9679-a02134644acc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7801f5-4d44-4d16-a4b1-42f9e753a72f",
        "cursor": {
          "ref": "7d656112-2292-4f05-8d1e-832f99383378",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2bf53035-c13e-48b4-8ea0-fd50e4ec043b"
        },
        "item": {
          "id": "fd7801f5-4d44-4d16-a4b1-42f9e753a72f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c0a6d8c6-5682-47fe-9679-a02134644acc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948bb073-209d-4789-b86a-bfa7841dd950",
        "cursor": {
          "ref": "a7f6cfd4-555f-4813-832e-f8aa41985019",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a9b074c6-a6fd-4d36-9c9a-48a8748e8a03"
        },
        "item": {
          "id": "948bb073-209d-4789-b86a-bfa7841dd950",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f0167f32-f362-4d89-be8c-971e7d71c1de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948bb073-209d-4789-b86a-bfa7841dd950",
        "cursor": {
          "ref": "a7f6cfd4-555f-4813-832e-f8aa41985019",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a9b074c6-a6fd-4d36-9c9a-48a8748e8a03"
        },
        "item": {
          "id": "948bb073-209d-4789-b86a-bfa7841dd950",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f0167f32-f362-4d89-be8c-971e7d71c1de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba7f4d8-0e6b-463d-9a5d-da754c344ba0",
        "cursor": {
          "ref": "929c5ddb-ac9a-450c-b41a-7e7384d7771e",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3268cc71-2c0e-4400-a657-fef8d8ea3880"
        },
        "item": {
          "id": "4ba7f4d8-0e6b-463d-9a5d-da754c344ba0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "36838a77-ebb6-4167-b17b-77412546de74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba7f4d8-0e6b-463d-9a5d-da754c344ba0",
        "cursor": {
          "ref": "929c5ddb-ac9a-450c-b41a-7e7384d7771e",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3268cc71-2c0e-4400-a657-fef8d8ea3880"
        },
        "item": {
          "id": "4ba7f4d8-0e6b-463d-9a5d-da754c344ba0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "36838a77-ebb6-4167-b17b-77412546de74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771118e0-99c9-4666-b7ac-0b548f4e06fc",
        "cursor": {
          "ref": "40aa057c-1c76-4bb9-9657-63968675aecf",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "608c43ff-1031-44d9-8976-4123b0d6d1a5"
        },
        "item": {
          "id": "771118e0-99c9-4666-b7ac-0b548f4e06fc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "65c15731-cd99-4db9-baf8-cad443c19293",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771118e0-99c9-4666-b7ac-0b548f4e06fc",
        "cursor": {
          "ref": "40aa057c-1c76-4bb9-9657-63968675aecf",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "608c43ff-1031-44d9-8976-4123b0d6d1a5"
        },
        "item": {
          "id": "771118e0-99c9-4666-b7ac-0b548f4e06fc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "65c15731-cd99-4db9-baf8-cad443c19293",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "865962ec-9d0d-434e-abc6-e6a2b68b2485",
        "cursor": {
          "ref": "70155d3c-0b3b-4fde-896b-69805fe2d4d1",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e2771e32-8ec3-4f14-b9bc-48527400fb01"
        },
        "item": {
          "id": "865962ec-9d0d-434e-abc6-e6a2b68b2485",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7b78ef45-37c5-436b-93c7-3ff58cad88f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "865962ec-9d0d-434e-abc6-e6a2b68b2485",
        "cursor": {
          "ref": "70155d3c-0b3b-4fde-896b-69805fe2d4d1",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e2771e32-8ec3-4f14-b9bc-48527400fb01"
        },
        "item": {
          "id": "865962ec-9d0d-434e-abc6-e6a2b68b2485",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7b78ef45-37c5-436b-93c7-3ff58cad88f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf928c44-c5d7-430c-96f9-6defad2366f0",
        "cursor": {
          "ref": "d1f583b0-692c-4f3a-9a7f-d48369576922",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "72bf8bc0-d48d-4fb5-9bc7-0274bc453546"
        },
        "item": {
          "id": "bf928c44-c5d7-430c-96f9-6defad2366f0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a74cda97-c0dc-4949-9950-b0b4b5c2a21d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf928c44-c5d7-430c-96f9-6defad2366f0",
        "cursor": {
          "ref": "d1f583b0-692c-4f3a-9a7f-d48369576922",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "72bf8bc0-d48d-4fb5-9bc7-0274bc453546"
        },
        "item": {
          "id": "bf928c44-c5d7-430c-96f9-6defad2366f0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a74cda97-c0dc-4949-9950-b0b4b5c2a21d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9bad72-5711-43c7-835d-15c1d8ac5065",
        "cursor": {
          "ref": "820d6181-df9f-4a1e-a5ae-c53c26df75bd",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b78dc8ff-c352-4b16-a3cd-0e4b2430f652"
        },
        "item": {
          "id": "2c9bad72-5711-43c7-835d-15c1d8ac5065",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5775fcd1-bb4c-4300-83f9-e56dc5e93291",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9bad72-5711-43c7-835d-15c1d8ac5065",
        "cursor": {
          "ref": "820d6181-df9f-4a1e-a5ae-c53c26df75bd",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b78dc8ff-c352-4b16-a3cd-0e4b2430f652"
        },
        "item": {
          "id": "2c9bad72-5711-43c7-835d-15c1d8ac5065",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5775fcd1-bb4c-4300-83f9-e56dc5e93291",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8486e1de-9e5b-4bcd-9117-95e41e51c377",
        "cursor": {
          "ref": "09bb7997-58dc-4f59-a105-ab96106aed02",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ea4c3bff-271c-4447-a0e5-93d9a6626593"
        },
        "item": {
          "id": "8486e1de-9e5b-4bcd-9117-95e41e51c377",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5eb4247a-eca9-419c-b705-48c31f08fb1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8486e1de-9e5b-4bcd-9117-95e41e51c377",
        "cursor": {
          "ref": "09bb7997-58dc-4f59-a105-ab96106aed02",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ea4c3bff-271c-4447-a0e5-93d9a6626593"
        },
        "item": {
          "id": "8486e1de-9e5b-4bcd-9117-95e41e51c377",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5eb4247a-eca9-419c-b705-48c31f08fb1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cccc357-ecd9-43a5-a705-efabb19f470f",
        "cursor": {
          "ref": "0d9318e2-1dc5-4c3e-8a92-d7c30532eb6e",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a01636dc-55b8-4c51-9a3b-4120c51b4b2b"
        },
        "item": {
          "id": "2cccc357-ecd9-43a5-a705-efabb19f470f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "977da5b7-a6de-4f86-997c-325a850638df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cccc357-ecd9-43a5-a705-efabb19f470f",
        "cursor": {
          "ref": "0d9318e2-1dc5-4c3e-8a92-d7c30532eb6e",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a01636dc-55b8-4c51-9a3b-4120c51b4b2b"
        },
        "item": {
          "id": "2cccc357-ecd9-43a5-a705-efabb19f470f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "977da5b7-a6de-4f86-997c-325a850638df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3134c9c3-4f72-4cf1-ac6c-4ad078de1522",
        "cursor": {
          "ref": "e9afc308-ce90-487a-b8ed-dc76dbf06570",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0e163295-4924-4d24-8fec-57a3e32064d7"
        },
        "item": {
          "id": "3134c9c3-4f72-4cf1-ac6c-4ad078de1522",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4e5a9fcf-39e8-4a54-87b2-53c36e2d61cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3134c9c3-4f72-4cf1-ac6c-4ad078de1522",
        "cursor": {
          "ref": "e9afc308-ce90-487a-b8ed-dc76dbf06570",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0e163295-4924-4d24-8fec-57a3e32064d7"
        },
        "item": {
          "id": "3134c9c3-4f72-4cf1-ac6c-4ad078de1522",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4e5a9fcf-39e8-4a54-87b2-53c36e2d61cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69402a12-fd4c-4d8e-9fba-c45966b780c9",
        "cursor": {
          "ref": "3d73843e-1410-4a9b-b0d1-957d9ebf6442",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0bd912c5-8e73-4f29-a291-514d29f944ba"
        },
        "item": {
          "id": "69402a12-fd4c-4d8e-9fba-c45966b780c9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "640f71a3-6ad0-4c32-b874-35e841ac63e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69402a12-fd4c-4d8e-9fba-c45966b780c9",
        "cursor": {
          "ref": "3d73843e-1410-4a9b-b0d1-957d9ebf6442",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0bd912c5-8e73-4f29-a291-514d29f944ba"
        },
        "item": {
          "id": "69402a12-fd4c-4d8e-9fba-c45966b780c9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "640f71a3-6ad0-4c32-b874-35e841ac63e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd1026f-8901-4f79-ae1e-57f62b3e7388",
        "cursor": {
          "ref": "ae8310ed-9148-4f36-856d-23cd1011ee5c",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "47180e5a-af0a-4ebb-8a99-df28dda114ae"
        },
        "item": {
          "id": "dfd1026f-8901-4f79-ae1e-57f62b3e7388",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "357f36ad-1134-4a95-80a3-8f9c44c5d1c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd1026f-8901-4f79-ae1e-57f62b3e7388",
        "cursor": {
          "ref": "ae8310ed-9148-4f36-856d-23cd1011ee5c",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "47180e5a-af0a-4ebb-8a99-df28dda114ae"
        },
        "item": {
          "id": "dfd1026f-8901-4f79-ae1e-57f62b3e7388",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "357f36ad-1134-4a95-80a3-8f9c44c5d1c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5302a4be-dc3d-42bd-98ad-6dedf9b8daa7",
        "cursor": {
          "ref": "43a02d8b-8eaf-4afe-b62b-d128dc8b9d98",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2e053b67-65e4-40e8-8343-72bed206c01f"
        },
        "item": {
          "id": "5302a4be-dc3d-42bd-98ad-6dedf9b8daa7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fae74304-45a3-445a-a7ab-124e993f8f8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5302a4be-dc3d-42bd-98ad-6dedf9b8daa7",
        "cursor": {
          "ref": "43a02d8b-8eaf-4afe-b62b-d128dc8b9d98",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2e053b67-65e4-40e8-8343-72bed206c01f"
        },
        "item": {
          "id": "5302a4be-dc3d-42bd-98ad-6dedf9b8daa7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fae74304-45a3-445a-a7ab-124e993f8f8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9caabb92-aae0-46db-af73-8efa2c9915cf",
        "cursor": {
          "ref": "adc8e241-8f30-442d-8b83-00a2a377e784",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "be3e92c1-2987-4535-88c3-be1603c43c89"
        },
        "item": {
          "id": "9caabb92-aae0-46db-af73-8efa2c9915cf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "77c99ded-4cd1-4dac-b95f-f03c10051ac4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9caabb92-aae0-46db-af73-8efa2c9915cf",
        "cursor": {
          "ref": "adc8e241-8f30-442d-8b83-00a2a377e784",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "be3e92c1-2987-4535-88c3-be1603c43c89"
        },
        "item": {
          "id": "9caabb92-aae0-46db-af73-8efa2c9915cf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "77c99ded-4cd1-4dac-b95f-f03c10051ac4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa97fb29-50c4-49b0-9acc-614e8e30fcf6",
        "cursor": {
          "ref": "d125f76d-dcb1-4ed8-aa8c-7e3e4721fef8",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a0526ff0-6b07-4d84-8400-f99c27702fbe"
        },
        "item": {
          "id": "fa97fb29-50c4-49b0-9acc-614e8e30fcf6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "48ee3a55-591e-4a86-a034-673b29cb3333",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa97fb29-50c4-49b0-9acc-614e8e30fcf6",
        "cursor": {
          "ref": "d125f76d-dcb1-4ed8-aa8c-7e3e4721fef8",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a0526ff0-6b07-4d84-8400-f99c27702fbe"
        },
        "item": {
          "id": "fa97fb29-50c4-49b0-9acc-614e8e30fcf6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "48ee3a55-591e-4a86-a034-673b29cb3333",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b5dfab-fd83-4652-ab11-18f79b757d45",
        "cursor": {
          "ref": "154172c6-43b1-42d6-bbb3-6b8f75c65c25",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ba801683-42e7-43ec-8ecb-be19bfec2ecd"
        },
        "item": {
          "id": "08b5dfab-fd83-4652-ab11-18f79b757d45",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d85263c1-5cfb-4200-a6a9-2aa579b45010",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 98,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b5dfab-fd83-4652-ab11-18f79b757d45",
        "cursor": {
          "ref": "154172c6-43b1-42d6-bbb3-6b8f75c65c25",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ba801683-42e7-43ec-8ecb-be19bfec2ecd"
        },
        "item": {
          "id": "08b5dfab-fd83-4652-ab11-18f79b757d45",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d85263c1-5cfb-4200-a6a9-2aa579b45010",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 98,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc7370b-c453-41ef-9270-30e2b3e26d90",
        "cursor": {
          "ref": "9500e89c-e763-494f-9e3c-432dc5225c0d",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "72780ca3-ac45-4062-89fe-69cafdd2cff8"
        },
        "item": {
          "id": "2fc7370b-c453-41ef-9270-30e2b3e26d90",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2274c561-a3ae-4666-8063-6b946e0cf0aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc7370b-c453-41ef-9270-30e2b3e26d90",
        "cursor": {
          "ref": "9500e89c-e763-494f-9e3c-432dc5225c0d",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "72780ca3-ac45-4062-89fe-69cafdd2cff8"
        },
        "item": {
          "id": "2fc7370b-c453-41ef-9270-30e2b3e26d90",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2274c561-a3ae-4666-8063-6b946e0cf0aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82651ab-887b-4b7d-ae3c-ccb171525f89",
        "cursor": {
          "ref": "2b850e45-b2e3-4bba-8b34-8485a7ec408b",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "172f25d2-fde7-47bb-ad46-5facd4e9f3d2"
        },
        "item": {
          "id": "c82651ab-887b-4b7d-ae3c-ccb171525f89",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "486dda3a-366d-41b2-8602-b887c2b6615c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82651ab-887b-4b7d-ae3c-ccb171525f89",
        "cursor": {
          "ref": "2b850e45-b2e3-4bba-8b34-8485a7ec408b",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "172f25d2-fde7-47bb-ad46-5facd4e9f3d2"
        },
        "item": {
          "id": "c82651ab-887b-4b7d-ae3c-ccb171525f89",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "486dda3a-366d-41b2-8602-b887c2b6615c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b2c508-de2f-4583-96e3-464113b11597",
        "cursor": {
          "ref": "51a8b7fa-ec5c-458a-b31e-a1e745c7ecad",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0536a982-fe1d-4eaa-bbee-b775f45de836"
        },
        "item": {
          "id": "97b2c508-de2f-4583-96e3-464113b11597",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5ba88174-2dfb-4bde-9cd3-c49c21391e9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b2c508-de2f-4583-96e3-464113b11597",
        "cursor": {
          "ref": "51a8b7fa-ec5c-458a-b31e-a1e745c7ecad",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0536a982-fe1d-4eaa-bbee-b775f45de836"
        },
        "item": {
          "id": "97b2c508-de2f-4583-96e3-464113b11597",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5ba88174-2dfb-4bde-9cd3-c49c21391e9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f2e7b6-856c-46f7-8402-ab259c28ecfe",
        "cursor": {
          "ref": "5cedebe1-28bb-4910-b219-290b2ffa8e9a",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6ad97915-dc43-4b48-bb23-00bc64b30658"
        },
        "item": {
          "id": "a8f2e7b6-856c-46f7-8402-ab259c28ecfe",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0ca7a68d-32d0-4641-9bd1-4f936dae9880",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f2e7b6-856c-46f7-8402-ab259c28ecfe",
        "cursor": {
          "ref": "5cedebe1-28bb-4910-b219-290b2ffa8e9a",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6ad97915-dc43-4b48-bb23-00bc64b30658"
        },
        "item": {
          "id": "a8f2e7b6-856c-46f7-8402-ab259c28ecfe",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0ca7a68d-32d0-4641-9bd1-4f936dae9880",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8048ff8-c372-4a9d-bd4e-d9fb80ccd46d",
        "cursor": {
          "ref": "27aabcab-8ad2-4b4b-b8b9-1e6dad162392",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "726648c0-f979-4993-a4d2-337459ea875a"
        },
        "item": {
          "id": "c8048ff8-c372-4a9d-bd4e-d9fb80ccd46d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "99fb2c9d-45f1-483d-91cb-207271eed9b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8048ff8-c372-4a9d-bd4e-d9fb80ccd46d",
        "cursor": {
          "ref": "27aabcab-8ad2-4b4b-b8b9-1e6dad162392",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "726648c0-f979-4993-a4d2-337459ea875a"
        },
        "item": {
          "id": "c8048ff8-c372-4a9d-bd4e-d9fb80ccd46d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "99fb2c9d-45f1-483d-91cb-207271eed9b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f802552-5662-44ab-99c6-6fa8a5a49488",
        "cursor": {
          "ref": "028496fe-903e-4102-b039-85df18329cf4",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b8b25737-7ef8-45a6-a204-ba09c1ac368b"
        },
        "item": {
          "id": "0f802552-5662-44ab-99c6-6fa8a5a49488",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9b4394dd-24f4-44d9-8976-023d908b4c24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f802552-5662-44ab-99c6-6fa8a5a49488",
        "cursor": {
          "ref": "028496fe-903e-4102-b039-85df18329cf4",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b8b25737-7ef8-45a6-a204-ba09c1ac368b"
        },
        "item": {
          "id": "0f802552-5662-44ab-99c6-6fa8a5a49488",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9b4394dd-24f4-44d9-8976-023d908b4c24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08067464-2e9c-439d-945e-db725446db6a",
        "cursor": {
          "ref": "a67eb4a6-d7c5-43a9-8b09-48d4e406494c",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "00abe2e7-a7e5-4060-a21d-c98b9de08415"
        },
        "item": {
          "id": "08067464-2e9c-439d-945e-db725446db6a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "31161447-acb5-428b-aea3-3c319efaa618",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08067464-2e9c-439d-945e-db725446db6a",
        "cursor": {
          "ref": "a67eb4a6-d7c5-43a9-8b09-48d4e406494c",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "00abe2e7-a7e5-4060-a21d-c98b9de08415"
        },
        "item": {
          "id": "08067464-2e9c-439d-945e-db725446db6a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "31161447-acb5-428b-aea3-3c319efaa618",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f605e603-b7e0-45e9-bd1e-cea7ecfcd463",
        "cursor": {
          "ref": "e923a8e8-92ca-4172-89d4-94403d080934",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1084e524-c22d-49ca-bf41-e4b2f29965b4"
        },
        "item": {
          "id": "f605e603-b7e0-45e9-bd1e-cea7ecfcd463",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "76b4a364-4354-4597-be25-701319e90908",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f605e603-b7e0-45e9-bd1e-cea7ecfcd463",
        "cursor": {
          "ref": "e923a8e8-92ca-4172-89d4-94403d080934",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1084e524-c22d-49ca-bf41-e4b2f29965b4"
        },
        "item": {
          "id": "f605e603-b7e0-45e9-bd1e-cea7ecfcd463",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "76b4a364-4354-4597-be25-701319e90908",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793e6235-2ad4-44e1-acc6-1c685eecbbcb",
        "cursor": {
          "ref": "b99846fe-a7d6-4c54-8bed-f269e8a590ed",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9114f4ee-d252-4ee8-8dea-565136e57ebe"
        },
        "item": {
          "id": "793e6235-2ad4-44e1-acc6-1c685eecbbcb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0b02e19c-1152-412b-95a3-58fa173c29a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793e6235-2ad4-44e1-acc6-1c685eecbbcb",
        "cursor": {
          "ref": "b99846fe-a7d6-4c54-8bed-f269e8a590ed",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9114f4ee-d252-4ee8-8dea-565136e57ebe"
        },
        "item": {
          "id": "793e6235-2ad4-44e1-acc6-1c685eecbbcb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0b02e19c-1152-412b-95a3-58fa173c29a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dacf60b-1560-4d92-9bcd-1882008039d9",
        "cursor": {
          "ref": "0de80447-2a44-4f06-abc4-0db56d0daa19",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "84725976-ef73-4a94-a68b-25533cea493a"
        },
        "item": {
          "id": "5dacf60b-1560-4d92-9bcd-1882008039d9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "30347f3e-8493-459a-89a7-79edaae17d74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dacf60b-1560-4d92-9bcd-1882008039d9",
        "cursor": {
          "ref": "0de80447-2a44-4f06-abc4-0db56d0daa19",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "84725976-ef73-4a94-a68b-25533cea493a"
        },
        "item": {
          "id": "5dacf60b-1560-4d92-9bcd-1882008039d9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "30347f3e-8493-459a-89a7-79edaae17d74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6f0bb2-bedf-48e9-820f-168bdf9c04a4",
        "cursor": {
          "ref": "74176137-9658-48c1-a14b-84fa1fcef0e2",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1b47fafb-0a36-4e3d-b007-560eb963b9af"
        },
        "item": {
          "id": "0a6f0bb2-bedf-48e9-820f-168bdf9c04a4",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2481c067-592d-47aa-b2cc-7ea060c49dcc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6f0bb2-bedf-48e9-820f-168bdf9c04a4",
        "cursor": {
          "ref": "74176137-9658-48c1-a14b-84fa1fcef0e2",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1b47fafb-0a36-4e3d-b007-560eb963b9af"
        },
        "item": {
          "id": "0a6f0bb2-bedf-48e9-820f-168bdf9c04a4",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2481c067-592d-47aa-b2cc-7ea060c49dcc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609b69e2-ee45-44b6-88a4-8df5f0dc329d",
        "cursor": {
          "ref": "5948b9f3-82b4-45d4-9ed2-9b1827e20c2f",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "cdee3cfb-24ca-4d39-8c05-c450f216ddaf"
        },
        "item": {
          "id": "609b69e2-ee45-44b6-88a4-8df5f0dc329d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "75a3deb4-1a23-42d6-b581-91ce966b1375",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609b69e2-ee45-44b6-88a4-8df5f0dc329d",
        "cursor": {
          "ref": "5948b9f3-82b4-45d4-9ed2-9b1827e20c2f",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "cdee3cfb-24ca-4d39-8c05-c450f216ddaf"
        },
        "item": {
          "id": "609b69e2-ee45-44b6-88a4-8df5f0dc329d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "75a3deb4-1a23-42d6-b581-91ce966b1375",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00205ae0-ad02-478c-ba14-53cf52e2ba98",
        "cursor": {
          "ref": "b3972b7d-cdb6-4a6b-9eb3-0e57515f5c6e",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3308d999-a2c7-4980-a04a-348b1e2c42b8"
        },
        "item": {
          "id": "00205ae0-ad02-478c-ba14-53cf52e2ba98",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "65589d15-20e1-43d5-a60c-ca2f776d9d64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00205ae0-ad02-478c-ba14-53cf52e2ba98",
        "cursor": {
          "ref": "b3972b7d-cdb6-4a6b-9eb3-0e57515f5c6e",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3308d999-a2c7-4980-a04a-348b1e2c42b8"
        },
        "item": {
          "id": "00205ae0-ad02-478c-ba14-53cf52e2ba98",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "65589d15-20e1-43d5-a60c-ca2f776d9d64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffffc4d-9a9d-400f-864e-46ca13ba2f8b",
        "cursor": {
          "ref": "d094bb62-3058-4fa0-938b-828a80439677",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "113b6cde-57d1-437d-82c0-cf727e74c7c9"
        },
        "item": {
          "id": "2ffffc4d-9a9d-400f-864e-46ca13ba2f8b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "9d5058af-1a65-470b-91da-9ebcb9ce78c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffffc4d-9a9d-400f-864e-46ca13ba2f8b",
        "cursor": {
          "ref": "d094bb62-3058-4fa0-938b-828a80439677",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "113b6cde-57d1-437d-82c0-cf727e74c7c9"
        },
        "item": {
          "id": "2ffffc4d-9a9d-400f-864e-46ca13ba2f8b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "9d5058af-1a65-470b-91da-9ebcb9ce78c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60016495-670e-42af-8be1-74ec4f48d55f",
        "cursor": {
          "ref": "d89db705-c380-4b25-978a-beacfbb1cf76",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "aa45ea94-6386-48be-a5b0-9bd64efa0f50"
        },
        "item": {
          "id": "60016495-670e-42af-8be1-74ec4f48d55f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "84f0404a-b824-479c-8327-92f83985eb99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60016495-670e-42af-8be1-74ec4f48d55f",
        "cursor": {
          "ref": "d89db705-c380-4b25-978a-beacfbb1cf76",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "aa45ea94-6386-48be-a5b0-9bd64efa0f50"
        },
        "item": {
          "id": "60016495-670e-42af-8be1-74ec4f48d55f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "84f0404a-b824-479c-8327-92f83985eb99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cbd889-086b-4c42-94d1-d216516a3dd0",
        "cursor": {
          "ref": "e4e20f35-5058-4a52-86b4-d72e3a7a9c03",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dd6a6177-3032-4d51-b712-6680d60eeec2"
        },
        "item": {
          "id": "93cbd889-086b-4c42-94d1-d216516a3dd0",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "df873d60-5b67-402b-940c-a02abd1bc0d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cbd889-086b-4c42-94d1-d216516a3dd0",
        "cursor": {
          "ref": "e4e20f35-5058-4a52-86b4-d72e3a7a9c03",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dd6a6177-3032-4d51-b712-6680d60eeec2"
        },
        "item": {
          "id": "93cbd889-086b-4c42-94d1-d216516a3dd0",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "df873d60-5b67-402b-940c-a02abd1bc0d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9628d664-a43e-4754-9f8d-f2700951dbc2",
        "cursor": {
          "ref": "f359a618-64e2-443e-9947-e30c89e715b4",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bcd7e6d2-fe43-4d15-b776-8a267e640ce2"
        },
        "item": {
          "id": "9628d664-a43e-4754-9f8d-f2700951dbc2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "900d43ad-ae15-42f5-8e8b-29f39a6201d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9628d664-a43e-4754-9f8d-f2700951dbc2",
        "cursor": {
          "ref": "f359a618-64e2-443e-9947-e30c89e715b4",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bcd7e6d2-fe43-4d15-b776-8a267e640ce2"
        },
        "item": {
          "id": "9628d664-a43e-4754-9f8d-f2700951dbc2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "900d43ad-ae15-42f5-8e8b-29f39a6201d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c087e18a-c116-4a49-b92e-91d8173a0733",
        "cursor": {
          "ref": "449c9144-8460-4f13-9e82-d87e43c70a5d",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "726e77a6-7bd0-435b-9703-203429245708"
        },
        "item": {
          "id": "c087e18a-c116-4a49-b92e-91d8173a0733",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "59f9b1dd-b911-47f8-9cbc-39983bd3e24b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c087e18a-c116-4a49-b92e-91d8173a0733",
        "cursor": {
          "ref": "449c9144-8460-4f13-9e82-d87e43c70a5d",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "726e77a6-7bd0-435b-9703-203429245708"
        },
        "item": {
          "id": "c087e18a-c116-4a49-b92e-91d8173a0733",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "59f9b1dd-b911-47f8-9cbc-39983bd3e24b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24ebfb5-fb57-4127-844d-edff07913138",
        "cursor": {
          "ref": "aefe5c6a-5884-4f18-9ffd-46d51b8e6967",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5570706b-01f2-4ade-affe-296ea8895fb2"
        },
        "item": {
          "id": "a24ebfb5-fb57-4127-844d-edff07913138",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "dd0cf51c-f70a-46c6-adc3-ddcdc7b5b664",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24ebfb5-fb57-4127-844d-edff07913138",
        "cursor": {
          "ref": "aefe5c6a-5884-4f18-9ffd-46d51b8e6967",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5570706b-01f2-4ade-affe-296ea8895fb2"
        },
        "item": {
          "id": "a24ebfb5-fb57-4127-844d-edff07913138",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "dd0cf51c-f70a-46c6-adc3-ddcdc7b5b664",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97bb8126-4d54-4a32-ad90-521dd5fa396f",
        "cursor": {
          "ref": "0ca86a52-bd28-436c-8322-e19c0ba0ee94",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9021adbe-c79b-4d54-829d-0715915d505e"
        },
        "item": {
          "id": "97bb8126-4d54-4a32-ad90-521dd5fa396f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "afe852d2-2eae-46de-9fe6-8cedeb2df89d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97bb8126-4d54-4a32-ad90-521dd5fa396f",
        "cursor": {
          "ref": "0ca86a52-bd28-436c-8322-e19c0ba0ee94",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9021adbe-c79b-4d54-829d-0715915d505e"
        },
        "item": {
          "id": "97bb8126-4d54-4a32-ad90-521dd5fa396f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "afe852d2-2eae-46de-9fe6-8cedeb2df89d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83cd0fe-937a-44a6-b9c5-a1397d516b8a",
        "cursor": {
          "ref": "5c320984-1632-412b-94b1-6c1c6541e24c",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "68369772-2d48-41f1-bc23-759d345d00d9"
        },
        "item": {
          "id": "a83cd0fe-937a-44a6-b9c5-a1397d516b8a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bad22c23-5fe8-4a8c-b3e2-462b421eaf60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83cd0fe-937a-44a6-b9c5-a1397d516b8a",
        "cursor": {
          "ref": "5c320984-1632-412b-94b1-6c1c6541e24c",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "68369772-2d48-41f1-bc23-759d345d00d9"
        },
        "item": {
          "id": "a83cd0fe-937a-44a6-b9c5-a1397d516b8a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bad22c23-5fe8-4a8c-b3e2-462b421eaf60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46656589-d35c-47ef-93b7-c891f0e0aa5a",
        "cursor": {
          "ref": "49206ef4-5684-4938-b1cb-6a0a16d5fc9e",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1340e672-bbee-405f-8f86-bcab9b4c5e25"
        },
        "item": {
          "id": "46656589-d35c-47ef-93b7-c891f0e0aa5a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "34fe94f3-65fd-4213-b894-8de04e26f057",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46656589-d35c-47ef-93b7-c891f0e0aa5a",
        "cursor": {
          "ref": "49206ef4-5684-4938-b1cb-6a0a16d5fc9e",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1340e672-bbee-405f-8f86-bcab9b4c5e25"
        },
        "item": {
          "id": "46656589-d35c-47ef-93b7-c891f0e0aa5a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "34fe94f3-65fd-4213-b894-8de04e26f057",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9d2e75-e0a3-41af-9bca-57070bd506f5",
        "cursor": {
          "ref": "99b07f92-7716-47a7-a196-819790badf1f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a44f6a23-c5a6-42d9-bae7-f06951abf7a0"
        },
        "item": {
          "id": "9d9d2e75-e0a3-41af-9bca-57070bd506f5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0332db80-f8f2-46fd-8959-1a5d9c79600a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9d2e75-e0a3-41af-9bca-57070bd506f5",
        "cursor": {
          "ref": "99b07f92-7716-47a7-a196-819790badf1f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a44f6a23-c5a6-42d9-bae7-f06951abf7a0"
        },
        "item": {
          "id": "9d9d2e75-e0a3-41af-9bca-57070bd506f5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0332db80-f8f2-46fd-8959-1a5d9c79600a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80d0362-7d4d-4479-963a-bbf8c77842f0",
        "cursor": {
          "ref": "63261ce4-bb50-422d-ac35-0e9e10d9a640",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "71fc2567-de79-4786-bcce-c9d92d5c8747"
        },
        "item": {
          "id": "b80d0362-7d4d-4479-963a-bbf8c77842f0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "77cf5936-f3b0-4e15-9b6a-808c4dc175f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80d0362-7d4d-4479-963a-bbf8c77842f0",
        "cursor": {
          "ref": "63261ce4-bb50-422d-ac35-0e9e10d9a640",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "71fc2567-de79-4786-bcce-c9d92d5c8747"
        },
        "item": {
          "id": "b80d0362-7d4d-4479-963a-bbf8c77842f0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "77cf5936-f3b0-4e15-9b6a-808c4dc175f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c729e304-b6d2-4b57-ad8c-9efb1e0a37a3",
        "cursor": {
          "ref": "714ca2da-9e45-4639-945e-b4226c7cff17",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "facadb70-fd12-457c-84d7-3d53275986b5"
        },
        "item": {
          "id": "c729e304-b6d2-4b57-ad8c-9efb1e0a37a3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0120c162-80f1-418c-8ed9-f3641fd049f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c729e304-b6d2-4b57-ad8c-9efb1e0a37a3",
        "cursor": {
          "ref": "714ca2da-9e45-4639-945e-b4226c7cff17",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "facadb70-fd12-457c-84d7-3d53275986b5"
        },
        "item": {
          "id": "c729e304-b6d2-4b57-ad8c-9efb1e0a37a3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0120c162-80f1-418c-8ed9-f3641fd049f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33c7d6a-5f2e-4c01-8453-dabb2677b4a5",
        "cursor": {
          "ref": "cc04602c-9599-47c1-ac75-de22ab34ad0b",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d0e9340b-d430-4028-8912-d9734055ab94"
        },
        "item": {
          "id": "b33c7d6a-5f2e-4c01-8453-dabb2677b4a5",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "81c3e53b-a717-48fa-bf4b-6d5eec2fc4c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33c7d6a-5f2e-4c01-8453-dabb2677b4a5",
        "cursor": {
          "ref": "cc04602c-9599-47c1-ac75-de22ab34ad0b",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d0e9340b-d430-4028-8912-d9734055ab94"
        },
        "item": {
          "id": "b33c7d6a-5f2e-4c01-8453-dabb2677b4a5",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "81c3e53b-a717-48fa-bf4b-6d5eec2fc4c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4aadb7-56d9-44d9-9d41-6068d8d459c4",
        "cursor": {
          "ref": "d69c6e39-bb19-4fd8-8d44-d828fbdd8386",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0f2559f8-1b14-42c7-a768-8d95d79f7f36"
        },
        "item": {
          "id": "1d4aadb7-56d9-44d9-9d41-6068d8d459c4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2556ccc5-b25c-416e-a878-d2539dd186e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4aadb7-56d9-44d9-9d41-6068d8d459c4",
        "cursor": {
          "ref": "d69c6e39-bb19-4fd8-8d44-d828fbdd8386",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0f2559f8-1b14-42c7-a768-8d95d79f7f36"
        },
        "item": {
          "id": "1d4aadb7-56d9-44d9-9d41-6068d8d459c4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2556ccc5-b25c-416e-a878-d2539dd186e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bb4370-ff07-4c45-b689-d532d077bb0a",
        "cursor": {
          "ref": "773e0a46-2a09-4b5b-a8ce-e6ff2c6f8e6c",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "18badec8-13b2-4d89-ba67-6e92a88ee9ef"
        },
        "item": {
          "id": "21bb4370-ff07-4c45-b689-d532d077bb0a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a951ef44-44e3-4ca8-90ea-751fa6e8b206",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bb4370-ff07-4c45-b689-d532d077bb0a",
        "cursor": {
          "ref": "773e0a46-2a09-4b5b-a8ce-e6ff2c6f8e6c",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "18badec8-13b2-4d89-ba67-6e92a88ee9ef"
        },
        "item": {
          "id": "21bb4370-ff07-4c45-b689-d532d077bb0a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a951ef44-44e3-4ca8-90ea-751fa6e8b206",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd9b6fb-7e24-4682-aaa2-c0a06020bdc0",
        "cursor": {
          "ref": "d3d617f0-dbac-4bb9-879a-472ee042e6d6",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "972bcc54-c98c-42c7-ab5b-d7d61a20fb4e"
        },
        "item": {
          "id": "9cd9b6fb-7e24-4682-aaa2-c0a06020bdc0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c5170ae6-1854-434c-bfc9-9ee19e8c2b2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd9b6fb-7e24-4682-aaa2-c0a06020bdc0",
        "cursor": {
          "ref": "d3d617f0-dbac-4bb9-879a-472ee042e6d6",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "972bcc54-c98c-42c7-ab5b-d7d61a20fb4e"
        },
        "item": {
          "id": "9cd9b6fb-7e24-4682-aaa2-c0a06020bdc0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c5170ae6-1854-434c-bfc9-9ee19e8c2b2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fbf2a4-4390-4a7a-8822-dccc9ba0ed7d",
        "cursor": {
          "ref": "6f12b9eb-8865-4faa-8b0f-cc0325929052",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6174ba61-0207-4657-b375-4d1b25620faa"
        },
        "item": {
          "id": "25fbf2a4-4390-4a7a-8822-dccc9ba0ed7d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "aa308c73-dc35-4020-ace9-16f43a7f48b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fbf2a4-4390-4a7a-8822-dccc9ba0ed7d",
        "cursor": {
          "ref": "6f12b9eb-8865-4faa-8b0f-cc0325929052",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6174ba61-0207-4657-b375-4d1b25620faa"
        },
        "item": {
          "id": "25fbf2a4-4390-4a7a-8822-dccc9ba0ed7d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "aa308c73-dc35-4020-ace9-16f43a7f48b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86107551-fe45-44f8-8c0a-fcd53c8a1274",
        "cursor": {
          "ref": "21851c26-f1e1-48d7-b7c7-590601a30e06",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "43601488-3cbe-48a1-bbe2-01449f0edc92"
        },
        "item": {
          "id": "86107551-fe45-44f8-8c0a-fcd53c8a1274",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3a1b60cd-3b7b-43a6-9868-90de8e48859d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86107551-fe45-44f8-8c0a-fcd53c8a1274",
        "cursor": {
          "ref": "21851c26-f1e1-48d7-b7c7-590601a30e06",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "43601488-3cbe-48a1-bbe2-01449f0edc92"
        },
        "item": {
          "id": "86107551-fe45-44f8-8c0a-fcd53c8a1274",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3a1b60cd-3b7b-43a6-9868-90de8e48859d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38b2258-9d9f-401a-89d9-32cb831d0507",
        "cursor": {
          "ref": "5785c24c-95a2-41e0-938f-3f5c53dbd88f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "37bab5e8-79a5-4624-96c6-484f1d9d34ac"
        },
        "item": {
          "id": "b38b2258-9d9f-401a-89d9-32cb831d0507",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8269a656-f5fd-43e3-bd48-cff5db6b4b66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38b2258-9d9f-401a-89d9-32cb831d0507",
        "cursor": {
          "ref": "5785c24c-95a2-41e0-938f-3f5c53dbd88f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "37bab5e8-79a5-4624-96c6-484f1d9d34ac"
        },
        "item": {
          "id": "b38b2258-9d9f-401a-89d9-32cb831d0507",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8269a656-f5fd-43e3-bd48-cff5db6b4b66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2329ed69-e687-4b2c-90ed-3770f6f52caa",
        "cursor": {
          "ref": "4acf09c5-42da-49b5-8b06-99aa238bb5ed",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "da96f56e-a8cd-4f54-81ae-b113ef787d1b"
        },
        "item": {
          "id": "2329ed69-e687-4b2c-90ed-3770f6f52caa",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5ed6d946-4657-4627-8475-c0bf0e5f0bd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2329ed69-e687-4b2c-90ed-3770f6f52caa",
        "cursor": {
          "ref": "4acf09c5-42da-49b5-8b06-99aa238bb5ed",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "da96f56e-a8cd-4f54-81ae-b113ef787d1b"
        },
        "item": {
          "id": "2329ed69-e687-4b2c-90ed-3770f6f52caa",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5ed6d946-4657-4627-8475-c0bf0e5f0bd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec05b9a-7c00-4e28-934f-23e04dbf4c62",
        "cursor": {
          "ref": "4e1633f6-eee5-4026-acea-d15572b6afcd",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "48ef4fa4-7b07-40e1-b25d-1d4e108a50a0"
        },
        "item": {
          "id": "6ec05b9a-7c00-4e28-934f-23e04dbf4c62",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d047fb52-11bc-4f6d-ad39-b09d204c75d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec05b9a-7c00-4e28-934f-23e04dbf4c62",
        "cursor": {
          "ref": "4e1633f6-eee5-4026-acea-d15572b6afcd",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "48ef4fa4-7b07-40e1-b25d-1d4e108a50a0"
        },
        "item": {
          "id": "6ec05b9a-7c00-4e28-934f-23e04dbf4c62",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d047fb52-11bc-4f6d-ad39-b09d204c75d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2c95dd-4db3-4017-9f27-1bba75483da6",
        "cursor": {
          "ref": "188003b0-6058-493c-9363-a77516207c6b",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6712d102-ea7f-4098-bc90-c8236836a3c2"
        },
        "item": {
          "id": "fe2c95dd-4db3-4017-9f27-1bba75483da6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6094989b-e342-457d-87cb-9335de54e480",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2c95dd-4db3-4017-9f27-1bba75483da6",
        "cursor": {
          "ref": "188003b0-6058-493c-9363-a77516207c6b",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6712d102-ea7f-4098-bc90-c8236836a3c2"
        },
        "item": {
          "id": "fe2c95dd-4db3-4017-9f27-1bba75483da6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6094989b-e342-457d-87cb-9335de54e480",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f7f806-dc4c-44ae-970d-0d4c524db4bc",
        "cursor": {
          "ref": "fbd3448c-c3ba-4558-8a1d-3d7f249623e3",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "333398b2-c9f6-4381-a282-b68bf2d5ea91"
        },
        "item": {
          "id": "b5f7f806-dc4c-44ae-970d-0d4c524db4bc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7b81bb6c-fdf7-489c-9166-4ee0798bac5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f7f806-dc4c-44ae-970d-0d4c524db4bc",
        "cursor": {
          "ref": "fbd3448c-c3ba-4558-8a1d-3d7f249623e3",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "333398b2-c9f6-4381-a282-b68bf2d5ea91"
        },
        "item": {
          "id": "b5f7f806-dc4c-44ae-970d-0d4c524db4bc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7b81bb6c-fdf7-489c-9166-4ee0798bac5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df94d6ea-5b09-4423-9466-373e3421a111",
        "cursor": {
          "ref": "4992fcce-836d-403e-9ade-dda887e76de3",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "46cf0251-e8d5-4962-93f6-25bc8020376b"
        },
        "item": {
          "id": "df94d6ea-5b09-4423-9466-373e3421a111",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e329bf28-5549-44bd-ac78-8472c2ae73bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df94d6ea-5b09-4423-9466-373e3421a111",
        "cursor": {
          "ref": "4992fcce-836d-403e-9ade-dda887e76de3",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "46cf0251-e8d5-4962-93f6-25bc8020376b"
        },
        "item": {
          "id": "df94d6ea-5b09-4423-9466-373e3421a111",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e329bf28-5549-44bd-ac78-8472c2ae73bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182887d2-dde6-4f46-be17-3f20d15024ed",
        "cursor": {
          "ref": "9f0792e9-dacd-440c-9779-9bd596482a4e",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ce93bce9-382c-4df9-b82b-32d723a7c12c"
        },
        "item": {
          "id": "182887d2-dde6-4f46-be17-3f20d15024ed",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f5272e6a-2a53-45d1-918e-7428026769c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182887d2-dde6-4f46-be17-3f20d15024ed",
        "cursor": {
          "ref": "9f0792e9-dacd-440c-9779-9bd596482a4e",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ce93bce9-382c-4df9-b82b-32d723a7c12c"
        },
        "item": {
          "id": "182887d2-dde6-4f46-be17-3f20d15024ed",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f5272e6a-2a53-45d1-918e-7428026769c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6e0eb9-c767-45f6-b644-372c26f50fb4",
        "cursor": {
          "ref": "dc340962-cc8d-4b3e-baf3-c803c8b21e62",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "824a6abb-7ebd-476a-a6a2-47f3a7bcae50"
        },
        "item": {
          "id": "ce6e0eb9-c767-45f6-b644-372c26f50fb4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "00ac3e27-a51c-40e1-aa55-62b6502ca687",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6e0eb9-c767-45f6-b644-372c26f50fb4",
        "cursor": {
          "ref": "dc340962-cc8d-4b3e-baf3-c803c8b21e62",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "824a6abb-7ebd-476a-a6a2-47f3a7bcae50"
        },
        "item": {
          "id": "ce6e0eb9-c767-45f6-b644-372c26f50fb4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "00ac3e27-a51c-40e1-aa55-62b6502ca687",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916df990-eac4-48b5-9e33-ecc1e5afc38d",
        "cursor": {
          "ref": "4b2f4e0d-673e-4b84-b0c7-9218894d1deb",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2fd34863-b6c6-4b73-a1f3-377e95e714ea"
        },
        "item": {
          "id": "916df990-eac4-48b5-9e33-ecc1e5afc38d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "229147b8-8d08-44fb-9090-5fc814f15cb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916df990-eac4-48b5-9e33-ecc1e5afc38d",
        "cursor": {
          "ref": "4b2f4e0d-673e-4b84-b0c7-9218894d1deb",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2fd34863-b6c6-4b73-a1f3-377e95e714ea"
        },
        "item": {
          "id": "916df990-eac4-48b5-9e33-ecc1e5afc38d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "229147b8-8d08-44fb-9090-5fc814f15cb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4867f8b3-d6eb-435e-bfe2-314dfea4a2a3",
        "cursor": {
          "ref": "42bd43d6-34e6-499b-8e4a-264535b20889",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b51035a8-8d2c-4e7d-bfc0-f2debb311b53"
        },
        "item": {
          "id": "4867f8b3-d6eb-435e-bfe2-314dfea4a2a3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c3766d75-6d38-48a2-b5fb-3ef847c7a641",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4867f8b3-d6eb-435e-bfe2-314dfea4a2a3",
        "cursor": {
          "ref": "42bd43d6-34e6-499b-8e4a-264535b20889",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b51035a8-8d2c-4e7d-bfc0-f2debb311b53"
        },
        "item": {
          "id": "4867f8b3-d6eb-435e-bfe2-314dfea4a2a3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c3766d75-6d38-48a2-b5fb-3ef847c7a641",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5eb9b1-8eb3-45a2-8453-3ed7101c3ebf",
        "cursor": {
          "ref": "1b656af5-36ad-4b8c-9cae-c0089da30392",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "42121d31-b4c2-4cc3-beee-d6e616dcd0a5"
        },
        "item": {
          "id": "9e5eb9b1-8eb3-45a2-8453-3ed7101c3ebf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ffd41195-e311-403d-96c0-ee3db48645af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5eb9b1-8eb3-45a2-8453-3ed7101c3ebf",
        "cursor": {
          "ref": "1b656af5-36ad-4b8c-9cae-c0089da30392",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "42121d31-b4c2-4cc3-beee-d6e616dcd0a5"
        },
        "item": {
          "id": "9e5eb9b1-8eb3-45a2-8453-3ed7101c3ebf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ffd41195-e311-403d-96c0-ee3db48645af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9de08fb-8937-4a70-bc34-fa79a8f28619",
        "cursor": {
          "ref": "5c3c6b2d-042e-449b-ac54-5e6b0c7b8721",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1be806ad-c14d-40d8-a360-cbd7944f4788"
        },
        "item": {
          "id": "e9de08fb-8937-4a70-bc34-fa79a8f28619",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1180a9ac-0d9e-41d8-9da3-b8a32e411a9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9de08fb-8937-4a70-bc34-fa79a8f28619",
        "cursor": {
          "ref": "5c3c6b2d-042e-449b-ac54-5e6b0c7b8721",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1be806ad-c14d-40d8-a360-cbd7944f4788"
        },
        "item": {
          "id": "e9de08fb-8937-4a70-bc34-fa79a8f28619",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1180a9ac-0d9e-41d8-9da3-b8a32e411a9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c188e3-a994-4928-aea9-5b6fc509fcba",
        "cursor": {
          "ref": "22fc513b-6abb-4eee-ac87-847c7ed24686",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b2db2504-73e2-45c0-87cf-32def6a3f303"
        },
        "item": {
          "id": "79c188e3-a994-4928-aea9-5b6fc509fcba",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "226052dd-5560-4e6d-8f00-0b6cbfffe20e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c188e3-a994-4928-aea9-5b6fc509fcba",
        "cursor": {
          "ref": "22fc513b-6abb-4eee-ac87-847c7ed24686",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b2db2504-73e2-45c0-87cf-32def6a3f303"
        },
        "item": {
          "id": "79c188e3-a994-4928-aea9-5b6fc509fcba",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "226052dd-5560-4e6d-8f00-0b6cbfffe20e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94fa810-c7b0-4f8c-8a8e-c36f2f93bd7c",
        "cursor": {
          "ref": "a69ae5c5-2933-4c36-8d93-c2b616be1477",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0235cf52-6848-4f6b-8ea0-732e9cd56af4"
        },
        "item": {
          "id": "e94fa810-c7b0-4f8c-8a8e-c36f2f93bd7c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ecec5018-bb0f-4db7-b851-78edac8c549e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94fa810-c7b0-4f8c-8a8e-c36f2f93bd7c",
        "cursor": {
          "ref": "a69ae5c5-2933-4c36-8d93-c2b616be1477",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0235cf52-6848-4f6b-8ea0-732e9cd56af4"
        },
        "item": {
          "id": "e94fa810-c7b0-4f8c-8a8e-c36f2f93bd7c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ecec5018-bb0f-4db7-b851-78edac8c549e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30773d34-f1bc-4fe4-b933-fef7b985fba7",
        "cursor": {
          "ref": "5da7ffe7-c0fc-48d9-be67-2a075a0d0282",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0d8a2b84-1c52-4b39-9c37-064e71cefc65"
        },
        "item": {
          "id": "30773d34-f1bc-4fe4-b933-fef7b985fba7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9f9f5ed0-968a-4438-bad1-8f393fdefd8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30773d34-f1bc-4fe4-b933-fef7b985fba7",
        "cursor": {
          "ref": "5da7ffe7-c0fc-48d9-be67-2a075a0d0282",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0d8a2b84-1c52-4b39-9c37-064e71cefc65"
        },
        "item": {
          "id": "30773d34-f1bc-4fe4-b933-fef7b985fba7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9f9f5ed0-968a-4438-bad1-8f393fdefd8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425c5f12-f40d-4428-b1da-20294846d0df",
        "cursor": {
          "ref": "e433e2ce-611a-4c06-a20c-28b189232482",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ada8475b-3d74-48f5-bcbb-6b1777b701ba"
        },
        "item": {
          "id": "425c5f12-f40d-4428-b1da-20294846d0df",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8553a005-d260-41c9-a7cb-610a8e6f5eec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425c5f12-f40d-4428-b1da-20294846d0df",
        "cursor": {
          "ref": "e433e2ce-611a-4c06-a20c-28b189232482",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ada8475b-3d74-48f5-bcbb-6b1777b701ba"
        },
        "item": {
          "id": "425c5f12-f40d-4428-b1da-20294846d0df",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8553a005-d260-41c9-a7cb-610a8e6f5eec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9fcbd6-2043-47ea-955b-34ed8680b11c",
        "cursor": {
          "ref": "896a1e4d-3c27-452d-a571-d2d8e1a14f97",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "72a7b035-3751-44f7-85c6-63126b92a6c6"
        },
        "item": {
          "id": "5c9fcbd6-2043-47ea-955b-34ed8680b11c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ddc05e48-232c-4b4c-a610-19756bf745a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9fcbd6-2043-47ea-955b-34ed8680b11c",
        "cursor": {
          "ref": "896a1e4d-3c27-452d-a571-d2d8e1a14f97",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "72a7b035-3751-44f7-85c6-63126b92a6c6"
        },
        "item": {
          "id": "5c9fcbd6-2043-47ea-955b-34ed8680b11c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ddc05e48-232c-4b4c-a610-19756bf745a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67032bd7-dc8f-4b85-a033-a663cb2f3220",
        "cursor": {
          "ref": "b069d64a-3364-471b-bde1-c30e3942ee46",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d66c799c-8698-4eb3-a78b-284d61c2099b"
        },
        "item": {
          "id": "67032bd7-dc8f-4b85-a033-a663cb2f3220",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "61a37964-18d6-41d6-a28b-bb1e631d7c30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67032bd7-dc8f-4b85-a033-a663cb2f3220",
        "cursor": {
          "ref": "b069d64a-3364-471b-bde1-c30e3942ee46",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d66c799c-8698-4eb3-a78b-284d61c2099b"
        },
        "item": {
          "id": "67032bd7-dc8f-4b85-a033-a663cb2f3220",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "61a37964-18d6-41d6-a28b-bb1e631d7c30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160da95d-f0f4-4126-a133-abe7b75c0d6c",
        "cursor": {
          "ref": "da94e457-82e1-4e10-87f1-5c778159e679",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "eb2d4f54-e93b-4898-ae37-cdf79f268c05"
        },
        "item": {
          "id": "160da95d-f0f4-4126-a133-abe7b75c0d6c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "34770342-154b-405c-ab88-4f03fed229ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160da95d-f0f4-4126-a133-abe7b75c0d6c",
        "cursor": {
          "ref": "da94e457-82e1-4e10-87f1-5c778159e679",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "eb2d4f54-e93b-4898-ae37-cdf79f268c05"
        },
        "item": {
          "id": "160da95d-f0f4-4126-a133-abe7b75c0d6c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "34770342-154b-405c-ab88-4f03fed229ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d46fc0b0-1c5d-4153-a9c2-df3411689779",
        "cursor": {
          "ref": "8ec3a3da-a10c-42e1-b44e-db137deb2bcf",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "71539fe0-5413-4bc1-900c-ba7d3d7b92f9"
        },
        "item": {
          "id": "d46fc0b0-1c5d-4153-a9c2-df3411689779",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "87ed1905-b884-4836-a821-cbced4c3ef81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d46fc0b0-1c5d-4153-a9c2-df3411689779",
        "cursor": {
          "ref": "8ec3a3da-a10c-42e1-b44e-db137deb2bcf",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "71539fe0-5413-4bc1-900c-ba7d3d7b92f9"
        },
        "item": {
          "id": "d46fc0b0-1c5d-4153-a9c2-df3411689779",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "87ed1905-b884-4836-a821-cbced4c3ef81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a1e012-5aac-4d89-bab4-af066cd2557d",
        "cursor": {
          "ref": "7572827a-ec7d-41f8-8c5d-680a1cf219dd",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a47b4c0d-d911-4064-9d7d-9c02d5b9a748"
        },
        "item": {
          "id": "48a1e012-5aac-4d89-bab4-af066cd2557d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5fee6115-e0ca-44ed-8645-8bcef1b301b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a1e012-5aac-4d89-bab4-af066cd2557d",
        "cursor": {
          "ref": "7572827a-ec7d-41f8-8c5d-680a1cf219dd",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a47b4c0d-d911-4064-9d7d-9c02d5b9a748"
        },
        "item": {
          "id": "48a1e012-5aac-4d89-bab4-af066cd2557d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5fee6115-e0ca-44ed-8645-8bcef1b301b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa18f24-b11f-4334-87e2-4891dc5a3e1b",
        "cursor": {
          "ref": "4535689e-7703-41d3-beb9-6aeb45fdc257",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "37349f51-2ce7-4606-8d13-5d81a27125fd"
        },
        "item": {
          "id": "4fa18f24-b11f-4334-87e2-4891dc5a3e1b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d2178819-0da7-4441-a6e7-e5bacf0fac14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa18f24-b11f-4334-87e2-4891dc5a3e1b",
        "cursor": {
          "ref": "4535689e-7703-41d3-beb9-6aeb45fdc257",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "37349f51-2ce7-4606-8d13-5d81a27125fd"
        },
        "item": {
          "id": "4fa18f24-b11f-4334-87e2-4891dc5a3e1b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d2178819-0da7-4441-a6e7-e5bacf0fac14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d92987-6007-4c8c-980f-f19d81f29511",
        "cursor": {
          "ref": "a521a121-5426-4cf4-b10b-705b815804f6",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3470a8ea-0b98-4597-b483-d11cf270b308"
        },
        "item": {
          "id": "b9d92987-6007-4c8c-980f-f19d81f29511",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "611f0a85-d8ee-4466-8f5c-cd2116be06e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d92987-6007-4c8c-980f-f19d81f29511",
        "cursor": {
          "ref": "a521a121-5426-4cf4-b10b-705b815804f6",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3470a8ea-0b98-4597-b483-d11cf270b308"
        },
        "item": {
          "id": "b9d92987-6007-4c8c-980f-f19d81f29511",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "611f0a85-d8ee-4466-8f5c-cd2116be06e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5aca6f-5591-4939-9b5e-f01f382ad9b4",
        "cursor": {
          "ref": "cabd888f-c379-401e-add7-f03471e4d8e4",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "75f393c4-4b6b-42bb-b14d-aedb6b0f3ba5"
        },
        "item": {
          "id": "6e5aca6f-5591-4939-9b5e-f01f382ad9b4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "eb6bef7f-542e-4edd-95e2-89dabdeee92c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5aca6f-5591-4939-9b5e-f01f382ad9b4",
        "cursor": {
          "ref": "cabd888f-c379-401e-add7-f03471e4d8e4",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "75f393c4-4b6b-42bb-b14d-aedb6b0f3ba5"
        },
        "item": {
          "id": "6e5aca6f-5591-4939-9b5e-f01f382ad9b4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "eb6bef7f-542e-4edd-95e2-89dabdeee92c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a79c8a1-210f-478a-bf64-886346c9d68c",
        "cursor": {
          "ref": "95da87e7-2d1c-4ceb-a444-ccc08ccc4c19",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "95c8a373-f8f6-4c48-a5cd-2f5c3d160b35"
        },
        "item": {
          "id": "2a79c8a1-210f-478a-bf64-886346c9d68c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "10949608-12d1-418d-b9d0-90e67798f929",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a79c8a1-210f-478a-bf64-886346c9d68c",
        "cursor": {
          "ref": "95da87e7-2d1c-4ceb-a444-ccc08ccc4c19",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "95c8a373-f8f6-4c48-a5cd-2f5c3d160b35"
        },
        "item": {
          "id": "2a79c8a1-210f-478a-bf64-886346c9d68c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "10949608-12d1-418d-b9d0-90e67798f929",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3215307-5b3d-494f-bbef-bb7729c2cfef",
        "cursor": {
          "ref": "ed6e97fa-8700-4f11-bbdb-707445f0713d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c192c00a-ede0-4174-9dbd-632db0b5067c"
        },
        "item": {
          "id": "b3215307-5b3d-494f-bbef-bb7729c2cfef",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7f5f1bcd-c4f2-4770-affe-de987f0940d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3215307-5b3d-494f-bbef-bb7729c2cfef",
        "cursor": {
          "ref": "ed6e97fa-8700-4f11-bbdb-707445f0713d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c192c00a-ede0-4174-9dbd-632db0b5067c"
        },
        "item": {
          "id": "b3215307-5b3d-494f-bbef-bb7729c2cfef",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7f5f1bcd-c4f2-4770-affe-de987f0940d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabbc107-3814-4f32-94d2-62fdd5584de7",
        "cursor": {
          "ref": "e4917fa2-f35c-4284-baa0-eaa78830535a",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6a15244c-16a4-459d-b708-064792e10734"
        },
        "item": {
          "id": "aabbc107-3814-4f32-94d2-62fdd5584de7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1fbd8208-4860-4587-b010-8acf6780a372",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabbc107-3814-4f32-94d2-62fdd5584de7",
        "cursor": {
          "ref": "e4917fa2-f35c-4284-baa0-eaa78830535a",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6a15244c-16a4-459d-b708-064792e10734"
        },
        "item": {
          "id": "aabbc107-3814-4f32-94d2-62fdd5584de7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1fbd8208-4860-4587-b010-8acf6780a372",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a2708f-2699-4dc2-8ca6-8a5007574a33",
        "cursor": {
          "ref": "495a6b06-a627-432b-b96f-0ad77a76d07e",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "615534dc-1f23-4480-9aad-cd75945c8745"
        },
        "item": {
          "id": "45a2708f-2699-4dc2-8ca6-8a5007574a33",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c7a348c3-8d31-4c1e-bca7-6f69bae8f6d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a2708f-2699-4dc2-8ca6-8a5007574a33",
        "cursor": {
          "ref": "495a6b06-a627-432b-b96f-0ad77a76d07e",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "615534dc-1f23-4480-9aad-cd75945c8745"
        },
        "item": {
          "id": "45a2708f-2699-4dc2-8ca6-8a5007574a33",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c7a348c3-8d31-4c1e-bca7-6f69bae8f6d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34fa862-9c45-457d-85e1-f042c03c4189",
        "cursor": {
          "ref": "345f79ab-febf-4815-9394-9c3b6b9ce2bf",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c6d9399b-e840-4e28-a03c-6a7a88d1463a"
        },
        "item": {
          "id": "a34fa862-9c45-457d-85e1-f042c03c4189",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f5618b97-df85-4e0b-9565-090d12121472",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34fa862-9c45-457d-85e1-f042c03c4189",
        "cursor": {
          "ref": "345f79ab-febf-4815-9394-9c3b6b9ce2bf",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c6d9399b-e840-4e28-a03c-6a7a88d1463a"
        },
        "item": {
          "id": "a34fa862-9c45-457d-85e1-f042c03c4189",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f5618b97-df85-4e0b-9565-090d12121472",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68434429-2b1b-4031-85fa-adcd3748e674",
        "cursor": {
          "ref": "d8a18dc7-81f3-4f38-9ba1-3930ab368c0d",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "be44fe4b-7d1c-43ff-9a00-15adc0dc49fa"
        },
        "item": {
          "id": "68434429-2b1b-4031-85fa-adcd3748e674",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b6440c91-d88e-4dfd-bcf0-cb446b4ea557",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68434429-2b1b-4031-85fa-adcd3748e674",
        "cursor": {
          "ref": "d8a18dc7-81f3-4f38-9ba1-3930ab368c0d",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "be44fe4b-7d1c-43ff-9a00-15adc0dc49fa"
        },
        "item": {
          "id": "68434429-2b1b-4031-85fa-adcd3748e674",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b6440c91-d88e-4dfd-bcf0-cb446b4ea557",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f146eab6-b77d-4b1c-9a34-796b2ae80455",
        "cursor": {
          "ref": "edd81a51-bc51-45d7-b52e-cb6616f6d9d8",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bcd47f4d-65d5-4b95-98bb-9036e0210dec"
        },
        "item": {
          "id": "f146eab6-b77d-4b1c-9a34-796b2ae80455",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3321e299-71a8-453c-9e1e-c34a2c1f61a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f146eab6-b77d-4b1c-9a34-796b2ae80455",
        "cursor": {
          "ref": "edd81a51-bc51-45d7-b52e-cb6616f6d9d8",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bcd47f4d-65d5-4b95-98bb-9036e0210dec"
        },
        "item": {
          "id": "f146eab6-b77d-4b1c-9a34-796b2ae80455",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3321e299-71a8-453c-9e1e-c34a2c1f61a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f4fcaa-2c04-474b-a5af-d02d38d544bf",
        "cursor": {
          "ref": "7853571f-9dcd-466d-bc7c-4d57773d3b97",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d683efed-a0dc-4d63-b74f-b6a4613620fc"
        },
        "item": {
          "id": "23f4fcaa-2c04-474b-a5af-d02d38d544bf",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "76f3ce88-3c8b-4a5e-8439-1f01f4adc669",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f4fcaa-2c04-474b-a5af-d02d38d544bf",
        "cursor": {
          "ref": "7853571f-9dcd-466d-bc7c-4d57773d3b97",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d683efed-a0dc-4d63-b74f-b6a4613620fc"
        },
        "item": {
          "id": "23f4fcaa-2c04-474b-a5af-d02d38d544bf",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "76f3ce88-3c8b-4a5e-8439-1f01f4adc669",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6851d0-d713-4310-bd07-f228adf52e0d",
        "cursor": {
          "ref": "8dbf128e-6650-4c0e-b61f-39a7c3960b22",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "719f7804-b739-4146-9158-263b9006408c"
        },
        "item": {
          "id": "aa6851d0-d713-4310-bd07-f228adf52e0d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cd6a4660-cc36-4c43-bcd3-f24d4819b835",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6851d0-d713-4310-bd07-f228adf52e0d",
        "cursor": {
          "ref": "8dbf128e-6650-4c0e-b61f-39a7c3960b22",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "719f7804-b739-4146-9158-263b9006408c"
        },
        "item": {
          "id": "aa6851d0-d713-4310-bd07-f228adf52e0d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cd6a4660-cc36-4c43-bcd3-f24d4819b835",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf67d460-94c4-4645-a335-38fc32687028",
        "cursor": {
          "ref": "a8254ae6-e7ea-464d-8c29-41aec88b974b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "18241067-041b-45a5-8017-ad80b97144d9"
        },
        "item": {
          "id": "bf67d460-94c4-4645-a335-38fc32687028",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bf934747-5c51-4599-9fe6-62dd4226aa52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf67d460-94c4-4645-a335-38fc32687028",
        "cursor": {
          "ref": "a8254ae6-e7ea-464d-8c29-41aec88b974b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "18241067-041b-45a5-8017-ad80b97144d9"
        },
        "item": {
          "id": "bf67d460-94c4-4645-a335-38fc32687028",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bf934747-5c51-4599-9fe6-62dd4226aa52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ffb777-1fd1-4e84-b463-570ba71366c3",
        "cursor": {
          "ref": "09f102c7-dfaf-408a-b553-7e2f5cf3eba7",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0918cae1-0249-4610-ad40-a0af6afb7490"
        },
        "item": {
          "id": "49ffb777-1fd1-4e84-b463-570ba71366c3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fd771f99-4430-4a83-91f6-93b114c0b447",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ffb777-1fd1-4e84-b463-570ba71366c3",
        "cursor": {
          "ref": "09f102c7-dfaf-408a-b553-7e2f5cf3eba7",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0918cae1-0249-4610-ad40-a0af6afb7490"
        },
        "item": {
          "id": "49ffb777-1fd1-4e84-b463-570ba71366c3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fd771f99-4430-4a83-91f6-93b114c0b447",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4175ca0f-db88-4c90-9bb7-95b71baff92c",
        "cursor": {
          "ref": "8ba4b6a6-e523-46f9-82f5-6d330e987b72",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4ef5be23-54cd-46ba-b7e4-43c7fb279d59"
        },
        "item": {
          "id": "4175ca0f-db88-4c90-9bb7-95b71baff92c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3eb127e1-23e2-4c1a-8bf8-57ca57e3594a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4175ca0f-db88-4c90-9bb7-95b71baff92c",
        "cursor": {
          "ref": "8ba4b6a6-e523-46f9-82f5-6d330e987b72",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4ef5be23-54cd-46ba-b7e4-43c7fb279d59"
        },
        "item": {
          "id": "4175ca0f-db88-4c90-9bb7-95b71baff92c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3eb127e1-23e2-4c1a-8bf8-57ca57e3594a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf76ef7d-f7ac-4e71-a957-ea38972fc25b",
        "cursor": {
          "ref": "65f55219-5893-404c-a0a1-de2224461eb9",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "836d9ee1-15c2-48f5-af12-198c74f22524"
        },
        "item": {
          "id": "cf76ef7d-f7ac-4e71-a957-ea38972fc25b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e8e587ab-1a6a-42b0-9fd7-f92af260afe3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf76ef7d-f7ac-4e71-a957-ea38972fc25b",
        "cursor": {
          "ref": "65f55219-5893-404c-a0a1-de2224461eb9",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "836d9ee1-15c2-48f5-af12-198c74f22524"
        },
        "item": {
          "id": "cf76ef7d-f7ac-4e71-a957-ea38972fc25b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e8e587ab-1a6a-42b0-9fd7-f92af260afe3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d45ef63-e80d-410e-b402-5dd551fd908b",
        "cursor": {
          "ref": "a3680da3-d9cf-4a05-8725-bea79b075ce0",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c3a35013-9992-41b1-aecb-5314aa8bf1c5"
        },
        "item": {
          "id": "4d45ef63-e80d-410e-b402-5dd551fd908b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "665957c1-42d3-4f97-bbd4-302e1b1f9316",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d45ef63-e80d-410e-b402-5dd551fd908b",
        "cursor": {
          "ref": "a3680da3-d9cf-4a05-8725-bea79b075ce0",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c3a35013-9992-41b1-aecb-5314aa8bf1c5"
        },
        "item": {
          "id": "4d45ef63-e80d-410e-b402-5dd551fd908b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "665957c1-42d3-4f97-bbd4-302e1b1f9316",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27ef9fea-4355-4449-b1f2-e360615dbd3d",
        "cursor": {
          "ref": "4daf1d40-ba86-4100-993e-13450bc85da6",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3a79db9d-a4d6-449e-8a02-2a4c4866c54a"
        },
        "item": {
          "id": "27ef9fea-4355-4449-b1f2-e360615dbd3d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d3161fd6-9297-494c-91d8-e44e194f2428",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27ef9fea-4355-4449-b1f2-e360615dbd3d",
        "cursor": {
          "ref": "4daf1d40-ba86-4100-993e-13450bc85da6",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3a79db9d-a4d6-449e-8a02-2a4c4866c54a"
        },
        "item": {
          "id": "27ef9fea-4355-4449-b1f2-e360615dbd3d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d3161fd6-9297-494c-91d8-e44e194f2428",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f343fc-29a0-48a8-8c2f-b5bc14fbc711",
        "cursor": {
          "ref": "a01dbc39-4dcb-4629-b0b0-785aa7c565ef",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "69c3d66b-1fae-4b60-8600-2366d8722c09"
        },
        "item": {
          "id": "b2f343fc-29a0-48a8-8c2f-b5bc14fbc711",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "411118bd-e088-4f0e-b02d-d3570b5006e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f343fc-29a0-48a8-8c2f-b5bc14fbc711",
        "cursor": {
          "ref": "a01dbc39-4dcb-4629-b0b0-785aa7c565ef",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "69c3d66b-1fae-4b60-8600-2366d8722c09"
        },
        "item": {
          "id": "b2f343fc-29a0-48a8-8c2f-b5bc14fbc711",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "411118bd-e088-4f0e-b02d-d3570b5006e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c952b31a-f534-45de-ad50-3ddd9e8e0852",
        "cursor": {
          "ref": "62c2d307-d7da-427c-8df1-4b5c2c60a7d8",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "56c84f50-0764-4adf-8ba8-537e57342b60"
        },
        "item": {
          "id": "c952b31a-f534-45de-ad50-3ddd9e8e0852",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "61ef46b1-73df-478e-9667-b87b52846d61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c952b31a-f534-45de-ad50-3ddd9e8e0852",
        "cursor": {
          "ref": "62c2d307-d7da-427c-8df1-4b5c2c60a7d8",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "56c84f50-0764-4adf-8ba8-537e57342b60"
        },
        "item": {
          "id": "c952b31a-f534-45de-ad50-3ddd9e8e0852",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "61ef46b1-73df-478e-9667-b87b52846d61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c72e4f-dfdc-4b26-bc73-15a67f5adc61",
        "cursor": {
          "ref": "be3b70c2-5a77-43d5-9f9f-7855f006754c",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ad0681d8-9562-4739-9ecf-09fccb2ef4a4"
        },
        "item": {
          "id": "c9c72e4f-dfdc-4b26-bc73-15a67f5adc61",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "080163c3-961c-4ace-a304-4c3fad6b3091",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c72e4f-dfdc-4b26-bc73-15a67f5adc61",
        "cursor": {
          "ref": "be3b70c2-5a77-43d5-9f9f-7855f006754c",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ad0681d8-9562-4739-9ecf-09fccb2ef4a4"
        },
        "item": {
          "id": "c9c72e4f-dfdc-4b26-bc73-15a67f5adc61",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "080163c3-961c-4ace-a304-4c3fad6b3091",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3fa9fd-bf43-41a2-a875-80d9b584c6bd",
        "cursor": {
          "ref": "4eb2ad2c-f574-423c-8371-1083be3f13a7",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7c1b5b4a-70be-404e-b9cb-e433916d3d85"
        },
        "item": {
          "id": "3f3fa9fd-bf43-41a2-a875-80d9b584c6bd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "16b2ab6e-979c-4f73-a262-4e154eae2251",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3fa9fd-bf43-41a2-a875-80d9b584c6bd",
        "cursor": {
          "ref": "4eb2ad2c-f574-423c-8371-1083be3f13a7",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7c1b5b4a-70be-404e-b9cb-e433916d3d85"
        },
        "item": {
          "id": "3f3fa9fd-bf43-41a2-a875-80d9b584c6bd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "16b2ab6e-979c-4f73-a262-4e154eae2251",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09b4d00-cf50-4880-b614-ac7a7f22e763",
        "cursor": {
          "ref": "3003de1d-b8f4-4cd3-b1c5-0cb0eaab0297",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "75d480b7-ee56-4383-9e4d-6572f50bf3a7"
        },
        "item": {
          "id": "d09b4d00-cf50-4880-b614-ac7a7f22e763",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8cb515c5-00ef-4bd6-8580-9fd91dae4c1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09b4d00-cf50-4880-b614-ac7a7f22e763",
        "cursor": {
          "ref": "3003de1d-b8f4-4cd3-b1c5-0cb0eaab0297",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "75d480b7-ee56-4383-9e4d-6572f50bf3a7"
        },
        "item": {
          "id": "d09b4d00-cf50-4880-b614-ac7a7f22e763",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8cb515c5-00ef-4bd6-8580-9fd91dae4c1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2066013-a26c-44f4-9357-b25c5d3fb468",
        "cursor": {
          "ref": "f9358eff-51c7-41e1-9067-2a430eed5462",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6a650f64-e44e-47a2-a3d3-ccf289c35e49"
        },
        "item": {
          "id": "a2066013-a26c-44f4-9357-b25c5d3fb468",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9e1ef77d-6e4f-4c80-bfae-ad648d97e99b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2066013-a26c-44f4-9357-b25c5d3fb468",
        "cursor": {
          "ref": "f9358eff-51c7-41e1-9067-2a430eed5462",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6a650f64-e44e-47a2-a3d3-ccf289c35e49"
        },
        "item": {
          "id": "a2066013-a26c-44f4-9357-b25c5d3fb468",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9e1ef77d-6e4f-4c80-bfae-ad648d97e99b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19301187-5a07-44c9-b287-28a3f10675de",
        "cursor": {
          "ref": "a1c89396-64b3-4b63-99f7-a4f8debfd33b",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "446060ff-2b93-456d-beb1-484be3142cd9"
        },
        "item": {
          "id": "19301187-5a07-44c9-b287-28a3f10675de",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bc3cd09a-f5f4-445b-95bd-f1c8ea3b93a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19301187-5a07-44c9-b287-28a3f10675de",
        "cursor": {
          "ref": "a1c89396-64b3-4b63-99f7-a4f8debfd33b",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "446060ff-2b93-456d-beb1-484be3142cd9"
        },
        "item": {
          "id": "19301187-5a07-44c9-b287-28a3f10675de",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bc3cd09a-f5f4-445b-95bd-f1c8ea3b93a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84571dab-676e-4df2-bac3-561488ac6d3a",
        "cursor": {
          "ref": "828a0d29-674c-4a05-b0c1-ad764255a5dc",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2dcb52be-05c4-4c23-9f2d-b357b62d506f"
        },
        "item": {
          "id": "84571dab-676e-4df2-bac3-561488ac6d3a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "85f5ee6c-cc7e-451f-b80b-b097f867908c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84571dab-676e-4df2-bac3-561488ac6d3a",
        "cursor": {
          "ref": "828a0d29-674c-4a05-b0c1-ad764255a5dc",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2dcb52be-05c4-4c23-9f2d-b357b62d506f"
        },
        "item": {
          "id": "84571dab-676e-4df2-bac3-561488ac6d3a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "85f5ee6c-cc7e-451f-b80b-b097f867908c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b52e7a-55f6-4894-baec-e3f8b850bf5b",
        "cursor": {
          "ref": "358e6223-e9f8-4328-b3dc-5792852316de",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8889b947-6eb1-4bcc-adcc-1602d7e77387"
        },
        "item": {
          "id": "c3b52e7a-55f6-4894-baec-e3f8b850bf5b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3600c525-7c34-4568-b145-588d48b85253",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b52e7a-55f6-4894-baec-e3f8b850bf5b",
        "cursor": {
          "ref": "358e6223-e9f8-4328-b3dc-5792852316de",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8889b947-6eb1-4bcc-adcc-1602d7e77387"
        },
        "item": {
          "id": "c3b52e7a-55f6-4894-baec-e3f8b850bf5b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3600c525-7c34-4568-b145-588d48b85253",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673b2452-6757-4a08-b5f7-74c91a3ecb40",
        "cursor": {
          "ref": "80e20547-8d90-4269-9779-48a4e7a1ab54",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0bfb115f-10aa-4ae3-a234-6fc927dcef59"
        },
        "item": {
          "id": "673b2452-6757-4a08-b5f7-74c91a3ecb40",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ae05b911-9a09-408f-9aa7-541923a5cd71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673b2452-6757-4a08-b5f7-74c91a3ecb40",
        "cursor": {
          "ref": "80e20547-8d90-4269-9779-48a4e7a1ab54",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0bfb115f-10aa-4ae3-a234-6fc927dcef59"
        },
        "item": {
          "id": "673b2452-6757-4a08-b5f7-74c91a3ecb40",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ae05b911-9a09-408f-9aa7-541923a5cd71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ced8f9-184d-46eb-9cef-1b752574295a",
        "cursor": {
          "ref": "4762f5e8-0df4-4531-a1cd-4ad98fed6af9",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3af7d0d2-6de5-474f-96bc-115bc3a58afc"
        },
        "item": {
          "id": "23ced8f9-184d-46eb-9cef-1b752574295a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c651375e-4554-442c-b4a9-557945f63310",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ced8f9-184d-46eb-9cef-1b752574295a",
        "cursor": {
          "ref": "4762f5e8-0df4-4531-a1cd-4ad98fed6af9",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3af7d0d2-6de5-474f-96bc-115bc3a58afc"
        },
        "item": {
          "id": "23ced8f9-184d-46eb-9cef-1b752574295a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c651375e-4554-442c-b4a9-557945f63310",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a63a41-9ac2-432b-a61b-2562878700ec",
        "cursor": {
          "ref": "2ff6e541-c003-4546-8e68-ad4cecb64e99",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2a0498c5-bc7a-4aac-a549-1357f73878dc"
        },
        "item": {
          "id": "86a63a41-9ac2-432b-a61b-2562878700ec",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f4e3f4c7-961b-461f-8b52-63d582c45de5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a63a41-9ac2-432b-a61b-2562878700ec",
        "cursor": {
          "ref": "2ff6e541-c003-4546-8e68-ad4cecb64e99",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2a0498c5-bc7a-4aac-a549-1357f73878dc"
        },
        "item": {
          "id": "86a63a41-9ac2-432b-a61b-2562878700ec",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f4e3f4c7-961b-461f-8b52-63d582c45de5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d3857f-3789-4e6c-8176-92b9dd094354",
        "cursor": {
          "ref": "9aa598d0-0595-4ce4-83ac-bc567fa1ff19",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3f6a84bc-1d47-4e52-8960-7b4a6436340c"
        },
        "item": {
          "id": "11d3857f-3789-4e6c-8176-92b9dd094354",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "796bd2fb-f773-461c-8fd5-a0a6a58f855f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d3857f-3789-4e6c-8176-92b9dd094354",
        "cursor": {
          "ref": "9aa598d0-0595-4ce4-83ac-bc567fa1ff19",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3f6a84bc-1d47-4e52-8960-7b4a6436340c"
        },
        "item": {
          "id": "11d3857f-3789-4e6c-8176-92b9dd094354",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "796bd2fb-f773-461c-8fd5-a0a6a58f855f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914ec395-2cb4-4cd4-bc9d-bd83dbf2d5fd",
        "cursor": {
          "ref": "a1759e26-a03b-4950-ae76-c04677b7fd4b",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8b475417-4a45-491c-9551-c6b92b194ece"
        },
        "item": {
          "id": "914ec395-2cb4-4cd4-bc9d-bd83dbf2d5fd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "96de2e9b-b384-43d3-ba9e-13e194048b8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 102,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914ec395-2cb4-4cd4-bc9d-bd83dbf2d5fd",
        "cursor": {
          "ref": "a1759e26-a03b-4950-ae76-c04677b7fd4b",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8b475417-4a45-491c-9551-c6b92b194ece"
        },
        "item": {
          "id": "914ec395-2cb4-4cd4-bc9d-bd83dbf2d5fd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "96de2e9b-b384-43d3-ba9e-13e194048b8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 102,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412f2f85-5860-417d-a436-17cc1b7761dd",
        "cursor": {
          "ref": "d84ad414-d71b-490f-98b6-60eafa86d8bc",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2c9cc9d7-4f2b-44bc-b49d-53c82e68cc5d"
        },
        "item": {
          "id": "412f2f85-5860-417d-a436-17cc1b7761dd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5fdf437a-6e4b-4a16-9fa8-54f6f728b940",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412f2f85-5860-417d-a436-17cc1b7761dd",
        "cursor": {
          "ref": "d84ad414-d71b-490f-98b6-60eafa86d8bc",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2c9cc9d7-4f2b-44bc-b49d-53c82e68cc5d"
        },
        "item": {
          "id": "412f2f85-5860-417d-a436-17cc1b7761dd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5fdf437a-6e4b-4a16-9fa8-54f6f728b940",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d9abb6-0dcd-42a8-8989-21f4a9271e15",
        "cursor": {
          "ref": "1ff8e5a9-db21-4741-b949-d2350284d8fb",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "357b3da7-d05c-417a-9eb1-8491c67716be"
        },
        "item": {
          "id": "b8d9abb6-0dcd-42a8-8989-21f4a9271e15",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "17795f9c-c869-4286-9bc3-95f2cdd89aa2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d9abb6-0dcd-42a8-8989-21f4a9271e15",
        "cursor": {
          "ref": "1ff8e5a9-db21-4741-b949-d2350284d8fb",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "357b3da7-d05c-417a-9eb1-8491c67716be"
        },
        "item": {
          "id": "b8d9abb6-0dcd-42a8-8989-21f4a9271e15",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "17795f9c-c869-4286-9bc3-95f2cdd89aa2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6244bc84-2620-4feb-b10a-c6f0405564fe",
        "cursor": {
          "ref": "04b91f1f-21cc-4ae4-be50-37e0a15cd339",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "43034b7d-24ba-42bc-8ed5-57a8b61ab00c"
        },
        "item": {
          "id": "6244bc84-2620-4feb-b10a-c6f0405564fe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "086beed6-2d8c-4b52-902c-652aaa048901",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6244bc84-2620-4feb-b10a-c6f0405564fe",
        "cursor": {
          "ref": "04b91f1f-21cc-4ae4-be50-37e0a15cd339",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "43034b7d-24ba-42bc-8ed5-57a8b61ab00c"
        },
        "item": {
          "id": "6244bc84-2620-4feb-b10a-c6f0405564fe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "086beed6-2d8c-4b52-902c-652aaa048901",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37298ace-424f-4803-af56-7331fe0d02c3",
        "cursor": {
          "ref": "3cb41601-826f-4aeb-a0e9-d1a9277c7da5",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3b9985ab-6fe1-4864-a001-798160ec2678"
        },
        "item": {
          "id": "37298ace-424f-4803-af56-7331fe0d02c3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "54a2efc3-93fb-43dc-adda-b75f4ff27e5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37298ace-424f-4803-af56-7331fe0d02c3",
        "cursor": {
          "ref": "3cb41601-826f-4aeb-a0e9-d1a9277c7da5",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3b9985ab-6fe1-4864-a001-798160ec2678"
        },
        "item": {
          "id": "37298ace-424f-4803-af56-7331fe0d02c3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "54a2efc3-93fb-43dc-adda-b75f4ff27e5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0da1eb6-cc7f-4874-b8a8-7ffb71d54b10",
        "cursor": {
          "ref": "3e4fe9c3-2829-463f-9747-cc5512ade5cc",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "06f77600-1e36-4121-9067-035c8abca540"
        },
        "item": {
          "id": "f0da1eb6-cc7f-4874-b8a8-7ffb71d54b10",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7616ab93-8c20-4250-b5dd-5252f9dcc6f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0da1eb6-cc7f-4874-b8a8-7ffb71d54b10",
        "cursor": {
          "ref": "3e4fe9c3-2829-463f-9747-cc5512ade5cc",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "06f77600-1e36-4121-9067-035c8abca540"
        },
        "item": {
          "id": "f0da1eb6-cc7f-4874-b8a8-7ffb71d54b10",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7616ab93-8c20-4250-b5dd-5252f9dcc6f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef983046-b86b-4f9b-acf8-4b7aa6ed3f16",
        "cursor": {
          "ref": "96b3889d-209c-4227-a7e6-8c116e852143",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d3d45db1-5476-4812-86de-857f9b21319c"
        },
        "item": {
          "id": "ef983046-b86b-4f9b-acf8-4b7aa6ed3f16",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c2ccd79e-1fdc-41d3-9e42-c71ebe69eaa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef983046-b86b-4f9b-acf8-4b7aa6ed3f16",
        "cursor": {
          "ref": "96b3889d-209c-4227-a7e6-8c116e852143",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d3d45db1-5476-4812-86de-857f9b21319c"
        },
        "item": {
          "id": "ef983046-b86b-4f9b-acf8-4b7aa6ed3f16",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c2ccd79e-1fdc-41d3-9e42-c71ebe69eaa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b247818-8b3f-474c-844c-bd29ae4eca1a",
        "cursor": {
          "ref": "f58c2e72-9838-49af-88ec-2a2b800b2de5",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "340e623c-406d-4f08-ba95-da567b7a3c8a"
        },
        "item": {
          "id": "7b247818-8b3f-474c-844c-bd29ae4eca1a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7ba55d31-2726-417a-801e-772255e3691c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b247818-8b3f-474c-844c-bd29ae4eca1a",
        "cursor": {
          "ref": "f58c2e72-9838-49af-88ec-2a2b800b2de5",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "340e623c-406d-4f08-ba95-da567b7a3c8a"
        },
        "item": {
          "id": "7b247818-8b3f-474c-844c-bd29ae4eca1a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7ba55d31-2726-417a-801e-772255e3691c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8393481-aade-4bad-aa97-822d3f64a327",
        "cursor": {
          "ref": "fc92cea5-c131-48f5-9c19-75f8e44b711b",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "3ef72f9a-9a4a-4024-ba0b-4a1de6c6103d"
        },
        "item": {
          "id": "f8393481-aade-4bad-aa97-822d3f64a327",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a329c8cc-19d5-490c-82c5-b39b9f854bba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8393481-aade-4bad-aa97-822d3f64a327",
        "cursor": {
          "ref": "fc92cea5-c131-48f5-9c19-75f8e44b711b",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "3ef72f9a-9a4a-4024-ba0b-4a1de6c6103d"
        },
        "item": {
          "id": "f8393481-aade-4bad-aa97-822d3f64a327",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a329c8cc-19d5-490c-82c5-b39b9f854bba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414d00ff-ec06-4a1a-8deb-71f894bdf994",
        "cursor": {
          "ref": "f889321b-6820-4ef9-86b5-0585c64c72aa",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d48f9153-425b-41c6-b28d-9b1b73794a3c"
        },
        "item": {
          "id": "414d00ff-ec06-4a1a-8deb-71f894bdf994",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "877ea421-54a6-4968-845f-ff944e0f7cff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414d00ff-ec06-4a1a-8deb-71f894bdf994",
        "cursor": {
          "ref": "f889321b-6820-4ef9-86b5-0585c64c72aa",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d48f9153-425b-41c6-b28d-9b1b73794a3c"
        },
        "item": {
          "id": "414d00ff-ec06-4a1a-8deb-71f894bdf994",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "877ea421-54a6-4968-845f-ff944e0f7cff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56924746-6efb-4a4f-b07c-218e4f56b347",
        "cursor": {
          "ref": "8ca01477-b7b6-4ae8-ae8f-825cb6c14407",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "5bee95d6-633e-45a5-8ed3-81a6447e6460"
        },
        "item": {
          "id": "56924746-6efb-4a4f-b07c-218e4f56b347",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fc48a30d-8ae4-4891-89e9-9f17b88d9f9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56924746-6efb-4a4f-b07c-218e4f56b347",
        "cursor": {
          "ref": "8ca01477-b7b6-4ae8-ae8f-825cb6c14407",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "5bee95d6-633e-45a5-8ed3-81a6447e6460"
        },
        "item": {
          "id": "56924746-6efb-4a4f-b07c-218e4f56b347",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fc48a30d-8ae4-4891-89e9-9f17b88d9f9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1074b430-258b-42f1-94a3-c017bd2b1ec3",
        "cursor": {
          "ref": "09e8ec8d-5c2e-4f20-9ba9-0630db70ffcc",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "5491e00d-576e-4d82-af80-7e59c5ffa5b6"
        },
        "item": {
          "id": "1074b430-258b-42f1-94a3-c017bd2b1ec3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9b73a7b1-ad33-4f55-9ffa-66a3c3c26ba0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1074b430-258b-42f1-94a3-c017bd2b1ec3",
        "cursor": {
          "ref": "09e8ec8d-5c2e-4f20-9ba9-0630db70ffcc",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "5491e00d-576e-4d82-af80-7e59c5ffa5b6"
        },
        "item": {
          "id": "1074b430-258b-42f1-94a3-c017bd2b1ec3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9b73a7b1-ad33-4f55-9ffa-66a3c3c26ba0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba62393-d25f-4b1f-b9b0-1d2aec96342c",
        "cursor": {
          "ref": "68378b41-62be-41ba-a5e9-e9fbe109afbc",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "6f4c55ad-0071-415c-a561-990568b54634"
        },
        "item": {
          "id": "5ba62393-d25f-4b1f-b9b0-1d2aec96342c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a2ab1554-df0d-46e6-aa49-89c7ba54d60a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba62393-d25f-4b1f-b9b0-1d2aec96342c",
        "cursor": {
          "ref": "68378b41-62be-41ba-a5e9-e9fbe109afbc",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "6f4c55ad-0071-415c-a561-990568b54634"
        },
        "item": {
          "id": "5ba62393-d25f-4b1f-b9b0-1d2aec96342c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a2ab1554-df0d-46e6-aa49-89c7ba54d60a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34687a1c-4335-4c32-bc29-c6f90925208f",
        "cursor": {
          "ref": "49899930-4b2f-401d-8458-0f926dc68325",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ffc28071-de53-4dbf-833e-f4d73bc7d3c7"
        },
        "item": {
          "id": "34687a1c-4335-4c32-bc29-c6f90925208f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f9ce2184-e1a9-4c82-a819-769ff291ab9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34687a1c-4335-4c32-bc29-c6f90925208f",
        "cursor": {
          "ref": "49899930-4b2f-401d-8458-0f926dc68325",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ffc28071-de53-4dbf-833e-f4d73bc7d3c7"
        },
        "item": {
          "id": "34687a1c-4335-4c32-bc29-c6f90925208f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f9ce2184-e1a9-4c82-a819-769ff291ab9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6718cdde-aae8-42fa-bb9f-89b1176834b5",
        "cursor": {
          "ref": "76dd3ee0-d05d-4fbf-b7fc-4f17ae1fca00",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5c9b4089-0706-4621-92b2-548c90ca24c6"
        },
        "item": {
          "id": "6718cdde-aae8-42fa-bb9f-89b1176834b5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bf0c53ce-6df5-4e6d-a435-ee3b77f3099b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6718cdde-aae8-42fa-bb9f-89b1176834b5",
        "cursor": {
          "ref": "76dd3ee0-d05d-4fbf-b7fc-4f17ae1fca00",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5c9b4089-0706-4621-92b2-548c90ca24c6"
        },
        "item": {
          "id": "6718cdde-aae8-42fa-bb9f-89b1176834b5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bf0c53ce-6df5-4e6d-a435-ee3b77f3099b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f67ce83-e366-40cb-ae06-9eacec06a163",
        "cursor": {
          "ref": "a1e53fe6-dcc0-4bd0-8235-791f7f906c47",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "2c761735-24a0-4c19-9f77-f4b380990f90"
        },
        "item": {
          "id": "0f67ce83-e366-40cb-ae06-9eacec06a163",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e95cfdd4-a833-484d-90d9-fb4d5c92a3eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f67ce83-e366-40cb-ae06-9eacec06a163",
        "cursor": {
          "ref": "a1e53fe6-dcc0-4bd0-8235-791f7f906c47",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "2c761735-24a0-4c19-9f77-f4b380990f90"
        },
        "item": {
          "id": "0f67ce83-e366-40cb-ae06-9eacec06a163",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e95cfdd4-a833-484d-90d9-fb4d5c92a3eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7dd4cd-4b7c-403b-8d05-b2e8e8deb010",
        "cursor": {
          "ref": "803343f5-b917-44d2-b7ba-41edece2efe9",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0b81d928-349b-4b2a-a3cb-516e7de39fc9"
        },
        "item": {
          "id": "9d7dd4cd-4b7c-403b-8d05-b2e8e8deb010",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c8d1cb7b-3bd3-4a40-80ea-65c0793e8f16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7dd4cd-4b7c-403b-8d05-b2e8e8deb010",
        "cursor": {
          "ref": "803343f5-b917-44d2-b7ba-41edece2efe9",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0b81d928-349b-4b2a-a3cb-516e7de39fc9"
        },
        "item": {
          "id": "9d7dd4cd-4b7c-403b-8d05-b2e8e8deb010",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c8d1cb7b-3bd3-4a40-80ea-65c0793e8f16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df78ade7-cb8f-433e-a414-b6ea3462b26d",
        "cursor": {
          "ref": "76e92cc1-44f9-4bfc-93b2-2da4304e8cdf",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "9d99592f-94b0-428b-8a78-85d7294c1863"
        },
        "item": {
          "id": "df78ade7-cb8f-433e-a414-b6ea3462b26d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "733b33ee-3573-43a0-a894-c52f38ab872d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df78ade7-cb8f-433e-a414-b6ea3462b26d",
        "cursor": {
          "ref": "76e92cc1-44f9-4bfc-93b2-2da4304e8cdf",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "9d99592f-94b0-428b-8a78-85d7294c1863"
        },
        "item": {
          "id": "df78ade7-cb8f-433e-a414-b6ea3462b26d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "733b33ee-3573-43a0-a894-c52f38ab872d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c004c536-2940-48a8-8e5e-58416a3bcf42",
        "cursor": {
          "ref": "7badc730-0ecb-41b3-b6b9-0e4ee5259747",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "0e3b9d52-9a07-4c60-9bf4-240f1a2e9d17"
        },
        "item": {
          "id": "c004c536-2940-48a8-8e5e-58416a3bcf42",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e3c7cc2c-b6d2-4023-966d-ce0d18ce90cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c004c536-2940-48a8-8e5e-58416a3bcf42",
        "cursor": {
          "ref": "7badc730-0ecb-41b3-b6b9-0e4ee5259747",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "0e3b9d52-9a07-4c60-9bf4-240f1a2e9d17"
        },
        "item": {
          "id": "c004c536-2940-48a8-8e5e-58416a3bcf42",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e3c7cc2c-b6d2-4023-966d-ce0d18ce90cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff5c532-55da-4b91-828c-58f070c7bb1e",
        "cursor": {
          "ref": "e9b4740a-a53b-4104-bd3a-66941244e5e3",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9a69f3c2-542e-42bf-8076-c33dc4943bde"
        },
        "item": {
          "id": "eff5c532-55da-4b91-828c-58f070c7bb1e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "beb67bbe-f078-4b30-858d-e6dfed9af131",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff5c532-55da-4b91-828c-58f070c7bb1e",
        "cursor": {
          "ref": "e9b4740a-a53b-4104-bd3a-66941244e5e3",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9a69f3c2-542e-42bf-8076-c33dc4943bde"
        },
        "item": {
          "id": "eff5c532-55da-4b91-828c-58f070c7bb1e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "beb67bbe-f078-4b30-858d-e6dfed9af131",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4e97f1-57f8-4887-9a2f-a3c7afd12119",
        "cursor": {
          "ref": "23d2f77b-a5e8-47f7-8d0c-920fc60b49d0",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "178002ed-8bee-476f-a001-c085d40c9127"
        },
        "item": {
          "id": "0d4e97f1-57f8-4887-9a2f-a3c7afd12119",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2ef69eda-f896-4ebc-92b2-31c6d7174581",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4e97f1-57f8-4887-9a2f-a3c7afd12119",
        "cursor": {
          "ref": "23d2f77b-a5e8-47f7-8d0c-920fc60b49d0",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "178002ed-8bee-476f-a001-c085d40c9127"
        },
        "item": {
          "id": "0d4e97f1-57f8-4887-9a2f-a3c7afd12119",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2ef69eda-f896-4ebc-92b2-31c6d7174581",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ec97ce-a9f9-4539-9892-563634ade43f",
        "cursor": {
          "ref": "00fd888d-a2d9-4cfb-b9c8-f359e395263b",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "96f25402-af04-455e-8911-f8873838b0c9"
        },
        "item": {
          "id": "88ec97ce-a9f9-4539-9892-563634ade43f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "334bf907-a349-4e48-b081-3322bcf9d06a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ec97ce-a9f9-4539-9892-563634ade43f",
        "cursor": {
          "ref": "00fd888d-a2d9-4cfb-b9c8-f359e395263b",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "96f25402-af04-455e-8911-f8873838b0c9"
        },
        "item": {
          "id": "88ec97ce-a9f9-4539-9892-563634ade43f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "334bf907-a349-4e48-b081-3322bcf9d06a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b613c27e-cb5c-46dd-aaa3-a0bcc5f7aae9",
        "cursor": {
          "ref": "bc012414-2781-45b4-830f-08a28bcc7b89",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "5f766a13-2945-4c1b-9f89-e2236da98d84"
        },
        "item": {
          "id": "b613c27e-cb5c-46dd-aaa3-a0bcc5f7aae9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d45da5bd-885e-4344-b1c0-01c9deef64e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b613c27e-cb5c-46dd-aaa3-a0bcc5f7aae9",
        "cursor": {
          "ref": "bc012414-2781-45b4-830f-08a28bcc7b89",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "5f766a13-2945-4c1b-9f89-e2236da98d84"
        },
        "item": {
          "id": "b613c27e-cb5c-46dd-aaa3-a0bcc5f7aae9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d45da5bd-885e-4344-b1c0-01c9deef64e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2613cf1-398d-4fe5-a5ed-e54e97d8bf9f",
        "cursor": {
          "ref": "4f1d8eeb-5f94-48e5-9507-bc801d61fca8",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6e158d78-665b-40f7-bd9a-e60e71f40089"
        },
        "item": {
          "id": "c2613cf1-398d-4fe5-a5ed-e54e97d8bf9f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "64c70754-9d6b-4fa3-81c8-f54f4ff22278",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2613cf1-398d-4fe5-a5ed-e54e97d8bf9f",
        "cursor": {
          "ref": "4f1d8eeb-5f94-48e5-9507-bc801d61fca8",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6e158d78-665b-40f7-bd9a-e60e71f40089"
        },
        "item": {
          "id": "c2613cf1-398d-4fe5-a5ed-e54e97d8bf9f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "64c70754-9d6b-4fa3-81c8-f54f4ff22278",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e684a751-5b6b-4306-ada9-3ae9acbfc184",
        "cursor": {
          "ref": "dc09711b-8362-4b99-8418-c06f686c78c7",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "98057150-5187-458a-b92b-afb7820bc05b"
        },
        "item": {
          "id": "e684a751-5b6b-4306-ada9-3ae9acbfc184",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5221f8da-cb66-40bc-bc7a-20de7f7719cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e684a751-5b6b-4306-ada9-3ae9acbfc184",
        "cursor": {
          "ref": "dc09711b-8362-4b99-8418-c06f686c78c7",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "98057150-5187-458a-b92b-afb7820bc05b"
        },
        "item": {
          "id": "e684a751-5b6b-4306-ada9-3ae9acbfc184",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5221f8da-cb66-40bc-bc7a-20de7f7719cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ec15ec-6599-43f3-abbb-90c26ab70b4d",
        "cursor": {
          "ref": "ff43151a-1587-4bab-a4e7-9bb27f0160b4",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "fc61b6cd-a3a1-4e95-99cb-224e192fc67b"
        },
        "item": {
          "id": "89ec15ec-6599-43f3-abbb-90c26ab70b4d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fc19d6a1-2af1-4850-b4da-511f1c9e77e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ec15ec-6599-43f3-abbb-90c26ab70b4d",
        "cursor": {
          "ref": "ff43151a-1587-4bab-a4e7-9bb27f0160b4",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "fc61b6cd-a3a1-4e95-99cb-224e192fc67b"
        },
        "item": {
          "id": "89ec15ec-6599-43f3-abbb-90c26ab70b4d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fc19d6a1-2af1-4850-b4da-511f1c9e77e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c52e3f-c328-4d84-841e-5d54e626da07",
        "cursor": {
          "ref": "1f840904-9430-41ad-a50b-7e3332010931",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "9058a6aa-103c-4125-bba1-0b1a9774570a"
        },
        "item": {
          "id": "c9c52e3f-c328-4d84-841e-5d54e626da07",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8f75c07d-8e10-468c-994e-88efa10ac4e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c52e3f-c328-4d84-841e-5d54e626da07",
        "cursor": {
          "ref": "1f840904-9430-41ad-a50b-7e3332010931",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "9058a6aa-103c-4125-bba1-0b1a9774570a"
        },
        "item": {
          "id": "c9c52e3f-c328-4d84-841e-5d54e626da07",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8f75c07d-8e10-468c-994e-88efa10ac4e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cae2c83-c6ee-40cb-80a4-4238f2c49c8f",
        "cursor": {
          "ref": "b90e4d2c-d836-4a92-a79a-b8101daaddad",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "76fb83b0-035d-4b63-ba8c-3674b2edb2cf"
        },
        "item": {
          "id": "9cae2c83-c6ee-40cb-80a4-4238f2c49c8f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f6ac3ce5-babc-4a9d-8dd6-42070bd7c0df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cae2c83-c6ee-40cb-80a4-4238f2c49c8f",
        "cursor": {
          "ref": "b90e4d2c-d836-4a92-a79a-b8101daaddad",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "76fb83b0-035d-4b63-ba8c-3674b2edb2cf"
        },
        "item": {
          "id": "9cae2c83-c6ee-40cb-80a4-4238f2c49c8f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f6ac3ce5-babc-4a9d-8dd6-42070bd7c0df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cecfdc64-0374-474e-acb8-107004a976a4",
        "cursor": {
          "ref": "315f57a6-0238-42c2-9468-6177e60da870",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "c48b6630-885e-4042-872e-8426b40b20c2"
        },
        "item": {
          "id": "cecfdc64-0374-474e-acb8-107004a976a4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "62b42849-ce2e-4667-9d5b-5a899b748f69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cecfdc64-0374-474e-acb8-107004a976a4",
        "cursor": {
          "ref": "315f57a6-0238-42c2-9468-6177e60da870",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "c48b6630-885e-4042-872e-8426b40b20c2"
        },
        "item": {
          "id": "cecfdc64-0374-474e-acb8-107004a976a4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "62b42849-ce2e-4667-9d5b-5a899b748f69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c004f5-aa8e-4174-b1e6-4b32985a8e7a",
        "cursor": {
          "ref": "684bfcde-509f-4c70-b749-3790bf3f4bce",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2b8cb974-b4df-4074-b88c-a41b64a326d1"
        },
        "item": {
          "id": "b6c004f5-aa8e-4174-b1e6-4b32985a8e7a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "10dbaf16-1ce9-464a-9d1a-492784de9518",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c004f5-aa8e-4174-b1e6-4b32985a8e7a",
        "cursor": {
          "ref": "684bfcde-509f-4c70-b749-3790bf3f4bce",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2b8cb974-b4df-4074-b88c-a41b64a326d1"
        },
        "item": {
          "id": "b6c004f5-aa8e-4174-b1e6-4b32985a8e7a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "10dbaf16-1ce9-464a-9d1a-492784de9518",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b655b29-186e-49f9-a68a-c83423914aba",
        "cursor": {
          "ref": "2f3e44d0-7808-46ea-9a36-6ea6df72197a",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "46239b7e-5094-4b0c-9d6a-18f6d19b21d8"
        },
        "item": {
          "id": "5b655b29-186e-49f9-a68a-c83423914aba",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "38049660-c01a-4fe9-aae3-41de95a8cb11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b655b29-186e-49f9-a68a-c83423914aba",
        "cursor": {
          "ref": "2f3e44d0-7808-46ea-9a36-6ea6df72197a",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "46239b7e-5094-4b0c-9d6a-18f6d19b21d8"
        },
        "item": {
          "id": "5b655b29-186e-49f9-a68a-c83423914aba",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "38049660-c01a-4fe9-aae3-41de95a8cb11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d39ad2-752a-4e05-ad79-19222c3d920a",
        "cursor": {
          "ref": "39ec46b9-8289-4bf4-85ac-a3934a684080",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "bded4340-b67a-4584-bfb6-de398fe8bfcb"
        },
        "item": {
          "id": "41d39ad2-752a-4e05-ad79-19222c3d920a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "59d936d9-31d3-4a47-a37f-d109d7cdb16c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d39ad2-752a-4e05-ad79-19222c3d920a",
        "cursor": {
          "ref": "39ec46b9-8289-4bf4-85ac-a3934a684080",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "bded4340-b67a-4584-bfb6-de398fe8bfcb"
        },
        "item": {
          "id": "41d39ad2-752a-4e05-ad79-19222c3d920a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "59d936d9-31d3-4a47-a37f-d109d7cdb16c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed03632-a1d0-4d4e-8065-3ecbbe5b67c9",
        "cursor": {
          "ref": "55dc1021-736f-47a8-b437-1649aca150a2",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "7d9e5d7e-6fc8-41ce-95d0-abb350db5294"
        },
        "item": {
          "id": "0ed03632-a1d0-4d4e-8065-3ecbbe5b67c9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "19032721-6b34-4672-9cfe-a5dd025a8526",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "0ed03632-a1d0-4d4e-8065-3ecbbe5b67c9",
        "cursor": {
          "ref": "55dc1021-736f-47a8-b437-1649aca150a2",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "7d9e5d7e-6fc8-41ce-95d0-abb350db5294"
        },
        "item": {
          "id": "0ed03632-a1d0-4d4e-8065-3ecbbe5b67c9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "19032721-6b34-4672-9cfe-a5dd025a8526",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "c84142af-a991-43fa-b67d-ec2026baaa43",
        "cursor": {
          "ref": "1f79982f-273d-4ebc-a8a5-8b8d2f40f321",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "851db6ee-0079-4b7f-a50c-eaa341788d1b"
        },
        "item": {
          "id": "c84142af-a991-43fa-b67d-ec2026baaa43",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b912890b-f9df-4c66-97bd-1ef60bf209db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "c84142af-a991-43fa-b67d-ec2026baaa43",
        "cursor": {
          "ref": "1f79982f-273d-4ebc-a8a5-8b8d2f40f321",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "851db6ee-0079-4b7f-a50c-eaa341788d1b"
        },
        "item": {
          "id": "c84142af-a991-43fa-b67d-ec2026baaa43",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b912890b-f9df-4c66-97bd-1ef60bf209db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "2e12b274-9c0e-455c-9eb1-7b7736dce6b3",
        "cursor": {
          "ref": "6267c671-3372-41e7-a8d6-3175230916a2",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ed61626c-9ba1-4e75-bdbf-830e36771fe2"
        },
        "item": {
          "id": "2e12b274-9c0e-455c-9eb1-7b7736dce6b3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "62b651ab-12b2-4988-9785-33baffb1c915",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "2e12b274-9c0e-455c-9eb1-7b7736dce6b3",
        "cursor": {
          "ref": "6267c671-3372-41e7-a8d6-3175230916a2",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ed61626c-9ba1-4e75-bdbf-830e36771fe2"
        },
        "item": {
          "id": "2e12b274-9c0e-455c-9eb1-7b7736dce6b3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "62b651ab-12b2-4988-9785-33baffb1c915",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "d1d936f1-ed19-46ca-9b0c-56dc6df3219a",
        "cursor": {
          "ref": "33731443-0153-4b5c-adf2-d5768a910959",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "39f9625f-8f65-452b-add6-802b5871293a"
        },
        "item": {
          "id": "d1d936f1-ed19-46ca-9b0c-56dc6df3219a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8b55e8d3-fed7-432c-b00a-70c3242e24b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d936f1-ed19-46ca-9b0c-56dc6df3219a",
        "cursor": {
          "ref": "33731443-0153-4b5c-adf2-d5768a910959",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "39f9625f-8f65-452b-add6-802b5871293a"
        },
        "item": {
          "id": "d1d936f1-ed19-46ca-9b0c-56dc6df3219a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8b55e8d3-fed7-432c-b00a-70c3242e24b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d936f1-ed19-46ca-9b0c-56dc6df3219a",
        "cursor": {
          "ref": "33731443-0153-4b5c-adf2-d5768a910959",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "39f9625f-8f65-452b-add6-802b5871293a"
        },
        "item": {
          "id": "d1d936f1-ed19-46ca-9b0c-56dc6df3219a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8b55e8d3-fed7-432c-b00a-70c3242e24b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18ddc34-26b3-479f-8e97-cdd895ca2b5c",
        "cursor": {
          "ref": "60fe334f-d204-4c83-95f9-3b806ffcd941",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "2a72d0d8-fef9-40d7-9e65-0220d0e618d9"
        },
        "item": {
          "id": "d18ddc34-26b3-479f-8e97-cdd895ca2b5c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8061aaa2-b87b-4726-b52f-88e02fad3d7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18ddc34-26b3-479f-8e97-cdd895ca2b5c",
        "cursor": {
          "ref": "60fe334f-d204-4c83-95f9-3b806ffcd941",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "2a72d0d8-fef9-40d7-9e65-0220d0e618d9"
        },
        "item": {
          "id": "d18ddc34-26b3-479f-8e97-cdd895ca2b5c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8061aaa2-b87b-4726-b52f-88e02fad3d7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cd9da4-d53a-4dc1-bb67-d6f038a0875f",
        "cursor": {
          "ref": "e7ad3531-5f47-4c81-a638-9cb692fb478b",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "5a8ef0a8-8b5f-4238-86e8-d8a661d05737"
        },
        "item": {
          "id": "51cd9da4-d53a-4dc1-bb67-d6f038a0875f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c0fb45cf-55b3-446a-874a-3c6c7e1ee182",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cd9da4-d53a-4dc1-bb67-d6f038a0875f",
        "cursor": {
          "ref": "e7ad3531-5f47-4c81-a638-9cb692fb478b",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "5a8ef0a8-8b5f-4238-86e8-d8a661d05737"
        },
        "item": {
          "id": "51cd9da4-d53a-4dc1-bb67-d6f038a0875f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c0fb45cf-55b3-446a-874a-3c6c7e1ee182",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}